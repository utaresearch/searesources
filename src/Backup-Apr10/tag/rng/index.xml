<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RNG | Erick Jones</title>
    <link>/tag/rng/</link>
      <atom:link href="/tag/rng/index.xml" rel="self" type="application/rss+xml" />
    <description>RNG</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>&amp;copy Erick Jones {2020}</copyright><lastBuildDate>Thu, 02 Jan 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>RNG</title>
      <link>/tag/rng/</link>
    </image>
    
    <item>
      <title>The Basics of Simulation</title>
      <link>/post/orie/simulation_basics/</link>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/orie/simulation_basics/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This post explores some of the basic concepts of simulation.
I mostly explore these concepts using basic probablity and the built in distribution functions.
This is a reproducible example if you have R Studio just make sure you have installed the correct packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Ideas from Probablity Course https://www.probabilitycourse.com/chapter13/chapter13.php


set.seed(123)
p &amp;lt;- 0.5
n &amp;lt;- 1000
U &amp;lt;- runif(n)

toss &amp;lt;- as.integer(U &amp;lt; p)

#cumalative number of heads 
a &amp;lt;- numeric(n+1)
#running average of heads
avg &amp;lt;- numeric(n)

for(i in 2:n+1){
  a[i] &amp;lt;- a[i-1] + toss[i-1]
  avg[i-1] &amp;lt;- a[i]/(i-1)
}

plot(1:n, avg, type = &amp;quot;l&amp;quot;, lwd = 5, col = &amp;quot;blue&amp;quot;, ylab = &amp;quot;ProportionofHeads&amp;quot;,
xlab = &amp;quot;CoinTossNumber&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/Simulation_basics_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(p,n,U,toss,a,avg, i)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(123)
p &amp;lt;- 0.2
n &amp;lt;- 1000
U &amp;lt;- runif(n)
#The function U &amp;lt; p creates Bernouli Random variables with probablity p, 1 if U &amp;lt; p 0 otherwise
#the sum of Bernouli variables is a Binomial of (n,p) so X is a Binomial(1000,0.2)

X &amp;lt;- sum(as.integer(U &amp;lt; p))
X&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 198&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#The built in function for binomial (number of observations, number of trials, probablity)
rbinom(1,n,p)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 196&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Arbitrary Distribution
#P(X =1) = 0.35, P(X = 2) = 0.15, P(X=3) = 0.4, P(X=4) = 0.1
#P(X=xi) = P(U element Ai) = pi
P &amp;lt;- c(0.35,0.5,0.9,1)
X &amp;lt;- c(1,2,3,4)
i &amp;lt;- 1
r &amp;lt;- runif(1)

while(r &amp;gt; P[i]){
  i &amp;lt;- i + 1
}

X[i]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Create RV with density f(x) = 2.5*x*sqrt(x) = x^5/2
#Using inverse X^5/2 = U &amp;gt;&amp;gt; X = U^2/5

U &amp;lt;- runif(1)
X &amp;lt;- U^(2/5)
print(paste(&amp;#39;Distrubution with density f(x) = X^(5/2):&amp;#39;,X))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Distrubution with density f(x) = X^(5/2): 0.938571171721709&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Generate RV with density function Beta(2,4), g(x) =1 0&amp;lt;x&amp;lt;1
#f(x) = 20x(1-x)^3, g(x) = 1, f(x)/g(x) = 20x(1-x)^3
#Find smallest c such that f(x)/g(x) &amp;lt;= c
#Using differention d(f(x)/g(x))/dx &amp;gt;&amp;gt;&amp;gt; x = 1/4 &amp;gt;&amp;gt;&amp;gt; f(x)/g(x) &amp;lt;= 135/64 &amp;gt;&amp;gt;&amp;gt; f(x)/(c*g(x)) = 256x(1-x)^3

#This code keeps looping until U2 (which is f(x)/c*g(x)) dips below its bound. Hence it rejects higher values

n &amp;lt;- 1
rejects &amp;lt;- 0
while(n == 1){
  U1 &amp;lt;- runif(1)
  U2 &amp;lt;- runif(1)
  rejects &amp;lt;- rejects + 1
  if(U2 &amp;lt;= 256/27*U1*(1-U1)^3){
    X &amp;lt;- U1
    n &amp;lt;- 0
  }
}

print(paste(&amp;#39;Total Number of Rejections:&amp;#39;, rejects))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Total Number of Rejections: 3&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;Beta RV:&amp;#39;, X))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Beta RV: 0.0656281118281186&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;R produced Beta:&amp;#39;, rbeta(1,2,4, ncp = 0)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;R produced Beta: 0.281731495984851&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(i,n,p,P,r,U,X, rejects)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Transformations of Uniform Distribution to other distrubtions

set.seed(123)
#Inverse Transformation to Exponential
#F(x) = 1 - e^-x
#X = F-1(U) = - ln(1-U) &amp;gt;&amp;gt;&amp;gt; - ln(U)

lambda &amp;lt;- 1
U &amp;lt;- runif(1)
X &amp;lt;- (-1/lambda)*log(U)
print(paste(&amp;#39;Exponential RV:&amp;#39;,X))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Exponential RV: 1.24626281987372&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;R produced Exponential RV:&amp;#39;,rexp(1,lambda)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;R produced Exponential RV: 0.576610270887613&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Using sums to create Gamma(n,lambda) from exp(lambda) Gamma(n,lambda) = sum_n(Exponential(lambda))
n &amp;lt;- 20
X &amp;lt;- (-1/lambda)*sum(log(U))
print(paste(&amp;#39;Gamma RV:&amp;#39;,X))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Gamma RV: 1.24626281987372&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;R produced Gamma RV:&amp;#39;, rgamma(1,n,lambda)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;R produced Gamma RV: 18.4968091472022&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(n,lambda,X)

#Create Poisson Distribution which is the number of exponential arrivals in a given time period
#Ti = 1/lambdaln(Ui)

set.seed(123)

lambda &amp;lt;- 2
i &amp;lt;- 0
U &amp;lt;- runif(1)
Y &amp;lt;- -1/lambda*log(U)
sum &amp;lt;- Y
while(sum &amp;lt; 1){
  U &amp;lt;- runif(1)
  Y &amp;lt;- -1/lambda*log(U)
  sum &amp;lt;- sum + Y
  i &amp;lt;- i+1
}
X &amp;lt;- i
print(paste(&amp;#39;Poisson RV:&amp;#39;,X))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Poisson RV: 2&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;R produced Poisson RV:&amp;#39;, rpois(1,lambda)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;R produced Poisson RV: 4&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Creating Normals with the Box Mueller Method (inefficient because of the sqrt, cos, and sine functions)
#Z1 = sqrt(-2ln(U1)cos(2*pi*U2))
#Z2 = sqrt(-2ln(U1)sin(2*pi*U2))

n &amp;lt;- 5000
U1 &amp;lt;- runif(n)
U2 &amp;lt;- runif(n)

Z1 &amp;lt;- sqrt(-2*log(U1))*cos(2*pi*U2)
Z2 &amp;lt;- sqrt(-2*log(U1))*sin(2*pi*U2)

#Created Via R Function
Z3 &amp;lt;- rnorm(5000)
hist(Z1,col = &amp;#39;wheat&amp;#39;, label = T)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/Simulation_basics_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hist(Z3,col = &amp;#39;wheat&amp;#39;, label = T)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/Simulation_basics_files/figure-html/unnamed-chunk-4-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Geometric Function - Loops Bernoulis until first success
# K &amp;lt;- number of failures plust 1 success 

K &amp;lt;- 1
p &amp;lt;- 0.2

while(runif(1) &amp;gt; p){
  K &amp;lt;- K +1
}
print(paste(&amp;#39;Geometric RV:&amp;#39;, K))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Geometric RV: 8&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;R produced Geometric RV:&amp;#39;,rgeom(1,p)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;R produced Geometric RV: 1&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Negative Binomial Method - Number of Geometric trials needed to get r success NegBin(1,r,p)

K &amp;lt;- 1
p &amp;lt;- 0.2
r &amp;lt;- 2
success &amp;lt;- 0

while(success &amp;lt; r){
  if(runif(1) &amp;gt; p){
    K &amp;lt;- K + 1
    #failure
  }else{
    success &amp;lt;- success + 1
  }
}

print(paste(&amp;#39;Negative Binomial RV:&amp;#39;, K+r-1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Negative Binomial RV: 6&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;R produced Negative Binomial:&amp;#39;, rnbinom(1,r,p)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;R produced Negative Binomial: 6&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rt(1,1,1) #number of variables, df, ncp&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -0.06314223&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Typical metrics for Queueing that can be extended to all types of simulations:&lt;/p&gt;
&lt;p&gt;• L: average number of jobs in the system
• W: average time spent in the system (cycle time)
• Q: average number of jobs in queue
• d: average time in queue
• system utilization
• system throughput
• distribution of waiting time
• distribution of system size
• distribution of queue size&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#M/M/1 Queue Simulation

#Source for this code http://web02.gonzaga.edu/faculty/burchn/R_files/Miscellaneous/queueing_theory_MM1.html

#variable saying how many arrivals per time period
lambda = .3
#saying the average departures per time period
mu = 1
#How long the simulation runs note not a number of events
time = 500
t = 0
#the length of a queue after a number of events. Aka Q_history[500] = 5 says the queue is 5 people long after 500 events it isn&amp;#39;t a sum.
#It updates after for n during event n
Q_hist = 0
#Think this is the sum of all the queues 
s = 0
#exponential distb with mean 1/rate T1 is time uuntil next event rate lamba + mu if there is something in queue otherwise just an arrival
T1 = rexp(1,rate=lambda)
#Initializing parameter
Q = 1
#Time until first event is T1
event_times = T1
#The time of the first event is T1
t = T1
#Same reasoning
num_event = 1

i &amp;lt;- 1
sims &amp;lt;- 10
#Busy time simulation 1:10
B &amp;lt;- c(1:10)
BT &amp;lt;- c(1:10)
#Average length of queue for simulation 1:10
L &amp;lt;- c(1:10)
#Average time customer spends in line
W &amp;lt;- c(1:10)

while (i &amp;lt;= sims){
  print(i)
  while (t&amp;lt;time) {
  num_event = num_event+1
  if(Q&amp;gt;0) {
    # we checked to make sure queue was not empty
    #odds someone arrives or leaves the queue
    T1 = rexp(1,rate=lambda+mu)
    #use p as random number to determine if next even is an arrival or a departure
    p = runif(1,0,1)
    Q_hist[num_event] = Q
    #if p is less than lambda/(lamda+mu) it is an arrival otherwise it is a departure
    Q = ifelse(p&amp;lt;lambda/(lambda+mu),Q+1,Q-1)
    } else {
      # here, the queue was empty, so only arrivals are possible
      T1 = rexp(1,rate=lambda)
      Q_hist[num_event] = Q
      Q = 1
          }
  #new time is the original t plus the time to the next event
  t = t+T1
  #A vector that shows how long it is to the next event
  event_times[num_event] = T1
  s = s+T1*Q_hist[num_event]
  }
#Time system is busy
BT[i] &amp;lt;- sum(event_times)-sum(event_times[which(Q_hist %in% 0)])
num_cust &amp;lt;- lambda*time
B[i] &amp;lt;- BT[i]/length(which(Q_hist %in% 0))

#Average queue length in the system
L[i] &amp;lt;- s/t

#Average time customer spends in line
W[i] &amp;lt;- L[i] / lambda

time = 500
t = 0
Q_hist = 0
s = 0
T1 = rexp(1,rate=lambda)
Q = 1
event_times = T1
t = T1
num_event = 1

i &amp;lt;- i + 1
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
## [1] 2
## [1] 3
## [1] 4
## [1] 5
## [1] 6
## [1] 7
## [1] 8
## [1] 9
## [1] 10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#rho/(1-rho) [.4285, 9, -11]
avg_num &amp;lt;- mean(L) 

#rho/(1-rho)^2 [.6122, 90, 110]
variance &amp;lt;- var(L) 

Sd2 &amp;lt;- sum((L-avg_num)^2 / (sims - 1))

# 1/(mu-lambda) [1.42, 10, -10]
busy_time &amp;lt;- mean(B)

avg_num&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.4417826&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;variance&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.003876663&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Sd2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.003876663&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;busy_time&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.452299&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick Monte Carlo Simulation to estimate the value of the integral &lt;span class=&#34;math inline&#34;&gt;\(\int_{0.01}^1x^{-0.5}\,dx\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;#&lt;a href=&#34;https://stackoverflow.com/questions/22001977/monte-carlo-integration-in-r-getting-the-wrong-answer-using-hit-or-miss&#34; class=&#34;uri&#34;&gt;https://stackoverflow.com/questions/22001977/monte-carlo-integration-in-r-getting-the-wrong-answer-using-hit-or-miss&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;s &amp;lt;- NULL

m &amp;lt;- 1000
a &amp;lt;- 0.01
b &amp;lt;- 1
set.seed(5)
x &amp;lt;- runif(m,a,b)
y &amp;lt;- 10*runif(m,0,1)

for (i in 1:m){
    if(y[i]&amp;lt;(x[i]^(-0.5))){
        s[i] &amp;lt;- 1
    }
    else{
        s[i] &amp;lt;-0
    }
}

nn&amp;lt;- sum(s)*(b-a)/m*10 #note that the addition of the area of the rectangle
print(nn)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.683&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(x,y)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/Simulation_basics_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;f2 &amp;lt;- function(x)   sqrt(1-x^2)

s &amp;lt;- seq(-1 , 1 ,by=0.001)
plot(s,f2(s))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/Simulation_basics_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Get the max value of function within the range
c &amp;lt;- ceiling(max(f2(s)))
# [1] 1

n &amp;lt;- 1000000
a &amp;lt;- -1
b &amp;lt;- 1

set.seed(5)
x &amp;lt;- runif(n,a,b)
y &amp;lt;- c*runif(n,0,1)
R &amp;lt;- sum(y &amp;lt; f2(x))/n

(b-a)*c*R&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.57063&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#[1] 1.57063 # multiply it by 2 to get full area

pi/2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.570796&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#[1] 1.570796&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sim HW2 does a good job showing confidence intervals and convergence of normals, exponentials, and lognormals.&lt;/p&gt;
&lt;p&gt;Sim HW4 shows how to run 5 tests for independance (Runs, Autocorrelation), uniformity (Chi-Squared and KS), or both (Serial)&lt;/p&gt;
&lt;p&gt;Sim HW5 shows how to generate RVs recurseively until they drop below a certain variance.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#CLT Basics https://stats.stackexchange.com/questions/22557/central-limit-theorem-versus-law-of-large-numbers
#https://www.probabilitycourse.com/chapter7/7_2_4_convergence_in_distribution.php
#https://www.analyticsvidhya.com/blog/2019/05/statistics-101-introduction-central-limit-theorem/

#LLN (WLLN - convergence in prob) (SLLN - almost sure convergence) (CLT - convergence in distribution)
#WLLN https://www.probabilitycourse.com/chapter7/7_2_5_convergence_in_probability.php
#SLLN and continous mapping theroem https://www.probabilitycourse.com/chapter7/7_2_7_almost_sure_convergence.php

#Probability Basics
#https://daviddalpiaz.github.io/r4sl/probability-review.html&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add a new chunk by clicking the &lt;em&gt;Insert Chunk&lt;/em&gt; button on the toolbar or by pressing &lt;em&gt;Ctrl+Alt+I&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the &lt;em&gt;Preview&lt;/em&gt; button or press &lt;em&gt;Ctrl+Shift+K&lt;/em&gt; to preview the HTML file).&lt;/p&gt;
&lt;p&gt;The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike &lt;em&gt;Knit&lt;/em&gt;, &lt;em&gt;Preview&lt;/em&gt; does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
