<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>QP | Erick Jones</title>
    <link>/tag/qp/</link>
      <atom:link href="/tag/qp/index.xml" rel="self" type="application/rss+xml" />
    <description>QP</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>&amp;copy Erick Jones {2020}</copyright><lastBuildDate>Tue, 07 Jan 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>QP</title>
      <link>/tag/qp/</link>
    </image>
    
    <item>
      <title>Quadratic Programming Examples and Algorithms</title>
      <link>/post/orie/qp_algorithms/</link>
      <pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/orie/qp_algorithms/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This post explores how to solve QPs by hand and with Gurobi.
I have written these using Gurobi as a solver and as the mathematical formulation software.
This is a reproducible example if you have R Studio just make sure you have installed the correct packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gurobi)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;gurobi&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tictoc)
library(Matrix)
library(ggplot2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;ggplot2&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#library(matlib)
library(MASS)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;MASS&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Gradient Descent a first order method &lt;span class=&#34;math inline&#34;&gt;\(x_{i+1} = x_i + \lambda*d/f(x)\)&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(-10:10)
fx1 &amp;lt;- x^2
xi &amp;lt;- 10
lambda &amp;lt;- 0.2
xit &amp;lt;- xi

fx &amp;lt;- xit^2
dfx &amp;lt;- 2*xit

gd &amp;lt;- data.frame(&amp;#39;x&amp;#39; = xit, &amp;#39;fx&amp;#39; = fx, &amp;#39;dfx&amp;#39; = dfx)



while(dfx &amp;lt; -10^-50 | dfx &amp;gt; 10^-50){
xit &amp;lt;- xit - lambda*dfx
fx &amp;lt;- xit^2
dfx &amp;lt;- 2*xit
gd &amp;lt;- rbind(gd, c(xit,fx,dfx))

}

head(gd)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         x          fx     dfx
## 1 10.0000 100.0000000 20.0000
## 2  6.0000  36.0000000 12.0000
## 3  3.6000  12.9600000  7.2000
## 4  2.1600   4.6656000  4.3200
## 5  1.2960   1.6796160  2.5920
## 6  0.7776   0.6046618  1.5552&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tail(gd)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                x            fx          dfx
## 228 4.368515e-50  1.908392e-99 8.737030e-50
## 229 2.621109e-50 6.870213e-100 5.242218e-50
## 230 1.572665e-50 2.473277e-100 3.145331e-50
## 231 9.435993e-51 8.903795e-101 1.887199e-50
## 232 5.661596e-51 3.205366e-101 1.132319e-50
## 233 3.396957e-51 1.153932e-101 6.793915e-51&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qplot(x = x, y = fx1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/QP_algorithms_files/figure-html/gradient_descent_example-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qplot(x,fx, data = gd)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/QP_algorithms_files/figure-html/gradient_descent_example-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;standard form for quadratics&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(min\: z; z = -8x_1-16x_2+x_1^2+4x_2^2\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;s.t.
&lt;span class=&#34;math inline&#34;&gt;\(x_1 + x_2 + x_3 = 5\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(x_1 + x_4 = 3\)&lt;/span&gt;
From Jensen and Bard Quadratic Solver notes in Book
Idea given A,b,c and intial value of x; find optimal x that minimizes câ€™*x&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;constr1 &amp;lt;- c(1,1,1,0)
constr2 &amp;lt;- c(1,0,0,1)


A &amp;lt;- rbind(constr1,constr2)

m &amp;lt;- nrow(A)
n &amp;lt;- ncol(A)


b &amp;lt;- matrix(c(5,3),nrow =m)
c &amp;lt;- matrix(c(-8,-16,0,0), nrow = n)
Q &amp;lt;- rbind(c(2,0,0,0),c(0,8,0,0),c(0,0,0,0),c(0,0,0,0))
#inital x values (xi) given by slacks = RHS
xi &amp;lt;- matrix(c(1,1,0.5,0.5), nrow =n)

m &amp;lt;- nrow(A)
n &amp;lt;- ncol(A)

I &amp;lt;- diag(n)
z1 &amp;lt;- matrix(rep(0,n*n), nrow = n)
z2 &amp;lt;- matrix(rep(0,m*m), nrow = m)
z3 &amp;lt;- matrix(rep(0,m*n), nrow = m)
y &amp;lt;- matrix(rep(1,m), nrow = n)
#The complimentary slackness modifier 1/t eventually goes to 0 as t &amp;gt;&amp;gt;&amp;gt;&amp;gt; inf
t &amp;lt;- 9
#Step size pretty much make it up
alpha &amp;lt;- 0.1
#mu*x = 0 in complemntariy slackness condition , mu &amp;gt;0 is dual condition mu correspond to dual variables, 
#using fancy vectors this gives Xd*mu = XM1 = 1/t where t &amp;gt;&amp;gt;&amp;gt;&amp;gt; inf 
x &amp;lt;- xi
mu &amp;lt;- x/t
mu_minus_c &amp;lt;- mu - c - Q%*%x
#Gives lagrangian multipliers for constraints
#Solving c+A*lamda-mu = 0 gives initial lambda
lambda &amp;lt;- ginv(t(A))%*%(mu_minus_c)


#combined vector having values of x, lambda, and mu useful when adding the search direction
w &amp;lt;- rbind(x, lambda, mu)


#This is the KKT condition stationarity, at optimality this derivative should  be 0,
#Using the lagrangian cx+lambda*Ax-mu &amp;gt;&amp;gt; c+A*lambda-mu
c_plus_tA &amp;lt;- Q%*%x+c+t(A)%*%lambda-mu

#This is the KKT condition primal feasiblity, this should always be 0 Ax-b=0 
A_times_x_minus_b &amp;lt;- A%*%x-b

#This is the modfied complimentary condtion XM1 -1/t = 0 X is the diag(x) and M is diag(mu) 1/t &amp;gt;&amp;gt;&amp;gt; 0 as t gets larger
x_times_mu_minus_y_over_t &amp;lt;- x*mu-y/t

#The right hand side of the search direction iteration given from the Newton-Raphson Method
#Combines the vectors above
B &amp;lt;- rbind(c_plus_tA,A_times_x_minus_b,x_times_mu_minus_y_over_t)

objective &amp;lt;- 0.5*t(x)%*%Q%*%x+t(c)%*%x
error &amp;lt;- norm(B,&amp;#39;2&amp;#39;)

iteration_list &amp;lt;- data.frame(&amp;#39;x1&amp;#39; = x[1], &amp;#39;x2&amp;#39; = x[2], &amp;#39;x3&amp;#39; = x[3], &amp;#39;x4&amp;#39; = x[4], &amp;#39;objective&amp;#39; = objective, &amp;#39;error&amp;#39; = error)

#loop



while(error &amp;gt; 10^-12){
t &amp;lt;- t*9

Xd = Diagonal(n = n, x)

Mud = Diagonal(n = n, mu) 


#The left hand side matrix of the search direction iteration, it containtes information from the A, x, and mu vectors and matricies of 1s or 0s to make the math make sense

C &amp;lt;- rbind(cbind(Q,t(A),-I),cbind(A,z2,z3), cbind(Mud,t(z3), Xd))

#The right hand side of the search direction iteration given from the Newton-Raphson Method
#This contains the objective function costs, the RHS values, as well as the A, x, and mu vectors. 
#It also has the complimentary condition represented by t
B &amp;lt;- rbind(Q%*%x+c+t(A)%*%lambda-mu,A%*%x-b,x*mu-y/t)


#solving the systems of equations with C and B gives the search direction as you move closer and closer to solving the complimentary condition in the KKT conditions
dw = solve(-C,B)


#update your w vector which is just a list of the x, mu, and lambda vectors using the search direction
w &amp;lt;- w + alpha*dw

x &amp;lt;- w[1:n]

lambda &amp;lt;- w[(n+1):(n+m)]

mu &amp;lt;- w[(n+m+1):length(w)]

#calculate the objective function from the x values and the error. Remember if this satisifies all the KKT conditions then the B vector will be 0.
objective &amp;lt;- 0.5*t(x)%*%Q%*%x+t(c)%*%x
error &amp;lt;- norm(B,&amp;#39;2&amp;#39;)
iteration_list &amp;lt;- rbind(iteration_list,c(x,objective,error))

}

head(iteration_list)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         x1       x2         x3         x4 objective    error
## 1 1.000000 1.000000 0.50000000 0.50000000 -19.00000 6.520410
## 2 1.269990 1.096877 0.38313300 0.38001002 -21.28452 6.520877
## 3 1.516786 1.183938 0.27427586 0.26821381 -23.16982 5.868998
## 4 1.734188 1.261642 0.18166935 0.17231180 -24.68541 5.282035
## 5 1.918400 1.330365 0.11098503 0.09745009 -25.87330 4.753769
## 6 2.066579 1.390789 0.06640714 0.04768647 -26.77733 4.278347&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tail(iteration_list)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     x1 x2           x3           x4 objective        error
## 278  3  2 3.020886e-08 5.122922e-16       -31 1.531109e-12
## 279  3  2 2.869842e-08 4.610630e-16       -31 1.377965e-12
## 280  3  2 2.726350e-08 4.149567e-16       -31 1.239794e-12
## 281  3  2 2.590032e-08 3.734610e-16       -31 1.115852e-12
## 282  3  2 2.460531e-08 3.361149e-16       -31 1.003790e-12
## 283  3  2 2.337504e-08 3.025034e-16       -31 9.038590e-13&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;standard form for quadratics
&lt;span class=&#34;math inline&#34;&gt;\(min \:z; z = 4x_1^2 + 4x_2^2 - 2x_1x_2 - 12x_1 - 72x_2 + 384\)&lt;/span&gt;
s.t.
&lt;span class=&#34;math inline&#34;&gt;\(2x_1 + x_2 + x_3 = 18\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(6x_1+ 5x_2 + x_4 = 60\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(2x_1 + 5x_2 + x_5 = 40\)&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Another example from http://fourier.eng.hmc.edu/e176/lectures/ch3/node19.html, but don&amp;#39;t have answers 



#Work out matricies in Wolfram Alpha

#Idea given A,b,c and intial value of x; find optimal x that minimizes c&amp;#39;*x

constr1 &amp;lt;- c(2,1,1,0,0)
constr2 &amp;lt;- c(6,5,0,1,0)
constr3 &amp;lt;- c(2,5,0,0,1)

A &amp;lt;- rbind(constr1,constr2, constr3)

b &amp;lt;- matrix(c(18,60,40),nrow =3)
c &amp;lt;- matrix(c(-8,-16,0,0,0), nrow = 5)
Q &amp;lt;- rbind(c(2,1,0,0,0),c(1,2,0,0,0),c(0,0,0,0,0),c(0,0,0,0,0),c(0,0,0,0,0))

rm(A,b,c,Q,constr1,constr2,constr3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add a new chunk by clicking the &lt;em&gt;Insert Chunk&lt;/em&gt; button on the toolbar or by pressing &lt;em&gt;Ctrl+Alt+I&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the &lt;em&gt;Preview&lt;/em&gt; button or press &lt;em&gt;Ctrl+Shift+K&lt;/em&gt; to preview the HTML file).&lt;/p&gt;
&lt;p&gt;The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike &lt;em&gt;Knit&lt;/em&gt;, &lt;em&gt;Preview&lt;/em&gt; does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gurboi&#39;s R Examples 2</title>
      <link>/post/orie/gurobi_examples2/</link>
      <pubDate>Mon, 06 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/orie/gurobi_examples2/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This post explores how to use Gurobi to solve more advanced LPs, MIPs, and QPs.
I have written these using Gurobi as a solver and as the mathematical formulation software.
This is a reproducible example if you have R Studio just make sure you have installed the correct packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gurobi)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;gurobi&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(Matrix)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example formulates and solves the following simple QP model:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(min: x^2 + xy + y^2 + yz + z^2 + 2 x\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;subject to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   $x + 2 y + 3z \geq 4$
   
   $x +   y      \geq 1$
   x, y, z non-negative&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model &amp;lt;- list()

model$A     &amp;lt;- matrix(c(1,2,3,1,1,0), nrow=2, byrow=T)
model$Q     &amp;lt;- matrix(c(1,0.5,0,0.5,1,0.5,0,0.5,1), nrow=3, byrow=T)
model$obj   &amp;lt;- c(2,0,0)
model$rhs   &amp;lt;- c(4,1)
model$sense &amp;lt;- c(&amp;#39;&amp;gt;&amp;#39;, &amp;#39;&amp;gt;&amp;#39;)

result &amp;lt;- gurobi(model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 3 columns and 5 nonzeros
## Model fingerprint: 0xe6f007c4
## Model has 5 quadratic objective terms
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [2e+00, 2e+00]
##   QObjective range [2e+00, 2e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [1e+00, 4e+00]
## Presolve time: 0.00s
## Presolved: 2 rows, 3 columns, 5 nonzeros
## Presolved model has 5 quadratic objective terms
## Ordering time: 0.00s
## 
## Barrier statistics:
##  Free vars  : 2
##  AA&amp;#39; NZ     : 6.000e+00
##  Factor NZ  : 1.000e+01
##  Factor Ops : 3.000e+01 (less than 1 second per iteration)
##  Threads    : 1
## 
##                   Objective                Residual
## Iter       Primal          Dual         Primal    Dual     Compl     Time
##    0   1.68862999e+05 -1.66862803e+05  1.50e+03 4.63e-07  9.99e+05     0s
##    1   3.32288030e+05 -3.31121401e+05  1.50e-03 4.55e-13  1.33e+05     0s
##    2   4.88215027e+04 -4.83744738e+04  1.50e-09 2.84e-14  1.94e+04     0s
##    3   7.20552197e+03 -7.03403484e+03  3.55e-14 1.42e-14  2.85e+03     0s
##    4   1.07582166e+03 -1.00982226e+03  1.78e-14 1.07e-14  4.17e+02     0s
##    5   1.65319400e+02 -1.39657698e+02  3.55e-15 3.55e-15  6.10e+01     0s
##    6   2.72141305e+01 -1.68504217e+01  1.33e-15 4.44e-16  8.81e+00     0s
##    7   5.34776479e+00 -4.13214640e-01  2.22e-16 2.22e-16  1.15e+00     0s
##    8   2.27046251e+00  2.04615758e+00  2.22e-16 4.44e-16  4.49e-02     0s
##    9   2.11217859e+00  2.11101837e+00  7.77e-15 1.67e-16  2.32e-04     0s
##   10   2.11111218e+00  2.11111102e+00  5.55e-16 3.29e-16  2.32e-07     0s
##   11   2.11111111e+00  2.11111111e+00  3.33e-15 3.33e-16  2.32e-10     0s
## 
## Barrier solved model in 11 iterations and 0.00 seconds
## Optimal objective 2.11111111e+00&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$objval)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2.111111&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3.584007e-10 1.000000e+00 6.666667e-01&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model$vtype &amp;lt;- c(&amp;#39;I&amp;#39;, &amp;#39;I&amp;#39;, &amp;#39;I&amp;#39;)

result &amp;lt;- gurobi(model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 3 columns and 5 nonzeros
## Model fingerprint: 0x2458258b
## Model has 5 quadratic objective terms
## Variable types: 0 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [2e+00, 2e+00]
##   QObjective range [2e+00, 2e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [1e+00, 4e+00]
## Found heuristic solution: objective 2.000000e+19
## Presolve time: 0.00s
## Presolved: 2 rows, 3 columns, 5 nonzeros
## Presolved model has 5 quadratic objective terms
## Variable types: 0 continuous, 3 integer (0 binary)
## 
## Root relaxation: objective 2.111111e+00, 5 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
##      0     0    2.11111    0    1 2.0000e+19    2.11111   100%     -    0s
## H    0     0                       3.0000000    2.11111  29.6%     -    0s
##      0     0    2.11111    0    1    3.00000    2.11111  29.6%     -    0s
## 
## Explored 1 nodes (5 simplex iterations) in 0.00 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 2: 3 2e+19 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$objval)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0 1 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Clear space
rm(model, result)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example formulates and solves the following simple QCP model:
&lt;span class=&#34;math inline&#34;&gt;\(max: x\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;subject to&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(x + y + z = 1\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(x^2 + y^2 \leq z^2\)&lt;/span&gt; (second-order cone)
$ x^2 yz$ (rotated second-order cone)
x, y, z non-negative&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model &amp;lt;- list()

model$A          &amp;lt;- matrix(c(1,1,1), nrow=1, byrow=T)
model$modelsense &amp;lt;- &amp;#39;max&amp;#39;
model$obj        &amp;lt;- c(1,0,0)
model$rhs        &amp;lt;- c(1)
model$sense      &amp;lt;- c(&amp;#39;=&amp;#39;)

# First quadratic constraint: x^2 + y^2 - z^2 &amp;lt;= 0
qc1 &amp;lt;- list()
qc1$Qc &amp;lt;- spMatrix(3, 3, c(1, 2, 3), c(1, 2, 3), c(1.0, 1.0, -1.0))
qc1$rhs &amp;lt;- 0.0

# Second quadratic constraint: x^2 - yz &amp;lt;= 0
qc2 &amp;lt;- list()
qc2$Qc &amp;lt;- spMatrix(3, 3, c(1, 2), c(1, 3), c(1.0, -1.0))
qc2$rhs &amp;lt;- 0.0

model$quadcon &amp;lt;- list(qc1, qc2)

result &amp;lt;- gurobi(model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 3 columns and 3 nonzeros
## Model fingerprint: 0x9bebabed
## Model has 2 quadratic constraints
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   QMatrix range    [1e+00, 1e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [1e+00, 1e+00]
## Presolve time: 0.00s
## Presolved: 6 rows, 6 columns, 13 nonzeros
## Presolved model has 2 second-order cone constraints
## Ordering time: 0.00s
## 
## Barrier statistics:
##  AA&amp;#39; NZ     : 1.500e+01
##  Factor NZ  : 2.100e+01
##  Factor Ops : 9.100e+01 (less than 1 second per iteration)
##  Threads    : 1
## 
##                   Objective                Residual
## Iter       Primal          Dual         Primal    Dual     Compl     Time
##    0   2.38095238e-01  2.38095238e-01  1.11e-16 4.33e-01  9.23e-02     0s
##    1   3.20481543e-01  3.62123302e-01  5.55e-17 1.39e-02  7.95e-03     0s
##    2   3.26649101e-01  3.28651430e-01  1.15e-14 5.44e-04  3.46e-04     0s
##    3   3.26797051e-01  3.27019441e-01  2.06e-13 5.98e-10  2.78e-05     0s
##    4   3.26990986e-01  3.26994814e-01  4.11e-13 3.45e-13  4.78e-07     0s
##    5   3.26992304e-01  3.26992876e-01  3.84e-11 2.82e-14  7.15e-08     0s
## 
## Barrier solved model in 5 iterations and 0.00 seconds
## Optimal objective 3.26992304e-01
## 
## Warning: to get QCP duals, please set parameter QCPDual to 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$objval)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.3269923&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.3269923 0.2570664 0.4159413&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Clear space
rm(model, result)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example considers the following separable, convex problem:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(min: f(x) - y + g(z)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;subject to&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(x + 2 y + 3 z \leq 4\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(x + y \geq 1\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(x, y, z \geq 0\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class=&#34;math inline&#34;&gt;\(f(u) = e^{-u} \text{ and} \: g(u) = 2 u^2 - 4u\: \forall \text{ real}\: u\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;It formulates and solves a simpler LP model by approximating f and
g with piecewise-linear functions. Then it transforms the model
into a MIP by negating the approximation for f, which gives
a non-convex piecewise-linear function, and solves it again.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gurobi)

model &amp;lt;- list()

model$A     &amp;lt;- matrix(c(1,2,3,1,1,0), nrow=2, byrow=T)
model$obj   &amp;lt;- c(0,-1,0)
model$ub    &amp;lt;- c(1,1,1)
model$rhs   &amp;lt;- c(4,1)
model$sense &amp;lt;- c(&amp;#39;&amp;lt;&amp;#39;, &amp;#39;&amp;gt;&amp;#39;)

# Uniformly spaced points in [0.0, 1.0]
u &amp;lt;- seq(from=0, to=1, by=0.01)

# First piecewise-linear function: f(x) = exp(-x)
pwl1     &amp;lt;- list()
pwl1$var &amp;lt;- 1
pwl1$x   &amp;lt;- u
pwl1$y   &amp;lt;- sapply(u, function(x) exp(-x))

# Second piecewise-linear function: g(z) = 2 z^2 - 4 z
pwl2     &amp;lt;- list()
pwl2$var &amp;lt;- 3
pwl2$x   &amp;lt;- u
pwl2$y   &amp;lt;- sapply(u, function(z) 2 * z * z - 4 * z)

model$pwlobj &amp;lt;- list(pwl1, pwl2)

result &amp;lt;- gurobi(model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 3 columns and 5 nonzeros
## Model fingerprint: 0xc12b5aad
## Model has 2 piecewise-linear objective terms
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [1e+00, 4e+00]
## Presolve time: 0.00s
## Presolved: 2 rows, 3 columns, 5 nonzeros
## 
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0   -2.6321206e+00   5.000000e-01   0.000000e+00      0s
##        2   -1.9346239e+00   0.000000e+00   0.000000e+00      0s
## 
## Solved in 2 iterations and 0.00 seconds
## Optimal objective -1.934623931e+00&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$objval)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -1.934624&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.690 0.725 0.620&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Negate piecewise-linear function on x, making it non-convex

model$pwlobj[[1]]$y &amp;lt;- sapply(u, function(x) -exp(-x))

result &amp;lt;- gurobi(model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 3 columns and 5 nonzeros
## Model fingerprint: 0x3229e670
## Model has 2 piecewise-linear objective terms
## Variable types: 3 continuous, 0 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [1e+00, 4e+00]
## Found heuristic solution: objective -1.3678794
## Presolve time: 0.00s
## Presolved: 202 rows, 302 columns, 603 nonzeros
## Variable types: 203 continuous, 99 integer (99 binary)
## 
## Root relaxation: objective -3.777733e+00, 1 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
## *    0     0               0      -3.7777333   -3.77773  0.00%     -    0s
## 
## Explored 0 nodes (1 simplex iterations) in 0.00 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 2: -3.77773 -1.36788 
## No other solutions better than -3.77773
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective -3.777733333333e+00, best bound -3.777733333333e+00, gap 0.0000%&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gurobi_write(model, &amp;quot;pwl.lp&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$objval)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -3.777733&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.0000000 1.0000000 0.6666667&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Clear space
rm(model, pwl1, pwl2, result)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Want to cover three different sets but subject to a common budget of
elements allowed to be used. However, the sets have different priorities to
be covered; and we tackle this by using multi-objective optimization.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# define primitive data
groundSetSize     &amp;lt;- 20
nSubSets          &amp;lt;- 4
Budget            &amp;lt;- 12
Set               &amp;lt;- list(
    c( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ),
    c( 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1 ),
    c( 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0 ),
    c( 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0 ) )
SetObjPriority    &amp;lt;- c(3, 2, 2, 1)
SetObjWeight      &amp;lt;- c(1.0, 0.25, 1.25, 1.0)

# Initialize model
model             &amp;lt;- list()
model$modelsense  &amp;lt;- &amp;#39;max&amp;#39;
model$modelname   &amp;lt;- &amp;#39;multiobj&amp;#39;

# Set variables, all of them are binary, with 0,1 bounds.
model$vtype       &amp;lt;- &amp;#39;B&amp;#39;
model$lb          &amp;lt;- 0
model$ub          &amp;lt;- 1
model$varnames    &amp;lt;- paste(rep(&amp;#39;El&amp;#39;, groundSetSize), 1:groundSetSize, sep=&amp;#39;&amp;#39;)

# Build constraint matrix
model$A           &amp;lt;- spMatrix(1, groundSetSize,
                              i = rep(1,groundSetSize),
                              j = 1:groundSetSize,
                              x = rep(1,groundSetSize))
model$rhs         &amp;lt;- c(Budget)
model$sense       &amp;lt;- c(&amp;#39;&amp;lt;&amp;#39;)
model$constrnames &amp;lt;- c(&amp;#39;Budget&amp;#39;)

# Set multi-objectives
model$multiobj          &amp;lt;- list()
for (m in 1:nSubSets) {
  model$multiobj[[m]]          &amp;lt;- list()
  model$multiobj[[m]]$objn     &amp;lt;- Set[[m]]
  model$multiobj[[m]]$priority &amp;lt;- SetObjPriority[m]
  model$multiobj[[m]]$weight   &amp;lt;- SetObjWeight[m]
  model$multiobj[[m]]$abstol   &amp;lt;- m
  model$multiobj[[m]]$reltol   &amp;lt;- 0.01
  model$multiobj[[m]]$name     &amp;lt;- sprintf(&amp;#39;Set%d&amp;#39;, m)
  model$multiobj[[m]]$con      &amp;lt;- 0.0
}

# Save model
gurobi_write(model,&amp;#39;multiobj_R.lp&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Set parameters
params               &amp;lt;- list()
params$PoolSolutions &amp;lt;- 100

# Optimize
result &amp;lt;- gurobi(model, params)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 20 columns and 20 nonzeros
## Model fingerprint: 0x28b3c9c7
## Variable types: 0 continuous, 20 integer (20 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [1e+01, 1e+01]
## 
## ---------------------------------------------------------------------------
## Multi-objectives: starting optimization with 4 objectives (3 combined) ...
## ---------------------------------------------------------------------------
## 
## Multi-objectives: applying initial presolve ...
## ---------------------------------------------------------------------------
## 
## Presolve time: 0.00s
## Presolved: 1 rows and 20 columns
## ---------------------------------------------------------------------------
## 
## Multi-objectives: optimize objective 1 (Set1) ...
## ---------------------------------------------------------------------------
## 
## Found heuristic solution: objective 10.0000000
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 1: 10 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 1.000000000000e+01, best bound 1.000000000000e+01, gap 0.0000%
## ---------------------------------------------------------------------------
## 
## Multi-objectives: optimize objective 2 (weighted) ...
## ---------------------------------------------------------------------------
## 
## 
## Loaded user MIP start with objective 6.25
## 
## Presolve removed 2 rows and 20 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 2: 10.5 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 1.050000000000e+01, best bound 1.050000000000e+01, gap 0.0000%
## ---------------------------------------------------------------------------
## 
## Multi-objectives: optimize objective 3 (Set4) ...
## ---------------------------------------------------------------------------
## 
## 
## Loaded user MIP start with objective 6
## 
## Presolve removed 3 rows and 20 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 2: 7 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 7.000000000000e+00, best bound 7.000000000000e+00, gap 0.0000%
## 
## ---------------------------------------------------------------------------
## Multi-objectives: solved in 0.00 seconds, solution count 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Capture solution information
if (result$status != &amp;#39;OPTIMAL&amp;#39;) {
  cat(&amp;#39;Optimization finished with status&amp;#39;, result$status, &amp;#39;\n&amp;#39;)
  stop(&amp;#39;Stop now\n&amp;#39;)
}

# Print best solution
cat(&amp;#39;Selected elements in best solution:\n&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Selected elements in best solution:&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;for (e in 1:groundSetSize) {
  if(result$x[e] &amp;lt; 0.9) next
  cat(&amp;#39; El&amp;#39;,e,sep=&amp;#39;&amp;#39;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  El2 El3 El4 El5 El6 El7 El8 El9 El10 El11 El12 El17&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cat(&amp;#39;\n&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Iterate over the best 10 solutions
if (&amp;#39;pool&amp;#39; %in% names(result)) {
  solcount &amp;lt;- length(result$pool)
  cat(&amp;#39;Number of solutions found:&amp;#39;, solcount, &amp;#39;\n&amp;#39;)
  if (solcount &amp;gt; 10) {
    solcount &amp;lt;- 10
  }
  cat(&amp;#39;Objective values for first&amp;#39;, solcount, &amp;#39;solutions:\n&amp;#39;)
  for (k in 1:solcount) {
    cat(&amp;#39;Solution&amp;#39;, k, &amp;#39;has objective:&amp;#39;, result$pool[[k]]$objval[1], &amp;#39;\n&amp;#39;)
  }
} else {
  solcount &amp;lt;- 1
  cat(&amp;#39;Number of solutions found:&amp;#39;, solcount, &amp;#39;\n&amp;#39;)
  cat(&amp;#39;Solution 1 has objective:&amp;#39;, result$objval, &amp;#39;\n&amp;#39;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Number of solutions found: 3 
## Objective values for first 3 solutions:
## Solution 1 has objective: 9 
## Solution 2 has objective: 9 
## Solution 3 has objective: 10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Clean up
rm(model, params, result)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assign workers to shifts; each worker may or may not be available on a
particular day. We use Pareto optimization to solve the model:
first, we minimize the linear sum of the slacks. Then, we constrain
the sum of the slacks, and we minimize a quadratic objective that
tries to balance the workload among the workers.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# define data
nShifts       &amp;lt;- 14
nWorkers      &amp;lt;-  7
nVars         &amp;lt;- (nShifts + 1) * (nWorkers + 1) + nWorkers + 1
varIdx        &amp;lt;- function(w,s) {s+(w-1)*nShifts}
shiftSlackIdx &amp;lt;- function(s) {s+nShifts*nWorkers}
totShiftIdx   &amp;lt;- function(w) {w + nShifts * (nWorkers+1)}
avgShiftIdx   &amp;lt;- ((nShifts+1)*(nWorkers+1))
diffShiftIdx  &amp;lt;- function(w) {w + avgShiftIdx}
totalSlackIdx &amp;lt;- nVars


Shifts  &amp;lt;- c(&amp;#39;Mon1&amp;#39;, &amp;#39;Tue2&amp;#39;, &amp;#39;Wed3&amp;#39;, &amp;#39;Thu4&amp;#39;, &amp;#39;Fri5&amp;#39;, &amp;#39;Sat6&amp;#39;, &amp;#39;Sun7&amp;#39;,
             &amp;#39;Mon8&amp;#39;, &amp;#39;Tue9&amp;#39;, &amp;#39;Wed10&amp;#39;, &amp;#39;Thu11&amp;#39;, &amp;#39;Fri12&amp;#39;, &amp;#39;Sat13&amp;#39;, &amp;#39;Sun14&amp;#39;)
Workers &amp;lt;- c( &amp;#39;Amy&amp;#39;, &amp;#39;Bob&amp;#39;, &amp;#39;Cathy&amp;#39;, &amp;#39;Dan&amp;#39;, &amp;#39;Ed&amp;#39;, &amp;#39;Fred&amp;#39;, &amp;#39;Gu&amp;#39; )

shiftRequirements &amp;lt;- c(3, 2, 4, 4, 5, 6, 5, 2, 2, 3, 4, 6, 7, 5 )

availability &amp;lt;- list( c( 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1 ),
                      c( 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0 ),
                      c( 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 ),
                      c( 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1 ),
                      c( 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1 ),
                      c( 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1 ),
                      c( 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ) )

# Function to display results
solveandprint &amp;lt;- function(model, env) {
  result &amp;lt;- gurobi(model, env = env)
  if(result$status == &amp;#39;OPTIMAL&amp;#39;) {
    cat(&amp;#39;The optimal objective is&amp;#39;,result$objval,&amp;#39;\n&amp;#39;)
    cat(&amp;#39;Schedule:\n&amp;#39;)
    for (s in 1:nShifts) {
      cat(&amp;#39;\t&amp;#39;,Shifts[s],&amp;#39;:&amp;#39;)
      for (w in 1:nWorkers) {
        if (result$x[varIdx(w,s)] &amp;gt; 0.9) cat(Workers[w],&amp;#39; &amp;#39;)
      }
      cat(&amp;#39;\n&amp;#39;)
    }
    cat(&amp;#39;Workload:\n&amp;#39;)
    for (w in 1:nWorkers) {
      cat(&amp;#39;\t&amp;#39;,Workers[w],&amp;#39;:&amp;#39;,result$x[totShiftIdx(w)],&amp;#39;\n&amp;#39;)
    }
  } else {
    cat(&amp;#39;Optimization finished with status&amp;#39;,result$status)
  }
  result
}

# Set-up environment
env &amp;lt;- list()
env$logfile &amp;lt;- &amp;#39;workforce4.log&amp;#39;

# Build model
model            &amp;lt;- list()
model$modelname  &amp;lt;- &amp;#39;workforce4&amp;#39;
model$modelsense &amp;lt;- &amp;#39;min&amp;#39;

# Initialize assignment decision variables:
#    x[w][s] == 1 if worker w is assigned to shift s.
#    This is no longer a pure assignment model, so we must
#    use binary variables.
model$vtype    &amp;lt;- rep(&amp;#39;C&amp;#39;, nVars)
model$lb       &amp;lt;- rep(0, nVars)
model$ub       &amp;lt;- rep(1, nVars)
model$obj      &amp;lt;- rep(0, nVars)
model$varnames &amp;lt;- rep(&amp;#39;&amp;#39;,nVars)
for (w in 1:nWorkers) {
  for (s in 1:nShifts) {
    model$vtype[varIdx(w,s)]    = &amp;#39;B&amp;#39;
    model$varnames[varIdx(w,s)] = paste0(Workers[w],&amp;#39;.&amp;#39;,Shifts[s])
    if (availability[[w]][s] == 0) model$ub[varIdx(w,s)] = 0
  }
}

# Initialize shift slack variables
for (s in 1:nShifts) {
  model$varnames[shiftSlackIdx(s)] = paste0(&amp;#39;ShiftSlack&amp;#39;,Shifts[s])
  model$ub[shiftSlackIdx(s)] = Inf
}

# Initialize worker slack and diff variables
for (w in 1:nWorkers) {
  model$varnames[totShiftIdx(w)] = paste0(&amp;#39;TotalShifts&amp;#39;,Workers[w])
  model$ub[totShiftIdx(w)]       = Inf
  model$varnames[diffShiftIdx(w)]  = paste0(&amp;#39;DiffShifts&amp;#39;,Workers[w])
  model$ub[diffShiftIdx(w)]        = Inf
  model$lb[diffShiftIdx(w)]        = -Inf
}

#Initialize average shift variable
model$ub[avgShiftIdx]      = Inf
model$varnames[avgShiftIdx] = &amp;#39;AvgShift&amp;#39;

#Initialize total slack variable
model$ub[totalSlackIdx]      = Inf
model$varnames[totalSlackIdx] = &amp;#39;TotalSlack&amp;#39;
model$obj[totalSlackIdx]     = 1

# Set-up shift-requirements constraints
model$A           &amp;lt;- spMatrix(nShifts,nVars,
                      i = c(c(mapply(rep,1:nShifts,nWorkers)),
                            c(1:nShifts)),
                      j = c(mapply(varIdx,1:nWorkers,
                                 mapply(rep,1:nShifts,nWorkers)),
                            shiftSlackIdx(1:nShifts)),
                      x = rep(1,nShifts * (nWorkers+1)))
model$sense       &amp;lt;- rep(&amp;#39;=&amp;#39;,nShifts)
model$rhs         &amp;lt;- shiftRequirements
model$constrnames &amp;lt;- Shifts

# Set TotalSlack equal to the sum of each shift slack
B &amp;lt;- spMatrix(1, nVars,
        i = rep(1,nShifts+1),
        j = c(shiftSlackIdx(1:nShifts),totalSlackIdx),
        x = c(rep(1,nShifts),-1))
model$A           &amp;lt;- rbind(model$A, B)
model$rhs         &amp;lt;- c(model$rhs,0)
model$sense       &amp;lt;- c(model$sense,&amp;#39;=&amp;#39;)
model$constrnames &amp;lt;- c(model$constrnames, &amp;#39;TotalSlack&amp;#39;)

# Set total number of shifts for each worker
B &amp;lt;- spMatrix(nWorkers, nVars,
          i = c(mapply(rep,1:nWorkers,nShifts),
                1:nWorkers),
          j = c(mapply(varIdx,c(mapply(rep,1:nWorkers,nShifts)),1:nShifts),
                totShiftIdx(1:nWorkers)),
          x = c(rep(1,nShifts*nWorkers),rep(-1,nWorkers)))
model$A           &amp;lt;- rbind(model$A, B)
model$rhs         &amp;lt;- c(model$rhs,rep(0,nWorkers))
model$sense       &amp;lt;- c(model$sense,rep(&amp;#39;=&amp;#39;,nWorkers))
model$constrnames &amp;lt;- c(model$constrnames, sprintf(&amp;#39;TotalShifts%s&amp;#39;,Workers[1:nWorkers]))

# Save initial model
gurobi_write(model,&amp;#39;workforce4.lp&amp;#39;, env)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Optimize
result &amp;lt;- solveandprint(model, env)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 22 rows, 128 columns and 232 nonzeros
## Model fingerprint: 0x78ab1a9c
## Variable types: 30 continuous, 98 integer (98 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [2e+00, 7e+00]
## Found heuristic solution: objective 58.0000000
## Presolve removed 22 rows and 128 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 2: 6 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 6.000000000000e+00, best bound 6.000000000000e+00, gap 0.0000%
## The optimal objective is 6 
## Schedule:
##   Mon1 :Bob  Fred  Gu  
##   Tue2 :Amy  Ed  
##   Wed3 :Amy  Cathy  Fred  Gu  
##   Thu4 :Cathy  Ed  
##   Fri5 :Amy  Bob  Cathy  Ed  Gu  
##   Sat6 :Bob  Dan  Fred  Gu  
##   Sun7 :Amy  Cathy  Ed  Gu  
##   Mon8 :Fred  Gu  
##   Tue9 :Amy  Ed  
##   Wed10 :Amy  Cathy  Gu  
##   Thu11 :Amy  Dan  Ed  Gu  
##   Fri12 :Amy  Cathy  Dan  Fred  Gu  
##   Sat13 :Amy  Bob  Cathy  Dan  Ed  Fred  Gu  
##   Sun14 :Amy  Cathy  Dan  Fred  Gu  
## Workload:
##   Amy : 10 
##   Bob : 4 
##   Cathy : 8 
##   Dan : 5 
##   Ed : 7 
##   Fred : 7 
##   Gu : 11&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (result$status != &amp;#39;OPTIMAL&amp;#39;) stop(&amp;#39;Stop now\n&amp;#39;)

# Constraint the slack by setting its upper and lower bounds
totalSlack &amp;lt;- result$x[totalSlackIdx]
model$lb[totalSlackIdx] = totalSlack
model$ub[totalSlackIdx] = totalSlack

# Link average number of shifts worked and difference with average
B &amp;lt;- spMatrix(nWorkers+1, nVars,
        i = c(1:nWorkers,
              1:nWorkers,
              1:nWorkers,
              rep(nWorkers+1,nWorkers+1)),
        j = c(totShiftIdx(1:nWorkers),
              diffShiftIdx(1:nWorkers),
              rep(avgShiftIdx,nWorkers),
              totShiftIdx(1:nWorkers),avgShiftIdx),
        x = c(rep(1, nWorkers),
              rep(-1,nWorkers),
              rep(-1,nWorkers),
              rep(1,nWorkers),-nWorkers))
model$A           &amp;lt;- rbind(model$A, B)
model$rhs         &amp;lt;- c(model$rhs,rep(0,nWorkers+1))
model$sense       &amp;lt;- c(model$sense,rep(&amp;#39;=&amp;#39;,nWorkers+1))
model$constrnames &amp;lt;- c(model$constrnames,
                       sprintf(&amp;#39;DiffShifts%s&amp;#39;,Workers[1:nWorkers]),
                       &amp;#39;AvgShift&amp;#39;)

# Objective: minimize the sum of the square of the difference from the
# average number of shifts worked
model$obj &amp;lt;- 0
model$Q   &amp;lt;- spMatrix(nVars,nVars,
                i = c(diffShiftIdx(1:nWorkers)),
                j = c(diffShiftIdx(1:nWorkers)),
                x = rep(1,nWorkers))

# Save modified model
gurobi_write(model,&amp;#39;workforce4b.lp&amp;#39;, env)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Optimize
result &amp;lt;- solveandprint(model, env)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 30 rows, 128 columns and 261 nonzeros
## Model fingerprint: 0x377bf6f1
## Model has 7 quadratic objective terms
## Variable types: 30 continuous, 98 integer (98 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 7e+00]
##   Objective range  [0e+00, 0e+00]
##   QObjective range [2e+00, 2e+00]
##   Bounds range     [1e+00, 6e+00]
##   RHS range        [2e+00, 7e+00]
## Found heuristic solution: objective 37.7142857
## Presolve removed 6 rows and 63 columns
## Presolve time: 0.00s
## Presolved: 24 rows, 65 columns, 136 nonzeros
## Presolved model has 7 quadratic objective terms
## Variable types: 7 continuous, 58 integer (50 binary)
## 
## Root relaxation: objective 2.142857e-01, 219 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
## H    0     0                      25.7142857    0.00000   100%     -    0s
##      0     0    0.21429    0   12   25.71429    0.21429  99.2%     -    0s
## H    0     0                       3.7142857    0.21429  94.2%     -    0s
## H    0     0                       1.7142857    0.21429  87.5%     -    0s
##      0     0    0.21429    0   12    1.71429    0.21429  87.5%     -    0s
##      0     2    0.21429    0   12    1.71429    0.21429  87.5%     -    0s
## 
## Explored 19 nodes (273 simplex iterations) in 0.04 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 4: 1.71429 3.71429 25.7143 37.7143 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 1.714285714286e+00, best bound 1.714285714286e+00, gap 0.0000%
## The optimal objective is 1.714286 
## Schedule:
##   Mon1 :Bob  Ed  Fred  
##   Tue2 :Bob  Fred  
##   Wed3 :Amy  Cathy  Dan  Ed  
##   Thu4 :Cathy  Ed  
##   Fri5 :Bob  Cathy  Dan  Ed  Gu  
##   Sat6 :Bob  Dan  Fred  Gu  
##   Sun7 :Amy  Cathy  Ed  Gu  
##   Mon8 :Bob  Cathy  
##   Tue9 :Amy  Fred  
##   Wed10 :Amy  Dan  Gu  
##   Thu11 :Bob  Dan  Ed  Gu  
##   Fri12 :Amy  Cathy  Dan  Fred  Gu  
##   Sat13 :Amy  Bob  Cathy  Dan  Ed  Fred  Gu  
##   Sun14 :Amy  Cathy  Ed  Fred  Gu  
## Workload:
##   Amy : 7 
##   Bob : 7 
##   Cathy : 8 
##   Dan : 7 
##   Ed : 8 
##   Fred : 7 
##   Gu : 8&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (result$status != &amp;#39;OPTIMAL&amp;#39;) stop(&amp;#39;Stop now\n&amp;#39;)

#Clear space
rm(model, env, availability, Shifts, Workers, shiftRequirements, result)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Assign workers to shifts; each worker may or may not be available on a
# particular day. We use multi-objective optimization to solve the model.
# The highest-priority objective minimizes the sum of the slacks
# (i.e., the total number of uncovered shifts). The secondary objective
# minimizes the difference between the maximum and minimum number of
# shifts worked among all workers.  The second optimization is allowed
# to degrade the first objective by up to the smaller value of 10% and 2



# define data
nShifts       &amp;lt;- 14
nWorkers      &amp;lt;-  8
nVars         &amp;lt;- (nShifts + 1) * (nWorkers + 1) + 2
varIdx        &amp;lt;- function(w,s) {s+(w-1)*nShifts}
shiftSlackIdx &amp;lt;- function(s) {s+nShifts*nWorkers}
totShiftIdx   &amp;lt;- function(w) {w + nShifts * (nWorkers+1)}
minShiftIdx   &amp;lt;- ((nShifts+1)*(nWorkers+1))
maxShiftIdx   &amp;lt;- (minShiftIdx+1)
totalSlackIdx &amp;lt;- nVars


Shifts  &amp;lt;- c(&amp;#39;Mon1&amp;#39;, &amp;#39;Tue2&amp;#39;, &amp;#39;Wed3&amp;#39;, &amp;#39;Thu4&amp;#39;, &amp;#39;Fri5&amp;#39;, &amp;#39;Sat6&amp;#39;, &amp;#39;Sun7&amp;#39;,
             &amp;#39;Mon8&amp;#39;, &amp;#39;Tue9&amp;#39;, &amp;#39;Wed10&amp;#39;, &amp;#39;Thu11&amp;#39;, &amp;#39;Fri12&amp;#39;, &amp;#39;Sat13&amp;#39;, &amp;#39;Sun14&amp;#39;)
Workers &amp;lt;- c( &amp;#39;Amy&amp;#39;, &amp;#39;Bob&amp;#39;, &amp;#39;Cathy&amp;#39;, &amp;#39;Dan&amp;#39;, &amp;#39;Ed&amp;#39;, &amp;#39;Fred&amp;#39;, &amp;#39;Gu&amp;#39;, &amp;#39;Tobi&amp;#39; )

shiftRequirements &amp;lt;- c(3, 2, 4, 4, 5, 6, 5, 2, 2, 3, 4, 6, 7, 5 )

availability &amp;lt;- list( c( 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1 ),
                      c( 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0 ),
                      c( 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 ),
                      c( 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1 ),
                      c( 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1 ),
                      c( 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1 ),
                      c( 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1 ),
                      c( 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ) )

# Function to display results
solveandprint &amp;lt;- function(model, env) {
  result &amp;lt;- gurobi(model, env = env)
  if(result$status == &amp;#39;OPTIMAL&amp;#39;) {
    cat(&amp;#39;The optimal objective is&amp;#39;,result$objval,&amp;#39;\n&amp;#39;)
    cat(&amp;#39;Schedule:\n&amp;#39;)
    for (s in 1:nShifts) {
      cat(&amp;#39;\t&amp;#39;,Shifts[s],&amp;#39;:&amp;#39;)
      for (w in 1:nWorkers) {
        if (result$x[varIdx(w,s)] &amp;gt; 0.9) cat(Workers[w],&amp;#39; &amp;#39;)
      }
      cat(&amp;#39;\n&amp;#39;)
    }
    cat(&amp;#39;Workload:\n&amp;#39;)
    for (w in 1:nWorkers) {
      cat(&amp;#39;\t&amp;#39;,Workers[w],&amp;#39;:&amp;#39;,result$x[totShiftIdx(w)],&amp;#39;\n&amp;#39;)
    }
  } else {
    cat(&amp;#39;Optimization finished with status&amp;#39;,result$status)
  }
  result
}

# Set-up environment
env &amp;lt;- list()
env$logfile &amp;lt;- &amp;#39;workforce5.log&amp;#39;

# Build model
model            &amp;lt;- list()
model$modelname  &amp;lt;- &amp;#39;workforce5&amp;#39;
model$modelsense &amp;lt;- &amp;#39;min&amp;#39;

# Initialize assignment decision variables:
#    x[w][s] == 1 if worker w is assigned to shift s.
#    This is no longer a pure assignment model, so we must
#    use binary variables.
model$vtype    &amp;lt;- rep(&amp;#39;C&amp;#39;, nVars)
model$lb       &amp;lt;- rep(0, nVars)
model$ub       &amp;lt;- rep(1, nVars)
model$varnames &amp;lt;- rep(&amp;#39;&amp;#39;,nVars)
for (w in 1:nWorkers) {
  for (s in 1:nShifts) {
    model$vtype[varIdx(w,s)]    = &amp;#39;B&amp;#39;
    model$varnames[varIdx(w,s)] = paste0(Workers[w],&amp;#39;.&amp;#39;,Shifts[s])
    if (availability[[w]][s] == 0) model$ub[varIdx(w,s)] = 0
  }
}

# Initialize shift slack variables
for (s in 1:nShifts) {
  model$varnames[shiftSlackIdx(s)] = paste0(&amp;#39;ShiftSlack&amp;#39;,Shifts[s])
  model$ub[shiftSlackIdx(s)] = Inf
}

# Initialize worker slack and diff variables
for (w in 1:nWorkers) {
  model$varnames[totShiftIdx(w)] = paste0(&amp;#39;TotalShifts&amp;#39;,Workers[w])
  model$ub[totShiftIdx(w)]       = Inf
}

#Initialize min/max shift variables
model$ub[minShiftIdx]       = Inf
model$varnames[minShiftIdx] = &amp;#39;MinShift&amp;#39;
model$ub[maxShiftIdx]       = Inf
model$varnames[maxShiftIdx] = &amp;#39;MaxShift&amp;#39;

#Initialize total slack variable
model$ub[totalSlackIdx]      = Inf
model$varnames[totalSlackIdx] = &amp;#39;TotalSlack&amp;#39;

# Set-up shift-requirements constraints
model$A           &amp;lt;- spMatrix(nShifts,nVars,
                      i = c(c(mapply(rep,1:nShifts,nWorkers)),
                            c(1:nShifts)),
                      j = c(mapply(varIdx,1:nWorkers,
                                 mapply(rep,1:nShifts,nWorkers)),
                            shiftSlackIdx(1:nShifts)),
                      x = rep(1,nShifts * (nWorkers+1)))
model$sense       &amp;lt;- rep(&amp;#39;=&amp;#39;,nShifts)
model$rhs         &amp;lt;- shiftRequirements
model$constrnames &amp;lt;- Shifts

# Set TotalSlack equal to the sum of each shift slack
B &amp;lt;- spMatrix(1, nVars,
        i = rep(1,nShifts+1),
        j = c(shiftSlackIdx(1:nShifts),totalSlackIdx),
        x = c(rep(1,nShifts),-1))
model$A           &amp;lt;- rbind(model$A, B)
model$rhs         &amp;lt;- c(model$rhs,0)
model$sense       &amp;lt;- c(model$sense,&amp;#39;=&amp;#39;)
model$constrnames &amp;lt;- c(model$constrnames, &amp;#39;TotalSlack&amp;#39;)

# Set total number of shifts for each worker
B &amp;lt;- spMatrix(nWorkers, nVars,
          i = c(mapply(rep,1:nWorkers,nShifts),
                1:nWorkers),
          j = c(mapply(varIdx,c(mapply(rep,1:nWorkers,nShifts)),1:nShifts),
                totShiftIdx(1:nWorkers)),
          x = c(rep(1,nShifts*nWorkers),rep(-1,nWorkers)))
model$A           &amp;lt;- rbind(model$A, B)
model$rhs         &amp;lt;- c(model$rhs,rep(0,nWorkers))
model$sense       &amp;lt;- c(model$sense,rep(&amp;#39;=&amp;#39;,nWorkers))
model$constrnames &amp;lt;- c(model$constrnames, sprintf(&amp;#39;TotalShifts%s&amp;#39;,Workers[1:nWorkers]))

# Set minShift / maxShift general constraints
model$genconmin &amp;lt;- list(list(resvar = minShiftIdx,
                             vars   = c(totShiftIdx(1:nWorkers)),
                             name   = &amp;#39;MinShift&amp;#39;))
model$genconmax &amp;lt;- list(list(resvar = maxShiftIdx,
                             vars   = c(totShiftIdx(1:nWorkers)),
                             name   = &amp;#39;MaxShift&amp;#39;))

# Set multiobjective
model$multiobj &amp;lt;- list(1:2)
model$multiobj[[1]]          &amp;lt;- list()
model$multiobj[[1]]$objn     &amp;lt;- c(rep(0,nVars))
model$multiobj[[1]]$objn[totalSlackIdx] = 1
model$multiobj[[1]]$priority &amp;lt;- 2
model$multiobj[[1]]$weight   &amp;lt;- 1
model$multiobj[[1]]$abstol   &amp;lt;- 2
model$multiobj[[1]]$reltol   &amp;lt;- 0.1
model$multiobj[[1]]$name     &amp;lt;- &amp;#39;TotalSlack&amp;#39;
model$multiobj[[1]]$con      &amp;lt;- 0.0
model$multiobj[[2]]          &amp;lt;- list()
model$multiobj[[2]]$objn     &amp;lt;- c(rep(0,nVars))
model$multiobj[[2]]$objn[minShiftIdx] = -1
model$multiobj[[2]]$objn[maxShiftIdx] =  1
model$multiobj[[2]]$priority &amp;lt;- 1
model$multiobj[[2]]$weight   &amp;lt;- 1
model$multiobj[[2]]$abstol   &amp;lt;- 0
model$multiobj[[2]]$reltol   &amp;lt;- 0
model$multiobj[[2]]$name     &amp;lt;- &amp;#39;Fairness&amp;#39;
model$multiobj[[2]]$con      &amp;lt;- 0.0


# Save initial model
gurobi_write(model,&amp;#39;workforce5.lp&amp;#39;, env)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Optimize
result &amp;lt;- solveandprint(model, env)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 23 rows, 137 columns and 261 nonzeros
## Model fingerprint: 0xd347a5b4
## Model has 2 general constraints
## Variable types: 25 continuous, 112 integer (112 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [2e+00, 7e+00]
## 
## ---------------------------------------------------------------------------
## Multi-objectives: starting optimization with 2 objectives ... 
## ---------------------------------------------------------------------------
## 
## Multi-objectives: applying initial presolve ...
## ---------------------------------------------------------------------------
## 
## Presolve added 13 rows and 0 columns
## Presolve removed 0 rows and 3 columns
## Presolve time: 0.00s
## Presolved: 36 rows and 134 columns
## ---------------------------------------------------------------------------
## 
## Multi-objectives: optimize objective 1 (TotalSlack) ...
## ---------------------------------------------------------------------------
## 
## Presolve added 8 rows and 0 columns
## Presolve removed 0 rows and 20 columns
## Presolve time: 0.00s
## Presolved: 44 rows, 114 columns, 224 nonzeros
## Presolved model has 8 SOS constraint(s)
## Variable types: 18 continuous, 96 integer (81 binary)
## Found heuristic solution: objective 7.0000000
## Found heuristic solution: objective 6.0000000
## 
## Root relaxation: objective 3.000000e+00, 30 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
##      0     0    3.00000    0    4    6.00000    3.00000  50.0%     -    0s
## H    0     0                       3.0000000    3.00000  0.00%     -    0s
##      0     0    3.00000    0    4    3.00000    3.00000  0.00%     -    0s
## 
## Explored 1 nodes (30 simplex iterations) in 0.01 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 3: 3 6 7 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
## ---------------------------------------------------------------------------
## 
## Multi-objectives: optimize objective 2 (Fairness) ...
## ---------------------------------------------------------------------------
## 
## 
## Loaded user MIP start with objective 4
## 
## Presolve added 8 rows and 0 columns
## Presolve removed 0 rows and 10 columns
## Presolve time: 0.00s
## Presolved: 45 rows, 124 columns, 273 nonzeros
## Presolved model has 8 SOS constraint(s)
## Variable types: 18 continuous, 106 integer (81 binary)
## 
## Root relaxation: objective 0.000000e+00, 60 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
##      0     0    0.00000    0   19    4.00000    0.00000   100%     -    0s
## H    0     0                       1.0000000    0.00000   100%     -    0s
##      0     0    0.14286    0   21    1.00000    0.14286  85.7%     -    0s
##      0     0    0.14286    0   18    1.00000    0.14286  85.7%     -    0s
##      0     0    0.14286    0   16    1.00000    0.14286  85.7%     -    0s
##      0     2    0.14286    0   16    1.00000    0.14286  85.7%     -    0s
## 
## Explored 1213 nodes (4042 simplex iterations) in 0.16 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 3: 1 1 4 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
## 
## ---------------------------------------------------------------------------
## Multi-objectives: solved in 0.17 seconds, solution count 5
## 
## The optimal objective is 4 1 
## Schedule:
##   Mon1 :Bob  Ed  Fred  
##   Tue2 :Amy  Bob  
##   Wed3 :Amy  Dan  Gu  Tobi  
##   Thu4 :Cathy  Ed  Gu  
##   Fri5 :Amy  Bob  Cathy  Dan  Ed  
##   Sat6 :Bob  Dan  Fred  Gu  Tobi  
##   Sun7 :Amy  Cathy  Ed  Gu  Tobi  
##   Mon8 :Ed  Fred  
##   Tue9 :Cathy  Fred  
##   Wed10 :Cathy  Dan  Gu  
##   Thu11 :Bob  Cathy  Gu  Tobi  
##   Fri12 :Amy  Cathy  Dan  Fred  Tobi  
##   Sat13 :Amy  Bob  Dan  Ed  Fred  Tobi  
##   Sun14 :Amy  Dan  Ed  Fred  Gu  
## Workload:
##   Amy : 7 
##   Bob : 6 
##   Cathy : 7 
##   Dan : 7 
##   Ed : 7 
##   Fred : 7 
##   Gu : 7 
##   Tobi : 6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (result$status != &amp;#39;OPTIMAL&amp;#39;) stop(&amp;#39;Stop now\n&amp;#39;)

#Clear space
rm(model, env, availability, Shifts, Workers, shiftRequirements, result)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add a new chunk by clicking the &lt;em&gt;Insert Chunk&lt;/em&gt; button on the toolbar or by pressing &lt;em&gt;Ctrl+Alt+I&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the &lt;em&gt;Preview&lt;/em&gt; button or press &lt;em&gt;Ctrl+Shift+K&lt;/em&gt; to preview the HTML file).&lt;/p&gt;
&lt;p&gt;The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike &lt;em&gt;Knit&lt;/em&gt;, &lt;em&gt;Preview&lt;/em&gt; does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
