<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Erick Jones</title>
    <link>/post/</link>
      <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>&amp;copy Erick Jones {2020}</copyright><lastBuildDate>Sat, 21 Mar 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Posts</title>
      <link>/post/</link>
    </image>
    
    <item>
      <title>A Selective Laser Sintering Creation - Wind Powered Tops</title>
      <link>/post/class_projects/slsdesign/</link>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/post/class_projects/slsdesign/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;We designed a spinning top that is novel, aesthetically pleasing, durable, spins well, and whose unique fan assembly can only be made using SLS. Our design incorporates a modular top system that allows for interchangeable designs to be attached to the universal base. We designed two UT-themed attachable tops, one that is a replica of the UT model tower and the other that is a replica of the UT seal. The universal base has wind turbine blades in its center so that air can be blown through it to keep it spinning even with a large top installed. The end result, a unique spinning UT tower and a spinning UT seal both powered by air and that can only be fabricated using SLS.
According to our research, the market for tops ranges from cheap toys with cool designs to expensive over $300 collectors items made of polished metals. The data from our survey suggested customers desired an aesthetically pleasing top that was novel and spun well over all other criteria. And our review of the design specifications of other tops gave us parameters for which to judge our own top.
Using the market, customer, and design specification information we came up with numerous designs eventually narrowing down our choices to five designs. Then we took our top two designs, the UT tower and an air-powered top, and combined the concepts behind them. With the concept decided upon, we started the design process and iterated through it multiple times until we reached our final design.
To ensure our final design would meet specifications we ran it through various tests. Since the performance of the top heavily depends on its aerodynamics, we prioritized aerodynamic testing. We performed 2-D analysis on each of the blades to determine minimum angle requirements based on inlet air speed and target RPM and then modified the blades accordingly. In future iterations, the blade design could benefit from 3-D analysis and simulation, but for this project we believed 2-D analysis was sufficient.
Lastly, we calculated the cost to build our top to ensure it was competitive with other high end tops. Our entire top system which includes both the universal base and the two attachable designs only required a build volume of 1024 cm3 (80mm x 80 mm x 160 mm); this is only 1/50th of the build chamber. This volume requires 0.512 kg of Nylon -12 powder which would cost about $11 (50% virgin powder). Depending on the operating cost, the top would cost between $20 and $30, well below the cost of higher end tops and closer to lower end ones.&lt;/p&gt;
&lt;p&gt;The code and final report are available on Github:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/yamierick/Engineer_Living/tree/master/SLS%20Project&#34; class=&#34;uri&#34;&gt;https://github.com/yamierick/Engineer_Living/tree/master/SLS%20Project&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Key Image&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;sls-top-designs.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Potential Designs&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Natural Language Processing - Sentiment Analysis</title>
      <link>/post/class_projects/sentimentanalysis/</link>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/post/class_projects/sentimentanalysis/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;We investigated how different Natural Language Processing (NLP) techniques could be used to perform sentiment analysis on real user generated text data from the Sentiment140 dataset [1]. First we investigated an LSTM model before deciding on using the self-attention network code from [2] because of the possible speed and accuracy advantages. Our contributions included investigating how the training batch size and dropout rate affected the accuracy of the model and validating an existing model by reproducing it and using it with a different dataset. After tuning the model with a smaller version of the dataset we trained it on 160,000 tweets. When we tested our model on the test dataset, we achieved an accuracy around 80%.&lt;/p&gt;
&lt;p&gt;The code and final report are available on Github:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/yamierick/sentiment-analysis&#34; class=&#34;uri&#34;&gt;https://github.com/yamierick/sentiment-analysis&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Key Image&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;dropoutrate.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Comparison of test accuracy by dropout rat&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Decompositions Algorithms Broken Down and Explained</title>
      <link>/post/orie/decompo_algs/</link>
      <pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/orie/decompo_algs/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This post explores how to use various decomposition techniques to solve LPs and MIPs.
I have written these using Gurobi as a solver and as the mathematical formulation software.
This is a reproducible example if you have R Studio just make sure you have installed the correct packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gurobi)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;gurobi&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tictoc)
library(Matrix)
library(ggplot2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;ggplot2&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Using homogenous equations to generate extreme points for (optimality) and extreme rays for (feasiblity)
#max 2x1 + x2 + 13x3 + 7y1 + 5y2
#s.t. 9x1+4x2+14x3+35y1+24y2 &amp;lt;= 80; -x1-2x2+3x3-3y1+4y2 &amp;lt;= 10
#x &amp;gt;=0, y&amp;gt;= 0, x is int

#RMP
#max z + 2x1 + x2 + 13x3
# z &amp;gt;= + (80-9x1-4x2-14x3)*u1 + (10+x1+2x2-3x3)*u2 u == 0 initial guess
u &amp;lt;- c(0,0)
RMP &amp;lt;- list()

RMP$A          &amp;lt;- matrix(c(1,(u[1]*9-u[2]),(u[1]*4-2*u[2]),(14*u[1]+3*u[2])), nrow=1, byrow=T)
RMP$obj        &amp;lt;- c(1,2,1,13)
RMP$modelsense &amp;lt;- &amp;#39;max&amp;#39;
RMP$rhs        &amp;lt;- c((80*u[1]+10*u[2]))
RMP$sense      &amp;lt;- c(&amp;#39;&amp;lt;&amp;#39;)
RMP$vtype      &amp;lt;- c(&amp;#39;C&amp;#39;,&amp;#39;I&amp;#39;,&amp;#39;I&amp;#39;,&amp;#39;I&amp;#39;)

result &amp;lt;- gurobi(RMP)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 4 columns and 1 nonzeros
## Model fingerprint: 0x2e4b9afd
## Variable types: 1 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 1e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [0e+00, 0e+00]
## Found heuristic solution: objective 1.600000e+31
## Presolve time: 0.00s
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 1: 1.6e+31 
## No other solutions better than 0
## 
## Model is unbounded
## Warning: some integer variables take values larger than the maximum
##          supported value (2000000000)
## Best objective 1.600000000000e+31, best bound -, gap -&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;UB &amp;lt;- result$objval
print(paste(&amp;#39;RMP Objective Value and New Upper bound:&amp;#39;, result$objval))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;RMP Objective Value and New Upper bound: 1.6e+31&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;Value of z:&amp;#39;, result$x[1]))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Value of z: 0&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- result$x[-1]
print(paste(&amp;#39;Value of x:&amp;#39;, t(as.matrix(x))))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Value of x: 1e+30&amp;quot; &amp;quot;Value of x: 1e+30&amp;quot; &amp;quot;Value of x: 1e+30&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if(result$status == &amp;quot;INF_OR_UNBD&amp;quot; | result$status == &amp;quot;UNBOUNDED&amp;quot;){
  UB &amp;lt;- 999999
  x &amp;lt;- c(0,0,0)
}

rm(result)

#Primal Subproblem
# 2x1 + x2 + 13x3 + max 7y1 + 5y2
#s.t. 35y1+24y2 &amp;lt;= 80-(9x1+4x2+14x3); -3y1+4y2 &amp;lt;= 10-(-x1-2x2+3x3)

LB &amp;lt;- -999999

LB_list &amp;lt;- LB
UB_list &amp;lt;- UB
x_list &amp;lt;- x
u_list &amp;lt;- u
y &amp;lt;- c(0,0)
y_list &amp;lt;- y

#Keeps adding Benders Cuts to Problem
while(LB != UB){

#Dual Subproblem
#min (80-(9x1+4x2+14x3))u1 + (10-(-x1-2x2+3x3))u2
#s.t. 35u1 -3u2 &amp;gt;= 7; 24u1+4u2 &amp;gt;= 5

DSB &amp;lt;- list()

DSB$A          &amp;lt;- matrix(c(35,-3,24,4), nrow=2, byrow=T)
DSB$obj        &amp;lt;- c((80-9*x[1]-4*x[2]-14*x[3]),(10+x[1]+2*x[2]-3*x[3]))
DSB$modelsense &amp;lt;- &amp;#39;min&amp;#39;
DSB$rhs        &amp;lt;- c(7,5)
DSB$sense      &amp;lt;- c(&amp;#39;&amp;gt;&amp;#39;, &amp;#39;&amp;gt;&amp;#39;)

result &amp;lt;- gurobi(DSB)

LB &amp;lt;- result$objval + 2 * x[1] + x[2] + 13*x[3]
print(paste(&amp;#39;DSB Objective Value and New Lower bound:&amp;#39;, LB))
u &amp;lt;- result$x
y &amp;lt;- result$pi
print(paste(&amp;#39;Value of u:&amp;#39;, u))
print(paste(&amp;#39;Value of y:&amp;#39;, y))



#add new constraint
#z &amp;gt;= u[1]*(3-y1) + u[2]*(4-3y1)
#z + (u[1]*y1) + u[2]*3y1 &amp;gt;= u[1]*3+u[2]*4

B &amp;lt;- matrix(c(1,(u[1]*9-u[2]),(u[1]*4-2*u[2]),(14*u[1]+3*u[2])), nrow=1, byrow=T)
b &amp;lt;- u[1]*80+u[2]*10

if(result$status == &amp;quot;INF_OR_UNBD&amp;quot; | result$status == &amp;#39;UNBOUNDED&amp;#39;){
  DSB$A &amp;lt;- rbind(DSB$A,c(1,1))
  DSB$rhs &amp;lt;- c(0,0,1)
  DSB$sense &amp;lt;- c(DSB$sense, &amp;#39;=&amp;#39;)
  result &amp;lt;- gurobi(DSB)
  u &amp;lt;- result$x
  LB &amp;lt;- LB_list[length(LB_list)]
  B &amp;lt;- matrix(c(0,(u[1]*9-u[2]),(u[1]*4-2*u[2]),(14*u[1]+3*u[2])), nrow=1, byrow=T)
  b &amp;lt;- u[1]*80+u[2]*10
  
  
}

u_list &amp;lt;- rbind(u_list,u)
y_list &amp;lt;- rbind(y_list,y)
LB_list &amp;lt;- c(LB_list, LB)

rm(result)


RMP$A &amp;lt;- rbind(RMP$A, B)
RMP$rhs &amp;lt;- c(RMP$rhs,b)
RMP$sense &amp;lt;- c(RMP$sense, &amp;#39;&amp;lt;&amp;#39;)


result &amp;lt;- gurobi(RMP)

UB &amp;lt;- result$objval
print(paste(&amp;#39;RMP Objective Value and New Upper bound:&amp;#39;, result$objval))
print(paste(&amp;#39;Value of z:&amp;#39;, result$x[1]))
x &amp;lt;- result$x[-1]
print(paste(&amp;#39;Value of x:&amp;#39;, t(as.matrix(x))))

if(result$status == &amp;quot;INF_OR_UNBD&amp;quot;){
  UB &amp;lt;- 999999
  x &amp;lt;- c(0,0,0)
}

UB_list &amp;lt;- c(UB_list, UB)
x_list &amp;lt;- rbind(x_list,x)
rm(result)

}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 2 columns and 4 nonzeros
## Model fingerprint: 0xfecd2aa1
## Coefficient statistics:
##   Matrix range     [3e+00, 4e+01]
##   Objective range  [1e+01, 8e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [5e+00, 7e+00]
## Presolve time: 0.00s
## Presolved: 2 rows, 2 columns, 4 nonzeros
## 
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    0.0000000e+00   1.500000e+00   0.000000e+00      0s
##        2    1.6556604e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 2 iterations and 0.00 seconds
## Optimal objective  1.655660377e+01
## [1] &amp;quot;DSB Objective Value and New Lower bound: 16.5566037735849&amp;quot;
## [1] &amp;quot;Value of u: 0.202830188679245&amp;quot;  &amp;quot;Value of u: 0.0330188679245282&amp;quot;
## [1] &amp;quot;Value of y: 0.377358490566038&amp;quot; &amp;quot;Value of y: 2.78301886792453&amp;quot; 
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 4 columns and 5 nonzeros
## Model fingerprint: 0xc19f21b7
## Variable types: 1 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [7e-01, 3e+00]
##   Objective range  [1e+00, 1e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+01, 2e+01]
## Found heuristic solution: objective 18.0000000
## Presolve removed 1 rows and 1 columns
## Presolve time: 0.00s
## Presolved: 1 rows, 3 columns, 3 nonzeros
## Variable types: 0 continuous, 3 integer (0 binary)
## 
## Root relaxation: objective 6.750000e+01, 1 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
##      0     0   67.50000    0    1   18.00000   67.50000   275%     -    0s
## H    0     0                      67.0000000   67.50000  0.75%     -    0s
##      0     0   67.50000    0    1   67.00000   67.50000  0.75%     -    0s
## 
## Explored 1 nodes (1 simplex iterations) in 0.00 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 2: 67 18 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 6.700000000000e+01, best bound 6.700000000000e+01, gap 0.0000%
## [1] &amp;quot;RMP Objective Value and New Upper bound: 67&amp;quot;
## [1] &amp;quot;Value of z: 0&amp;quot;
## [1] &amp;quot;Value of x: 0&amp;quot; &amp;quot;Value of x: 2&amp;quot; &amp;quot;Value of x: 5&amp;quot;
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 2 columns and 4 nonzeros
## Model fingerprint: 0xe467fd43
## Coefficient statistics:
##   Matrix range     [3e+00, 4e+01]
##   Objective range  [1e+00, 2e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [5e+00, 7e+00]
## Presolve removed 2 rows and 2 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0   -8.2857143e+29   0.000000e+00   1.657143e+00      0s
## Extra 2 simplex iterations after uncrush
## 
## Solved in 2 iterations and 0.00 seconds
## Unbounded model
## [1] &amp;quot;DSB Objective Value and New Lower bound: &amp;quot;
## [1] &amp;quot;Value of u: &amp;quot;
## [1] &amp;quot;Value of y: &amp;quot;
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 2 columns and 6 nonzeros
## Model fingerprint: 0x9e81c4c8
## Coefficient statistics:
##   Matrix range     [1e+00, 4e+01]
##   Objective range  [1e+00, 2e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [1e+00, 1e+00]
## Presolve removed 3 rows and 2 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0   -7.6315789e-01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective -7.631578947e-01
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 4 columns and 8 nonzeros
## Model fingerprint: 0x49b3021e
## Variable types: 1 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [2e-01, 4e+00]
##   Objective range  [1e+00, 1e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+01, 2e+01]
## Found heuristic solution: objective 18.0000000
## Presolve removed 1 rows and 1 columns
## Presolve time: 0.00s
## Presolved: 2 rows, 3 columns, 6 nonzeros
## Variable types: 0 continuous, 3 integer (0 binary)
## 
## Root relaxation: objective 6.750000e+01, 1 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
##      0     0   67.50000    0    1   18.00000   67.50000   275%     -    0s
## H    0     0                      58.0000000   67.50000  16.4%     -    0s
## 
## Cutting planes:
##   Gomory: 1
##   MIR: 1
## 
## Explored 1 nodes (1 simplex iterations) in 0.00 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 2: 58 18 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 5.800000000000e+01, best bound 5.800000000000e+01, gap 0.0000%
## [1] &amp;quot;RMP Objective Value and New Upper bound: 58&amp;quot;
## [1] &amp;quot;Value of z: 0&amp;quot;
## [1] &amp;quot;Value of x: 1&amp;quot; &amp;quot;Value of x: 4&amp;quot; &amp;quot;Value of x: 4&amp;quot;
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 2 columns and 4 nonzeros
## Model fingerprint: 0xb674b004
## Coefficient statistics:
##   Matrix range     [3e+00, 4e+01]
##   Objective range  [1e+00, 7e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [5e+00, 7e+00]
## Presolve time: 0.00s
## 
## Solved in 0 iterations and 0.00 seconds
## Infeasible or unbounded model
## [1] &amp;quot;DSB Objective Value and New Lower bound: &amp;quot;
## [1] &amp;quot;Value of u: &amp;quot;
## [1] &amp;quot;Value of y: &amp;quot;
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 2 columns and 6 nonzeros
## Model fingerprint: 0x56bfae6b
## Coefficient statistics:
##   Matrix range     [1e+00, 4e+01]
##   Objective range  [1e+00, 7e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [1e+00, 1e+00]
## Presolve removed 3 rows and 2 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0   -1.0000000e+00   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective -1.000000000e+00
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 4 rows, 4 columns and 11 nonzeros
## Model fingerprint: 0x671586c2
## Variable types: 1 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [2e-01, 1e+01]
##   Objective range  [1e+00, 1e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+01, 8e+01]
## Found heuristic solution: objective 18.0000000
## Presolve removed 1 rows and 1 columns
## Presolve time: 0.00s
## Presolved: 3 rows, 3 columns, 9 nonzeros
## Variable types: 0 continuous, 3 integer (0 binary)
## 
## Root relaxation: objective 6.750000e+01, 1 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
##      0     0   67.50000    0    1   18.00000   67.50000   275%     -    0s
## H    0     0                      57.0000000   67.50000  18.4%     -    0s
## H    0     0                      58.0000000   67.50000  16.4%     -    0s
## 
## Cutting planes:
##   Gomory: 1
##   MIR: 1
## 
## Explored 1 nodes (1 simplex iterations) in 0.00 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 3: 58 57 18 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 5.800000000000e+01, best bound 5.800000000000e+01, gap 0.0000%
## [1] &amp;quot;RMP Objective Value and New Upper bound: 58&amp;quot;
## [1] &amp;quot;Value of z: 0&amp;quot;
## [1] &amp;quot;Value of x: 0&amp;quot; &amp;quot;Value of x: 6&amp;quot; &amp;quot;Value of x: 4&amp;quot;
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 2 columns and 4 nonzeros
## Model fingerprint: 0x5530e933
## Coefficient statistics:
##   Matrix range     [3e+00, 4e+01]
##   Objective range  [1e+01, 1e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [5e+00, 7e+00]
## Presolve removed 2 rows and 2 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    0.0000000e+00   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  0.000000000e+00
## [1] &amp;quot;DSB Objective Value and New Lower bound: 58&amp;quot;
## [1] &amp;quot;Value of u: 0.208333333333333&amp;quot; &amp;quot;Value of u: 0&amp;quot;                
## [1] &amp;quot;Value of y: 0&amp;quot; &amp;quot;Value of y: 0&amp;quot;
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 5 rows, 4 columns and 15 nonzeros
## Model fingerprint: 0xd390add2
## Variable types: 1 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [2e-01, 1e+01]
##   Objective range  [1e+00, 1e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+01, 8e+01]
## Found heuristic solution: objective 18.0000000
## Presolve removed 2 rows and 1 columns
## Presolve time: 0.00s
## Presolved: 3 rows, 3 columns, 9 nonzeros
## Variable types: 0 continuous, 3 integer (0 binary)
## 
## Root relaxation: objective 6.750000e+01, 1 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
##      0     0   67.50000    0    1   18.00000   67.50000   275%     -    0s
## H    0     0                      57.0000000   67.50000  18.4%     -    0s
## H    0     0                      58.0000000   67.50000  16.4%     -    0s
## 
## Cutting planes:
##   Gomory: 1
##   MIR: 1
## 
## Explored 1 nodes (1 simplex iterations) in 0.00 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 3: 58 57 18 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 5.800000000000e+01, best bound 5.800000000000e+01, gap 0.0000%
## [1] &amp;quot;RMP Objective Value and New Upper bound: 58&amp;quot;
## [1] &amp;quot;Value of z: 0&amp;quot;
## [1] &amp;quot;Value of x: 0&amp;quot; &amp;quot;Value of x: 6&amp;quot; &amp;quot;Value of x: 4&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;LB_list&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -999999.0000      16.5566      16.5566      16.5566      58.0000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;UB_list&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 999999     67     58     58     58&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;u_list&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##              [,1]       [,2]
## u_list 0.00000000 0.00000000
## u      0.20283019 0.03301887
## u      0.07894737 0.92105263
## u      1.00000000 0.00000000
## u      0.20833333 0.00000000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;y_list&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             [,1]     [,2]
## y_list 0.0000000 0.000000
## y      0.3773585 2.783019
## y      0.0000000 0.000000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x_list&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        [,1] [,2] [,3]
## x_list    0    0    0
## x         0    2    5
## x         1    4    4
## x         0    6    4
## x         0    6    4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(b,B,DSB,LB,LB_list,RMP,u,u_list,UB,UB_list,x,x_list,y,y_list)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Column Generation Algorithm
#Cutting Stock Problem
#minimize number of rods used (x). Satisfy demand for 44 81 cm pieces, 3 70 cm pieces, and 48 68 cm pieces
#min x1 + x2 + x3
#s.t. x1 &amp;gt;= 44; x2 &amp;gt;=3; x3 &amp;gt;= 48
#x &amp;gt;=0,


LMP &amp;lt;- list()

LMP$A          &amp;lt;- matrix(c(1,0,0,
                           0,1,0,
                           0,0,1), nrow=3, byrow=T)
LMP$obj        &amp;lt;- c(1,1,1)
LMP$modelsense &amp;lt;- &amp;#39;min&amp;#39;
LMP$rhs        &amp;lt;- c(44,3,48)
LMP$sense      &amp;lt;- c(&amp;#39;&amp;gt;&amp;#39;)

result &amp;lt;- gurobi(LMP)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 3 columns and 3 nonzeros
## Model fingerprint: 0xcd2bfab3
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Presolve removed 3 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    9.5000000e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  9.500000000e+01&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;k &amp;lt;- -1

while(k &amp;lt; 0){


KSP &amp;lt;- list()

KSP$A          &amp;lt;- matrix(c(81,70,68), nrow=1, byrow=T)
KSP$obj        &amp;lt;- result$pi
KSP$modelsense &amp;lt;- &amp;#39;max&amp;#39;
KSP$rhs        &amp;lt;- c(218)
KSP$sense      &amp;lt;- c(&amp;#39;&amp;lt;&amp;#39;)
KSP$vtype      &amp;lt;- c(&amp;#39;I&amp;#39;,&amp;#39;I&amp;#39;,&amp;#39;I&amp;#39;)

result &amp;lt;- gurobi(KSP)

k &amp;lt;- 1 - sum(result$x*KSP$obj)

B &amp;lt;- as.matrix(result$x)

LMP$A &amp;lt;- cbind(LMP$A,B)

LMP$obj &amp;lt;- c(LMP$obj,1)

result &amp;lt;- gurobi(LMP)

print(paste(&amp;#39;LMP Objective Value&amp;#39;, result$objval))

print(paste(&amp;#39;Sum of Reduced Cost:&amp;#39;, k))

print(LMP$A)

print(t(as.matrix(result$x)))

}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 3 columns and 3 nonzeros
## Model fingerprint: 0x72f1e20f
## Variable types: 0 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [7e+01, 8e+01]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+02, 2e+02]
## Found heuristic solution: objective 2.0000000
## Presolve removed 1 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 2: 3 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 4 columns and 4 nonzeros
## Model fingerprint: 0x4bac7a68
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Presolve removed 3 rows and 4 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    6.3000000e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  6.300000000e+01
## [1] &amp;quot;LMP Objective Value 63&amp;quot;
## [1] &amp;quot;Sum of Reduced Cost: -2&amp;quot;
##      [,1] [,2] [,3] [,4]
## [1,]    1    0    0    0
## [2,]    0    1    0    0
## [3,]    0    0    1    3
##      [,1] [,2] [,3] [,4]
## [1,]   44    3    0   16
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 3 columns and 3 nonzeros
## Model fingerprint: 0x5e04c92d
## Variable types: 0 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [7e+01, 8e+01]
##   Objective range  [3e-01, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+02, 2e+02]
## Found heuristic solution: objective 2.0000000
## Presolve removed 1 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 2: 3 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 5 columns and 5 nonzeros
## Model fingerprint: 0x46707112
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Presolve removed 3 rows and 5 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    6.1000000e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  6.100000000e+01
## [1] &amp;quot;LMP Objective Value 61&amp;quot;
## [1] &amp;quot;Sum of Reduced Cost: -2&amp;quot;
##      [,1] [,2] [,3] [,4] [,5]
## [1,]    1    0    0    0    0
## [2,]    0    1    0    0    3
## [3,]    0    0    1    3    0
##      [,1] [,2] [,3] [,4] [,5]
## [1,]   44    0    0   16    1
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 3 columns and 3 nonzeros
## Model fingerprint: 0x76f224a3
## Variable types: 0 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [7e+01, 8e+01]
##   Objective range  [3e-01, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+02, 2e+02]
## Found heuristic solution: objective 2.0000000
## Presolve removed 1 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 1: 2 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 6 columns and 6 nonzeros
## Model fingerprint: 0x461ec1df
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Presolve removed 3 rows and 6 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    3.9000000e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  3.900000000e+01
## [1] &amp;quot;LMP Objective Value 39&amp;quot;
## [1] &amp;quot;Sum of Reduced Cost: -1&amp;quot;
##      [,1] [,2] [,3] [,4] [,5] [,6]
## [1,]    1    0    0    0    0    2
## [2,]    0    1    0    0    3    0
## [3,]    0    0    1    3    0    0
##      [,1] [,2] [,3] [,4] [,5] [,6]
## [1,]    0    0    0   16    1   22
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 3 columns and 3 nonzeros
## Model fingerprint: 0x282e1563
## Variable types: 0 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [7e+01, 8e+01]
##   Objective range  [3e-01, 5e-01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+02, 2e+02]
## Found heuristic solution: objective 1.0000000
## Presolve removed 1 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 2: 1.16667 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 1.166666666667e+00, best bound 1.166666666667e+00, gap 0.0000%
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 7 columns and 8 nonzeros
## Model fingerprint: 0xaf053821
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Presolve removed 1 rows and 4 columns
## Presolve time: 0.00s
## Presolved: 2 rows, 3 columns, 4 nonzeros
## 
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    1.0000000e+00   3.400000e+01   0.000000e+00      0s
##        2    3.5000000e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 2 iterations and 0.00 seconds
## Optimal objective  3.500000000e+01
## [1] &amp;quot;LMP Objective Value 35&amp;quot;
## [1] &amp;quot;Sum of Reduced Cost: -0.166666666666667&amp;quot;
##      [,1] [,2] [,3] [,4] [,5] [,6] [,7]
## [1,]    1    0    0    0    0    2    1
## [2,]    0    1    0    0    3    0    0
## [3,]    0    0    1    3    0    0    2
##      [,1] [,2] [,3] [,4] [,5] [,6] [,7]
## [1,]    0    0    0    0    1   10   24
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 3 columns and 3 nonzeros
## Model fingerprint: 0x4b9369e0
## Variable types: 0 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [7e+01, 8e+01]
##   Objective range  [3e-01, 5e-01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+02, 2e+02]
## Found heuristic solution: objective 1.0000000
## Presolve removed 1 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 1: 1 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 8 columns and 9 nonzeros
## Model fingerprint: 0xebe33484
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Presolve removed 1 rows and 5 columns
## Presolve time: 0.00s
## Presolved: 2 rows, 3 columns, 4 nonzeros
## 
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    1.0000000e+00   3.400000e+01   0.000000e+00      0s
##        2    3.5000000e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 2 iterations and 0.00 seconds
## Optimal objective  3.500000000e+01
## [1] &amp;quot;LMP Objective Value 35&amp;quot;
## [1] &amp;quot;Sum of Reduced Cost: 0&amp;quot;
##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
## [1,]    1    0    0    0    0    2    1    2
## [2,]    0    1    0    0    3    0    0    0
## [3,]    0    0    1    3    0    0    2    0
##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
## [1,]    0    0    0    0    1   10   24    0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;LMP$vtype      &amp;lt;- rep(&amp;#39;I&amp;#39;, ncol(LMP$A))

result &amp;lt;- gurobi(LMP)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 8 columns and 9 nonzeros
## Model fingerprint: 0xe1a5582b
## Variable types: 0 continuous, 8 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Found heuristic solution: objective 35.0000000
## Presolve removed 1 rows and 5 columns
## Presolve time: 0.00s
## Presolved: 2 rows, 3 columns, 4 nonzeros
## Variable types: 0 continuous, 3 integer (0 binary)
## 
## Root relaxation: cutoff, 0 iterations, 0.00 seconds
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 1: 35 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 3.500000000000e+01, best bound 3.500000000000e+01, gap 0.0000%&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;Integer Objective Value&amp;#39;, result$objval))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Integer Objective Value 35&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;LMP$A&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
## [1,]    1    0    0    0    0    2    1    2
## [2,]    0    1    0    0    3    0    0    0
## [3,]    0    0    1    3    0    0    2    0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;t(as.matrix(result$x))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
## [1,]    0    0    0    0    1    0   24   10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(B,k,KSP,LMP,result)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add a new chunk by clicking the &lt;em&gt;Insert Chunk&lt;/em&gt; button on the toolbar or by pressing &lt;em&gt;Ctrl+Alt+I&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the &lt;em&gt;Preview&lt;/em&gt; button or press &lt;em&gt;Ctrl+Shift+K&lt;/em&gt; to preview the HTML file).&lt;/p&gt;
&lt;p&gt;The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike &lt;em&gt;Knit&lt;/em&gt;, &lt;em&gt;Preview&lt;/em&gt; does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Benders Decomposition Algorithm Explained</title>
      <link>/post/orie/benders/</link>
      <pubDate>Thu, 09 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/orie/benders/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This post explores how to use Benders Decomposition to solve LPs and MIPs.
I have written these using Gurobi as a solver and as the mathematical formulation software.
This is a reproducible example if you have R Studio just make sure you have installed the correct packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gurobi)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;gurobi&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(lpSolveAPI)
library(tictoc)
library(Matrix)
library(ggplot2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;ggplot2&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#library(matlib)
#library(MASS)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#min 2x1 + 3x2 + 2y1
#s.t. x1+2x2+y1 &amp;gt;= 3; 2x1 - x2 + 3y1 &amp;gt;= 4
#x &amp;gt;=0, y&amp;gt;= 0, y is int

#RMP
#min z
# z &amp;gt;= 2y1 + (3 - 1y1)*u1 + (4-3y1)*u2 u == 0 initial guess
u &amp;lt;- c(0,0)
RMP &amp;lt;- list()

RMP$A          &amp;lt;- matrix(c(1,(u[1]+3*u[2])), nrow=1, byrow=T)
RMP$obj        &amp;lt;- c(1,2)
RMP$modelsense &amp;lt;- &amp;#39;min&amp;#39;
RMP$rhs        &amp;lt;- c((3*u[1]+4*u[2]))
RMP$sense      &amp;lt;- c(&amp;#39;&amp;gt;&amp;#39;)
RMP$vtype      &amp;lt;- c(&amp;#39;I&amp;#39;,&amp;#39;I&amp;#39;)

result &amp;lt;- gurobi(RMP)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 2 columns and 1 nonzeros
## Model fingerprint: 0x4deba5e6
## Variable types: 0 continuous, 2 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 2e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [0e+00, 0e+00]
## Found heuristic solution: objective 0.0000000
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 1: 0 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;LB &amp;lt;- result$objval
print(paste(&amp;#39;RMP Objective Value and New Lower bound:&amp;#39;, result$objval))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;RMP Objective Value and New Lower bound: 0&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;Value of z:&amp;#39;, result$x[1]))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Value of z: 0&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;y_hat &amp;lt;- result$x[-1]
print(paste(&amp;#39;Value of y:&amp;#39;, y_hat))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Value of y: 0&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;UB &amp;lt;- 9999999

#Primal Subproblem
#min 2y1_^ + min 2x1+3x2
#s.t. x1+2x2 &amp;gt;= 3 - y1_^; 2x1 - x2 &amp;gt;= 4 - 3y1_^


#Keeps adding Benders Cuts to Problem
#while(LB != UB){

#Dual Subproblem
#max (3-y1_^)u1 + (4-3y1_^)u2
#s.t. u1+2u2 &amp;lt;= 2; 2u1-u2 &amp;lt;= 3

DSB &amp;lt;- list()

DSB$A          &amp;lt;- matrix(c(1,2,2,-1), nrow=2, byrow=T)
DSB$obj        &amp;lt;- c((3-y_hat),(4-3*y_hat))
DSB$modelsense &amp;lt;- &amp;#39;max&amp;#39;
DSB$rhs        &amp;lt;- c(2,3)
DSB$sense      &amp;lt;- c(&amp;#39;&amp;lt;&amp;#39;, &amp;#39;&amp;lt;&amp;#39;)

result &amp;lt;- gurobi(DSB)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 2 columns and 4 nonzeros
## Model fingerprint: 0x43e8db6d
## Coefficient statistics:
##   Matrix range     [1e+00, 2e+00]
##   Objective range  [3e+00, 4e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+00, 3e+00]
## Presolve removed 2 rows and 2 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    5.6000000e+00   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.01 seconds
## Optimal objective  5.600000000e+00&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;UB &amp;lt;- result$objval + 2 * sum(y_hat)
print(paste(&amp;#39;DSB Objective Value and New Upper bound:&amp;#39;, UB))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;DSB Objective Value and New Upper bound: 5.6&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;u &amp;lt;- result$x
print(paste(&amp;#39;Value of u:&amp;#39;, u))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Value of u: 1.6&amp;quot; &amp;quot;Value of u: 0.2&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#add new constraint
#z &amp;gt;= u[1]*(3-y1) + u[2]*(4-3y1)
#z + (u[1]*y1) + u[2]*3y1 &amp;gt;= u[1]*3+u[2]*4

B &amp;lt;- matrix(c(1,(u[1]+3*u[2])), nrow =1)
b &amp;lt;- u[1]*3+u[2]*4

RMP$A &amp;lt;- rbind(RMP$A, B)
RMP$rhs &amp;lt;- c(RMP$rhs,b)
RMP$sense &amp;lt;- c(RMP$sense, &amp;#39;&amp;gt;&amp;#39;)


result &amp;lt;- gurobi(RMP)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 2 columns and 3 nonzeros
## Model fingerprint: 0x515bf67f
## Variable types: 0 continuous, 2 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 2e+00]
##   Objective range  [1e+00, 2e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [6e+00, 6e+00]
## Found heuristic solution: objective 6.0000000
## Presolve removed 2 rows and 2 columns
## Presolve time: 0.01s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.01 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 1: 6 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 6.000000000000e+00, best bound 6.000000000000e+00, gap 0.0000%&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;LB &amp;lt;- result$objval
print(paste(&amp;#39;RMP Objective Value and New Lower bound:&amp;#39;, result$objval))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;RMP Objective Value and New Lower bound: 6&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;Value of z:&amp;#39;, result$x[1]))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Value of z: 6&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;y_hat &amp;lt;- result$x[-1]
print(paste(&amp;#39;Value of y:&amp;#39;, y_hat))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Value of y: 0&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#}

rm(result, LB, UB, y_hat, B, RMP, DSB)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Using homogenous equations to generate extreme points for (optimality) and extreme rays for (feasiblity)
#max 2x1 + x2 + 13x3 + 7y1 + 5y2
#s.t. 9x1+4x2+14x3+35y1+24y2 &amp;lt;= 80; -x1-2x2+3x3-3y1+4y2 &amp;lt;= 10
#x &amp;gt;=0, y&amp;gt;= 0, x is int

#RMP
#max z + 2x1 + x2 + 13x3
# z &amp;gt;= + (80-9x1-4x2-14x3)*u1 + (10+x1+2x2-3x3)*u2 u == 0 initial guess
u &amp;lt;- c(0,0)
RMP &amp;lt;- list()

RMP$A          &amp;lt;- matrix(c(1,(u[1]*9-u[2]),(u[1]*4-2*u[2]),(14*u[1]+3*u[2])), nrow=1, byrow=T)
RMP$obj        &amp;lt;- c(1,2,1,13)
RMP$modelsense &amp;lt;- &amp;#39;max&amp;#39;
RMP$rhs        &amp;lt;- c((80*u[1]+10*u[2]))
RMP$sense      &amp;lt;- c(&amp;#39;&amp;lt;&amp;#39;)
RMP$vtype      &amp;lt;- c(&amp;#39;C&amp;#39;,&amp;#39;I&amp;#39;,&amp;#39;I&amp;#39;,&amp;#39;I&amp;#39;)

result &amp;lt;- gurobi(RMP)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 4 columns and 1 nonzeros
## Model fingerprint: 0x2e4b9afd
## Variable types: 1 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 1e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [0e+00, 0e+00]
## Found heuristic solution: objective 1.600000e+31
## Presolve time: 0.00s
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 1: 1.6e+31 
## No other solutions better than 0
## 
## Model is unbounded
## Warning: some integer variables take values larger than the maximum
##          supported value (2000000000)
## Best objective 1.600000000000e+31, best bound -, gap -&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;UB &amp;lt;- result$objval
print(paste(&amp;#39;RMP Objective Value and New Upper bound:&amp;#39;, result$objval))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;RMP Objective Value and New Upper bound: 1.6e+31&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;Value of z:&amp;#39;, result$x[1]))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Value of z: 0&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- result$x[-1]
print(paste(&amp;#39;Value of x:&amp;#39;, x))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Value of x: 1e+30&amp;quot; &amp;quot;Value of x: 1e+30&amp;quot; &amp;quot;Value of x: 1e+30&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if(result$status == &amp;quot;INF_OR_UNBD&amp;quot; | result$status == &amp;quot;UNBOUNDED&amp;quot;){
  UB &amp;lt;- 999999
  x &amp;lt;- c(0,0,0)
}

rm(result)

#Primal Subproblem
# 2x1 + x2 + 13x3 + max 7y1 + 5y2
#s.t. 35y1+24y2 &amp;lt;= 80-(9x1+4x2+14x3); -3y1+4y2 &amp;lt;= 10-(-x1-2x2+3x3)

LB &amp;lt;- -999999

LB_list &amp;lt;- LB
UB_list &amp;lt;- UB
x_list &amp;lt;- x
u_list &amp;lt;- u

#Keeps adding Benders Cuts to Problem
while(LB != UB){

#Dual Subproblem
#min (80-(9x1+4x2+14x3))u1 + (10-(-x1-2x2+3x3))u2
#s.t. 35u1 -3u2 &amp;gt;= 7; 24u1+4u2 &amp;gt;= 5

DSB &amp;lt;- list()

DSB$A          &amp;lt;- matrix(c(35,-3,24,4), nrow=2, byrow=T)
DSB$obj        &amp;lt;- c((80-9*x[1]-4*x[2]-14*x[3]),(10+x[1]+2*x[2]-3*x[3]))
DSB$modelsense &amp;lt;- &amp;#39;min&amp;#39;
DSB$rhs        &amp;lt;- c(7,5)
DSB$sense      &amp;lt;- c(&amp;#39;&amp;gt;&amp;#39;, &amp;#39;&amp;gt;&amp;#39;)

result &amp;lt;- gurobi(DSB)

LB &amp;lt;- result$objval + 2 * x[1] + x[2] + 13*x[3]
print(paste(&amp;#39;DSB Objective Value and New Lower bound:&amp;#39;, LB))
u &amp;lt;- result$x
print(paste(&amp;#39;Value of u:&amp;#39;, u))



#add new constraint
#z &amp;gt;= u[1]*(3-y1) + u[2]*(4-3y1)
#z + (u[1]*y1) + u[2]*3y1 &amp;gt;= u[1]*3+u[2]*4

B &amp;lt;- matrix(c(1,(u[1]*9-u[2]),(u[1]*4-2*u[2]),(14*u[1]+3*u[2])), nrow=1, byrow=T)
b &amp;lt;- u[1]*80+u[2]*10

if(result$status == &amp;quot;INF_OR_UNBD&amp;quot; | result$status == &amp;#39;UNBOUNDED&amp;#39;){
  DSB$A &amp;lt;- rbind(DSB$A,c(1,1))
  DSB$rhs &amp;lt;- c(0,0,1)
  DSB$sense &amp;lt;- c(DSB$sense, &amp;#39;=&amp;#39;)
  result &amp;lt;- gurobi(DSB)
  u &amp;lt;- result$x
  LB &amp;lt;- LB_list[length(LB_list)]
  B &amp;lt;- matrix(c(0,(u[1]*9-u[2]),(u[1]*4-2*u[2]),(14*u[1]+3*u[2])), nrow=1, byrow=T)
  b &amp;lt;- u[1]*80+u[2]*10
  
  
}

u_list &amp;lt;- rbind(u_list,u)
LB_list &amp;lt;- c(LB_list, LB)

rm(result)


RMP$A &amp;lt;- rbind(RMP$A, B)
RMP$rhs &amp;lt;- c(RMP$rhs,b)
RMP$sense &amp;lt;- c(RMP$sense, &amp;#39;&amp;lt;&amp;#39;)


result &amp;lt;- gurobi(RMP)

UB &amp;lt;- result$objval
print(paste(&amp;#39;RMP Objective Value and New Upper bound:&amp;#39;, result$objval))
print(paste(&amp;#39;Value of z:&amp;#39;, result$x[1]))
x &amp;lt;- result$x[-1]
print(paste(&amp;#39;Value of x:&amp;#39;, x))

if(result$status == &amp;quot;INF_OR_UNBD&amp;quot;){
  UB &amp;lt;- 999999
  x &amp;lt;- c(0,0,0)
}

UB_list &amp;lt;- c(UB_list, UB)
x_list &amp;lt;- rbind(x_list,x)
rm(result)

}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 2 columns and 4 nonzeros
## Model fingerprint: 0xfecd2aa1
## Coefficient statistics:
##   Matrix range     [3e+00, 4e+01]
##   Objective range  [1e+01, 8e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [5e+00, 7e+00]
## Presolve time: 0.00s
## Presolved: 2 rows, 2 columns, 4 nonzeros
## 
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    0.0000000e+00   1.500000e+00   0.000000e+00      0s
##        2    1.6556604e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 2 iterations and 0.00 seconds
## Optimal objective  1.655660377e+01
## [1] &amp;quot;DSB Objective Value and New Lower bound: 16.5566037735849&amp;quot;
## [1] &amp;quot;Value of u: 0.202830188679245&amp;quot;  &amp;quot;Value of u: 0.0330188679245282&amp;quot;
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 4 columns and 5 nonzeros
## Model fingerprint: 0xc19f21b7
## Variable types: 1 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [7e-01, 3e+00]
##   Objective range  [1e+00, 1e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+01, 2e+01]
## Found heuristic solution: objective 18.0000000
## Presolve removed 1 rows and 1 columns
## Presolve time: 0.00s
## Presolved: 1 rows, 3 columns, 3 nonzeros
## Variable types: 0 continuous, 3 integer (0 binary)
## 
## Root relaxation: objective 6.750000e+01, 1 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
##      0     0   67.50000    0    1   18.00000   67.50000   275%     -    0s
## H    0     0                      67.0000000   67.50000  0.75%     -    0s
##      0     0   67.50000    0    1   67.00000   67.50000  0.75%     -    0s
## 
## Explored 1 nodes (1 simplex iterations) in 0.01 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 2: 67 18 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 6.700000000000e+01, best bound 6.700000000000e+01, gap 0.0000%
## [1] &amp;quot;RMP Objective Value and New Upper bound: 67&amp;quot;
## [1] &amp;quot;Value of z: 0&amp;quot;
## [1] &amp;quot;Value of x: 0&amp;quot; &amp;quot;Value of x: 2&amp;quot; &amp;quot;Value of x: 5&amp;quot;
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 2 columns and 4 nonzeros
## Model fingerprint: 0xe467fd43
## Coefficient statistics:
##   Matrix range     [3e+00, 4e+01]
##   Objective range  [1e+00, 2e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [5e+00, 7e+00]
## Presolve removed 2 rows and 2 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0   -8.2857143e+29   0.000000e+00   1.657143e+00      0s
## Extra 2 simplex iterations after uncrush
## 
## Solved in 2 iterations and 0.00 seconds
## Unbounded model
## [1] &amp;quot;DSB Objective Value and New Lower bound: &amp;quot;
## [1] &amp;quot;Value of u: &amp;quot;
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 2 columns and 6 nonzeros
## Model fingerprint: 0x9e81c4c8
## Coefficient statistics:
##   Matrix range     [1e+00, 4e+01]
##   Objective range  [1e+00, 2e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [1e+00, 1e+00]
## Presolve removed 3 rows and 2 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0   -7.6315789e-01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective -7.631578947e-01
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 4 columns and 8 nonzeros
## Model fingerprint: 0x49b3021e
## Variable types: 1 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [2e-01, 4e+00]
##   Objective range  [1e+00, 1e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+01, 2e+01]
## Found heuristic solution: objective 18.0000000
## Presolve removed 1 rows and 1 columns
## Presolve time: 0.00s
## Presolved: 2 rows, 3 columns, 6 nonzeros
## Variable types: 0 continuous, 3 integer (0 binary)
## 
## Root relaxation: objective 6.750000e+01, 1 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
##      0     0   67.50000    0    1   18.00000   67.50000   275%     -    0s
## H    0     0                      58.0000000   67.50000  16.4%     -    0s
## 
## Cutting planes:
##   Gomory: 1
##   MIR: 1
## 
## Explored 1 nodes (1 simplex iterations) in 0.00 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 2: 58 18 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 5.800000000000e+01, best bound 5.800000000000e+01, gap 0.0000%
## [1] &amp;quot;RMP Objective Value and New Upper bound: 58&amp;quot;
## [1] &amp;quot;Value of z: 0&amp;quot;
## [1] &amp;quot;Value of x: 1&amp;quot; &amp;quot;Value of x: 4&amp;quot; &amp;quot;Value of x: 4&amp;quot;
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 2 columns and 4 nonzeros
## Model fingerprint: 0xb674b004
## Coefficient statistics:
##   Matrix range     [3e+00, 4e+01]
##   Objective range  [1e+00, 7e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [5e+00, 7e+00]
## Presolve time: 0.00s
## 
## Solved in 0 iterations and 0.00 seconds
## Infeasible or unbounded model
## [1] &amp;quot;DSB Objective Value and New Lower bound: &amp;quot;
## [1] &amp;quot;Value of u: &amp;quot;
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 2 columns and 6 nonzeros
## Model fingerprint: 0x56bfae6b
## Coefficient statistics:
##   Matrix range     [1e+00, 4e+01]
##   Objective range  [1e+00, 7e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [1e+00, 1e+00]
## Presolve removed 3 rows and 2 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0   -1.0000000e+00   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective -1.000000000e+00
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 4 rows, 4 columns and 11 nonzeros
## Model fingerprint: 0x671586c2
## Variable types: 1 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [2e-01, 1e+01]
##   Objective range  [1e+00, 1e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+01, 8e+01]
## Found heuristic solution: objective 18.0000000
## Presolve removed 1 rows and 1 columns
## Presolve time: 0.00s
## Presolved: 3 rows, 3 columns, 9 nonzeros
## Variable types: 0 continuous, 3 integer (0 binary)
## 
## Root relaxation: objective 6.750000e+01, 1 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
##      0     0   67.50000    0    1   18.00000   67.50000   275%     -    0s
## H    0     0                      57.0000000   67.50000  18.4%     -    0s
## H    0     0                      58.0000000   67.50000  16.4%     -    0s
## 
## Cutting planes:
##   Gomory: 1
##   MIR: 1
## 
## Explored 1 nodes (1 simplex iterations) in 0.00 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 3: 58 57 18 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 5.800000000000e+01, best bound 5.800000000000e+01, gap 0.0000%
## [1] &amp;quot;RMP Objective Value and New Upper bound: 58&amp;quot;
## [1] &amp;quot;Value of z: 0&amp;quot;
## [1] &amp;quot;Value of x: 0&amp;quot; &amp;quot;Value of x: 6&amp;quot; &amp;quot;Value of x: 4&amp;quot;
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 2 columns and 4 nonzeros
## Model fingerprint: 0x5530e933
## Coefficient statistics:
##   Matrix range     [3e+00, 4e+01]
##   Objective range  [1e+01, 1e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [5e+00, 7e+00]
## Presolve removed 2 rows and 2 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    0.0000000e+00   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  0.000000000e+00
## [1] &amp;quot;DSB Objective Value and New Lower bound: 58&amp;quot;
## [1] &amp;quot;Value of u: 0.208333333333333&amp;quot; &amp;quot;Value of u: 0&amp;quot;                
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 5 rows, 4 columns and 15 nonzeros
## Model fingerprint: 0xd390add2
## Variable types: 1 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [2e-01, 1e+01]
##   Objective range  [1e+00, 1e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+01, 8e+01]
## Found heuristic solution: objective 18.0000000
## Presolve removed 2 rows and 1 columns
## Presolve time: 0.00s
## Presolved: 3 rows, 3 columns, 9 nonzeros
## Variable types: 0 continuous, 3 integer (0 binary)
## 
## Root relaxation: objective 6.750000e+01, 1 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
##      0     0   67.50000    0    1   18.00000   67.50000   275%     -    0s
## H    0     0                      57.0000000   67.50000  18.4%     -    0s
## H    0     0                      58.0000000   67.50000  16.4%     -    0s
## 
## Cutting planes:
##   Gomory: 1
##   MIR: 1
## 
## Explored 1 nodes (1 simplex iterations) in 0.00 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 3: 58 57 18 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 5.800000000000e+01, best bound 5.800000000000e+01, gap 0.0000%
## [1] &amp;quot;RMP Objective Value and New Upper bound: 58&amp;quot;
## [1] &amp;quot;Value of z: 0&amp;quot;
## [1] &amp;quot;Value of x: 0&amp;quot; &amp;quot;Value of x: 6&amp;quot; &amp;quot;Value of x: 4&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Column Generation Algorithm
#Cutting Stock Problem
#minimize number of rods used (x). Satisfy demand for 44 81 cm pieces, 3 70 cm pieces, and 48 68 cm pieces
#min x1 + x2 + x3
#s.t. x1 &amp;gt;= 44; x2 &amp;gt;=3; x3 &amp;gt;= 48
#x &amp;gt;=0,


LMP &amp;lt;- list()

LMP$A          &amp;lt;- matrix(c(1,0,0,
                           0,1,0,
                           0,0,1), nrow=3, byrow=T)
LMP$obj        &amp;lt;- c(1,1,1)
LMP$modelsense &amp;lt;- &amp;#39;min&amp;#39;
LMP$rhs        &amp;lt;- c(44,3,48)
LMP$sense      &amp;lt;- c(&amp;#39;&amp;gt;&amp;#39;)

result &amp;lt;- gurobi(LMP)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 3 columns and 3 nonzeros
## Model fingerprint: 0xcd2bfab3
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Presolve removed 3 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    9.5000000e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  9.500000000e+01&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;k &amp;lt;- -1

while(k &amp;lt; 0){


KSP &amp;lt;- list()

KSP$A          &amp;lt;- matrix(c(81,70,68), nrow=1, byrow=T)
KSP$obj        &amp;lt;- result$pi
KSP$modelsense &amp;lt;- &amp;#39;max&amp;#39;
KSP$rhs        &amp;lt;- c(218)
KSP$sense      &amp;lt;- c(&amp;#39;&amp;lt;&amp;#39;)
KSP$vtype      &amp;lt;- c(&amp;#39;I&amp;#39;,&amp;#39;I&amp;#39;,&amp;#39;I&amp;#39;)

result &amp;lt;- gurobi(KSP)

k &amp;lt;- 1 - sum(result$x*KSP$obj)

B &amp;lt;- as.matrix(result$x)

LMP$A &amp;lt;- cbind(LMP$A,B)

LMP$obj &amp;lt;- c(LMP$obj,1)

result &amp;lt;- gurobi(LMP)

print(paste(&amp;#39;LMP Objective Value&amp;#39;, result$objval))

print(paste(&amp;#39;Sum of Reduced Cost:&amp;#39;, k))

print(LMP$A)

print(t(as.matrix(result$x)))

}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 3 columns and 3 nonzeros
## Model fingerprint: 0x72f1e20f
## Variable types: 0 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [7e+01, 8e+01]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+02, 2e+02]
## Found heuristic solution: objective 2.0000000
## Presolve removed 1 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 2: 3 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 4 columns and 4 nonzeros
## Model fingerprint: 0x4bac7a68
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Presolve removed 3 rows and 4 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    6.3000000e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  6.300000000e+01
## [1] &amp;quot;LMP Objective Value 63&amp;quot;
## [1] &amp;quot;Sum of Reduced Cost: -2&amp;quot;
##      [,1] [,2] [,3] [,4]
## [1,]    1    0    0    0
## [2,]    0    1    0    0
## [3,]    0    0    1    3
##      [,1] [,2] [,3] [,4]
## [1,]   44    3    0   16
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 3 columns and 3 nonzeros
## Model fingerprint: 0x5e04c92d
## Variable types: 0 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [7e+01, 8e+01]
##   Objective range  [3e-01, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+02, 2e+02]
## Found heuristic solution: objective 2.0000000
## Presolve removed 1 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 2: 3 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 5 columns and 5 nonzeros
## Model fingerprint: 0x46707112
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Presolve removed 3 rows and 5 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    6.1000000e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  6.100000000e+01
## [1] &amp;quot;LMP Objective Value 61&amp;quot;
## [1] &amp;quot;Sum of Reduced Cost: -2&amp;quot;
##      [,1] [,2] [,3] [,4] [,5]
## [1,]    1    0    0    0    0
## [2,]    0    1    0    0    3
## [3,]    0    0    1    3    0
##      [,1] [,2] [,3] [,4] [,5]
## [1,]   44    0    0   16    1
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 3 columns and 3 nonzeros
## Model fingerprint: 0x76f224a3
## Variable types: 0 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [7e+01, 8e+01]
##   Objective range  [3e-01, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+02, 2e+02]
## Found heuristic solution: objective 2.0000000
## Presolve removed 1 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 1: 2 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 6 columns and 6 nonzeros
## Model fingerprint: 0x461ec1df
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Presolve removed 3 rows and 6 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    3.9000000e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  3.900000000e+01
## [1] &amp;quot;LMP Objective Value 39&amp;quot;
## [1] &amp;quot;Sum of Reduced Cost: -1&amp;quot;
##      [,1] [,2] [,3] [,4] [,5] [,6]
## [1,]    1    0    0    0    0    2
## [2,]    0    1    0    0    3    0
## [3,]    0    0    1    3    0    0
##      [,1] [,2] [,3] [,4] [,5] [,6]
## [1,]    0    0    0   16    1   22
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 3 columns and 3 nonzeros
## Model fingerprint: 0x282e1563
## Variable types: 0 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [7e+01, 8e+01]
##   Objective range  [3e-01, 5e-01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+02, 2e+02]
## Found heuristic solution: objective 1.0000000
## Presolve removed 1 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 2: 1.16667 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 1.166666666667e+00, best bound 1.166666666667e+00, gap 0.0000%
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 7 columns and 8 nonzeros
## Model fingerprint: 0xaf053821
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Presolve removed 1 rows and 4 columns
## Presolve time: 0.00s
## Presolved: 2 rows, 3 columns, 4 nonzeros
## 
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    1.0000000e+00   3.400000e+01   0.000000e+00      0s
##        2    3.5000000e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 2 iterations and 0.00 seconds
## Optimal objective  3.500000000e+01
## [1] &amp;quot;LMP Objective Value 35&amp;quot;
## [1] &amp;quot;Sum of Reduced Cost: -0.166666666666667&amp;quot;
##      [,1] [,2] [,3] [,4] [,5] [,6] [,7]
## [1,]    1    0    0    0    0    2    1
## [2,]    0    1    0    0    3    0    0
## [3,]    0    0    1    3    0    0    2
##      [,1] [,2] [,3] [,4] [,5] [,6] [,7]
## [1,]    0    0    0    0    1   10   24
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 3 columns and 3 nonzeros
## Model fingerprint: 0x4b9369e0
## Variable types: 0 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [7e+01, 8e+01]
##   Objective range  [3e-01, 5e-01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+02, 2e+02]
## Found heuristic solution: objective 1.0000000
## Presolve removed 1 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 1: 1 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 8 columns and 9 nonzeros
## Model fingerprint: 0xebe33484
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Presolve removed 1 rows and 5 columns
## Presolve time: 0.00s
## Presolved: 2 rows, 3 columns, 4 nonzeros
## 
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    1.0000000e+00   3.400000e+01   0.000000e+00      0s
##        2    3.5000000e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 2 iterations and 0.00 seconds
## Optimal objective  3.500000000e+01
## [1] &amp;quot;LMP Objective Value 35&amp;quot;
## [1] &amp;quot;Sum of Reduced Cost: 0&amp;quot;
##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
## [1,]    1    0    0    0    0    2    1    2
## [2,]    0    1    0    0    3    0    0    0
## [3,]    0    0    1    3    0    0    2    0
##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
## [1,]    0    0    0    0    1   10   24    0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;LMP$vtype      &amp;lt;- rep(&amp;#39;I&amp;#39;, ncol(LMP$A))

result &amp;lt;- gurobi(LMP)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 8 columns and 9 nonzeros
## Model fingerprint: 0xe1a5582b
## Variable types: 0 continuous, 8 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Found heuristic solution: objective 35.0000000
## Presolve removed 1 rows and 5 columns
## Presolve time: 0.00s
## Presolved: 2 rows, 3 columns, 4 nonzeros
## Variable types: 0 continuous, 3 integer (0 binary)
## 
## Root relaxation: cutoff, 0 iterations, 0.00 seconds
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 1: 35 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 3.500000000000e+01, best bound 3.500000000000e+01, gap 0.0000%&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;Integer Objective Value&amp;#39;, result$objval))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Integer Objective Value 35&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;LMP$A&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
## [1,]    1    0    0    0    0    2    1    2
## [2,]    0    1    0    0    3    0    0    0
## [3,]    0    0    1    3    0    0    2    0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;t(as.matrix(result$x))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
## [1,]    0    0    0    0    1    0   24   10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add a new chunk by clicking the &lt;em&gt;Insert Chunk&lt;/em&gt; button on the toolbar or by pressing &lt;em&gt;Ctrl+Alt+I&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the &lt;em&gt;Preview&lt;/em&gt; button or press &lt;em&gt;Ctrl+Shift+K&lt;/em&gt; to preview the HTML file).&lt;/p&gt;
&lt;p&gt;The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike &lt;em&gt;Knit&lt;/em&gt;, &lt;em&gt;Preview&lt;/em&gt; does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quadratic Programming Examples and Algorithms</title>
      <link>/post/orie/qp_algorithms/</link>
      <pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/orie/qp_algorithms/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This post explores how to solve QPs by hand and with Gurobi.
I have written these using Gurobi as a solver and as the mathematical formulation software.
This is a reproducible example if you have R Studio just make sure you have installed the correct packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gurobi)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;gurobi&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tictoc)
library(Matrix)
library(ggplot2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;ggplot2&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#library(matlib)
library(MASS)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;MASS&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Gradient Descent a first order method &lt;span class=&#34;math inline&#34;&gt;\(x_{i+1} = x_i + \lambda*d/f(x)\)&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(-10:10)
fx1 &amp;lt;- x^2
xi &amp;lt;- 10
lambda &amp;lt;- 0.2
xit &amp;lt;- xi

fx &amp;lt;- xit^2
dfx &amp;lt;- 2*xit

gd &amp;lt;- data.frame(&amp;#39;x&amp;#39; = xit, &amp;#39;fx&amp;#39; = fx, &amp;#39;dfx&amp;#39; = dfx)



while(dfx &amp;lt; -10^-50 | dfx &amp;gt; 10^-50){
xit &amp;lt;- xit - lambda*dfx
fx &amp;lt;- xit^2
dfx &amp;lt;- 2*xit
gd &amp;lt;- rbind(gd, c(xit,fx,dfx))

}

head(gd)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         x          fx     dfx
## 1 10.0000 100.0000000 20.0000
## 2  6.0000  36.0000000 12.0000
## 3  3.6000  12.9600000  7.2000
## 4  2.1600   4.6656000  4.3200
## 5  1.2960   1.6796160  2.5920
## 6  0.7776   0.6046618  1.5552&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tail(gd)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                x            fx          dfx
## 228 4.368515e-50  1.908392e-99 8.737030e-50
## 229 2.621109e-50 6.870213e-100 5.242218e-50
## 230 1.572665e-50 2.473277e-100 3.145331e-50
## 231 9.435993e-51 8.903795e-101 1.887199e-50
## 232 5.661596e-51 3.205366e-101 1.132319e-50
## 233 3.396957e-51 1.153932e-101 6.793915e-51&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qplot(x = x, y = fx1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/QP_algorithms_files/figure-html/gradient_descent_example-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qplot(x,fx, data = gd)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/QP_algorithms_files/figure-html/gradient_descent_example-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;standard form for quadratics&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(min\: z; z = -8x_1-16x_2+x_1^2+4x_2^2\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;s.t.
&lt;span class=&#34;math inline&#34;&gt;\(x_1 + x_2 + x_3 = 5\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(x_1 + x_4 = 3\)&lt;/span&gt;
From Jensen and Bard Quadratic Solver notes in Book
Idea given A,b,c and intial value of x; find optimal x that minimizes c’*x&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;constr1 &amp;lt;- c(1,1,1,0)
constr2 &amp;lt;- c(1,0,0,1)


A &amp;lt;- rbind(constr1,constr2)

m &amp;lt;- nrow(A)
n &amp;lt;- ncol(A)


b &amp;lt;- matrix(c(5,3),nrow =m)
c &amp;lt;- matrix(c(-8,-16,0,0), nrow = n)
Q &amp;lt;- rbind(c(2,0,0,0),c(0,8,0,0),c(0,0,0,0),c(0,0,0,0))
#inital x values (xi) given by slacks = RHS
xi &amp;lt;- matrix(c(1,1,0.5,0.5), nrow =n)

m &amp;lt;- nrow(A)
n &amp;lt;- ncol(A)

I &amp;lt;- diag(n)
z1 &amp;lt;- matrix(rep(0,n*n), nrow = n)
z2 &amp;lt;- matrix(rep(0,m*m), nrow = m)
z3 &amp;lt;- matrix(rep(0,m*n), nrow = m)
y &amp;lt;- matrix(rep(1,m), nrow = n)
#The complimentary slackness modifier 1/t eventually goes to 0 as t &amp;gt;&amp;gt;&amp;gt;&amp;gt; inf
t &amp;lt;- 9
#Step size pretty much make it up
alpha &amp;lt;- 0.1
#mu*x = 0 in complemntariy slackness condition , mu &amp;gt;0 is dual condition mu correspond to dual variables, 
#using fancy vectors this gives Xd*mu = XM1 = 1/t where t &amp;gt;&amp;gt;&amp;gt;&amp;gt; inf 
x &amp;lt;- xi
mu &amp;lt;- x/t
mu_minus_c &amp;lt;- mu - c - Q%*%x
#Gives lagrangian multipliers for constraints
#Solving c+A*lamda-mu = 0 gives initial lambda
lambda &amp;lt;- ginv(t(A))%*%(mu_minus_c)


#combined vector having values of x, lambda, and mu useful when adding the search direction
w &amp;lt;- rbind(x, lambda, mu)


#This is the KKT condition stationarity, at optimality this derivative should  be 0,
#Using the lagrangian cx+lambda*Ax-mu &amp;gt;&amp;gt; c+A*lambda-mu
c_plus_tA &amp;lt;- Q%*%x+c+t(A)%*%lambda-mu

#This is the KKT condition primal feasiblity, this should always be 0 Ax-b=0 
A_times_x_minus_b &amp;lt;- A%*%x-b

#This is the modfied complimentary condtion XM1 -1/t = 0 X is the diag(x) and M is diag(mu) 1/t &amp;gt;&amp;gt;&amp;gt; 0 as t gets larger
x_times_mu_minus_y_over_t &amp;lt;- x*mu-y/t

#The right hand side of the search direction iteration given from the Newton-Raphson Method
#Combines the vectors above
B &amp;lt;- rbind(c_plus_tA,A_times_x_minus_b,x_times_mu_minus_y_over_t)

objective &amp;lt;- 0.5*t(x)%*%Q%*%x+t(c)%*%x
error &amp;lt;- norm(B,&amp;#39;2&amp;#39;)

iteration_list &amp;lt;- data.frame(&amp;#39;x1&amp;#39; = x[1], &amp;#39;x2&amp;#39; = x[2], &amp;#39;x3&amp;#39; = x[3], &amp;#39;x4&amp;#39; = x[4], &amp;#39;objective&amp;#39; = objective, &amp;#39;error&amp;#39; = error)

#loop



while(error &amp;gt; 10^-12){
t &amp;lt;- t*9

Xd = Diagonal(n = n, x)

Mud = Diagonal(n = n, mu) 


#The left hand side matrix of the search direction iteration, it containtes information from the A, x, and mu vectors and matricies of 1s or 0s to make the math make sense

C &amp;lt;- rbind(cbind(Q,t(A),-I),cbind(A,z2,z3), cbind(Mud,t(z3), Xd))

#The right hand side of the search direction iteration given from the Newton-Raphson Method
#This contains the objective function costs, the RHS values, as well as the A, x, and mu vectors. 
#It also has the complimentary condition represented by t
B &amp;lt;- rbind(Q%*%x+c+t(A)%*%lambda-mu,A%*%x-b,x*mu-y/t)


#solving the systems of equations with C and B gives the search direction as you move closer and closer to solving the complimentary condition in the KKT conditions
dw = solve(-C,B)


#update your w vector which is just a list of the x, mu, and lambda vectors using the search direction
w &amp;lt;- w + alpha*dw

x &amp;lt;- w[1:n]

lambda &amp;lt;- w[(n+1):(n+m)]

mu &amp;lt;- w[(n+m+1):length(w)]

#calculate the objective function from the x values and the error. Remember if this satisifies all the KKT conditions then the B vector will be 0.
objective &amp;lt;- 0.5*t(x)%*%Q%*%x+t(c)%*%x
error &amp;lt;- norm(B,&amp;#39;2&amp;#39;)
iteration_list &amp;lt;- rbind(iteration_list,c(x,objective,error))

}

head(iteration_list)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         x1       x2         x3         x4 objective    error
## 1 1.000000 1.000000 0.50000000 0.50000000 -19.00000 6.520410
## 2 1.269990 1.096877 0.38313300 0.38001002 -21.28452 6.520877
## 3 1.516786 1.183938 0.27427586 0.26821381 -23.16982 5.868998
## 4 1.734188 1.261642 0.18166935 0.17231180 -24.68541 5.282035
## 5 1.918400 1.330365 0.11098503 0.09745009 -25.87330 4.753769
## 6 2.066579 1.390789 0.06640714 0.04768647 -26.77733 4.278347&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tail(iteration_list)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     x1 x2           x3           x4 objective        error
## 278  3  2 3.020886e-08 5.122922e-16       -31 1.531109e-12
## 279  3  2 2.869842e-08 4.610630e-16       -31 1.377965e-12
## 280  3  2 2.726350e-08 4.149567e-16       -31 1.239794e-12
## 281  3  2 2.590032e-08 3.734610e-16       -31 1.115852e-12
## 282  3  2 2.460531e-08 3.361149e-16       -31 1.003790e-12
## 283  3  2 2.337504e-08 3.025034e-16       -31 9.038590e-13&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;standard form for quadratics
&lt;span class=&#34;math inline&#34;&gt;\(min \:z; z = 4x_1^2 + 4x_2^2 - 2x_1x_2 - 12x_1 - 72x_2 + 384\)&lt;/span&gt;
s.t.
&lt;span class=&#34;math inline&#34;&gt;\(2x_1 + x_2 + x_3 = 18\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(6x_1+ 5x_2 + x_4 = 60\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(2x_1 + 5x_2 + x_5 = 40\)&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Another example from http://fourier.eng.hmc.edu/e176/lectures/ch3/node19.html, but don&amp;#39;t have answers 



#Work out matricies in Wolfram Alpha

#Idea given A,b,c and intial value of x; find optimal x that minimizes c&amp;#39;*x

constr1 &amp;lt;- c(2,1,1,0,0)
constr2 &amp;lt;- c(6,5,0,1,0)
constr3 &amp;lt;- c(2,5,0,0,1)

A &amp;lt;- rbind(constr1,constr2, constr3)

b &amp;lt;- matrix(c(18,60,40),nrow =3)
c &amp;lt;- matrix(c(-8,-16,0,0,0), nrow = 5)
Q &amp;lt;- rbind(c(2,1,0,0,0),c(1,2,0,0,0),c(0,0,0,0,0),c(0,0,0,0,0),c(0,0,0,0,0))

rm(A,b,c,Q,constr1,constr2,constr3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add a new chunk by clicking the &lt;em&gt;Insert Chunk&lt;/em&gt; button on the toolbar or by pressing &lt;em&gt;Ctrl+Alt+I&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the &lt;em&gt;Preview&lt;/em&gt; button or press &lt;em&gt;Ctrl+Shift+K&lt;/em&gt; to preview the HTML file).&lt;/p&gt;
&lt;p&gt;The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike &lt;em&gt;Knit&lt;/em&gt;, &lt;em&gt;Preview&lt;/em&gt; does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gurboi&#39;s R Examples 2</title>
      <link>/post/orie/gurobi_examples2/</link>
      <pubDate>Mon, 06 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/orie/gurobi_examples2/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This post explores how to use Gurobi to solve more advanced LPs, MIPs, and QPs.
I have written these using Gurobi as a solver and as the mathematical formulation software.
This is a reproducible example if you have R Studio just make sure you have installed the correct packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gurobi)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;gurobi&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(Matrix)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example formulates and solves the following simple QP model:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(min: x^2 + xy + y^2 + yz + z^2 + 2 x\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;subject to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   $x + 2 y + 3z \geq 4$
   
   $x +   y      \geq 1$
   x, y, z non-negative&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model &amp;lt;- list()

model$A     &amp;lt;- matrix(c(1,2,3,1,1,0), nrow=2, byrow=T)
model$Q     &amp;lt;- matrix(c(1,0.5,0,0.5,1,0.5,0,0.5,1), nrow=3, byrow=T)
model$obj   &amp;lt;- c(2,0,0)
model$rhs   &amp;lt;- c(4,1)
model$sense &amp;lt;- c(&amp;#39;&amp;gt;&amp;#39;, &amp;#39;&amp;gt;&amp;#39;)

result &amp;lt;- gurobi(model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 3 columns and 5 nonzeros
## Model fingerprint: 0xe6f007c4
## Model has 5 quadratic objective terms
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [2e+00, 2e+00]
##   QObjective range [2e+00, 2e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [1e+00, 4e+00]
## Presolve time: 0.00s
## Presolved: 2 rows, 3 columns, 5 nonzeros
## Presolved model has 5 quadratic objective terms
## Ordering time: 0.00s
## 
## Barrier statistics:
##  Free vars  : 2
##  AA&amp;#39; NZ     : 6.000e+00
##  Factor NZ  : 1.000e+01
##  Factor Ops : 3.000e+01 (less than 1 second per iteration)
##  Threads    : 1
## 
##                   Objective                Residual
## Iter       Primal          Dual         Primal    Dual     Compl     Time
##    0   1.68862999e+05 -1.66862803e+05  1.50e+03 4.63e-07  9.99e+05     0s
##    1   3.32288030e+05 -3.31121401e+05  1.50e-03 4.55e-13  1.33e+05     0s
##    2   4.88215027e+04 -4.83744738e+04  1.50e-09 2.84e-14  1.94e+04     0s
##    3   7.20552197e+03 -7.03403484e+03  3.55e-14 1.42e-14  2.85e+03     0s
##    4   1.07582166e+03 -1.00982226e+03  1.78e-14 1.07e-14  4.17e+02     0s
##    5   1.65319400e+02 -1.39657698e+02  3.55e-15 3.55e-15  6.10e+01     0s
##    6   2.72141305e+01 -1.68504217e+01  1.33e-15 4.44e-16  8.81e+00     0s
##    7   5.34776479e+00 -4.13214640e-01  2.22e-16 2.22e-16  1.15e+00     0s
##    8   2.27046251e+00  2.04615758e+00  2.22e-16 4.44e-16  4.49e-02     0s
##    9   2.11217859e+00  2.11101837e+00  7.77e-15 1.67e-16  2.32e-04     0s
##   10   2.11111218e+00  2.11111102e+00  5.55e-16 3.29e-16  2.32e-07     0s
##   11   2.11111111e+00  2.11111111e+00  3.33e-15 3.33e-16  2.32e-10     0s
## 
## Barrier solved model in 11 iterations and 0.00 seconds
## Optimal objective 2.11111111e+00&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$objval)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2.111111&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3.584007e-10 1.000000e+00 6.666667e-01&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model$vtype &amp;lt;- c(&amp;#39;I&amp;#39;, &amp;#39;I&amp;#39;, &amp;#39;I&amp;#39;)

result &amp;lt;- gurobi(model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 3 columns and 5 nonzeros
## Model fingerprint: 0x2458258b
## Model has 5 quadratic objective terms
## Variable types: 0 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [2e+00, 2e+00]
##   QObjective range [2e+00, 2e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [1e+00, 4e+00]
## Found heuristic solution: objective 2.000000e+19
## Presolve time: 0.00s
## Presolved: 2 rows, 3 columns, 5 nonzeros
## Presolved model has 5 quadratic objective terms
## Variable types: 0 continuous, 3 integer (0 binary)
## 
## Root relaxation: objective 2.111111e+00, 5 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
##      0     0    2.11111    0    1 2.0000e+19    2.11111   100%     -    0s
## H    0     0                       3.0000000    2.11111  29.6%     -    0s
##      0     0    2.11111    0    1    3.00000    2.11111  29.6%     -    0s
## 
## Explored 1 nodes (5 simplex iterations) in 0.00 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 2: 3 2e+19 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$objval)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0 1 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Clear space
rm(model, result)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example formulates and solves the following simple QCP model:
&lt;span class=&#34;math inline&#34;&gt;\(max: x\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;subject to&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(x + y + z = 1\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(x^2 + y^2 \leq z^2\)&lt;/span&gt; (second-order cone)
$ x^2 yz$ (rotated second-order cone)
x, y, z non-negative&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model &amp;lt;- list()

model$A          &amp;lt;- matrix(c(1,1,1), nrow=1, byrow=T)
model$modelsense &amp;lt;- &amp;#39;max&amp;#39;
model$obj        &amp;lt;- c(1,0,0)
model$rhs        &amp;lt;- c(1)
model$sense      &amp;lt;- c(&amp;#39;=&amp;#39;)

# First quadratic constraint: x^2 + y^2 - z^2 &amp;lt;= 0
qc1 &amp;lt;- list()
qc1$Qc &amp;lt;- spMatrix(3, 3, c(1, 2, 3), c(1, 2, 3), c(1.0, 1.0, -1.0))
qc1$rhs &amp;lt;- 0.0

# Second quadratic constraint: x^2 - yz &amp;lt;= 0
qc2 &amp;lt;- list()
qc2$Qc &amp;lt;- spMatrix(3, 3, c(1, 2), c(1, 3), c(1.0, -1.0))
qc2$rhs &amp;lt;- 0.0

model$quadcon &amp;lt;- list(qc1, qc2)

result &amp;lt;- gurobi(model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 3 columns and 3 nonzeros
## Model fingerprint: 0x9bebabed
## Model has 2 quadratic constraints
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   QMatrix range    [1e+00, 1e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [1e+00, 1e+00]
## Presolve time: 0.00s
## Presolved: 6 rows, 6 columns, 13 nonzeros
## Presolved model has 2 second-order cone constraints
## Ordering time: 0.00s
## 
## Barrier statistics:
##  AA&amp;#39; NZ     : 1.500e+01
##  Factor NZ  : 2.100e+01
##  Factor Ops : 9.100e+01 (less than 1 second per iteration)
##  Threads    : 1
## 
##                   Objective                Residual
## Iter       Primal          Dual         Primal    Dual     Compl     Time
##    0   2.38095238e-01  2.38095238e-01  1.11e-16 4.33e-01  9.23e-02     0s
##    1   3.20481543e-01  3.62123302e-01  5.55e-17 1.39e-02  7.95e-03     0s
##    2   3.26649101e-01  3.28651430e-01  1.15e-14 5.44e-04  3.46e-04     0s
##    3   3.26797051e-01  3.27019441e-01  2.06e-13 5.98e-10  2.78e-05     0s
##    4   3.26990986e-01  3.26994814e-01  4.11e-13 3.45e-13  4.78e-07     0s
##    5   3.26992304e-01  3.26992876e-01  3.84e-11 2.82e-14  7.15e-08     0s
## 
## Barrier solved model in 5 iterations and 0.00 seconds
## Optimal objective 3.26992304e-01
## 
## Warning: to get QCP duals, please set parameter QCPDual to 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$objval)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.3269923&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.3269923 0.2570664 0.4159413&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Clear space
rm(model, result)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example considers the following separable, convex problem:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(min: f(x) - y + g(z)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;subject to&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(x + 2 y + 3 z \leq 4\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(x + y \geq 1\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(x, y, z \geq 0\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class=&#34;math inline&#34;&gt;\(f(u) = e^{-u} \text{ and} \: g(u) = 2 u^2 - 4u\: \forall \text{ real}\: u\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;It formulates and solves a simpler LP model by approximating f and
g with piecewise-linear functions. Then it transforms the model
into a MIP by negating the approximation for f, which gives
a non-convex piecewise-linear function, and solves it again.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gurobi)

model &amp;lt;- list()

model$A     &amp;lt;- matrix(c(1,2,3,1,1,0), nrow=2, byrow=T)
model$obj   &amp;lt;- c(0,-1,0)
model$ub    &amp;lt;- c(1,1,1)
model$rhs   &amp;lt;- c(4,1)
model$sense &amp;lt;- c(&amp;#39;&amp;lt;&amp;#39;, &amp;#39;&amp;gt;&amp;#39;)

# Uniformly spaced points in [0.0, 1.0]
u &amp;lt;- seq(from=0, to=1, by=0.01)

# First piecewise-linear function: f(x) = exp(-x)
pwl1     &amp;lt;- list()
pwl1$var &amp;lt;- 1
pwl1$x   &amp;lt;- u
pwl1$y   &amp;lt;- sapply(u, function(x) exp(-x))

# Second piecewise-linear function: g(z) = 2 z^2 - 4 z
pwl2     &amp;lt;- list()
pwl2$var &amp;lt;- 3
pwl2$x   &amp;lt;- u
pwl2$y   &amp;lt;- sapply(u, function(z) 2 * z * z - 4 * z)

model$pwlobj &amp;lt;- list(pwl1, pwl2)

result &amp;lt;- gurobi(model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 3 columns and 5 nonzeros
## Model fingerprint: 0xc12b5aad
## Model has 2 piecewise-linear objective terms
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [1e+00, 4e+00]
## Presolve time: 0.00s
## Presolved: 2 rows, 3 columns, 5 nonzeros
## 
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0   -2.6321206e+00   5.000000e-01   0.000000e+00      0s
##        2   -1.9346239e+00   0.000000e+00   0.000000e+00      0s
## 
## Solved in 2 iterations and 0.00 seconds
## Optimal objective -1.934623931e+00&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$objval)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -1.934624&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.690 0.725 0.620&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Negate piecewise-linear function on x, making it non-convex

model$pwlobj[[1]]$y &amp;lt;- sapply(u, function(x) -exp(-x))

result &amp;lt;- gurobi(model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 3 columns and 5 nonzeros
## Model fingerprint: 0x3229e670
## Model has 2 piecewise-linear objective terms
## Variable types: 3 continuous, 0 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [1e+00, 4e+00]
## Found heuristic solution: objective -1.3678794
## Presolve time: 0.00s
## Presolved: 202 rows, 302 columns, 603 nonzeros
## Variable types: 203 continuous, 99 integer (99 binary)
## 
## Root relaxation: objective -3.777733e+00, 1 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
## *    0     0               0      -3.7777333   -3.77773  0.00%     -    0s
## 
## Explored 0 nodes (1 simplex iterations) in 0.00 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 2: -3.77773 -1.36788 
## No other solutions better than -3.77773
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective -3.777733333333e+00, best bound -3.777733333333e+00, gap 0.0000%&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gurobi_write(model, &amp;quot;pwl.lp&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$objval)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -3.777733&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.0000000 1.0000000 0.6666667&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Clear space
rm(model, pwl1, pwl2, result)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Want to cover three different sets but subject to a common budget of
elements allowed to be used. However, the sets have different priorities to
be covered; and we tackle this by using multi-objective optimization.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# define primitive data
groundSetSize     &amp;lt;- 20
nSubSets          &amp;lt;- 4
Budget            &amp;lt;- 12
Set               &amp;lt;- list(
    c( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ),
    c( 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1 ),
    c( 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0 ),
    c( 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0 ) )
SetObjPriority    &amp;lt;- c(3, 2, 2, 1)
SetObjWeight      &amp;lt;- c(1.0, 0.25, 1.25, 1.0)

# Initialize model
model             &amp;lt;- list()
model$modelsense  &amp;lt;- &amp;#39;max&amp;#39;
model$modelname   &amp;lt;- &amp;#39;multiobj&amp;#39;

# Set variables, all of them are binary, with 0,1 bounds.
model$vtype       &amp;lt;- &amp;#39;B&amp;#39;
model$lb          &amp;lt;- 0
model$ub          &amp;lt;- 1
model$varnames    &amp;lt;- paste(rep(&amp;#39;El&amp;#39;, groundSetSize), 1:groundSetSize, sep=&amp;#39;&amp;#39;)

# Build constraint matrix
model$A           &amp;lt;- spMatrix(1, groundSetSize,
                              i = rep(1,groundSetSize),
                              j = 1:groundSetSize,
                              x = rep(1,groundSetSize))
model$rhs         &amp;lt;- c(Budget)
model$sense       &amp;lt;- c(&amp;#39;&amp;lt;&amp;#39;)
model$constrnames &amp;lt;- c(&amp;#39;Budget&amp;#39;)

# Set multi-objectives
model$multiobj          &amp;lt;- list()
for (m in 1:nSubSets) {
  model$multiobj[[m]]          &amp;lt;- list()
  model$multiobj[[m]]$objn     &amp;lt;- Set[[m]]
  model$multiobj[[m]]$priority &amp;lt;- SetObjPriority[m]
  model$multiobj[[m]]$weight   &amp;lt;- SetObjWeight[m]
  model$multiobj[[m]]$abstol   &amp;lt;- m
  model$multiobj[[m]]$reltol   &amp;lt;- 0.01
  model$multiobj[[m]]$name     &amp;lt;- sprintf(&amp;#39;Set%d&amp;#39;, m)
  model$multiobj[[m]]$con      &amp;lt;- 0.0
}

# Save model
gurobi_write(model,&amp;#39;multiobj_R.lp&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Set parameters
params               &amp;lt;- list()
params$PoolSolutions &amp;lt;- 100

# Optimize
result &amp;lt;- gurobi(model, params)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 20 columns and 20 nonzeros
## Model fingerprint: 0x28b3c9c7
## Variable types: 0 continuous, 20 integer (20 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [1e+01, 1e+01]
## 
## ---------------------------------------------------------------------------
## Multi-objectives: starting optimization with 4 objectives (3 combined) ...
## ---------------------------------------------------------------------------
## 
## Multi-objectives: applying initial presolve ...
## ---------------------------------------------------------------------------
## 
## Presolve time: 0.00s
## Presolved: 1 rows and 20 columns
## ---------------------------------------------------------------------------
## 
## Multi-objectives: optimize objective 1 (Set1) ...
## ---------------------------------------------------------------------------
## 
## Found heuristic solution: objective 10.0000000
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 1: 10 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 1.000000000000e+01, best bound 1.000000000000e+01, gap 0.0000%
## ---------------------------------------------------------------------------
## 
## Multi-objectives: optimize objective 2 (weighted) ...
## ---------------------------------------------------------------------------
## 
## 
## Loaded user MIP start with objective 6.25
## 
## Presolve removed 2 rows and 20 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 2: 10.5 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 1.050000000000e+01, best bound 1.050000000000e+01, gap 0.0000%
## ---------------------------------------------------------------------------
## 
## Multi-objectives: optimize objective 3 (Set4) ...
## ---------------------------------------------------------------------------
## 
## 
## Loaded user MIP start with objective 6
## 
## Presolve removed 3 rows and 20 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 2: 7 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 7.000000000000e+00, best bound 7.000000000000e+00, gap 0.0000%
## 
## ---------------------------------------------------------------------------
## Multi-objectives: solved in 0.00 seconds, solution count 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Capture solution information
if (result$status != &amp;#39;OPTIMAL&amp;#39;) {
  cat(&amp;#39;Optimization finished with status&amp;#39;, result$status, &amp;#39;\n&amp;#39;)
  stop(&amp;#39;Stop now\n&amp;#39;)
}

# Print best solution
cat(&amp;#39;Selected elements in best solution:\n&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Selected elements in best solution:&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;for (e in 1:groundSetSize) {
  if(result$x[e] &amp;lt; 0.9) next
  cat(&amp;#39; El&amp;#39;,e,sep=&amp;#39;&amp;#39;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  El2 El3 El4 El5 El6 El7 El8 El9 El10 El11 El12 El17&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cat(&amp;#39;\n&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Iterate over the best 10 solutions
if (&amp;#39;pool&amp;#39; %in% names(result)) {
  solcount &amp;lt;- length(result$pool)
  cat(&amp;#39;Number of solutions found:&amp;#39;, solcount, &amp;#39;\n&amp;#39;)
  if (solcount &amp;gt; 10) {
    solcount &amp;lt;- 10
  }
  cat(&amp;#39;Objective values for first&amp;#39;, solcount, &amp;#39;solutions:\n&amp;#39;)
  for (k in 1:solcount) {
    cat(&amp;#39;Solution&amp;#39;, k, &amp;#39;has objective:&amp;#39;, result$pool[[k]]$objval[1], &amp;#39;\n&amp;#39;)
  }
} else {
  solcount &amp;lt;- 1
  cat(&amp;#39;Number of solutions found:&amp;#39;, solcount, &amp;#39;\n&amp;#39;)
  cat(&amp;#39;Solution 1 has objective:&amp;#39;, result$objval, &amp;#39;\n&amp;#39;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Number of solutions found: 3 
## Objective values for first 3 solutions:
## Solution 1 has objective: 9 
## Solution 2 has objective: 9 
## Solution 3 has objective: 10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Clean up
rm(model, params, result)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assign workers to shifts; each worker may or may not be available on a
particular day. We use Pareto optimization to solve the model:
first, we minimize the linear sum of the slacks. Then, we constrain
the sum of the slacks, and we minimize a quadratic objective that
tries to balance the workload among the workers.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# define data
nShifts       &amp;lt;- 14
nWorkers      &amp;lt;-  7
nVars         &amp;lt;- (nShifts + 1) * (nWorkers + 1) + nWorkers + 1
varIdx        &amp;lt;- function(w,s) {s+(w-1)*nShifts}
shiftSlackIdx &amp;lt;- function(s) {s+nShifts*nWorkers}
totShiftIdx   &amp;lt;- function(w) {w + nShifts * (nWorkers+1)}
avgShiftIdx   &amp;lt;- ((nShifts+1)*(nWorkers+1))
diffShiftIdx  &amp;lt;- function(w) {w + avgShiftIdx}
totalSlackIdx &amp;lt;- nVars


Shifts  &amp;lt;- c(&amp;#39;Mon1&amp;#39;, &amp;#39;Tue2&amp;#39;, &amp;#39;Wed3&amp;#39;, &amp;#39;Thu4&amp;#39;, &amp;#39;Fri5&amp;#39;, &amp;#39;Sat6&amp;#39;, &amp;#39;Sun7&amp;#39;,
             &amp;#39;Mon8&amp;#39;, &amp;#39;Tue9&amp;#39;, &amp;#39;Wed10&amp;#39;, &amp;#39;Thu11&amp;#39;, &amp;#39;Fri12&amp;#39;, &amp;#39;Sat13&amp;#39;, &amp;#39;Sun14&amp;#39;)
Workers &amp;lt;- c( &amp;#39;Amy&amp;#39;, &amp;#39;Bob&amp;#39;, &amp;#39;Cathy&amp;#39;, &amp;#39;Dan&amp;#39;, &amp;#39;Ed&amp;#39;, &amp;#39;Fred&amp;#39;, &amp;#39;Gu&amp;#39; )

shiftRequirements &amp;lt;- c(3, 2, 4, 4, 5, 6, 5, 2, 2, 3, 4, 6, 7, 5 )

availability &amp;lt;- list( c( 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1 ),
                      c( 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0 ),
                      c( 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 ),
                      c( 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1 ),
                      c( 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1 ),
                      c( 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1 ),
                      c( 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ) )

# Function to display results
solveandprint &amp;lt;- function(model, env) {
  result &amp;lt;- gurobi(model, env = env)
  if(result$status == &amp;#39;OPTIMAL&amp;#39;) {
    cat(&amp;#39;The optimal objective is&amp;#39;,result$objval,&amp;#39;\n&amp;#39;)
    cat(&amp;#39;Schedule:\n&amp;#39;)
    for (s in 1:nShifts) {
      cat(&amp;#39;\t&amp;#39;,Shifts[s],&amp;#39;:&amp;#39;)
      for (w in 1:nWorkers) {
        if (result$x[varIdx(w,s)] &amp;gt; 0.9) cat(Workers[w],&amp;#39; &amp;#39;)
      }
      cat(&amp;#39;\n&amp;#39;)
    }
    cat(&amp;#39;Workload:\n&amp;#39;)
    for (w in 1:nWorkers) {
      cat(&amp;#39;\t&amp;#39;,Workers[w],&amp;#39;:&amp;#39;,result$x[totShiftIdx(w)],&amp;#39;\n&amp;#39;)
    }
  } else {
    cat(&amp;#39;Optimization finished with status&amp;#39;,result$status)
  }
  result
}

# Set-up environment
env &amp;lt;- list()
env$logfile &amp;lt;- &amp;#39;workforce4.log&amp;#39;

# Build model
model            &amp;lt;- list()
model$modelname  &amp;lt;- &amp;#39;workforce4&amp;#39;
model$modelsense &amp;lt;- &amp;#39;min&amp;#39;

# Initialize assignment decision variables:
#    x[w][s] == 1 if worker w is assigned to shift s.
#    This is no longer a pure assignment model, so we must
#    use binary variables.
model$vtype    &amp;lt;- rep(&amp;#39;C&amp;#39;, nVars)
model$lb       &amp;lt;- rep(0, nVars)
model$ub       &amp;lt;- rep(1, nVars)
model$obj      &amp;lt;- rep(0, nVars)
model$varnames &amp;lt;- rep(&amp;#39;&amp;#39;,nVars)
for (w in 1:nWorkers) {
  for (s in 1:nShifts) {
    model$vtype[varIdx(w,s)]    = &amp;#39;B&amp;#39;
    model$varnames[varIdx(w,s)] = paste0(Workers[w],&amp;#39;.&amp;#39;,Shifts[s])
    if (availability[[w]][s] == 0) model$ub[varIdx(w,s)] = 0
  }
}

# Initialize shift slack variables
for (s in 1:nShifts) {
  model$varnames[shiftSlackIdx(s)] = paste0(&amp;#39;ShiftSlack&amp;#39;,Shifts[s])
  model$ub[shiftSlackIdx(s)] = Inf
}

# Initialize worker slack and diff variables
for (w in 1:nWorkers) {
  model$varnames[totShiftIdx(w)] = paste0(&amp;#39;TotalShifts&amp;#39;,Workers[w])
  model$ub[totShiftIdx(w)]       = Inf
  model$varnames[diffShiftIdx(w)]  = paste0(&amp;#39;DiffShifts&amp;#39;,Workers[w])
  model$ub[diffShiftIdx(w)]        = Inf
  model$lb[diffShiftIdx(w)]        = -Inf
}

#Initialize average shift variable
model$ub[avgShiftIdx]      = Inf
model$varnames[avgShiftIdx] = &amp;#39;AvgShift&amp;#39;

#Initialize total slack variable
model$ub[totalSlackIdx]      = Inf
model$varnames[totalSlackIdx] = &amp;#39;TotalSlack&amp;#39;
model$obj[totalSlackIdx]     = 1

# Set-up shift-requirements constraints
model$A           &amp;lt;- spMatrix(nShifts,nVars,
                      i = c(c(mapply(rep,1:nShifts,nWorkers)),
                            c(1:nShifts)),
                      j = c(mapply(varIdx,1:nWorkers,
                                 mapply(rep,1:nShifts,nWorkers)),
                            shiftSlackIdx(1:nShifts)),
                      x = rep(1,nShifts * (nWorkers+1)))
model$sense       &amp;lt;- rep(&amp;#39;=&amp;#39;,nShifts)
model$rhs         &amp;lt;- shiftRequirements
model$constrnames &amp;lt;- Shifts

# Set TotalSlack equal to the sum of each shift slack
B &amp;lt;- spMatrix(1, nVars,
        i = rep(1,nShifts+1),
        j = c(shiftSlackIdx(1:nShifts),totalSlackIdx),
        x = c(rep(1,nShifts),-1))
model$A           &amp;lt;- rbind(model$A, B)
model$rhs         &amp;lt;- c(model$rhs,0)
model$sense       &amp;lt;- c(model$sense,&amp;#39;=&amp;#39;)
model$constrnames &amp;lt;- c(model$constrnames, &amp;#39;TotalSlack&amp;#39;)

# Set total number of shifts for each worker
B &amp;lt;- spMatrix(nWorkers, nVars,
          i = c(mapply(rep,1:nWorkers,nShifts),
                1:nWorkers),
          j = c(mapply(varIdx,c(mapply(rep,1:nWorkers,nShifts)),1:nShifts),
                totShiftIdx(1:nWorkers)),
          x = c(rep(1,nShifts*nWorkers),rep(-1,nWorkers)))
model$A           &amp;lt;- rbind(model$A, B)
model$rhs         &amp;lt;- c(model$rhs,rep(0,nWorkers))
model$sense       &amp;lt;- c(model$sense,rep(&amp;#39;=&amp;#39;,nWorkers))
model$constrnames &amp;lt;- c(model$constrnames, sprintf(&amp;#39;TotalShifts%s&amp;#39;,Workers[1:nWorkers]))

# Save initial model
gurobi_write(model,&amp;#39;workforce4.lp&amp;#39;, env)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Optimize
result &amp;lt;- solveandprint(model, env)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 22 rows, 128 columns and 232 nonzeros
## Model fingerprint: 0x78ab1a9c
## Variable types: 30 continuous, 98 integer (98 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [2e+00, 7e+00]
## Found heuristic solution: objective 58.0000000
## Presolve removed 22 rows and 128 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 2: 6 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 6.000000000000e+00, best bound 6.000000000000e+00, gap 0.0000%
## The optimal objective is 6 
## Schedule:
##   Mon1 :Bob  Fred  Gu  
##   Tue2 :Amy  Ed  
##   Wed3 :Amy  Cathy  Fred  Gu  
##   Thu4 :Cathy  Ed  
##   Fri5 :Amy  Bob  Cathy  Ed  Gu  
##   Sat6 :Bob  Dan  Fred  Gu  
##   Sun7 :Amy  Cathy  Ed  Gu  
##   Mon8 :Fred  Gu  
##   Tue9 :Amy  Ed  
##   Wed10 :Amy  Cathy  Gu  
##   Thu11 :Amy  Dan  Ed  Gu  
##   Fri12 :Amy  Cathy  Dan  Fred  Gu  
##   Sat13 :Amy  Bob  Cathy  Dan  Ed  Fred  Gu  
##   Sun14 :Amy  Cathy  Dan  Fred  Gu  
## Workload:
##   Amy : 10 
##   Bob : 4 
##   Cathy : 8 
##   Dan : 5 
##   Ed : 7 
##   Fred : 7 
##   Gu : 11&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (result$status != &amp;#39;OPTIMAL&amp;#39;) stop(&amp;#39;Stop now\n&amp;#39;)

# Constraint the slack by setting its upper and lower bounds
totalSlack &amp;lt;- result$x[totalSlackIdx]
model$lb[totalSlackIdx] = totalSlack
model$ub[totalSlackIdx] = totalSlack

# Link average number of shifts worked and difference with average
B &amp;lt;- spMatrix(nWorkers+1, nVars,
        i = c(1:nWorkers,
              1:nWorkers,
              1:nWorkers,
              rep(nWorkers+1,nWorkers+1)),
        j = c(totShiftIdx(1:nWorkers),
              diffShiftIdx(1:nWorkers),
              rep(avgShiftIdx,nWorkers),
              totShiftIdx(1:nWorkers),avgShiftIdx),
        x = c(rep(1, nWorkers),
              rep(-1,nWorkers),
              rep(-1,nWorkers),
              rep(1,nWorkers),-nWorkers))
model$A           &amp;lt;- rbind(model$A, B)
model$rhs         &amp;lt;- c(model$rhs,rep(0,nWorkers+1))
model$sense       &amp;lt;- c(model$sense,rep(&amp;#39;=&amp;#39;,nWorkers+1))
model$constrnames &amp;lt;- c(model$constrnames,
                       sprintf(&amp;#39;DiffShifts%s&amp;#39;,Workers[1:nWorkers]),
                       &amp;#39;AvgShift&amp;#39;)

# Objective: minimize the sum of the square of the difference from the
# average number of shifts worked
model$obj &amp;lt;- 0
model$Q   &amp;lt;- spMatrix(nVars,nVars,
                i = c(diffShiftIdx(1:nWorkers)),
                j = c(diffShiftIdx(1:nWorkers)),
                x = rep(1,nWorkers))

# Save modified model
gurobi_write(model,&amp;#39;workforce4b.lp&amp;#39;, env)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Optimize
result &amp;lt;- solveandprint(model, env)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 30 rows, 128 columns and 261 nonzeros
## Model fingerprint: 0x377bf6f1
## Model has 7 quadratic objective terms
## Variable types: 30 continuous, 98 integer (98 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 7e+00]
##   Objective range  [0e+00, 0e+00]
##   QObjective range [2e+00, 2e+00]
##   Bounds range     [1e+00, 6e+00]
##   RHS range        [2e+00, 7e+00]
## Found heuristic solution: objective 37.7142857
## Presolve removed 6 rows and 63 columns
## Presolve time: 0.00s
## Presolved: 24 rows, 65 columns, 136 nonzeros
## Presolved model has 7 quadratic objective terms
## Variable types: 7 continuous, 58 integer (50 binary)
## 
## Root relaxation: objective 2.142857e-01, 219 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
## H    0     0                      25.7142857    0.00000   100%     -    0s
##      0     0    0.21429    0   12   25.71429    0.21429  99.2%     -    0s
## H    0     0                       3.7142857    0.21429  94.2%     -    0s
## H    0     0                       1.7142857    0.21429  87.5%     -    0s
##      0     0    0.21429    0   12    1.71429    0.21429  87.5%     -    0s
##      0     2    0.21429    0   12    1.71429    0.21429  87.5%     -    0s
## 
## Explored 19 nodes (273 simplex iterations) in 0.04 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 4: 1.71429 3.71429 25.7143 37.7143 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 1.714285714286e+00, best bound 1.714285714286e+00, gap 0.0000%
## The optimal objective is 1.714286 
## Schedule:
##   Mon1 :Bob  Ed  Fred  
##   Tue2 :Bob  Fred  
##   Wed3 :Amy  Cathy  Dan  Ed  
##   Thu4 :Cathy  Ed  
##   Fri5 :Bob  Cathy  Dan  Ed  Gu  
##   Sat6 :Bob  Dan  Fred  Gu  
##   Sun7 :Amy  Cathy  Ed  Gu  
##   Mon8 :Bob  Cathy  
##   Tue9 :Amy  Fred  
##   Wed10 :Amy  Dan  Gu  
##   Thu11 :Bob  Dan  Ed  Gu  
##   Fri12 :Amy  Cathy  Dan  Fred  Gu  
##   Sat13 :Amy  Bob  Cathy  Dan  Ed  Fred  Gu  
##   Sun14 :Amy  Cathy  Ed  Fred  Gu  
## Workload:
##   Amy : 7 
##   Bob : 7 
##   Cathy : 8 
##   Dan : 7 
##   Ed : 8 
##   Fred : 7 
##   Gu : 8&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (result$status != &amp;#39;OPTIMAL&amp;#39;) stop(&amp;#39;Stop now\n&amp;#39;)

#Clear space
rm(model, env, availability, Shifts, Workers, shiftRequirements, result)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Assign workers to shifts; each worker may or may not be available on a
# particular day. We use multi-objective optimization to solve the model.
# The highest-priority objective minimizes the sum of the slacks
# (i.e., the total number of uncovered shifts). The secondary objective
# minimizes the difference between the maximum and minimum number of
# shifts worked among all workers.  The second optimization is allowed
# to degrade the first objective by up to the smaller value of 10% and 2



# define data
nShifts       &amp;lt;- 14
nWorkers      &amp;lt;-  8
nVars         &amp;lt;- (nShifts + 1) * (nWorkers + 1) + 2
varIdx        &amp;lt;- function(w,s) {s+(w-1)*nShifts}
shiftSlackIdx &amp;lt;- function(s) {s+nShifts*nWorkers}
totShiftIdx   &amp;lt;- function(w) {w + nShifts * (nWorkers+1)}
minShiftIdx   &amp;lt;- ((nShifts+1)*(nWorkers+1))
maxShiftIdx   &amp;lt;- (minShiftIdx+1)
totalSlackIdx &amp;lt;- nVars


Shifts  &amp;lt;- c(&amp;#39;Mon1&amp;#39;, &amp;#39;Tue2&amp;#39;, &amp;#39;Wed3&amp;#39;, &amp;#39;Thu4&amp;#39;, &amp;#39;Fri5&amp;#39;, &amp;#39;Sat6&amp;#39;, &amp;#39;Sun7&amp;#39;,
             &amp;#39;Mon8&amp;#39;, &amp;#39;Tue9&amp;#39;, &amp;#39;Wed10&amp;#39;, &amp;#39;Thu11&amp;#39;, &amp;#39;Fri12&amp;#39;, &amp;#39;Sat13&amp;#39;, &amp;#39;Sun14&amp;#39;)
Workers &amp;lt;- c( &amp;#39;Amy&amp;#39;, &amp;#39;Bob&amp;#39;, &amp;#39;Cathy&amp;#39;, &amp;#39;Dan&amp;#39;, &amp;#39;Ed&amp;#39;, &amp;#39;Fred&amp;#39;, &amp;#39;Gu&amp;#39;, &amp;#39;Tobi&amp;#39; )

shiftRequirements &amp;lt;- c(3, 2, 4, 4, 5, 6, 5, 2, 2, 3, 4, 6, 7, 5 )

availability &amp;lt;- list( c( 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1 ),
                      c( 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0 ),
                      c( 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 ),
                      c( 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1 ),
                      c( 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1 ),
                      c( 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1 ),
                      c( 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1 ),
                      c( 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ) )

# Function to display results
solveandprint &amp;lt;- function(model, env) {
  result &amp;lt;- gurobi(model, env = env)
  if(result$status == &amp;#39;OPTIMAL&amp;#39;) {
    cat(&amp;#39;The optimal objective is&amp;#39;,result$objval,&amp;#39;\n&amp;#39;)
    cat(&amp;#39;Schedule:\n&amp;#39;)
    for (s in 1:nShifts) {
      cat(&amp;#39;\t&amp;#39;,Shifts[s],&amp;#39;:&amp;#39;)
      for (w in 1:nWorkers) {
        if (result$x[varIdx(w,s)] &amp;gt; 0.9) cat(Workers[w],&amp;#39; &amp;#39;)
      }
      cat(&amp;#39;\n&amp;#39;)
    }
    cat(&amp;#39;Workload:\n&amp;#39;)
    for (w in 1:nWorkers) {
      cat(&amp;#39;\t&amp;#39;,Workers[w],&amp;#39;:&amp;#39;,result$x[totShiftIdx(w)],&amp;#39;\n&amp;#39;)
    }
  } else {
    cat(&amp;#39;Optimization finished with status&amp;#39;,result$status)
  }
  result
}

# Set-up environment
env &amp;lt;- list()
env$logfile &amp;lt;- &amp;#39;workforce5.log&amp;#39;

# Build model
model            &amp;lt;- list()
model$modelname  &amp;lt;- &amp;#39;workforce5&amp;#39;
model$modelsense &amp;lt;- &amp;#39;min&amp;#39;

# Initialize assignment decision variables:
#    x[w][s] == 1 if worker w is assigned to shift s.
#    This is no longer a pure assignment model, so we must
#    use binary variables.
model$vtype    &amp;lt;- rep(&amp;#39;C&amp;#39;, nVars)
model$lb       &amp;lt;- rep(0, nVars)
model$ub       &amp;lt;- rep(1, nVars)
model$varnames &amp;lt;- rep(&amp;#39;&amp;#39;,nVars)
for (w in 1:nWorkers) {
  for (s in 1:nShifts) {
    model$vtype[varIdx(w,s)]    = &amp;#39;B&amp;#39;
    model$varnames[varIdx(w,s)] = paste0(Workers[w],&amp;#39;.&amp;#39;,Shifts[s])
    if (availability[[w]][s] == 0) model$ub[varIdx(w,s)] = 0
  }
}

# Initialize shift slack variables
for (s in 1:nShifts) {
  model$varnames[shiftSlackIdx(s)] = paste0(&amp;#39;ShiftSlack&amp;#39;,Shifts[s])
  model$ub[shiftSlackIdx(s)] = Inf
}

# Initialize worker slack and diff variables
for (w in 1:nWorkers) {
  model$varnames[totShiftIdx(w)] = paste0(&amp;#39;TotalShifts&amp;#39;,Workers[w])
  model$ub[totShiftIdx(w)]       = Inf
}

#Initialize min/max shift variables
model$ub[minShiftIdx]       = Inf
model$varnames[minShiftIdx] = &amp;#39;MinShift&amp;#39;
model$ub[maxShiftIdx]       = Inf
model$varnames[maxShiftIdx] = &amp;#39;MaxShift&amp;#39;

#Initialize total slack variable
model$ub[totalSlackIdx]      = Inf
model$varnames[totalSlackIdx] = &amp;#39;TotalSlack&amp;#39;

# Set-up shift-requirements constraints
model$A           &amp;lt;- spMatrix(nShifts,nVars,
                      i = c(c(mapply(rep,1:nShifts,nWorkers)),
                            c(1:nShifts)),
                      j = c(mapply(varIdx,1:nWorkers,
                                 mapply(rep,1:nShifts,nWorkers)),
                            shiftSlackIdx(1:nShifts)),
                      x = rep(1,nShifts * (nWorkers+1)))
model$sense       &amp;lt;- rep(&amp;#39;=&amp;#39;,nShifts)
model$rhs         &amp;lt;- shiftRequirements
model$constrnames &amp;lt;- Shifts

# Set TotalSlack equal to the sum of each shift slack
B &amp;lt;- spMatrix(1, nVars,
        i = rep(1,nShifts+1),
        j = c(shiftSlackIdx(1:nShifts),totalSlackIdx),
        x = c(rep(1,nShifts),-1))
model$A           &amp;lt;- rbind(model$A, B)
model$rhs         &amp;lt;- c(model$rhs,0)
model$sense       &amp;lt;- c(model$sense,&amp;#39;=&amp;#39;)
model$constrnames &amp;lt;- c(model$constrnames, &amp;#39;TotalSlack&amp;#39;)

# Set total number of shifts for each worker
B &amp;lt;- spMatrix(nWorkers, nVars,
          i = c(mapply(rep,1:nWorkers,nShifts),
                1:nWorkers),
          j = c(mapply(varIdx,c(mapply(rep,1:nWorkers,nShifts)),1:nShifts),
                totShiftIdx(1:nWorkers)),
          x = c(rep(1,nShifts*nWorkers),rep(-1,nWorkers)))
model$A           &amp;lt;- rbind(model$A, B)
model$rhs         &amp;lt;- c(model$rhs,rep(0,nWorkers))
model$sense       &amp;lt;- c(model$sense,rep(&amp;#39;=&amp;#39;,nWorkers))
model$constrnames &amp;lt;- c(model$constrnames, sprintf(&amp;#39;TotalShifts%s&amp;#39;,Workers[1:nWorkers]))

# Set minShift / maxShift general constraints
model$genconmin &amp;lt;- list(list(resvar = minShiftIdx,
                             vars   = c(totShiftIdx(1:nWorkers)),
                             name   = &amp;#39;MinShift&amp;#39;))
model$genconmax &amp;lt;- list(list(resvar = maxShiftIdx,
                             vars   = c(totShiftIdx(1:nWorkers)),
                             name   = &amp;#39;MaxShift&amp;#39;))

# Set multiobjective
model$multiobj &amp;lt;- list(1:2)
model$multiobj[[1]]          &amp;lt;- list()
model$multiobj[[1]]$objn     &amp;lt;- c(rep(0,nVars))
model$multiobj[[1]]$objn[totalSlackIdx] = 1
model$multiobj[[1]]$priority &amp;lt;- 2
model$multiobj[[1]]$weight   &amp;lt;- 1
model$multiobj[[1]]$abstol   &amp;lt;- 2
model$multiobj[[1]]$reltol   &amp;lt;- 0.1
model$multiobj[[1]]$name     &amp;lt;- &amp;#39;TotalSlack&amp;#39;
model$multiobj[[1]]$con      &amp;lt;- 0.0
model$multiobj[[2]]          &amp;lt;- list()
model$multiobj[[2]]$objn     &amp;lt;- c(rep(0,nVars))
model$multiobj[[2]]$objn[minShiftIdx] = -1
model$multiobj[[2]]$objn[maxShiftIdx] =  1
model$multiobj[[2]]$priority &amp;lt;- 1
model$multiobj[[2]]$weight   &amp;lt;- 1
model$multiobj[[2]]$abstol   &amp;lt;- 0
model$multiobj[[2]]$reltol   &amp;lt;- 0
model$multiobj[[2]]$name     &amp;lt;- &amp;#39;Fairness&amp;#39;
model$multiobj[[2]]$con      &amp;lt;- 0.0


# Save initial model
gurobi_write(model,&amp;#39;workforce5.lp&amp;#39;, env)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Optimize
result &amp;lt;- solveandprint(model, env)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 23 rows, 137 columns and 261 nonzeros
## Model fingerprint: 0xd347a5b4
## Model has 2 general constraints
## Variable types: 25 continuous, 112 integer (112 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [2e+00, 7e+00]
## 
## ---------------------------------------------------------------------------
## Multi-objectives: starting optimization with 2 objectives ... 
## ---------------------------------------------------------------------------
## 
## Multi-objectives: applying initial presolve ...
## ---------------------------------------------------------------------------
## 
## Presolve added 13 rows and 0 columns
## Presolve removed 0 rows and 3 columns
## Presolve time: 0.00s
## Presolved: 36 rows and 134 columns
## ---------------------------------------------------------------------------
## 
## Multi-objectives: optimize objective 1 (TotalSlack) ...
## ---------------------------------------------------------------------------
## 
## Presolve added 8 rows and 0 columns
## Presolve removed 0 rows and 20 columns
## Presolve time: 0.00s
## Presolved: 44 rows, 114 columns, 224 nonzeros
## Presolved model has 8 SOS constraint(s)
## Variable types: 18 continuous, 96 integer (81 binary)
## Found heuristic solution: objective 7.0000000
## Found heuristic solution: objective 6.0000000
## 
## Root relaxation: objective 3.000000e+00, 30 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
##      0     0    3.00000    0    4    6.00000    3.00000  50.0%     -    0s
## H    0     0                       3.0000000    3.00000  0.00%     -    0s
##      0     0    3.00000    0    4    3.00000    3.00000  0.00%     -    0s
## 
## Explored 1 nodes (30 simplex iterations) in 0.01 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 3: 3 6 7 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
## ---------------------------------------------------------------------------
## 
## Multi-objectives: optimize objective 2 (Fairness) ...
## ---------------------------------------------------------------------------
## 
## 
## Loaded user MIP start with objective 4
## 
## Presolve added 8 rows and 0 columns
## Presolve removed 0 rows and 10 columns
## Presolve time: 0.00s
## Presolved: 45 rows, 124 columns, 273 nonzeros
## Presolved model has 8 SOS constraint(s)
## Variable types: 18 continuous, 106 integer (81 binary)
## 
## Root relaxation: objective 0.000000e+00, 60 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
##      0     0    0.00000    0   19    4.00000    0.00000   100%     -    0s
## H    0     0                       1.0000000    0.00000   100%     -    0s
##      0     0    0.14286    0   21    1.00000    0.14286  85.7%     -    0s
##      0     0    0.14286    0   18    1.00000    0.14286  85.7%     -    0s
##      0     0    0.14286    0   16    1.00000    0.14286  85.7%     -    0s
##      0     2    0.14286    0   16    1.00000    0.14286  85.7%     -    0s
## 
## Explored 1213 nodes (4042 simplex iterations) in 0.16 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 3: 1 1 4 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
## 
## ---------------------------------------------------------------------------
## Multi-objectives: solved in 0.17 seconds, solution count 5
## 
## The optimal objective is 4 1 
## Schedule:
##   Mon1 :Bob  Ed  Fred  
##   Tue2 :Amy  Bob  
##   Wed3 :Amy  Dan  Gu  Tobi  
##   Thu4 :Cathy  Ed  Gu  
##   Fri5 :Amy  Bob  Cathy  Dan  Ed  
##   Sat6 :Bob  Dan  Fred  Gu  Tobi  
##   Sun7 :Amy  Cathy  Ed  Gu  Tobi  
##   Mon8 :Ed  Fred  
##   Tue9 :Cathy  Fred  
##   Wed10 :Cathy  Dan  Gu  
##   Thu11 :Bob  Cathy  Gu  Tobi  
##   Fri12 :Amy  Cathy  Dan  Fred  Tobi  
##   Sat13 :Amy  Bob  Dan  Ed  Fred  Tobi  
##   Sun14 :Amy  Dan  Ed  Fred  Gu  
## Workload:
##   Amy : 7 
##   Bob : 6 
##   Cathy : 7 
##   Dan : 7 
##   Ed : 7 
##   Fred : 7 
##   Gu : 7 
##   Tobi : 6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (result$status != &amp;#39;OPTIMAL&amp;#39;) stop(&amp;#39;Stop now\n&amp;#39;)

#Clear space
rm(model, env, availability, Shifts, Workers, shiftRequirements, result)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add a new chunk by clicking the &lt;em&gt;Insert Chunk&lt;/em&gt; button on the toolbar or by pressing &lt;em&gt;Ctrl+Alt+I&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the &lt;em&gt;Preview&lt;/em&gt; button or press &lt;em&gt;Ctrl+Shift+K&lt;/em&gt; to preview the HTML file).&lt;/p&gt;
&lt;p&gt;The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike &lt;em&gt;Knit&lt;/em&gt;, &lt;em&gt;Preview&lt;/em&gt; does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gurobi Basic LP/MIP Examples</title>
      <link>/post/orie/gurobi_examples/</link>
      <pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/orie/gurobi_examples/</guid>
      <description> 

&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This post explores how to use Gurobi to solve LPs and MIPs.
I have written these using Gurobi as a solver and as the mathematical formulation software.
This is a reproducible example if you have R Studio just make sure you have installed the correct packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gurobi)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;gurobi&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(Matrix)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example formulates and solves the following simple LP model:
&lt;span class=&#34;math inline&#34;&gt;\(max: x + 2y + 3z\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;subject to
&lt;span class=&#34;math inline&#34;&gt;\(x + y \leq 1\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(y + z \leq 1\)&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model &amp;lt;- list()

model$A          &amp;lt;- matrix(c(1,1,0,0,1,1), nrow=2, byrow=T)
model$obj        &amp;lt;- c(1,2,3)
model$modelsense &amp;lt;- &amp;#39;max&amp;#39;
model$rhs        &amp;lt;- c(1,1)
model$sense      &amp;lt;- c(&amp;#39;&amp;lt;&amp;#39;, &amp;#39;&amp;lt;&amp;#39;)

result &amp;lt;- gurobi(model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 3 columns and 4 nonzeros
## Model fingerprint: 0x39e2cde3
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 3e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [1e+00, 1e+00]
## Presolve removed 2 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    4.0000000e+00   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  4.000000000e+00&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$objval)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 0 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Second option for A - as a sparseMatrix (using the Matrix package)...

model$A &amp;lt;- spMatrix(2, 3, c(1, 1, 2, 2), c(1, 2, 2, 3), c(1, 1, 1, 1))

params &amp;lt;- list(Method=2, TimeLimit=100)

result &amp;lt;- gurobi(model, params)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 3 columns and 4 nonzeros
## Model fingerprint: 0x39e2cde3
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 3e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [1e+00, 1e+00]
## Presolve removed 2 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    4.0000000e+00   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  4.000000000e+00&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$objval)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 0 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Third option for A - as a sparse triplet matrix (using the slam package)...

model$A &amp;lt;- simple_triplet_matrix(c(1, 1, 2, 2), c(1, 2, 2, 3), c(1, 1, 1, 1))

params &amp;lt;- list(Method=3, TimeLimit=100)

result &amp;lt;- gurobi(model, params)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 3 columns and 4 nonzeros
## Model fingerprint: 0x39e2cde3
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 3e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [1e+00, 1e+00]
## Presolve removed 2 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    4.0000000e+00   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  4.000000000e+00&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$objval)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 0 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Clear space
rm(result, params, model)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example formulates and solves the following simple MIP model:
&lt;span class=&#34;math inline&#34;&gt;\(max: x + y + 2 z\)&lt;/span&gt;
subject to
&lt;span class=&#34;math inline&#34;&gt;\(x + 2 y + 3 z \leq 4\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(x + y \geq 1\)&lt;/span&gt;
x, y, z binary&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model &amp;lt;- list()

model$A          &amp;lt;- matrix(c(1,2,3,1,1,0), nrow=2, ncol=3, byrow=T)
model$obj        &amp;lt;- c(1,1,2)
model$modelsense &amp;lt;- &amp;#39;max&amp;#39;
model$rhs        &amp;lt;- c(4,1)
model$sense      &amp;lt;- c(&amp;#39;&amp;lt;&amp;#39;, &amp;#39;&amp;gt;&amp;#39;)
model$vtype      &amp;lt;- c(&amp;#39;B&amp;#39;,&amp;#39;B&amp;#39;,&amp;#39;B&amp;#39;)

params &amp;lt;- list(OutputFlag=0)

result &amp;lt;- gurobi(model, params)

print(&amp;#39;Solution:&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Solution:&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$objval)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 0 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Clear space
rm(model, result, params)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Solve the classic diet model, showing how to add constraints
# to an existing model.


# define primitive data
Categories      &amp;lt;- c(&amp;#39;calories&amp;#39;, &amp;#39;protein&amp;#39;, &amp;#39;fat&amp;#39;, &amp;#39;sodium&amp;#39;)
nCategories     &amp;lt;- length(Categories)
minNutrition    &amp;lt;- c(     1800 ,       91 ,    0 ,       0 )
maxNutrition    &amp;lt;- c(     2200 ,      Inf ,   65 ,    1779 )

Foods           &amp;lt;- c(&amp;#39;hamburger&amp;#39;, &amp;#39;chicken&amp;#39;, &amp;#39;hot dog&amp;#39;, &amp;#39;fries&amp;#39;, &amp;#39;macaroni&amp;#39;,
                     &amp;#39;pizza&amp;#39;, &amp;#39;salad&amp;#39;, &amp;#39;milk&amp;#39;, &amp;#39;ice cream&amp;#39;)
nFoods          &amp;lt;- length(Foods)
cost            &amp;lt;- c(2.49, 2.89, 1.50, 1.89, 2.09, 1.99, 2.49, 0.89, 1.59)
nutritionValues &amp;lt;- c( 410, 24, 26 ,  730,
                      420, 32, 10 , 1190,
                      560, 20, 32 , 1800,
                      380,  4, 19 ,  270,
                      320, 12, 10 ,  930,
                      320, 15, 12 ,  820,
                      320, 31, 12 , 1230,
                      100,  8, 2.5,  125,
                      330,  8, 10 ,  180 )

#Each constraint is basically the Nutrion = sum(food*nut/food)
#Could have just made nutrition the RHS, but it works as a bounded variable because you need both upper and lower and it shrinks the amount of equations
#Objective min cost of food

# Build model
model     &amp;lt;- list()
#spMatrix tells you where to put the non zero values in matrix i,j is the location and x are teh values for each pair
model$A   &amp;lt;- spMatrix(nCategories, nCategories + nFoods,
               i = c(mapply(rep,1:4,1+nFoods)),
               j = c(1, (nCategories+1):(nCategories+nFoods),
                     2, (nCategories+1):(nCategories+nFoods),
                     3, (nCategories+1):(nCategories+nFoods),
                     4, (nCategories+1):(nCategories+nFoods) ),
               x = c(-1.0, nutritionValues[1 + nCategories*(0:(nFoods-1))],
                     -1.0, nutritionValues[2 + nCategories*(0:(nFoods-1))],
                     -1.0, nutritionValues[3 + nCategories*(0:(nFoods-1))],
                     -1.0, nutritionValues[4 + nCategories*(0:(nFoods-1))] ))
model$obj         &amp;lt;- c(rep(0, nCategories), cost)
model$lb          &amp;lt;- c(minNutrition, rep(0, nFoods))
model$ub          &amp;lt;- c(maxNutrition, rep(Inf, nFoods))
model$varnames    &amp;lt;- c(Categories, Foods)
model$rhs         &amp;lt;- rep(0,nCategories)
model$sense       &amp;lt;- rep(&amp;#39;=&amp;#39;,nCategories)
model$constrnames &amp;lt;- Categories
model$modelname   &amp;lt;- &amp;#39;diet&amp;#39;
model$modelsense  &amp;lt;- &amp;#39;min&amp;#39;

# display results
printSolution &amp;lt;- function(model, res, nCategories, nFoods) {
  if (res$status == &amp;#39;OPTIMAL&amp;#39;) {
    cat(&amp;#39;\nCost: &amp;#39;,res$objval,&amp;#39;\nBuy:\n&amp;#39;)
    for (j in nCategories + 1:nFoods) {
      if (res$x[j] &amp;gt; 1e-4) {
        cat(format(model$varnames[j],justify=&amp;#39;left&amp;#39;,width=10),&amp;#39;:&amp;#39;,
            format(res$x[j],justify=&amp;#39;right&amp;#39;,width=10,nsmall=2),&amp;#39;\n&amp;#39;)
      }
    }
    cat(&amp;#39;\nNutrition:\n&amp;#39;)
    for (j in 1:nCategories) {
      cat(format(model$varnames[j],justify=&amp;#39;left&amp;#39;,width=10),&amp;#39;:&amp;#39;,
          format(res$x[j],justify=&amp;#39;right&amp;#39;,width=10,nsmall=2),&amp;#39;\n&amp;#39;)
    }
  } else {
    cat(&amp;#39;No solution\n&amp;#39;)
  }
}

# Optimize
res &amp;lt;- gurobi(model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 4 rows, 13 columns and 40 nonzeros
## Model fingerprint: 0xff20f824
## Coefficient statistics:
##   Matrix range     [1e+00, 2e+03]
##   Objective range  [9e-01, 3e+00]
##   Bounds range     [7e+01, 2e+03]
##   RHS range        [0e+00, 0e+00]
## Presolve removed 0 rows and 3 columns
## Presolve time: 0.00s
## Presolved: 4 rows, 10 columns, 37 nonzeros
## 
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    0.0000000e+00   1.472500e+02   0.000000e+00      0s
##        4    1.1828861e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 4 iterations and 0.00 seconds
## Optimal objective  1.182886111e+01&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;printSolution(model, res, nCategories, nFoods)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Cost:  11.82886 
## Buy:
## hamburger  :  0.6045139 
## milk       :   6.970139 
## ice cream  :   2.591319 
## 
## Nutrition:
## calories   :    1800.00 
## protein    :      91.00 
## fat        :    59.0559 
## sodium     :    1779.00&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Adding constraint: at most 6 servings of dairy
# this is the matrix part of the constraint
B &amp;lt;- spMatrix(1, nCategories + nFoods,
              i = rep(1,2),
              j = (nCategories+c(8,9)),
              x = rep(1,2))
# append B to A
model$A           &amp;lt;- rbind(model$A,       B)
# extend row-related vectors
model$constrnames &amp;lt;- c(model$constrnames, &amp;#39;limit_dairy&amp;#39;)
model$rhs         &amp;lt;- c(model$rhs,         10)
model$sense       &amp;lt;- c(model$sense,       &amp;#39;&amp;lt;&amp;#39;)

# Optimize
res &amp;lt;- gurobi(model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 5 rows, 13 columns and 42 nonzeros
## Model fingerprint: 0xc012cadd
## Coefficient statistics:
##   Matrix range     [1e+00, 2e+03]
##   Objective range  [9e-01, 3e+00]
##   Bounds range     [7e+01, 2e+03]
##   RHS range        [1e+01, 1e+01]
## Presolve removed 0 rows and 3 columns
## Presolve time: 0.00s
## Presolved: 5 rows, 10 columns, 39 nonzeros
## 
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    0.0000000e+00   1.472500e+02   0.000000e+00      0s
##        4    1.1828861e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 4 iterations and 0.00 seconds
## Optimal objective  1.182886111e+01&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;printSolution(model, res, nCategories, nFoods)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Cost:  11.82886 
## Buy:
## hamburger  :  0.6045139 
## milk       :   6.970139 
## ice cream  :   2.591319 
## 
## Nutrition:
## calories   :    1800.00 
## protein    :      91.00 
## fat        :    59.0559 
## sodium     :    1779.00&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Clear space
#rm(res, model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Facility Location Problem (MIP)

# define primitive data
nPlants     &amp;lt;- 5
nWarehouses &amp;lt;- 4
# Warehouse demand in thousands of units
Demand      &amp;lt;- c(15, 18, 14, 20)
# Plant capacity in thousands of units 
Capacity    &amp;lt;- c(20, 22, 17, 19, 18)
# Fixed costs for each plant 
FixedCosts  &amp;lt;- c( 12000, 15000, 17000, 13000, 16000)
# Transportation costs per thousand units 
TransCosts  &amp;lt;- c(4000, 2000, 3000, 2500, 4500,
                 2500, 2600, 3400, 3000, 4000,
                 1200, 1800, 2600, 4100, 3000,
                 2200, 2600, 3100, 3700, 3200 )

flowidx &amp;lt;- function(w, p) {nPlants * (w-1) + p}

# Build model
model &amp;lt;- list()
model$modelname &amp;lt;- &amp;#39;facility&amp;#39;
model$modelsense &amp;lt;- &amp;#39;min&amp;#39;

# initialize data for variables
model$lb       &amp;lt;- 0
model$ub       &amp;lt;- c(rep(1, nPlants),   rep(Inf, nPlants * nWarehouses))
model$vtype    &amp;lt;- c(rep(&amp;#39;B&amp;#39;, nPlants), rep(&amp;#39;C&amp;#39;, nPlants * nWarehouses))
model$obj      &amp;lt;- c(FixedCosts, TransCosts)
model$varnames &amp;lt;- c(paste0(rep(&amp;#39;Open&amp;#39;,nPlants),1:nPlants),
                    sprintf(&amp;#39;Trans%d,%d&amp;#39;,
                            c(mapply(rep,1:nWarehouses,nPlants)),
                            1:nPlants))

# build production constraint matrix
#uses custom functions to fill out matrix, a bit out my wheelhouse
A1 &amp;lt;- spMatrix(nPlants, nPlants, i = c(1:nPlants), j = (1:nPlants), x = -Capacity)
A2 &amp;lt;- spMatrix(nPlants, nPlants * nWarehouses,
               i = c(mapply(rep, 1:nPlants, nWarehouses)),
               j = mapply(flowidx,1:nWarehouses,c(mapply(rep,1:nPlants,nWarehouses))),
               x = rep(1, nWarehouses * nPlants))
A3 &amp;lt;- spMatrix(nWarehouses, nPlants)
A4 &amp;lt;- spMatrix(nWarehouses, nPlants * nWarehouses,
               i = c(mapply(rep, 1:nWarehouses, nPlants)),
               j = mapply(flowidx,c(mapply(rep,1:nWarehouses,nPlants)),1:nPlants),
               x = rep(1, nPlants * nWarehouses))
model$A           &amp;lt;- rbind(cbind(A1, A2), cbind(A3, A4))
model$rhs         &amp;lt;- c(rep(0, nPlants),   Demand)
model$sense       &amp;lt;- c(rep(&amp;#39;&amp;lt;&amp;#39;, nPlants), rep(&amp;#39;=&amp;#39;, nWarehouses))
model$constrnames &amp;lt;- c(sprintf(&amp;#39;Capacity%d&amp;#39;,1:nPlants),
                       sprintf(&amp;#39;Demand%d&amp;#39;,1:nWarehouses))

# Save model
gurobi_write(model,&amp;#39;facilityR.lp&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Guess at the starting point: close the plant with the highest fixed
# costs; open all others first open all plants
model$start &amp;lt;- c(rep(1,nPlants),rep(NA, nPlants * nWarehouses))

# find most expensive plant, and close it in mipstart
cat(&amp;#39;Initial guess:\n&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Initial guess:&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;worstidx &amp;lt;- which.max(FixedCosts)
model$start[worstidx] &amp;lt;- 0
cat(&amp;#39;Closing plant&amp;#39;,worstidx,&amp;#39;\n&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Closing plant 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# set parameters
params &amp;lt;- list()
params$method &amp;lt;- 2

# Optimize
res &amp;lt;- gurobi(model, params)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 9 rows, 25 columns and 45 nonzeros
## Model fingerprint: 0x36b45dc0
## Variable types: 20 continuous, 5 integer (5 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 2e+01]
##   Objective range  [1e+03, 2e+04]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [1e+01, 2e+01]
## 
## User MIP start produced solution with objective 210500 (0.01s)
## Loaded user MIP start with objective 210500
## 
## Presolve time: 0.00s
## Presolved: 9 rows, 25 columns, 45 nonzeros
## Variable types: 20 continuous, 5 integer (5 binary)
## Root barrier log...
## 
## Ordering time: 0.00s
## 
## Barrier statistics:
##  AA&amp;#39; NZ     : 2.000e+01
##  Factor NZ  : 4.500e+01
##  Factor Ops : 2.850e+02 (less than 1 second per iteration)
##  Threads    : 1
## 
##                   Objective                Residual
## Iter       Primal          Dual         Primal    Dual     Compl     Time
##    0   7.94290841e+05 -2.24842916e+05  7.25e+00 3.75e+03  2.69e+04     0s
##    1   2.34432856e+05  7.59319096e+04  1.78e-15 3.64e-12  3.17e+03     0s
##    2   2.10232015e+05  1.89880475e+05  8.88e-16 4.01e-12  4.07e+02     0s
##    3   2.00964341e+05  1.98582137e+05  9.77e-15 2.79e-12  4.76e+01     0s
##    4   1.99878036e+05  1.99804970e+05  2.46e-13 3.19e-12  1.46e+00     0s
##    5   1.99833638e+05  1.99832960e+05  3.14e-13 1.82e-12  1.36e-02     0s
##    6   1.99833333e+05  1.99833333e+05  1.47e-14 2.86e-12  1.39e-08     0s
##    7   1.99833333e+05  1.99833333e+05  7.10e-15 2.73e-12  1.39e-14     0s
## 
## Barrier solved model in 7 iterations and 0.01 seconds
## Optimal objective 1.99833333e+05
## 
## 
## Root relaxation: objective 1.998333e+05, 6 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
##      0     0 199833.333    0    1 210500.000 199833.333  5.07%     -    0s
##      0     0 200252.941    0    1 210500.000 200252.941  4.87%     -    0s
##      0     0 210500.000    0    1 210500.000 210500.000  0.00%     -    0s
## 
## Cutting planes:
##   Flow cover: 3
## 
## Explored 1 nodes (11 simplex iterations) in 0.01 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 1: 210500 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 2.105000000000e+05, best bound 2.105000000000e+05, gap 0.0000%&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Print solution
if (res$status == &amp;#39;OPTIMAL&amp;#39;) {
  cat(&amp;#39;\nTotal Costs:&amp;#39;,res$objval,&amp;#39;\nsolution:\n&amp;#39;)
  cat(&amp;#39;Facilities:&amp;#39;, model$varnames[which(res$x[1:nPlants]&amp;gt;1e-5)], &amp;#39;\n&amp;#39;)
  active &amp;lt;- nPlants + which(res$x[(nPlants+1):(nPlants*(nWarehouses+1))] &amp;gt; 1e-5)
  cat(&amp;#39;Flows: &amp;#39;)
  cat(sprintf(&amp;#39;%s=%g &amp;#39;,model$varnames[active], res$x[active]), &amp;#39;\n&amp;#39;)
  rm(active)
} else {
  cat(&amp;#39;No solution\n&amp;#39;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Total Costs: 210500 
## solution:
## Facilities: Open1 Open2 Open4 Open5 
## Flows: Trans1,2=14  Trans1,4=1  Trans2,4=18  Trans3,1=14  Trans4,1=6  Trans4,2=8  Trans4,5=6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Clear space
rm(res, model, params, A1, A2, A3, A4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Assign workers to shifts; each worker may or may not be available on a
# particular day. If the problem cannot be solved, use IIS iteratively to
# find all conflicting constraints.


# Function to display results
printsolution &amp;lt;- function(result) {
  if(result$status == &amp;#39;OPTIMAL&amp;#39;) {
    cat(&amp;#39;The optimal objective is&amp;#39;,result$objval,&amp;#39;\n&amp;#39;)
    cat(&amp;#39;Schedule:\n&amp;#39;)
    for (s in 1:nShifts) {
      cat(&amp;#39;\t&amp;#39;,Shifts[s],&amp;#39;:&amp;#39;)
      for (w in 1:nWorkers) {
        if (result$x[varIdx(w,s)] &amp;gt; 0.9) cat(Workers[w],&amp;#39; &amp;#39;)
      }
      cat(&amp;#39;\n&amp;#39;)
    }
  }
}

# define data
nShifts  &amp;lt;- 14
nWorkers &amp;lt;-  7
nVars    &amp;lt;- nShifts * nWorkers
varIdx   &amp;lt;- function(w,s) {s+(w-1)*nShifts}

Shifts  &amp;lt;- c(&amp;#39;Mon1&amp;#39;, &amp;#39;Tue2&amp;#39;, &amp;#39;Wed3&amp;#39;, &amp;#39;Thu4&amp;#39;, &amp;#39;Fri5&amp;#39;, &amp;#39;Sat6&amp;#39;, &amp;#39;Sun7&amp;#39;,
             &amp;#39;Mon8&amp;#39;, &amp;#39;Tue9&amp;#39;, &amp;#39;Wed10&amp;#39;, &amp;#39;Thu11&amp;#39;, &amp;#39;Fri12&amp;#39;, &amp;#39;Sat13&amp;#39;, &amp;#39;Sun14&amp;#39;)
Workers &amp;lt;- c( &amp;#39;Amy&amp;#39;, &amp;#39;Bob&amp;#39;, &amp;#39;Cathy&amp;#39;, &amp;#39;Dan&amp;#39;, &amp;#39;Ed&amp;#39;, &amp;#39;Fred&amp;#39;, &amp;#39;Gu&amp;#39; )

pay     &amp;lt;- c(10, 12, 10, 8, 8, 9, 11 )

shiftRequirements &amp;lt;- c(3, 2, 4, 4, 5, 6, 5, 2, 2, 3, 4, 6, 7, 5 )

availability &amp;lt;- list( c( 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1 ),
                      c( 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0 ),
                      c( 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 ),
                      c( 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1 ),
                      c( 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1 ),
                      c( 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1 ),
                      c( 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ) )

# Set-up environment
env &amp;lt;- list()
env$logfile &amp;lt;- &amp;#39;workforce2.log&amp;#39;

# Build model
model            &amp;lt;- list()
model$modelname  &amp;lt;- &amp;#39;workforce2&amp;#39;
model$modelsense &amp;lt;- &amp;#39;min&amp;#39;

# Initialize assignment decision variables:
#    x[w][s] == 1 if worker w is assigned
#    to shift s. Since an assignment model always produces integer
#    solutions, we use continuous variables and solve as an LP.
model$lb       &amp;lt;- 0
model$ub       &amp;lt;- rep(1, nVars)
model$obj      &amp;lt;- rep(0, nVars)
model$varnames &amp;lt;- rep(&amp;#39;&amp;#39;,nVars)
for (w in 1:nWorkers) {
  for (s in 1:nShifts) {
    model$varnames[varIdx(w,s)] = paste0(Workers[w],&amp;#39;.&amp;#39;,Shifts[s])
    model$obj[varIdx(w,s)]      = pay[w]
    if (availability[[w]][s] == 0) model$ub[varIdx(w,s)] = 0
  }
}

# Set-up shift-requirements constraints
model$A           &amp;lt;- spMatrix(nShifts,nVars,
                      i = c(mapply(rep,1:nShifts,nWorkers)),
                      j = mapply(varIdx,1:nWorkers,
                                 mapply(rep,1:nShifts,nWorkers)),
                      x = rep(1,nShifts * nWorkers))
model$sense       &amp;lt;- rep(&amp;#39;=&amp;#39;,nShifts)
model$rhs         &amp;lt;- shiftRequirements
model$constrnames &amp;lt;- Shifts

# Save model
gurobi_write(model,&amp;#39;workforce2.lp&amp;#39;, env)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Optimize
result &amp;lt;- gurobi(model, env = env)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 14 rows, 98 columns and 98 nonzeros
## Model fingerprint: 0xbddc1063
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [8e+00, 1e+01]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [2e+00, 7e+00]
## Presolve removed 1 rows and 60 columns
## Presolve time: 0.00s
## 
## Solved in 0 iterations and 0.00 seconds
## Infeasible model&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Display results
if (result$status == &amp;#39;OPTIMAL&amp;#39;) {
# The code may enter here if you change some of the data... otherwise
# this will never be executed.
  printsolution(result);
} else if (result$status == &amp;#39;INFEASIBLE&amp;#39;) {
# We will loop until we reduce a model that can be solved
  numremoved &amp;lt;- 0 
  while(result$status == &amp;#39;INFEASIBLE&amp;#39;) {
    iis               &amp;lt;- gurobi_iis(model, env = env)
    keep              &amp;lt;- (!iis$Arows)
    cat(&amp;#39;Removing rows&amp;#39;,model$constrnames[iis$Arows],&amp;#39;...\n&amp;#39;)
    model$A           &amp;lt;- model$A[keep,,drop = FALSE]
    model$sense       &amp;lt;- model$sense[keep]
    model$rhs         &amp;lt;- model$rhs[keep]
    model$constrnames &amp;lt;- model$constrnames[keep]
    numremoved        &amp;lt;- numremoved + 1
    gurobi_write(model, paste0(&amp;#39;workforce2-&amp;#39;,numremoved,&amp;#39;.lp&amp;#39;), env)
    result            &amp;lt;- gurobi(model, env = env)
  }
  printsolution(result)
  rm(iis)
} else {
# Just to handle user interruptions or other problems
  cat(&amp;#39;Unexpected status&amp;#39;,result$status,&amp;#39;\nEnding now\n&amp;#39;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## IIS computed: 1 constraints and 7 bounds
## IIS runtime: 0.00 seconds
## Removing rows Thu4 ...
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 13 rows, 98 columns and 91 nonzeros
## Model fingerprint: 0x75a77c30
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [8e+00, 1e+01]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [2e+00, 7e+00]
## Presolve removed 1 rows and 61 columns
## Presolve time: 0.00s
## 
## Solved in 0 iterations and 0.00 seconds
## Infeasible model
## 
## IIS computed: 1 constraints and 7 bounds
## IIS runtime: 0.00 seconds
## Removing rows Sat6 ...
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 12 rows, 98 columns and 84 nonzeros
## Model fingerprint: 0x529973cc
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [8e+00, 1e+01]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [2e+00, 7e+00]
## Presolve removed 1 rows and 62 columns
## Presolve time: 0.00s
## 
## Solved in 0 iterations and 0.00 seconds
## Infeasible model
## 
## IIS computed: 1 constraints and 7 bounds
## IIS runtime: 0.00 seconds
## Removing rows Sun7 ...
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 11 rows, 98 columns and 77 nonzeros
## Model fingerprint: 0x0cbf4dba
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [8e+00, 1e+01]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [2e+00, 7e+00]
## Presolve removed 1 rows and 63 columns
## Presolve time: 0.00s
## 
## Solved in 0 iterations and 0.00 seconds
## Infeasible model
## 
## IIS computed: 1 constraints and 7 bounds
## IIS runtime: 0.00 seconds
## Removing rows Fri12 ...
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 10 rows, 98 columns and 70 nonzeros
## Model fingerprint: 0x02f1ed80
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [8e+00, 1e+01]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [2e+00, 7e+00]
## Presolve removed 10 rows and 98 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    3.3500000e+02   0.000000e+00   1.480000e+02      0s
## Extra 5 simplex iterations after uncrush
##        5    3.3500000e+02   0.000000e+00   0.000000e+00      0s
## 
## Solved in 5 iterations and 0.00 seconds
## Optimal objective  3.350000000e+02
## The optimal objective is 335 
## Schedule:
##   Mon1 :Ed  Fred  Gu  
##   Tue2 :Dan  Ed  
##   Wed3 :Amy  Dan  Ed  Fred  
##   Thu4 :
##   Fri5 :Amy  Cathy  Dan  Ed  Gu  
##   Sat6 :
##   Sun7 :
##   Mon8 :Dan  Ed  
##   Tue9 :Dan  Ed  
##   Wed10 :Amy  Cathy  Dan  
##   Thu11 :Amy  Cathy  Dan  Ed  
##   Fri12 :
##   Sat13 :Amy  Bob  Cathy  Dan  Ed  Fred  Gu  
##   Sun14 :Amy  Cathy  Dan  Ed  Fred&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Clear space
rm(model, env, availability, Shifts, Workers, pay, shiftRequirements, result)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Assign workers to shifts; each worker may or may not be available on a
# particular day. If the problem cannot be solved, relax the model
# to determine which constraints cannot be satisfied, and how much
# they need to be relaxed.


# Function to display results
printsolution &amp;lt;- function(result) {
  if(result$status == &amp;#39;OPTIMAL&amp;#39;) {
    cat(&amp;#39;The optimal objective is&amp;#39;,result$objval,&amp;#39;\n&amp;#39;)
    cat(&amp;#39;Schedule:\n&amp;#39;)
    for (s in 1:nShifts) {
      cat(&amp;#39;\t&amp;#39;,Shifts[s],&amp;#39;:&amp;#39;)
      for (w in 1:nWorkers) {
        if (result$x[varIdx(w,s)] &amp;gt; 0.9) cat(Workers[w],&amp;#39; &amp;#39;)
      }
      cat(&amp;#39;\n&amp;#39;)
    }
  }
}

# define data
nShifts  &amp;lt;- 14
nWorkers &amp;lt;-  7
nVars    &amp;lt;- nShifts * nWorkers
varIdx   &amp;lt;- function(w,s) {s+(w-1)*nShifts}

Shifts  &amp;lt;- c(&amp;#39;Mon1&amp;#39;, &amp;#39;Tue2&amp;#39;, &amp;#39;Wed3&amp;#39;, &amp;#39;Thu4&amp;#39;, &amp;#39;Fri5&amp;#39;, &amp;#39;Sat6&amp;#39;, &amp;#39;Sun7&amp;#39;,
             &amp;#39;Mon8&amp;#39;, &amp;#39;Tue9&amp;#39;, &amp;#39;Wed10&amp;#39;, &amp;#39;Thu11&amp;#39;, &amp;#39;Fri12&amp;#39;, &amp;#39;Sat13&amp;#39;, &amp;#39;Sun14&amp;#39;)
Workers &amp;lt;- c( &amp;#39;Amy&amp;#39;, &amp;#39;Bob&amp;#39;, &amp;#39;Cathy&amp;#39;, &amp;#39;Dan&amp;#39;, &amp;#39;Ed&amp;#39;, &amp;#39;Fred&amp;#39;, &amp;#39;Gu&amp;#39; )

pay     &amp;lt;- c(10, 12, 10, 8, 8, 9, 11 )

shiftRequirements &amp;lt;- c(3, 2, 4, 4, 5, 6, 5, 2, 2, 3, 4, 6, 7, 5 )

availability &amp;lt;- list( c( 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1 ),
                      c( 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0 ),
                      c( 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 ),
                      c( 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1 ),
                      c( 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1 ),
                      c( 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1 ),
                      c( 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ) )

# Set-up environment
env &amp;lt;- list()
env$logfile &amp;lt;- &amp;#39;workforce3.log&amp;#39;

# Build model
model            &amp;lt;- list()
model$modelname  &amp;lt;- &amp;#39;workforce3&amp;#39;
model$modelsense &amp;lt;- &amp;#39;min&amp;#39;

# Initialize assignment decision variables:
#    x[w][s] == 1 if worker w is assigned
#    to shift s. Since an assignment model always produces integer
#    solutions, we use continuous variables and solve as an LP.
model$lb       &amp;lt;- 0
model$ub       &amp;lt;- rep(1, nVars)
model$obj      &amp;lt;- rep(0, nVars)
model$varnames &amp;lt;- rep(&amp;#39;&amp;#39;,nVars)
for (w in 1:nWorkers) {
  for (s in 1:nShifts) {
    model$varnames[varIdx(w,s)] = paste0(Workers[w],&amp;#39;.&amp;#39;,Shifts[s])
    model$obj[varIdx(w,s)]      = pay[w]
    if (availability[[w]][s] == 0) model$ub[varIdx(w,s)] = 0
  }
}

# Set-up shift-requirements constraints
model$A           &amp;lt;- spMatrix(nShifts,nVars,
                      i = c(mapply(rep,1:nShifts,nWorkers)),
                      j = mapply(varIdx,1:nWorkers,
                                 mapply(rep,1:nShifts,nWorkers)),
                      x = rep(1,nShifts * nWorkers))
model$sense       &amp;lt;- rep(&amp;#39;=&amp;#39;,nShifts)
model$rhs         &amp;lt;- shiftRequirements
model$constrnames &amp;lt;- Shifts

# Save model
gurobi_write(model,&amp;#39;workforce3.lp&amp;#39;, env)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Optimize
result &amp;lt;- gurobi(model, env = env)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 14 rows, 98 columns and 98 nonzeros
## Model fingerprint: 0xbddc1063
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [8e+00, 1e+01]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [2e+00, 7e+00]
## Presolve removed 1 rows and 60 columns
## Presolve time: 0.00s
## 
## Solved in 0 iterations and 0.00 seconds
## Infeasible model&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Display results
if (result$status == &amp;#39;OPTIMAL&amp;#39;) {
# The code may enter here if you change some of the data... otherwise
# this will never be executed.
  printsolution(result);
} else if (result$status == &amp;#39;INFEASIBLE&amp;#39;) {
# Use gurobi_feasrelax to find out which copnstraints should be relaxed
# and by how much to make the problem feasible.
  penalties     &amp;lt;- list()
  penalties$lb  &amp;lt;- Inf
  penalties$ub  &amp;lt;- Inf
  penalties$rhs &amp;lt;- rep(1,length(model$rhs))
  feasrelax     &amp;lt;- gurobi_feasrelax(model, 0, FALSE, penalties, env = env)
  result        &amp;lt;- gurobi(feasrelax$model, env = env)
  if (result$status == &amp;#39;OPTIMAL&amp;#39;) {
    printsolution(result)
    cat(&amp;#39;Slack values:\n&amp;#39;)
    for (j in (nVars+1):length(result$x)) {
      if(result$x[j] &amp;gt; 0.1)
        cat(&amp;#39;\t&amp;#39;,feasrelax$model$varnames[j],result$x[j],&amp;#39;\n&amp;#39;)
    }
  } else {
    cat(&amp;#39;Unexpected status&amp;#39;,result$status,&amp;#39;\nEnding now\n&amp;#39;)
  }
  rm(penalties, feasrelax)
} else {
# Just to handle user interruptions or other problems
  cat(&amp;#39;Unexpected status&amp;#39;,result$status,&amp;#39;\nEnding now\n&amp;#39;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 14 rows, 126 columns and 126 nonzeros
## Model fingerprint: 0xa5484b98
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [2e+00, 7e+00]
## Presolve removed 5 rows and 99 columns
## Presolve time: 0.00s
## Presolved: 9 rows, 27 columns, 27 nonzeros
## 
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    6.0000000e+00   0.000000e+00   0.000000e+00      0s
##        0    6.0000000e+00   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  6.000000000e+00
## The optimal objective is 6 
## Schedule:
##   Mon1 :Ed  Fred  Gu  
##   Tue2 :Bob  Ed  
##   Wed3 :Amy  Cathy  Fred  Gu  
##   Thu4 :Cathy  Ed  
##   Fri5 :Amy  Cathy  Dan  Ed  Gu  
##   Sat6 :Bob  Dan  Fred  Gu  
##   Sun7 :Amy  Cathy  Ed  Gu  
##   Mon8 :Dan  Ed  
##   Tue9 :Dan  Gu  
##   Wed10 :Amy  Dan  Gu  
##   Thu11 :Amy  Bob  Ed  Gu  
##   Fri12 :Amy  Cathy  Dan  Fred  Gu  
##   Sat13 :Amy  Bob  Cathy  Dan  Ed  Fred  Gu  
##   Sun14 :Amy  Cathy  Ed  Fred  Gu  
## Slack values:
##   ArtP_Thu4 2 
##   ArtP_Sat6 2 
##   ArtP_Sun7 1 
##   ArtP_Fri12 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Clear space
rm(model, env, availability, Shifts, Workers, pay, shiftRequirements, result)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add a new chunk by clicking the &lt;em&gt;Insert Chunk&lt;/em&gt; button on the toolbar or by pressing &lt;em&gt;Ctrl+Alt+I&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the &lt;em&gt;Preview&lt;/em&gt; button or press &lt;em&gt;Ctrl+Shift+K&lt;/em&gt; to preview the HTML file).&lt;/p&gt;
&lt;p&gt;The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike &lt;em&gt;Knit&lt;/em&gt;, &lt;em&gt;Preview&lt;/em&gt; does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basics of Markov Chains</title>
      <link>/post/orie/markovchains/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/orie/markovchains/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This post explores how to markov chains work and how to visulaize them in R.
I use a R package specifically designed to visualize markov chains.
I also represent these markov chains using tables.
This is a reproducible example if you have R Studio just make sure you have installed the correct packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(markovchain)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;markovchain&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(diagram)
#Allows the use of exponential operators in matrix
library(expm)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;expm&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#library(matlib)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# A good article about Markov Chain Monte Carlo Methods https://towardsdatascience.com/a-zero-math-introduction-to-markov-chain-monte-carlo-methods-dcba889e0c50

# A Simple Example from https://www.analyticsvidhya.com/blog/2014/07/markov-chain-simplified/
# Creating a transition matrix
trans_mat &amp;lt;- matrix(c(0.7,0.3,0.1,0.9),nrow = 2, byrow = TRUE)
trans_mat&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]  0.7  0.3
## [2,]  0.1  0.9&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create the Discrete Time Markov Chain
disc_trans &amp;lt;- new(&amp;quot;markovchain&amp;quot;,transitionMatrix=trans_mat, states=c(&amp;quot;Pepsi&amp;quot;,&amp;quot;Coke&amp;quot;), name=&amp;quot;MC 1&amp;quot;) 
mcDF &amp;lt;- as(disc_trans,&amp;quot;data.frame&amp;quot;)
mcDF&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      t0    t1 prob
## 1 Pepsi Pepsi  0.7
## 2 Pepsi  Coke  0.3
## 3  Coke Pepsi  0.1
## 4  Coke  Coke  0.9&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;disc_trans&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## MC 1 
##  A  2 - dimensional discrete Markov Chain defined by the following states: 
##  Pepsi, Coke 
##  The transition matrix  (by rows)  is defined as follows: 
##       Pepsi Coke
## Pepsi   0.7  0.3
## Coke    0.1  0.9&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(disc_trans)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/markovchains_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Market Share after one month
Current_state &amp;lt;- c(0.55,0.45)
steps &amp;lt;- 1
finalState &amp;lt;- Current_state*disc_trans^steps #using power operator
finalState&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      Pepsi Coke
## [1,]  0.43 0.57&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Market Share after two month
Current_state &amp;lt;- c(0.55,0.45)
steps &amp;lt;- 2
finalState &amp;lt;- Current_state*disc_trans^steps #using power operator
finalState&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      Pepsi  Coke
## [1,] 0.358 0.642&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Markov Chain Statistical Operations
steadyStates(disc_trans)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      Pepsi Coke
## [1,]  0.25 0.75&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;meanFirstPassageTime(disc_trans)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       Pepsi     Coke
## Pepsi     0 3.333333
## Coke     10 0.000000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;meanRecurrenceTime(disc_trans)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Pepsi     Coke 
## 4.000000 1.333333&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hittingProbabilities(disc_trans)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       Pepsi Coke
## Pepsi     1    1
## Coke      1    1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;meanAbsorptionTime(disc_trans)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## named numeric(0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#absorptionProbabilities(disc_trans)
period(disc_trans)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(disc_trans)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## MC 1  Markov chain that is composed by: 
## Closed classes: 
## Pepsi Coke 
## Recurrent classes: 
## {Pepsi,Coke}
## Transient classes: 
## NONE 
## The Markov chain is irreducible 
## The absorbing states are: NONE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Manually Calculating Markov Chains
#https://www.probabilitycourse.com/chapter11/11_2_1_introduction.php

#Chapman-Kolmogorov Equation P^(n) = P^n
#p_ij^(m+n) = P(X_m+n = j | X_0 = i) = sum(p_ik^(m)*p_kj^(n))

#Probabilty Space after 5 steps
steps &amp;lt;- 5

Current_state%*%(trans_mat%^%steps)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          [,1]     [,2]
## [1,] 0.273328 0.726672&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Mean Return and Mean Hitting Times using Recursive Equations
#r_l = 1 + sum(t_k*p_lk)
#t_l = 0; t_k = 1 + sum(t_j*p_kj)

#Given X_0 = Coke time until pepsi first time, t_pepsi = 0
# t_coke = 1 + 1/10*t_pepsi + 9/10t_coke
t_coke &amp;lt;- solve(1/10,1)
#r_pepsi = 1 + 7/10*t_pepsi + 3/10*t_coke
r_pepsi &amp;lt;- 1 + 3/10*t_coke

meanFirstPassageTime(disc_trans)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       Pepsi     Coke
## Pepsi     0 3.333333
## Coke     10 0.000000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;t_coke&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;meanRecurrenceTime(disc_trans)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Pepsi     Coke 
## 4.000000 1.333333&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;r_pepsi&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Steady State
#Stationary Distribtution pi = pi*P, sum(pi) = 1 and if irreducible and aperiodic pi_j = lim(n&amp;gt;inf)P(X_n =j | X_0 = i)
#pi_p = 7/10pi_p+1/10pi_c; pi_c = 3/10pi_p + 9/10pi_c, pi_c+pi_p =1
A &amp;lt;- matrix(c(-3/10,1/10,3/10,-1/10,1,1), nrow =3, byrow = TRUE )
B &amp;lt;- c(0,0,1)
steadyStates(disc_trans)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      Pepsi Coke
## [1,]  0.25 0.75&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Solve(A,B)




#rm(Current_state, disc_trans, finalState,steps,trans_mat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Continous Time Markov Chains

energyStates &amp;lt;- c(&amp;quot;sigma&amp;quot;, &amp;quot;sigma_star&amp;quot;)
#Must produce generator matrix from a transistion probablity matrix
Q &amp;lt;- expm::logm(disc_trans@transitionMatrix,method=&amp;#39;Eigen&amp;#39;)

gen &amp;lt;- matrix(data = c(-3, 3, 1, -1), nrow = 2, byrow = TRUE, dimnames = list(energyStates, energyStates))

molecularCTMC &amp;lt;- new(&amp;quot;ctmc&amp;quot;, states = energyStates, byrow = TRUE, generator = gen, name = &amp;quot;Molecular Transition Model&amp;quot;)

statesDist &amp;lt;- c(0.8, 0.2)
rctmc(n = 3, ctmc = molecularCTMC, initDist = statesDist, out.type = &amp;quot;df&amp;quot;, include.T0 = FALSE, T = 4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       states              time
## 1      sigma 0.490779113024473
## 2 sigma_star 0.893907884742721
## 3      sigma  1.83824493102602&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;steadyStates(molecularCTMC)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      sigma sigma_star
## [1,]  0.25       0.75&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Q-Learning with Liars Dice
#http://gradientdescending.com/q-learning-example-with-liars-dice-in-r/

# play a round of liars dice
liars.dice.round &amp;lt;- function(players, control, player.dice.count, agents, game.states, reward, Q.mat, a = 1, verbose = 1){
  
  # set array for recording results
  y.ctrl = c(); y.state = c(); y.action = c()
  
  # roll the dice for each player
  if(verbose &amp;gt; 0) cat(&amp;quot;\n\n&amp;quot;)
  rolls &amp;lt;- lapply(1:players, function(x) sort(sample(1:6, player.dice.count[[x]], replace = TRUE)))
  if(verbose &amp;gt; 1) lapply(rolls, function(x) cat(&amp;quot;dice: &amp;quot;, x, &amp;quot;\n&amp;quot;))
  total.dice &amp;lt;- sum(unlist(player.dice.count))
  
  # set penalty
  penalty &amp;lt;- sapply(1:players, function(x) 0, simplify = FALSE)
  
  # print dice blocks
  if(verbose &amp;gt; 0) Dice(rolls[[1]])
  
  # set up roll table
  roll.table &amp;lt;- roll.table.fn(rolls)
  
  # initial bid
  if(verbose &amp;gt; 0) cat(&amp;quot;place first bid\nPlayer&amp;quot;, control, &amp;quot;has control\n&amp;quot;)
  if(control == a){
    
    dice.value &amp;lt;- set.dice.value(&amp;quot;dice value: &amp;quot;, 6)
    dice.quantity &amp;lt;- set.dice.value(&amp;quot;quantity; &amp;quot;, sum(roll.table))
    
  }else{
    
    # agent plays
    p1.state &amp;lt;- which(game.states$total == total.dice &amp;amp; game.states$p1 == player.dice.count[[1]] &amp;amp; game.states$prob_cat == total.dice)
    pars &amp;lt;- list(dice = rolls[[control]], total.dice = total.dice, dice.value = NULL, dice.quantity = 0, p1.state = p1.state)
    agent.action &amp;lt;- agents[[control]](pars = pars, Q.mat = Q.mat)
    dice.value &amp;lt;- agent.action$dice.value
    dice.quantity &amp;lt;- agent.action$dice.quantity
    
  }
  
  
  # calculate probability cat and determine the game state
  # action set to raise because you can&amp;#39;t call without an initial bid
  # this could be a 3rd action (initial bid) but it&amp;#39;s not really necessary
  player.dice.qty &amp;lt;- table(rolls[[1]])[as.character(dice.value)]
  player.dice.qty &amp;lt;- ifelse(is.na(player.dice.qty), 0, player.dice.qty) %&amp;gt;% unname
  prob.cat &amp;lt;- calc.prob(c(total.dice, player.dice.count[[1]], dice.quantity, player.dice.qty))
  p1.state &amp;lt;- which(game.states$total == total.dice &amp;amp; game.states$p1 == player.dice.count[[1]] &amp;amp; game.states$prob_cat == prob.cat)
  p1.action &amp;lt;- &amp;quot;raise&amp;quot;
  
  # storing states for Q iteration
  y.ctrl = c(); y.state = c(); y.action = c()
  
  # moving control to the next player
  # storing the previous player since if the next player calls the previous player could lose a die
  prev &amp;lt;- control
  control &amp;lt;- control %% players + 1
  if(verbose &amp;gt; 0) cat(&amp;quot;dice value &amp;quot;, dice.value, &amp;quot;; dice quantity &amp;quot;, dice.quantity, &amp;quot;\n&amp;quot;)
  
  
  # loop through each player and continue until there is a winner and loser
  called &amp;lt;- FALSE
  while(!called){
    
    # check if the player with control is still in the game - if not skip
    if(player.dice.count[[control]] &amp;gt; 0){
      if(control == a){
        
        action &amp;lt;- readline(&amp;quot;raise or call (r/c)? &amp;quot;)
        
      }else{
        
        # the agent makes a decision
        pars &amp;lt;- list(dice = rolls[[control]], total.dice = total.dice, dice.value = dice.value, dice.quantity = dice.quantity, p1.state = p1.state)
        agent.action &amp;lt;- agents[[control]](pars = pars, Q.mat = Q.mat)
        action &amp;lt;- agent.action$action
        
      }
      
      
      # storing states for reward iteration
      if(control == 1 &amp;amp; !is.null(agent.action$action)){
        player.dice.qty &amp;lt;- table(rolls[[1]])[as.character(dice.value)]
        player.dice.qty &amp;lt;- ifelse(is.na(player.dice.qty), 0, player.dice.qty) %&amp;gt;% unname
        
        p1.action &amp;lt;- agent.action$action
        prob.cat &amp;lt;- calc.prob(c(total.dice, player.dice.count[[1]], dice.quantity, player.dice.qty))
        p1.state &amp;lt;- which(game.states$total == total.dice &amp;amp; game.states$p1 == player.dice.count[[1]] &amp;amp; game.states$prob_cat == prob.cat)
      }
      
      
      # called
      if(action %in% c(&amp;quot;call&amp;quot;, &amp;quot;c&amp;quot;)){
        
        if(verbose &amp;gt; 0) {
          cat(&amp;quot;player&amp;quot;, control, &amp;quot;called\nRoll table\n&amp;quot;)
          print(roll.table)
        }
        
        # dice are reavealed
        
        # check if the quantity of dice value is less or more than the total in the pool
        # if more control loses otherwise control-1 win
        if(dice.quantity &amp;gt; roll.table[dice.value]){
          
          penalty[[prev]] &amp;lt;- penalty[[prev]] - 1
          if(verbose &amp;gt; 0) cat(&amp;quot;player&amp;quot;, prev, &amp;quot;lost a die\n&amp;quot;)
          
        }else{
          
          penalty[[control]] &amp;lt;- penalty[[control]] - 1
          if(verbose &amp;gt; 0) cat(&amp;quot;player&amp;quot;, control, &amp;quot;lost a die\n&amp;quot;)
          
        }
        
        # for Q iteration
        y.ctrl &amp;lt;- c(y.ctrl, control); y.state &amp;lt;- c(y.state, p1.state); y.action &amp;lt;- c(y.action, p1.action)
        
        # if called use the penalty array to change states
        prob.cat &amp;lt;- calc.prob(c(total.dice, player.dice.count[[1]], dice.quantity, player.dice.qty))
        p1.state &amp;lt;- which(game.states$total == total.dice-1 &amp;amp; game.states$p1 == player.dice.count[[1]]+penalty[[1]] &amp;amp; game.states$prob_cat == prob.cat)
        
        # break the loop
        called &amp;lt;- TRUE
        
      }else{
        
        if(verbose &amp;gt; 0) cat(&amp;quot;player&amp;quot;, control, &amp;quot;raised\n&amp;quot;)
        
        if(control == a){
          
          # player sets next dice value
          dice.value &amp;lt;- set.dice.value(&amp;quot;dice value: &amp;quot;, 6)
          dice.quantity &amp;lt;- set.dice.value(&amp;quot;quantity; &amp;quot;, sum(roll.table))
          
        }else{
          
          dice.value &amp;lt;- agent.action$dice.value
          dice.quantity &amp;lt;- agent.action$dice.quantity
        }
        
        # p1 state after the raise
        prob.cat &amp;lt;- calc.prob(c(total.dice, player.dice.count[[1]], dice.quantity, player.dice.qty))
        p1.state &amp;lt;- which(game.states$total == total.dice &amp;amp; game.states$p1 == player.dice.count[[1]] &amp;amp; game.states$prob_cat == prob.cat)
        if(verbose &amp;gt; 0) cat(&amp;quot;dice value&amp;quot;, dice.value, &amp;quot;; dice quantity&amp;quot;, dice.quantity, &amp;quot;\n&amp;quot;)
      }
      
      # store info for Q update
      y.ctrl &amp;lt;- c(y.ctrl, control); y.state &amp;lt;- c(y.state, p1.state); y.action &amp;lt;- c(y.action, p1.action)
      
      # set the control player to now be the previous player
      prev &amp;lt;- control
    }
    
    # next player has control
    control &amp;lt;- control %% players + 1
  }
  
  # play results and return
  play &amp;lt;- data.frame(y.ctrl, y.state, y.action)
  return(list(penalty = penalty, play = play))
}








# play a full game of liars dice
play.liars.dice &amp;lt;- function(players = 4, num.dice = 6, auto = FALSE, verbose = 1, agents, Q.mat = NULL, train = FALSE, print.trans = FALSE){
  
  # begin!
  if(verbose &amp;gt; 0) liars.dice.title()
  
  # setting the number of dice each player has
  ndice &amp;lt;- sapply(rep(num.dice, players), function(x) x, simplify = FALSE)
  players.left &amp;lt;- sum(unlist(ndice) &amp;gt; 0)
  
  # setting game states matrix
  game.states &amp;lt;- generate.game.states(players, num.dice)
  
  # set up reward matrix
  reward &amp;lt;- generate.reward.matrix(game.states)
  reward &amp;lt;- list(raise = reward, call = reward)
  
  # set Q matrix if null
  if(is.null(Q.mat)) Q.mat &amp;lt;- matrix(0, nrow = nrow(reward$raise), ncol = length(reward), dimnames = list(c(), names(reward)))
  
  # while there is at least 2 left in the game
  # who has control
  ctrl &amp;lt;- sample(1:players, 1)
  play.df &amp;lt;- data.frame()
  while(players.left &amp;gt; 1){
    
    # play a round
    results &amp;lt;- liars.dice.round(
      players = players, 
      control = ctrl,
      player.dice.count = ndice, 
      game.states = game.states,
      reward = reward,
      Q.mat = Q.mat,
      agents = agents,
      a = as.numeric(!auto),
      verbose = verbose
    )
    
    # update how many dice the players are left with given the 
    # outcomes of the round
    for(k in seq_along(ndice)){
      ndice[[k]] &amp;lt;- ndice[[k]] + results$penalty[[k]]
      if(ndice[[k]] == 0 &amp;amp; results$penalty[[k]] == -1){
        if(verbose &amp;gt; 0) cat(&amp;quot;player&amp;quot;, k, &amp;quot;is out of the game\n&amp;quot;)
      }
      
      # update who has control so they can start the bidding
      if(results$penalty[[k]] == -1){
        ctrl &amp;lt;- k
        while(ndice[[ctrl]] == 0){
          ctrl &amp;lt;- ctrl %% players + 1
        }
      }
    }
    
    # checking how many are left and if anyone won the game
    players.left &amp;lt;- sum(unlist(ndice) &amp;gt; 0)
    if(players.left == 1){
      if(verbose &amp;gt; 0) cat(&amp;quot;player&amp;quot;, which(unlist(ndice) &amp;gt; 0), &amp;quot;won the game\n&amp;quot;)
    }
    
    # appending play
    play.df &amp;lt;- rbind(play.df, results$play)
  }
  
  if(print.trans) print(play.df)
  
  # update Q
  # rather than training after each action, training at the 
  # end of each game in bulk
  # just easier this way
  if(train) Q.mat &amp;lt;- update.Q(play.df, Q.mat, reward)
  
  # return the winner and Q matrix
  return(list(winner = which(unlist(ndice) &amp;gt; 0), Q.mat = Q.mat))
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Other Stochastic Processes
#Martingales http://gradientdescending.com/martingale-strategies-dont-work-but-we-knew-that-simulation-analysis-in-r/
#https://github.com/doehm/martingale

#Bayesian Networks http://gradientdescending.com/simulating-data-with-bayesian-networks/

#Other Q Learning https://www.r-bloggers.com/a-simple-intro-to-q-learning-in-r-floor-plan-navigation/
#https://dataaspirant.com/2018/02/05/reinforcement-learning-r/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add a new chunk by clicking the &lt;em&gt;Insert Chunk&lt;/em&gt; button on the toolbar or by pressing &lt;em&gt;Ctrl+Alt+I&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the &lt;em&gt;Preview&lt;/em&gt; button or press &lt;em&gt;Ctrl+Shift+K&lt;/em&gt; to preview the HTML file).&lt;/p&gt;
&lt;p&gt;The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike &lt;em&gt;Knit&lt;/em&gt;, &lt;em&gt;Preview&lt;/em&gt; does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linear Programming Examples and Applications</title>
      <link>/post/orie/lp_algorithms/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/orie/lp_algorithms/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This post explores how to use the fundamental algorithms to solve LPs.
I have written these using Gurobi as a solver and as the mathematical formulation software.
This is a reproducible example if you have R Studio just make sure you have installed the correct packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gurobi)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;gurobi&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tictoc)
library(Matrix)
library(ggplot2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;ggplot2&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(MASS)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;MASS&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(max: 2x_1 + 3x_2\)&lt;/span&gt;
s.t.
&lt;span class=&#34;math inline&#34;&gt;\(-x_1 + x_2 \leq 5\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(x_1+3x_2 &amp;lt;= 35; x_1 \leq 20\)&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#library(matlib)
#https://cran.r-project.org/web/packages/matlib/vignettes/linear-equations.html
#another method using outer function https://stackoverflow.com/questions/10199547/plotting-curves-given-by-equations-in-r


A &amp;lt;- matrix(c(-1, 1, 1, 1, 3, 0), 3, 2)
b &amp;lt;- c(5,35, 20)
#showEqn(A, b)

#c( R(A), R(cbind(A,b)) )          # show ranks

#all.equal( R(A), R(cbind(A,b)) )  # consistent?

#plotEqn(A,b, xlim = c(0,60), ylim = c(0,60))

rm(A,b)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# linear program example from 
# http://lpsolve.sourceforge.net/5.5/formulate.htm
# in this script, we don&amp;#39;t solve the linear program but plot it in 2-d space
# for visualization purposes. 



### set up some functions to define the constraints and the profit
# money constraint

#-x_1 + x_2 &amp;lt;= 5;
constraint1 = function(x1){
  x2 = (5 + x1)
  return(x2)
}

# storage constraint

#x_1+3x_2 &amp;lt;= 35; 
constraint2 = function(x1){
  x2 = (35 - x1)/3
  return(x2)
}

# acreage constraint

#x_1 &amp;lt;= 20
#constraint3 = function(x1){
#  x2 = 20 - x1
#  return(x2)
#}

# profit contours - returns barley given wheat and profit. i.e. gives us the information needed to plot a line of (wheat, barley) combinations that yield a given amount of profit

#max z = 2x_1 + 3x_2

profitContour = function(x1Array, z){
  x2 &amp;lt;- numeric(length(x1Array))
  for (i in 0:length(x1)){
    x2[i] = (z - 2*x1[i]) / 3
  }
  return(x2)
}


### set up data frame for plotting. Data frame will put barley in terms of wheat. Wheat will be our x axis, and barley will be our y axis.
x1 = seq(0,20)
# add data for plotting the constraints. I.e. how much barley we can have in each constraint given an amount of wheat.
plotDF = data.frame(x1, constraint1(x1), constraint2(x1))
names(plotDF) = c(&amp;#39;x1&amp;#39;,&amp;#39;con1&amp;#39;,&amp;#39;con2&amp;#39;)
plotDF$zero = rep(0,length(x1))
# add data for plotting the profit contours. I.e. how much barlet do we need to make a certain profit given a certain amount of wheat.
for (z in c(25, 40, 55, 70, 85)){
  x2 &amp;lt;- data.frame(profitContour(x1, z))
  names(x2) = paste(&amp;#39;z&amp;#39;, z, sep=&amp;quot;&amp;quot;)
  plotDF &amp;lt;- cbind(plotDF, x2)
}
#set all negatives to zero, since you can&amp;#39;t have negative x2
plotDF &amp;lt;- replace(plotDF, plotDF&amp;lt;0, 0)


### set up and view the charts
# plot the constraint lines
p0 = ggplot(plotDF, aes(x = x1)) + 
  coord_cartesian(ylim=c(0,25),xlim = c(0,25))+                      
  geom_line(aes(y = con1), colour = &amp;#39;red&amp;#39;, linetype = 2) +
  geom_line(aes(y = con2), colour = &amp;#39;green&amp;#39;, linetype = 2) +
  xlab(&amp;#39;x1&amp;#39;) +
  ylab(&amp;#39;x2&amp;#39;) 



# add an area plot underneath the constraint lines. This is the feasible solution space.
p1 &amp;lt;- p0 +  geom_area(aes(y = pmin(con1,con2)), fill = &amp;#39;gray40&amp;#39;)
# view the constraints and feasible solution space


# add the profit contour lines
p2 &amp;lt;- p1 +                    
  geom_line(aes(y = z25), colour = &amp;#39;blue&amp;#39;, linetype = 1) +
  geom_line(aes(y = z40), colour = &amp;#39;blue&amp;#39;, linetype = 1) +
  geom_line(aes(y = z55), colour = &amp;#39;blue&amp;#39;, linetype = 1) +
  geom_line(aes(y = z70), colour = &amp;#39;blue&amp;#39;, linetype = 1) +
  geom_line(aes(y = z85), colour = &amp;#39;blue&amp;#39;, linetype = 1)
# view the whole chart
plotDF&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    x1 con1      con2 zero       z25        z40       z55      z70      z85
## 1   0    5 11.666667    0 8.3333333 13.3333333 18.333333 23.33333 28.33333
## 2   1    6 11.333333    0 7.6666667 12.6666667 17.666667 22.66667 27.66667
## 3   2    7 11.000000    0 7.0000000 12.0000000 17.000000 22.00000 27.00000
## 4   3    8 10.666667    0 6.3333333 11.3333333 16.333333 21.33333 26.33333
## 5   4    9 10.333333    0 5.6666667 10.6666667 15.666667 20.66667 25.66667
## 6   5   10 10.000000    0 5.0000000 10.0000000 15.000000 20.00000 25.00000
## 7   6   11  9.666667    0 4.3333333  9.3333333 14.333333 19.33333 24.33333
## 8   7   12  9.333333    0 3.6666667  8.6666667 13.666667 18.66667 23.66667
## 9   8   13  9.000000    0 3.0000000  8.0000000 13.000000 18.00000 23.00000
## 10  9   14  8.666667    0 2.3333333  7.3333333 12.333333 17.33333 22.33333
## 11 10   15  8.333333    0 1.6666667  6.6666667 11.666667 16.66667 21.66667
## 12 11   16  8.000000    0 1.0000000  6.0000000 11.000000 16.00000 21.00000
## 13 12   17  7.666667    0 0.3333333  5.3333333 10.333333 15.33333 20.33333
## 14 13   18  7.333333    0 0.0000000  4.6666667  9.666667 14.66667 19.66667
## 15 14   19  7.000000    0 0.0000000  4.0000000  9.000000 14.00000 19.00000
## 16 15   20  6.666667    0 0.0000000  3.3333333  8.333333 13.33333 18.33333
## 17 16   21  6.333333    0 0.0000000  2.6666667  7.666667 12.66667 17.66667
## 18 17   22  6.000000    0 0.0000000  2.0000000  7.000000 12.00000 17.00000
## 19 18   23  5.666667    0 0.0000000  1.3333333  6.333333 11.33333 16.33333
## 20 19   24  5.333333    0 0.0000000  0.6666667  5.666667 10.66667 15.66667
## 21 20   25  5.000000    0 0.0000000  0.0000000  5.000000 10.00000 15.00000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/LP_algorithms_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(x1,x2,p0,p1,p2, constraint1, constraint2, plotDF, profitContour,z )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;primal simplex tableu reformulation
&lt;span class=&#34;math inline&#34;&gt;\(max: z;\: z - 2x_1 - 3x_2 = 0\)&lt;/span&gt;
s.t.
&lt;span class=&#34;math inline&#34;&gt;\(-x_1 + x_2 + x_3 = 5\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(x_1+ 3x_2 + x_4 = 35\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(x_1 + x_5 = 20\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class=&#34;math inline&#34;&gt;\(x_3, x_4, \text{ and } x_5\)&lt;/span&gt; are slack variables. Giving 3 basic variables for 3 equations. The “4th” constraint describes how z changes with the decision variables
For less than or equal constraints adding the slack variables define a basic feasible solution which we use to initialize the algorithm (note use &lt;span class=&#34;math inline&#34;&gt;\(x+1\)&lt;/span&gt; as basic variable instead of &lt;span class=&#34;math inline&#34;&gt;\(x_5\)&lt;/span&gt; for iteration reasons)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tic(&amp;#39;Simplex&amp;#39;)
initial_tableau &amp;lt;- data.frame(row = c(0,1,2,3), basic = (c(&amp;#39;z&amp;#39;, &amp;#39;x3&amp;#39;, &amp;#39;x4&amp;#39;, &amp;#39;x5&amp;#39;)), z = c(1,0,0,0), x1 = c(-2,-1,1,1), x2 = c(-3,1,3,0), x3 = c(0,1,0,0), x4 = c(0,0,1,0), x5 = c(0,0,0,1),   RHS = c(0,5,35,20), ratio = c(0,0,0,0))

initial_tableau$basic &amp;lt;- as.character(initial_tableau$basic)

nvars &amp;lt;- 5
nrows &amp;lt;- 3



tableau &amp;lt;- initial_tableau

iters &amp;lt;- 1


#loop iterate until you have no negative coefficients in the first row of the tableau

maxiters &amp;lt;- 10
while(iters &amp;lt; maxiters){
  
  
  

#create a and RHS matrixes for easy calculations

ma &amp;lt;- as.matrix(tableau[,4:(4+nvars-1)])


#Run this only if there is a negative reduced cost
if(min(ma[1,]) &amp;lt; 0){
mrhs &amp;lt;- as.matrix(tableau[,(4+nvars)])
print(paste(&amp;#39;iteration:&amp;#39;,iters))
print(tableau)


#use steepest ascent to find the most negative reduced cost and that is the variable that enters the basis (sa) as seen in row 0, caluclate the rations, then determine the pivot row index (pri)
sa &amp;lt;- which.min(ma[1,])


ratios &amp;lt;- mrhs[2:(nrows+1)]/ma[2:(nrows+1),sa]
ratios[ratios&amp;lt;=0] &amp;lt;- 9999
pri &amp;lt;- which.min(ratios)+1





#change pivot row by pivot element (pe) using Gauss Jordan elimination (substition)
#by simply divide the row and rhs by the pe to get a new pivot row (npr) and new rhs (nrhs)
#https://www.coursera.org/lecture/solving-algorithms-discrete-optimization/3-3-1-linear-programming-rzHVE

pe &amp;lt;- ma[pri,sa]
npr &amp;lt;- ma[pri,]/pe

nrhs &amp;lt;- mrhs[pri]/pe

#take that row and muliply by the negative of the pivot variable&amp;#39;s coefficent in that row column and add the result to that row for both the rhs matrix and the A matrix

for(i in 1:(nrows+1)){
  mrhs[i] &amp;lt;- -ma[i,sa]*nrhs+mrhs[i]
  }
mrhs[pri] &amp;lt;- nrhs


for(i in 1:(nrows+1)){
  ma[i,] &amp;lt;- -ma[i,sa]*npr+ma[i,]
  }
ma[pri,] &amp;lt;- npr

#rewrite the new A and RHS matricies to the tableau 

tableau[,4:(4+nvars-1)] &amp;lt;- ma
tableau[,(4+nvars)] &amp;lt;- mrhs
tableau[2:(nrows+1),(4+nvars+1)] &amp;lt;- ratios
print(paste(&amp;#39;pivot row:&amp;#39;,(pri-1)))
print(paste(&amp;#39;new basis:&amp;#39;, sa))
tableau[pri,2] &amp;lt;- paste0(&amp;#39;x&amp;#39;,sa)

iters &amp;lt;- iters + 1
}
else{
  print(paste(&amp;#39;Final Tableau; iteration:&amp;#39;,iters))
  print(tableau[1:(length(tableau)-1)])
  print(paste0(&amp;#39;objective value:&amp;#39;, mrhs[1]))
  for(j in 1:nrows+1){
    print(paste(tableau[j,2], &amp;#39;=&amp;#39;, tableau[j,(4+nvars)]))}
  iters &amp;lt;- maxiters}
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;iteration: 1&amp;quot;
##   row basic z x1 x2 x3 x4 x5 RHS ratio
## 1   0     z 1 -2 -3  0  0  0   0     0
## 2   1    x3 0 -1  1  1  0  0   5     0
## 3   2    x4 0  1  3  0  1  0  35     0
## 4   3    x5 0  1  0  0  0  1  20     0
## [1] &amp;quot;pivot row: 1&amp;quot;
## [1] &amp;quot;new basis: 2&amp;quot;
## [1] &amp;quot;iteration: 2&amp;quot;
##   row basic z x1 x2 x3 x4 x5 RHS    ratio
## 1   0     z 1 -5  0  3  0  0  15  0.00000
## 2   1    x2 0 -1  1  1  0  0   5  5.00000
## 3   2    x4 0  4  0 -3  1  0  20 11.66667
## 4   3    x5 0  1  0  0  0  1  20      Inf
## [1] &amp;quot;pivot row: 2&amp;quot;
## [1] &amp;quot;new basis: 1&amp;quot;
## [1] &amp;quot;iteration: 3&amp;quot;
##   row basic z x1 x2    x3    x4 x5 RHS ratio
## 1   0     z 1  0  0 -0.75  1.25  0  40     0
## 2   1    x2 0  0  1  0.25  0.25  0  10  9999
## 3   2    x1 0  1  0 -0.75  0.25  0   5     5
## 4   3    x5 0  0  0  0.75 -0.25  1  15    20
## [1] &amp;quot;pivot row: 3&amp;quot;
## [1] &amp;quot;new basis: 3&amp;quot;
## [1] &amp;quot;Final Tableau; iteration: 4&amp;quot;
##   row basic z x1 x2 x3         x4         x5 RHS
## 1   0     z 1  0  0  0  1.0000000  1.0000000  55
## 2   1    x2 0  0  1  0  0.3333333 -0.3333333   5
## 3   2    x1 0  1  0  0  0.0000000  1.0000000  20
## 4   3    x3 0  0  0  1 -0.3333333  1.3333333  20
## [1] &amp;quot;objective value:55&amp;quot;
## [1] &amp;quot;x2 = 5&amp;quot;
## [1] &amp;quot;x1 = 20&amp;quot;
## [1] &amp;quot;x3 = 20&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;toc()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Simplex: 0.05 sec elapsed&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(pri,sa,npr,iters,maxiters,ma,mrhs,nrhs,nrows,nvars,pe,ratios,i,j)
rm(initial_tableau, tableau)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dual Simplex
The dual of the previous problem is
&lt;span class=&#34;math inline&#34;&gt;\(min 5y_1+35y_2+20y_3\)&lt;/span&gt;
s.t.
&lt;span class=&#34;math inline&#34;&gt;\(-y_1+y_2+y_3 \geq 2\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(y_1+3y_2 \geq 3\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Switching to a max problem and adding slacks yields
&lt;span class=&#34;math inline&#34;&gt;\(z=-5y_1-35y_2-20y_3\)&lt;/span&gt;
s.t.
&lt;span class=&#34;math inline&#34;&gt;\(y_1-y_2-y_3+y_4 = -2\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(-y_1-3y_2+y_5 = -3\)&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tic(&amp;#39;Dual Simplex&amp;#39;)
initial_tableau &amp;lt;- data.frame(row = c(0,1,2), basic = (c(&amp;#39;z&amp;#39;, &amp;#39;y4&amp;#39;, &amp;#39;y5&amp;#39;)), z = c(1,0,0), y1 = c(5,1,-1), y2 = c(35,-1,-3), y3 = c(20,-1,0), y4 = c(0,1,0), y5 = c(0,0,1),   RHS = c(0,-2,-3))

initial_tableau$basic &amp;lt;- as.character(initial_tableau$basic)

nvars &amp;lt;- 5
nrows &amp;lt;- 2



tableau &amp;lt;- initial_tableau

iters &amp;lt;- 1

maxiters &amp;lt;- 10

while(iters &amp;lt; maxiters){
  

#create a and RHS matrixes for easy calculations

ma &amp;lt;- as.matrix(tableau[,4:(4+nvars-1)])

#Check to see if a RHS value is negative
if(min(tableau[2:(nrows+1),(4+nvars)]) &amp;lt; 0){
mrhs &amp;lt;- as.matrix(tableau[,(4+nvars)])
print(paste(&amp;#39;iteration:&amp;#39;,iters))
print(tableau)


#use steepest ascent to find the most negative RHS and that is the pivot row index (pri)
#then caluclate the ratios to determine the entering variable (ev)

pri &amp;lt;- which.min(mrhs[2:(nrows+1),])+1

ratios &amp;lt;- -ma[1,]/ma[pri,]
ratios[ratios&amp;lt;=0] &amp;lt;- 9999
ev &amp;lt;- which.min(ratios)


#identify the new pivot element, do the same matrix operations to make the new pivot row and the new rhs for that row
#change pivot row by pivot element (pe) using Gauss Jordan elimination (substition)
#by simply divide the row and rhs by the pe to get a new pivot row (npr) and new rhs (nrhs)
#https://www.coursera.org/lecture/solving-algorithms-discrete-optimization/3-3-1-linear-programming-rzHVE

pe &amp;lt;- ma[pri,ev]
npr &amp;lt;- ma[pri,]/pe

nrhs &amp;lt;- mrhs[pri]/pe

#Do the matrix operations for the rest of the tableau


#take that row and muliply by the negative of the pivot variable&amp;#39;s coefficent in that row column and add the result to that row for both the rhs matrix and the A matrix

for(i in 1:(nrows+1)){
  mrhs[i] &amp;lt;- -ma[i,ev]*nrhs+mrhs[i]
  }
mrhs[pri] &amp;lt;- nrhs


for(i in 1:(nrows+1)){
  ma[i,] &amp;lt;- -ma[i,ev]*npr+ma[i,]
  }
ma[pri,] &amp;lt;- npr

#rewrite the new A and RHS matricies to the tableau 

tableau[,4:(3+nvars)] &amp;lt;- ma
tableau[,(4+nvars)] &amp;lt;- mrhs
print(paste(&amp;#39;pivot row:&amp;#39;,(pri-1)))
print(paste(&amp;#39;entering variable:&amp;#39;,ev))
tableau[pri,2] &amp;lt;- paste0(&amp;#39;y&amp;#39;,ev)




iters &amp;lt;- iters + 1
}
else{
  print(tableau)
  print(paste(&amp;#39;objective value:&amp;#39;, mrhs[1]))
  for(j in 1:nrows+1){
    print(paste(tableau[j,2], &amp;#39;=&amp;#39;, tableau[j,(4+nvars)]))}
  iters &amp;lt;- maxiters}

}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;iteration: 1&amp;quot;
##   row basic z y1 y2 y3 y4 y5 RHS
## 1   0     z 1  5 35 20  0  0   0
## 2   1    y4 0  1 -1 -1  1  0  -2
## 3   2    y5 0 -1 -3  0  0  1  -3
## [1] &amp;quot;pivot row: 2&amp;quot;
## [1] &amp;quot;entering variable: 1&amp;quot;
## [1] &amp;quot;iteration: 2&amp;quot;
##   row basic z y1 y2 y3 y4 y5 RHS
## 1   0     z 1  0 20 20  0  5 -15
## 2   1    y4 0  0 -4 -1  1  1  -5
## 3   2    y1 0  1  3  0  0 -1   3
## [1] &amp;quot;pivot row: 1&amp;quot;
## [1] &amp;quot;entering variable: 2&amp;quot;
## [1] &amp;quot;iteration: 3&amp;quot;
##   row basic z y1 y2    y3    y4    y5    RHS
## 1   0     z 1  0  0 15.00  5.00 10.00 -40.00
## 2   1    y2 0  0  1  0.25 -0.25 -0.25   1.25
## 3   2    y1 0  1  0 -0.75  0.75 -0.25  -0.75
## [1] &amp;quot;pivot row: 2&amp;quot;
## [1] &amp;quot;entering variable: 3&amp;quot;
##   row basic z         y1 y2 y3 y4         y5 RHS
## 1   0     z 1 20.0000000  0  0 20  5.0000000 -55
## 2   1    y2 0  0.3333333  1  0  0 -0.3333333   1
## 3   2    y3 0 -1.3333333  0  1 -1  0.3333333   1
## [1] &amp;quot;objective value: -55&amp;quot;
## [1] &amp;quot;y2 = 1&amp;quot;
## [1] &amp;quot;y3 = 1&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;toc()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Dual Simplex: 0.03 sec elapsed&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(pri,npr,iters,maxiters,ma,mrhs,nrhs,nrows,nvars,pe,ev,ratios,i,j)
rm(initial_tableau, tableau)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Interior Point
&lt;a href=&#34;http://fourier.eng.hmc.edu/e176/lectures/ch3/node19.html&#34; class=&#34;uri&#34;&gt;http://fourier.eng.hmc.edu/e176/lectures/ch3/node19.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;KKT (via interior points) vs Simplex
&lt;a href=&#34;https://math.stackexchange.com/questions/3422607/why-would-you-choose-simplex-over-lagrange-kkt-multipliers-methods&#34; class=&#34;uri&#34;&gt;https://math.stackexchange.com/questions/3422607/why-would-you-choose-simplex-over-lagrange-kkt-multipliers-methods&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Standard form:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(max: z; z - 2x_1 - 3x_2 = 0\)&lt;/span&gt;
s.t.
&lt;span class=&#34;math inline&#34;&gt;\(-x_1 + x_2 + x_3 = 5\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(x_1+ 3x_2 + x_4 = 35\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(x_1 + x_5 = 20\)&lt;/span&gt;
Idea given A,b,c and intial value of x; find optimal x that minimizes c’*x&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tic(&amp;#39;Interior Point: Newton Raphson&amp;#39;)
constr1 &amp;lt;- c(-1,1,1,0,0)
constr2 &amp;lt;- c(1,3,0,1,0)
constr3 &amp;lt;- c(1,0,0,0,1)

A &amp;lt;- rbind(constr1,constr2, constr3)

b &amp;lt;- matrix(c(5,35,20),nrow =3)
c &amp;lt;- matrix(c(-2,-3,0,0,0), nrow = 5)
#inital x values (xi) just has to be a feasible solution, but give every x variable a value or there will be numerical instablity problems in the matricies
xi &amp;lt;- matrix(c(1,1,5,31,19), nrow =5)

m &amp;lt;- nrow(A)
n &amp;lt;- ncol(A)

I &amp;lt;- diag(n)
z1 &amp;lt;- matrix(rep(0,n*n), nrow = n)
z2 &amp;lt;- matrix(rep(0,m*m), nrow = m)
z3 &amp;lt;- matrix(rep(0,m*n), nrow = m)
y &amp;lt;- matrix(rep(1,5), nrow = 5)

#The complimentary slackness modifier 1/t eventually goes to 0 as t &amp;gt;&amp;gt;&amp;gt;&amp;gt; inf
t &amp;lt;- 9
#Step size pretty much make it up the higher the more the step changes, but it might be too quick.
#if its too quick it converges on negative values of x which is bad, 
#for an example change this to 0.3 to see a slower convergance and then to 1 to see a divergence
alpha &amp;lt;- .5
#mu*x = 0 in complemntariy slackness condition , mu &amp;gt;0 is dual condition mu correspond to dual variables, 
#using fancy vectors this gives Xd*mu = XM1 = 1/t where t &amp;gt;&amp;gt;&amp;gt;&amp;gt; inf 
x &amp;lt;- xi
mu &amp;lt;- x/t
mu_minus_c &amp;lt;- mu - c
#Gives lagrangian multipliers for constraints
#Solving c+A*lamda-mu = 0 gives initial lambda
lambda &amp;lt;- ginv(t(A))%*%(mu_minus_c)


#combined vector having values of x, lambda, and mu useful when adding the search direction
w &amp;lt;- rbind(x, lambda, mu)


#This is the KKT condition stationarity, at optimality this derivative should  be 0,
#Using the lagrangian cx+lambda*Ax-mu &amp;gt;&amp;gt; c+A*lambda-mu
c_plus_tA &amp;lt;- c+t(A)%*%lambda-mu

#This is the KKT condition primal feasiblity, this should always be 0 Ax-b=0 
A_times_x_minus_b &amp;lt;- A%*%x-b

#This is the modfied complimentary condtion XM1 -1/t = 0 X is the diag(x) and M is diag(mu) 1/t &amp;gt;&amp;gt;&amp;gt; 0 as t gets larger
x_times_mu_minus_y_over_t &amp;lt;- x*mu-y/t

#The right hand side of the search direction iteration given from the Newton-Raphson Method
#Combines the vectors above
B &amp;lt;- rbind(c_plus_tA,A_times_x_minus_b,x_times_mu_minus_y_over_t)

objective &amp;lt;- t(c)%*%x
error &amp;lt;- norm(B,&amp;#39;2&amp;#39;)

iteration_list &amp;lt;- data.frame(&amp;#39;x1&amp;#39; = x[1], &amp;#39;x2&amp;#39; = x[2], &amp;#39;x3&amp;#39; = x[3], &amp;#39;x4&amp;#39; = x[4], &amp;#39;x5&amp;#39; = x[5], &amp;#39;objective&amp;#39; = objective, &amp;#39;error&amp;#39; = error)

#loop



while(error &amp;gt; 10^-7){
t &amp;lt;- t*9

Xd = Diagonal(n = n, x)

Mud = Diagonal(n = n, mu) 


#The left hand side matrix of the search direction iteration, it containtes information from the A, x, and mu vectors and matricies of 1s or 0s to make the math make sense

C &amp;lt;- rbind(cbind(z1,t(A),-I),cbind(A,z2,z3), cbind(Mud,t(z3), Xd))

#The right hand side of the search direction iteration given from the Newton-Raphson Method
#This contains the objective function costs, the RHS values, as well as the A, x, and mu vectors. 
#It also has the complimentary condition represented by t
B &amp;lt;- rbind(c+t(A)%*%lambda-mu,A%*%x-b,x*mu-y/t)


#solving the systems of equations with C and B gives the search direction as you move closer and closer to solving the complimentary condition in the KKT conditions
dw = solve(-C,B)


#update your w vector which is just a list of the x, mu, and lambda vectors using the search direction
w &amp;lt;- w + alpha*dw

x &amp;lt;- w[1:n]

lambda &amp;lt;- w[(n+1):(n+m)]

mu &amp;lt;- w[(n+m+1):length(w)]

#calculate the objective function from the x values and the error. Remember if this satisifies all the KKT conditions then the B vector will be 0.
objective &amp;lt;- t(c)%*%x
error &amp;lt;- norm(B,&amp;#39;2&amp;#39;)
iteration_list &amp;lt;- rbind(iteration_list,c(x,objective,error))

}

toc()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Interior Point: Newton Raphson: 0.22 sec elapsed&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(iteration_list)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          x1       x2        x3        x4        x5 objective     error
## 1  1.000000 1.000000  5.000000 31.000000 19.000000  -5.00000 113.97801
## 2  2.815083 1.900809  5.914274 26.482489 17.184917 -11.33259 114.10755
## 3 10.549002 1.617924 13.931079 19.597227  9.450998 -25.95178  62.76629
## 4 13.970331 2.387418 16.582913 13.867413  6.029669 -35.10292  35.22695
## 5 16.877593 3.136894 18.740699  8.711726  3.122407 -43.16587  19.61963
## 6 18.419517 3.865645 19.553873  4.983549  1.580483 -48.43597  10.66207&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tail(iteration_list)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    x1 x2 x3           x4           x5 objective        error
## 28 20  5 20 1.386952e-06 3.808029e-07       -55 2.878188e-06
## 29 20  5 20 6.934761e-07 1.904014e-07       -55 1.439094e-06
## 30 20  5 20 3.467381e-07 9.520072e-08       -55 7.195471e-07
## 31 20  5 20 1.733690e-07 4.760036e-08       -55 3.597735e-07
## 32 20  5 20 8.668451e-08 2.380018e-08       -55 1.798868e-07
## 33 20  5 20 4.334226e-08 1.190009e-08       -55 8.994339e-08&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(x,lambda,mu,z1,z2,z3,y,xi,Xd,Mud,t,n,I,alpha,b,c,constr1,constr2,constr3,m)
rm(c_plus_tA,mu_minus_c,A_times_x_minus_b,x_times_mu_minus_y_over_t, A,B,C,dw)
rm(iteration_list,objective,error,w)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(max: z = 2x_1 + 3x_2\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;s.t.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(-x_1 + x_2 \leq 5\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(x_1+3x_2 \leq 35\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(x_1 \leq 20\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This solver runs all the techniques above in paralel.
The Simplex, Dual Simplex, and 3 versions of the interior point method (barrier method).
This requires 5 cores. Whichever one solves the fastest produces the output.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tic(&amp;#39;Gurobi Solver&amp;#39;)
model &amp;lt;- list()
model$A     &amp;lt;- matrix(c(-1,1,
                        1,3,
                        1,0), nrow=3, byrow=T)
model$obj   &amp;lt;- c(2,3)
model$rhs   &amp;lt;- c(5,
                 35,
                 20)
model$sense &amp;lt;- c(&amp;#39;&amp;lt;&amp;#39;,
                 &amp;#39;&amp;lt;&amp;#39;,
                 &amp;#39;&amp;lt;&amp;#39;)
model$modelsense &amp;lt;- &amp;#39;max&amp;#39;
result &amp;lt;- gurobi(model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 2 columns and 5 nonzeros
## Model fingerprint: 0x1b1ba9b3
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [2e+00, 3e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [5e+00, 4e+01]
## Presolve removed 1 rows and 0 columns
## Presolve time: 0.00s
## Presolved: 2 rows, 2 columns, 4 nonzeros
## 
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    7.0000000e+01   1.875000e+00   0.000000e+00      0s
##        1    5.5000000e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 1 iterations and 0.00 seconds
## Optimal objective  5.500000000e+01&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#print(result$objval)
#print(result$x)



# Clear space
rm(model, result)

toc()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Solver: 0 sec elapsed&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add a new chunk by clicking the &lt;em&gt;Insert Chunk&lt;/em&gt; button on the toolbar or by pressing &lt;em&gt;Ctrl+Alt+I&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the &lt;em&gt;Preview&lt;/em&gt; button or press &lt;em&gt;Ctrl+Shift+K&lt;/em&gt; to preview the HTML file).&lt;/p&gt;
&lt;p&gt;The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike &lt;em&gt;Knit&lt;/em&gt;, &lt;em&gt;Preview&lt;/em&gt; does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.&lt;/p&gt;
&lt;p&gt;Add a new chunk by clicking the &lt;em&gt;Insert Chunk&lt;/em&gt; button on the toolbar or by pressing &lt;em&gt;Ctrl+Alt+I&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the &lt;em&gt;Preview&lt;/em&gt; button or press &lt;em&gt;Ctrl+Shift+K&lt;/em&gt; to preview the HTML file).&lt;/p&gt;
&lt;p&gt;The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike &lt;em&gt;Knit&lt;/em&gt;, &lt;em&gt;Preview&lt;/em&gt; does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Basics of Simulation</title>
      <link>/post/orie/simulation_basics/</link>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/orie/simulation_basics/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This post explores some of the basic concepts of simulation.
I mostly explore these concepts using basic probablity and the built in distribution functions.
This is a reproducible example if you have R Studio just make sure you have installed the correct packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Ideas from Probablity Course https://www.probabilitycourse.com/chapter13/chapter13.php


set.seed(123)
p &amp;lt;- 0.5
n &amp;lt;- 1000
U &amp;lt;- runif(n)

toss &amp;lt;- as.integer(U &amp;lt; p)

#cumalative number of heads 
a &amp;lt;- numeric(n+1)
#running average of heads
avg &amp;lt;- numeric(n)

for(i in 2:n+1){
  a[i] &amp;lt;- a[i-1] + toss[i-1]
  avg[i-1] &amp;lt;- a[i]/(i-1)
}

plot(1:n, avg, type = &amp;quot;l&amp;quot;, lwd = 5, col = &amp;quot;blue&amp;quot;, ylab = &amp;quot;ProportionofHeads&amp;quot;,
xlab = &amp;quot;CoinTossNumber&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/Simulation_basics_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(p,n,U,toss,a,avg, i)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(123)
p &amp;lt;- 0.2
n &amp;lt;- 1000
U &amp;lt;- runif(n)
#The function U &amp;lt; p creates Bernouli Random variables with probablity p, 1 if U &amp;lt; p 0 otherwise
#the sum of Bernouli variables is a Binomial of (n,p) so X is a Binomial(1000,0.2)

X &amp;lt;- sum(as.integer(U &amp;lt; p))
X&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 198&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#The built in function for binomial (number of observations, number of trials, probablity)
rbinom(1,n,p)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 196&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Arbitrary Distribution
#P(X =1) = 0.35, P(X = 2) = 0.15, P(X=3) = 0.4, P(X=4) = 0.1
#P(X=xi) = P(U element Ai) = pi
P &amp;lt;- c(0.35,0.5,0.9,1)
X &amp;lt;- c(1,2,3,4)
i &amp;lt;- 1
r &amp;lt;- runif(1)

while(r &amp;gt; P[i]){
  i &amp;lt;- i + 1
}

X[i]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Create RV with density f(x) = 2.5*x*sqrt(x) = x^5/2
#Using inverse X^5/2 = U &amp;gt;&amp;gt; X = U^2/5

U &amp;lt;- runif(1)
X &amp;lt;- U^(2/5)
print(paste(&amp;#39;Distrubution with density f(x) = X^(5/2):&amp;#39;,X))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Distrubution with density f(x) = X^(5/2): 0.938571171721709&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Generate RV with density function Beta(2,4), g(x) =1 0&amp;lt;x&amp;lt;1
#f(x) = 20x(1-x)^3, g(x) = 1, f(x)/g(x) = 20x(1-x)^3
#Find smallest c such that f(x)/g(x) &amp;lt;= c
#Using differention d(f(x)/g(x))/dx &amp;gt;&amp;gt;&amp;gt; x = 1/4 &amp;gt;&amp;gt;&amp;gt; f(x)/g(x) &amp;lt;= 135/64 &amp;gt;&amp;gt;&amp;gt; f(x)/(c*g(x)) = 256x(1-x)^3

#This code keeps looping until U2 (which is f(x)/c*g(x)) dips below its bound. Hence it rejects higher values

n &amp;lt;- 1
rejects &amp;lt;- 0
while(n == 1){
  U1 &amp;lt;- runif(1)
  U2 &amp;lt;- runif(1)
  rejects &amp;lt;- rejects + 1
  if(U2 &amp;lt;= 256/27*U1*(1-U1)^3){
    X &amp;lt;- U1
    n &amp;lt;- 0
  }
}

print(paste(&amp;#39;Total Number of Rejections:&amp;#39;, rejects))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Total Number of Rejections: 3&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;Beta RV:&amp;#39;, X))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Beta RV: 0.0656281118281186&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;R produced Beta:&amp;#39;, rbeta(1,2,4, ncp = 0)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;R produced Beta: 0.281731495984851&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(i,n,p,P,r,U,X, rejects)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Transformations of Uniform Distribution to other distrubtions

set.seed(123)
#Inverse Transformation to Exponential
#F(x) = 1 - e^-x
#X = F-1(U) = - ln(1-U) &amp;gt;&amp;gt;&amp;gt; - ln(U)

lambda &amp;lt;- 1
U &amp;lt;- runif(1)
X &amp;lt;- (-1/lambda)*log(U)
print(paste(&amp;#39;Exponential RV:&amp;#39;,X))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Exponential RV: 1.24626281987372&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;R produced Exponential RV:&amp;#39;,rexp(1,lambda)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;R produced Exponential RV: 0.576610270887613&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Using sums to create Gamma(n,lambda) from exp(lambda) Gamma(n,lambda) = sum_n(Exponential(lambda))
n &amp;lt;- 20
X &amp;lt;- (-1/lambda)*sum(log(U))
print(paste(&amp;#39;Gamma RV:&amp;#39;,X))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Gamma RV: 1.24626281987372&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;R produced Gamma RV:&amp;#39;, rgamma(1,n,lambda)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;R produced Gamma RV: 18.4968091472022&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(n,lambda,X)

#Create Poisson Distribution which is the number of exponential arrivals in a given time period
#Ti = 1/lambdaln(Ui)

set.seed(123)

lambda &amp;lt;- 2
i &amp;lt;- 0
U &amp;lt;- runif(1)
Y &amp;lt;- -1/lambda*log(U)
sum &amp;lt;- Y
while(sum &amp;lt; 1){
  U &amp;lt;- runif(1)
  Y &amp;lt;- -1/lambda*log(U)
  sum &amp;lt;- sum + Y
  i &amp;lt;- i+1
}
X &amp;lt;- i
print(paste(&amp;#39;Poisson RV:&amp;#39;,X))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Poisson RV: 2&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;R produced Poisson RV:&amp;#39;, rpois(1,lambda)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;R produced Poisson RV: 4&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Creating Normals with the Box Mueller Method (inefficient because of the sqrt, cos, and sine functions)
#Z1 = sqrt(-2ln(U1)cos(2*pi*U2))
#Z2 = sqrt(-2ln(U1)sin(2*pi*U2))

n &amp;lt;- 5000
U1 &amp;lt;- runif(n)
U2 &amp;lt;- runif(n)

Z1 &amp;lt;- sqrt(-2*log(U1))*cos(2*pi*U2)
Z2 &amp;lt;- sqrt(-2*log(U1))*sin(2*pi*U2)

#Created Via R Function
Z3 &amp;lt;- rnorm(5000)
hist(Z1,col = &amp;#39;wheat&amp;#39;, label = T)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/Simulation_basics_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hist(Z3,col = &amp;#39;wheat&amp;#39;, label = T)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/Simulation_basics_files/figure-html/unnamed-chunk-4-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Geometric Function - Loops Bernoulis until first success
# K &amp;lt;- number of failures plust 1 success 

K &amp;lt;- 1
p &amp;lt;- 0.2

while(runif(1) &amp;gt; p){
  K &amp;lt;- K +1
}
print(paste(&amp;#39;Geometric RV:&amp;#39;, K))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Geometric RV: 8&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;R produced Geometric RV:&amp;#39;,rgeom(1,p)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;R produced Geometric RV: 1&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Negative Binomial Method - Number of Geometric trials needed to get r success NegBin(1,r,p)

K &amp;lt;- 1
p &amp;lt;- 0.2
r &amp;lt;- 2
success &amp;lt;- 0

while(success &amp;lt; r){
  if(runif(1) &amp;gt; p){
    K &amp;lt;- K + 1
    #failure
  }else{
    success &amp;lt;- success + 1
  }
}

print(paste(&amp;#39;Negative Binomial RV:&amp;#39;, K+r-1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Negative Binomial RV: 6&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;R produced Negative Binomial:&amp;#39;, rnbinom(1,r,p)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;R produced Negative Binomial: 6&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rt(1,1,1) #number of variables, df, ncp&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -0.06314223&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Typical metrics for Queueing that can be extended to all types of simulations:&lt;/p&gt;
&lt;p&gt;• L: average number of jobs in the system
• W: average time spent in the system (cycle time)
• Q: average number of jobs in queue
• d: average time in queue
• system utilization
• system throughput
• distribution of waiting time
• distribution of system size
• distribution of queue size&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#M/M/1 Queue Simulation

#Source for this code http://web02.gonzaga.edu/faculty/burchn/R_files/Miscellaneous/queueing_theory_MM1.html

#variable saying how many arrivals per time period
lambda = .3
#saying the average departures per time period
mu = 1
#How long the simulation runs note not a number of events
time = 500
t = 0
#the length of a queue after a number of events. Aka Q_history[500] = 5 says the queue is 5 people long after 500 events it isn&amp;#39;t a sum.
#It updates after for n during event n
Q_hist = 0
#Think this is the sum of all the queues 
s = 0
#exponential distb with mean 1/rate T1 is time uuntil next event rate lamba + mu if there is something in queue otherwise just an arrival
T1 = rexp(1,rate=lambda)
#Initializing parameter
Q = 1
#Time until first event is T1
event_times = T1
#The time of the first event is T1
t = T1
#Same reasoning
num_event = 1

i &amp;lt;- 1
sims &amp;lt;- 10
#Busy time simulation 1:10
B &amp;lt;- c(1:10)
BT &amp;lt;- c(1:10)
#Average length of queue for simulation 1:10
L &amp;lt;- c(1:10)
#Average time customer spends in line
W &amp;lt;- c(1:10)

while (i &amp;lt;= sims){
  print(i)
  while (t&amp;lt;time) {
  num_event = num_event+1
  if(Q&amp;gt;0) {
    # we checked to make sure queue was not empty
    #odds someone arrives or leaves the queue
    T1 = rexp(1,rate=lambda+mu)
    #use p as random number to determine if next even is an arrival or a departure
    p = runif(1,0,1)
    Q_hist[num_event] = Q
    #if p is less than lambda/(lamda+mu) it is an arrival otherwise it is a departure
    Q = ifelse(p&amp;lt;lambda/(lambda+mu),Q+1,Q-1)
    } else {
      # here, the queue was empty, so only arrivals are possible
      T1 = rexp(1,rate=lambda)
      Q_hist[num_event] = Q
      Q = 1
          }
  #new time is the original t plus the time to the next event
  t = t+T1
  #A vector that shows how long it is to the next event
  event_times[num_event] = T1
  s = s+T1*Q_hist[num_event]
  }
#Time system is busy
BT[i] &amp;lt;- sum(event_times)-sum(event_times[which(Q_hist %in% 0)])
num_cust &amp;lt;- lambda*time
B[i] &amp;lt;- BT[i]/length(which(Q_hist %in% 0))

#Average queue length in the system
L[i] &amp;lt;- s/t

#Average time customer spends in line
W[i] &amp;lt;- L[i] / lambda

time = 500
t = 0
Q_hist = 0
s = 0
T1 = rexp(1,rate=lambda)
Q = 1
event_times = T1
t = T1
num_event = 1

i &amp;lt;- i + 1
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
## [1] 2
## [1] 3
## [1] 4
## [1] 5
## [1] 6
## [1] 7
## [1] 8
## [1] 9
## [1] 10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#rho/(1-rho) [.4285, 9, -11]
avg_num &amp;lt;- mean(L) 

#rho/(1-rho)^2 [.6122, 90, 110]
variance &amp;lt;- var(L) 

Sd2 &amp;lt;- sum((L-avg_num)^2 / (sims - 1))

# 1/(mu-lambda) [1.42, 10, -10]
busy_time &amp;lt;- mean(B)

avg_num&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.4417826&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;variance&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.003876663&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Sd2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.003876663&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;busy_time&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.452299&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick Monte Carlo Simulation to estimate the value of the integral &lt;span class=&#34;math inline&#34;&gt;\(\int_{0.01}^1x^{-0.5}\,dx\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;#&lt;a href=&#34;https://stackoverflow.com/questions/22001977/monte-carlo-integration-in-r-getting-the-wrong-answer-using-hit-or-miss&#34; class=&#34;uri&#34;&gt;https://stackoverflow.com/questions/22001977/monte-carlo-integration-in-r-getting-the-wrong-answer-using-hit-or-miss&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;s &amp;lt;- NULL

m &amp;lt;- 1000
a &amp;lt;- 0.01
b &amp;lt;- 1
set.seed(5)
x &amp;lt;- runif(m,a,b)
y &amp;lt;- 10*runif(m,0,1)

for (i in 1:m){
    if(y[i]&amp;lt;(x[i]^(-0.5))){
        s[i] &amp;lt;- 1
    }
    else{
        s[i] &amp;lt;-0
    }
}

nn&amp;lt;- sum(s)*(b-a)/m*10 #note that the addition of the area of the rectangle
print(nn)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.683&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(x,y)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/Simulation_basics_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;f2 &amp;lt;- function(x)   sqrt(1-x^2)

s &amp;lt;- seq(-1 , 1 ,by=0.001)
plot(s,f2(s))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/Simulation_basics_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Get the max value of function within the range
c &amp;lt;- ceiling(max(f2(s)))
# [1] 1

n &amp;lt;- 1000000
a &amp;lt;- -1
b &amp;lt;- 1

set.seed(5)
x &amp;lt;- runif(n,a,b)
y &amp;lt;- c*runif(n,0,1)
R &amp;lt;- sum(y &amp;lt; f2(x))/n

(b-a)*c*R&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.57063&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#[1] 1.57063 # multiply it by 2 to get full area

pi/2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.570796&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#[1] 1.570796&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sim HW2 does a good job showing confidence intervals and convergence of normals, exponentials, and lognormals.&lt;/p&gt;
&lt;p&gt;Sim HW4 shows how to run 5 tests for independance (Runs, Autocorrelation), uniformity (Chi-Squared and KS), or both (Serial)&lt;/p&gt;
&lt;p&gt;Sim HW5 shows how to generate RVs recurseively until they drop below a certain variance.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#CLT Basics https://stats.stackexchange.com/questions/22557/central-limit-theorem-versus-law-of-large-numbers
#https://www.probabilitycourse.com/chapter7/7_2_4_convergence_in_distribution.php
#https://www.analyticsvidhya.com/blog/2019/05/statistics-101-introduction-central-limit-theorem/

#LLN (WLLN - convergence in prob) (SLLN - almost sure convergence) (CLT - convergence in distribution)
#WLLN https://www.probabilitycourse.com/chapter7/7_2_5_convergence_in_probability.php
#SLLN and continous mapping theroem https://www.probabilitycourse.com/chapter7/7_2_7_almost_sure_convergence.php

#Probability Basics
#https://daviddalpiaz.github.io/r4sl/probability-review.html&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add a new chunk by clicking the &lt;em&gt;Insert Chunk&lt;/em&gt; button on the toolbar or by pressing &lt;em&gt;Ctrl+Alt+I&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the &lt;em&gt;Preview&lt;/em&gt; button or press &lt;em&gt;Ctrl+Shift+K&lt;/em&gt; to preview the HTML file).&lt;/p&gt;
&lt;p&gt;The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike &lt;em&gt;Knit&lt;/em&gt;, &lt;em&gt;Preview&lt;/em&gt; does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Statistic Basics and Linear Regression</title>
      <link>/post/orie/stat_basics/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/orie/stat_basics/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This post explores some of the basic concepts of statistics.
I mostly explore these concepts using linear regression.
This is a reproducible example if you have R Studio just make sure you have installed the correct packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#http://r-statistics.co/Linear-Regression.html
#https://www.statmethods.net/stats/regression.html
#http://r-statistics.co/Statistical-Tests-in-R.html
#http://www.sthda.com/english/articles/40-regression-analysis/166-predict-in-r-model-predictions-and-confidence-intervals/


#Dr. Sager Utexas datasets

data &amp;lt;- read.table(&amp;#39;AustinApartmentRents1.txt&amp;#39;, header = TRUE)
summary(data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       Rent             Area     
##  Min.   : 399.0   Min.   : 474  
##  1st Qu.: 470.0   1st Qu.: 666  
##  Median : 535.0   Median : 755  
##  Mean   : 572.3   Mean   : 816  
##  3rd Qu.: 638.8   3rd Qu.: 925  
##  Max.   :1050.0   Max.   :1864&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cor(data$Rent, data$Area)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.8740597&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model &amp;lt;- lm(Rent ~ Area, data = data)

summary(model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = Rent ~ Area, data = data)
## 
## Residuals:
##      Min       1Q   Median       3Q      Max 
## -154.659  -50.882    8.189   54.874  148.207 
## 
## Coefficients:
##              Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept) 160.18706   31.36081   5.108  3.8e-06 ***
## Area          0.50497    0.03685  13.702  &amp;lt; 2e-16 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 68.86 on 58 degrees of freedom
## Multiple R-squared:  0.764,  Adjusted R-squared:  0.7599 
## F-statistic: 187.7 on 1 and 58 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test.Areas &amp;lt;- data.frame(Area = c (500,1000))
predict(model, newdata = test.Areas)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        1        2 
## 412.6713 665.1556&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data1 &amp;lt;- read.table(&amp;#39;AustinApartmentRents2.txt&amp;#39;, header = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#A convient tool to see a lot of the initial data exploration
#https://towardsdatascience.com/simple-fast-exploratory-data-analysis-in-r-with-dataexplorer-package-e055348d9619

library(DataExplorer)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;DataExplorer&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_str(data1)
plot_missing(data1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/Stat_basics_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_histogram(data1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/Stat_basics_files/figure-html/unnamed-chunk-2-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_density(data1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/Stat_basics_files/figure-html/unnamed-chunk-2-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_correlation(data1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/Stat_basics_files/figure-html/unnamed-chunk-2-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_bar(data1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/Stat_basics_files/figure-html/unnamed-chunk-2-5.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#create_report(data1) #This creates an HTML report of all the above information and more&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Confidence intervals around indivudual values
pred.int &amp;lt;- predict(model, interval = &amp;#39;prediction&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in predict.lm(model, interval = &amp;quot;prediction&amp;quot;): predictions on current data refer to _future_ responses&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Confidence intervals around means
pred.conf &amp;lt;- predict(model, interval = &amp;#39;confidence&amp;#39;)

cbind(data,pred.int,pred.conf)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Rent Area       fit      lwr       upr       fit       lwr       upr
## 1   519  725  526.2893 387.1539  665.4247  526.2893  507.2700  545.3085
## 2   765  995  662.6308 523.0320  802.2296  662.6308  640.4747  684.7868
## 3   475  481  403.0769 261.9228  544.2310  403.0769  372.6213  433.5326
## 4   575  925  627.2830 488.0776  766.4884  627.2830  607.7583  646.8077
## 5   415  600  463.1682 323.2840  603.0524  463.1682  439.2801  487.0563
## 6   530  668  497.5061 358.1044  636.9078  497.5061  476.6278  518.3843
## 7   580  725  526.2893 387.1539  665.4247  526.2893  507.2700  545.3085
## 8   995 1421  877.7474 731.7844 1023.7104  877.7474  829.7031  925.7917
## 9   565  672  499.5259 360.1470  638.9048  499.5259  478.8005  520.2514
## 10  620 1025  677.7799 537.9544  817.6053  677.7799  654.2379  701.3218
## 11  450  781  554.5675 415.5703  693.5648  554.5675  536.5869  572.5481
## 12  520  800  564.1619 425.1837  703.1402  564.1619  546.3289  581.9950
## 13  495  870  599.5097 460.4795  738.5399  599.5097  581.2764  617.7431
## 14  420  700  513.6651 374.4284  652.9017  513.6651  493.9190  533.4112
## 15  575  800  564.1619 425.1837  703.1402  564.1619  546.3289  581.9950
## 16  425  620  473.2676 333.5438  612.9913  473.2676  450.3375  496.1977
## 17  770 1040  685.3544 545.4026  825.3061  685.3544  661.0735  709.6352
## 18  445  520  422.7707 282.0919  563.4495  422.7707  394.5998  450.9416
## 19  510  880  604.5594 465.5062  743.6127  604.5594  586.1509  622.9679
## 20  635  832  580.3209 441.3427  719.2991  580.3209  562.4884  598.1535
## 21  470  545  435.3949 294.9906  575.7993  435.3949  408.6285  462.1614
## 22  700  921  625.2631 486.0744  764.4518  625.2631  605.8580  644.6682
## 23  450  577  451.5539 311.4663  591.6416  451.5539  426.5018  476.6060
## 24  785 1080  705.5531 565.2224  845.8838  705.5531  679.1757  731.9306
## 25  485  710  518.7147 379.5215  657.9080  518.7147  499.2771  538.1524
## 26  415  605  465.6930 325.8504  605.5357  465.6930  442.0494  489.3367
## 27  399  680  503.5657 364.2305  642.9008  503.5657  483.1366  523.9948
## 28  585  730  528.8141 389.6960  667.9322  528.8141  509.9220  547.7063
## 29  525  687  507.1005 367.8016  646.3994  507.1005  486.9201  527.2809
## 30  495  703  515.1800 375.9568  654.4032  515.1800  495.5288  534.8311
## 31  505  672  499.5259 360.1470  638.9048  499.5259  478.8005  520.2514
## 32  445  660  493.4663 354.0171  632.9155  493.4663  472.2734  514.6593
## 33  565  755  541.4383 402.3922  680.4845  541.4383  523.0835  559.7931
## 34  650  810  569.2116 430.2377  708.1855  569.2116  551.4123  587.0109
## 35  515  611  468.7229 328.9288  608.5169  468.7229  445.3683  492.0774
## 36  470  705  516.1899 376.9755  655.4044  516.1899  496.6009  535.7789
## 37  470  564  444.9893 304.7778  585.2009  444.9893  419.2531  470.7255
## 38  700 1250  791.3978 648.7851  934.0105  791.3978  754.7720  828.0235
## 39  455  512  418.7310 277.9593  559.5026  418.7310  390.1001  447.3618
## 40  550  630  478.3173 338.6680  617.9666  478.3173  455.8452  500.7893
## 41  625  850  589.4103 450.4146  728.4061  589.4103  571.4413  607.3794
## 42  745 1156  743.9307 602.7129  885.1486  743.9307  713.1810  774.6805
## 43  540  932  630.8178 491.5816  770.0540  630.8178  611.0749  650.5607
## 44  650  755  541.4383 402.3922  680.4845  541.4383  523.0835  559.7931
## 45  595 1093  712.1177 571.6507  852.5847  712.1177  685.0246  739.2108
## 46  470  751  539.4185 400.3624  678.4745  539.4185  520.9890  557.8479
## 47  480  608  467.2080 327.3898  607.0261  467.2080  443.7095  490.7064
## 48  460  900  614.6588 475.5477  753.7699  614.6588  595.8181  633.4994
## 49  600  860  594.4600 455.4490  733.4711  594.4600  576.3734  612.5467
## 50  575  925  627.2830 488.0776  766.4884  627.2830  607.7583  646.8077
## 51  659  944  636.8774 497.5840  776.1708  636.8774  616.7351  657.0197
## 52  650  940  634.8575 495.5838  774.1312  634.8575  614.8518  654.8632
## 53  750 1048  689.3941 549.3715  829.4168  689.3941  664.7079  714.0803
## 54  455  474  399.5422 258.2967  540.7876  399.5422  368.6660  430.4184
## 55  430  700  513.6651 374.4284  652.9017  513.6651  493.9190  533.4112
## 56  605  921  625.2631 486.0744  764.4518  625.2631  605.8580  644.6682
## 57  929 1229  780.7934 638.5205  923.0664  780.7934  745.5138  816.0731
## 58  695  896  612.6389 473.5406  751.7372  612.6389  593.8932  631.3846
## 59  455  630  478.3173 338.6680  617.9666  478.3173  455.8452  500.7893
## 60 1050 1864 1101.4485 942.4198 1260.4772 1101.4485 1022.1188 1180.7782&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# 2. Regression line + confidence intervals
library(&amp;quot;ggplot2&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;ggplot2&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mydata &amp;lt;- cbind(data, pred.int)
p &amp;lt;- ggplot(mydata, aes(Area, Rent)) +
  geom_point() +
  stat_smooth(method = lm)
# 3. Add prediction intervals
p + geom_line(aes(y = lwr), color = &amp;quot;red&amp;quot;, linetype = &amp;quot;dashed&amp;quot;)+
    geom_line(aes(y = upr), color = &amp;quot;red&amp;quot;, linetype = &amp;quot;dashed&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/Stat_basics_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#T Test for samples
library(dplyr)

sample1 &amp;lt;- sample_n(data,40)

model1 &amp;lt;- lm(Rent ~ Area, data = data)

p1 &amp;lt;- predict(model1, interval = &amp;#39;confidence&amp;#39;, level = 0.95)

summary(p1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       fit              lwr              upr        
##  Min.   : 399.5   Min.   : 368.7   Min.   : 430.4  
##  1st Qu.: 496.5   1st Qu.: 475.5   1st Qu.: 517.5  
##  Median : 541.4   Median : 523.1   Median : 559.8  
##  Mean   : 572.3   Mean   : 548.8   Mean   : 595.7  
##  3rd Qu.: 627.3   3rd Qu.: 607.8   3rd Qu.: 646.8  
##  Max.   :1101.4   Max.   :1022.1   Max.   :1180.8&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;t.test(p1, mu = 550)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  One Sample t-test
## 
## data:  p1
## t = 2.4118, df = 179, p-value = 0.01688
## alternative hypothesis: true mean is not equal to 550
## 95 percent confidence interval:
##  554.0485 590.4849
## sample estimates:
## mean of x 
##  572.2667&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#MultiVariable Linear Regression


summary(data1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       Rent             Area         Bedrooms       Bathrooms   
##  Min.   : 399.0   Min.   : 474   Min.   :1.000   Min.   :1.00  
##  1st Qu.: 470.0   1st Qu.: 666   1st Qu.:1.000   1st Qu.:1.00  
##  Median : 535.0   Median : 755   Median :1.000   Median :1.00  
##  Mean   : 572.3   Mean   : 816   Mean   :1.517   Mean   :1.25  
##  3rd Qu.: 638.8   3rd Qu.: 925   3rd Qu.:2.000   3rd Qu.:1.25  
##  Max.   :1050.0   Max.   :1864   Max.   :5.000   Max.   :2.00  
##     Security         Parking          Distance         Shuttle      
##  Min.   :0.0000   Min.   :0.0000   Min.   : 1.100   Min.   :0.0000  
##  1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.: 5.000   1st Qu.:1.0000  
##  Median :0.0000   Median :0.0000   Median : 6.000   Median :1.0000  
##  Mean   :0.1667   Mean   :0.1333   Mean   : 5.935   Mean   :0.8667  
##  3rd Qu.:0.0000   3rd Qu.:0.0000   3rd Qu.: 7.000   3rd Qu.:1.0000  
##  Max.   :1.0000   Max.   :1.0000   Max.   :10.500   Max.   :1.0000  
##       Age       
##  Min.   : 1.00  
##  1st Qu.:10.00  
##  Median :16.50  
##  Mean   :16.33  
##  3rd Qu.:22.25  
##  Max.   :32.00&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model2 &amp;lt;- lm(Rent ~ Area + Bathrooms, data = data1)
summary(model2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = Rent ~ Area + Bathrooms, data = data1)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -152.02  -45.45   10.38   39.91  129.28 
## 
## Coefficients:
##              Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept) 143.66927   29.51345   4.868 9.31e-06 ***
## Area          0.38746    0.04982   7.777 1.61e-10 ***
## Bathrooms    89.92902   27.75071   3.241  0.00199 ** 
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 63.83 on 57 degrees of freedom
## Multiple R-squared:  0.8007, Adjusted R-squared:  0.7937 
## F-statistic: 114.5 on 2 and 57 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test.bathrooms &amp;lt;- data.frame(Area = c(500,1000), Bathrooms = c(1,2))

p2a &amp;lt;- predict(model2, newdata = test.bathrooms, interval =  &amp;#39;confidence&amp;#39;)


p2 &amp;lt;- as.data.frame(predict(model2, interval = &amp;#39;confidence&amp;#39;, level = 0.95))

cbind(p2, data1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          fit      lwr       upr Rent Area Bedrooms Bathrooms Security Parking
## 1   514.5062 495.4259  533.5866  519  725        1         1        0       0
## 2   709.0493 673.7669  744.3316  765  995        2         2        0       0
## 3   419.9662 389.8581  450.0743  475  481        1         1        0       0
## 4   681.9271 643.6132  720.2411  575  925        2         2        0       1
## 5   466.0738 443.8498  488.2979  415  600        1         1        0       0
## 6   492.4211 472.8074  512.0348  530  668        1         1        0       0
## 7   514.5062 495.4259  533.5866  580  725        1         1        0       0
## 8   874.1069 829.4987  918.7151  995 1421        2         2        0       1
## 9   493.9709 474.4481  513.4937  565  672        1         1        0       0
## 10  630.7440 594.3939  667.0941  620 1025        2         1        1       0
## 11  536.2040 516.0356  556.3724  450  781        1         1        1       0
## 12  543.5657 522.6986  564.4328  520  800        2         1        0       0
## 13  570.6878 546.1304  595.2452  495  870        2         1        0       0
## 14  504.8198 485.7109  523.9287  420  700        1         1        0       0
## 15  543.5657 522.6986  564.4328  575  800        1         1        0       0
## 16  473.8230 452.5572  495.0888  425  620        1         1        0       0
## 17  726.4849 692.5303  760.4395  770 1040        2         2        0       1
## 18  435.0771 407.8700  462.2843  445  520        1         1        0       0
## 19  574.5624 549.3637  599.7611  510  880        2         1        0       1
## 20  555.9644 533.6045  578.3243  635  832        1         1        0       0
## 21  444.7636 419.2769  470.2502  470  545        1         1        0       0
## 22  680.3773 641.8590  718.8955  700  921        2         2        0       0
## 23  457.1623 433.6744  480.6501  450  577        1         1        0       0
## 24  741.9833 708.7412  775.2254  785 1080        2         2        0       0
## 25  508.6944 489.6360  527.7527  485  710        1         1        0       0
## 26  468.0111 446.0397  489.9826  415  605        1         1        0       0
## 27  497.0706 477.7062  516.4349  399  680        1         1        0       1
## 28  516.4435 497.3298  535.5573  585  730        2         1        0       0
## 29  499.7828 480.5310  519.0346  525  687        1         1        0       0
## 30  505.9821 486.8939  525.0704  495  703        1         1        0       0
## 31  493.9709 474.4481  513.4937  505  672        1         1        1       0
## 32  489.3214 469.5030  509.1398  445  660        1         1        0       0
## 33  526.1300 506.6576  545.6024  565  755        2         1        0       0
## 34  547.4403 526.1468  568.7337  650  810        2         1        0       0
## 35  470.3359 448.6563  492.0154  515  611        1         1        0       0
## 36  506.7571 487.6799  525.8342  470  705        1         1        0       0
## 37  452.1253 427.8562  476.3944  470  564        1         1        0       0
## 38  807.8514 772.3992  843.3035  700 1250        3         2        0       1
## 39  431.9774 404.1949  459.7599  455  512        1         1        1       0
## 40  477.6976 456.8558  498.5395  550  630        1         1        0       0
## 41  562.9387 539.5887  586.2886  625  850        2         1        1       0
## 42  771.4302 738.2367  804.6237  745 1156        3         2        0       0
## 43  594.7103 565.8488  623.5718  540  932        2         1        0       0
## 44  526.1300 506.6576  545.6024  650  755        1         1        1       1
## 45  747.0203 713.9093  780.1312  595 1093        2         2        1       0
## 46  524.5802 505.1862  543.9741  470  751        1         1        1       0
## 47  469.1735 447.3496  490.9974  480  608        1         1        0       0
## 48  582.3116 555.7642  608.8590  460  900        1         1        0       1
## 49  566.8132 542.8728  590.7537  600  860        2         1        0       0
## 50  591.9981 563.6574  620.3388  575  925        2         1        0       0
## 51  689.2888 651.9023  726.6754  659  944        2         2        0       0
## 52  687.7390 650.1632  725.3148  650  940        2         2        0       0
## 53  729.5846 695.8090  763.3602  750 1048        2         2        0       0
## 54  417.2540 386.6020  447.9060  455  474        1         1        0       0
## 55  504.8198 485.7109  523.9287  430  700        1         1        0       0
## 56  590.4483 562.4017  618.4949  605  921        1         1        0       0
## 57  799.7147 764.9734  834.4561  929 1229        2         2        1       0
## 58  670.6908 630.8290  710.5526  695  896        2         2        0       0
## 59  477.6976 456.8558  498.5395  455  630        1         1        1       0
## 60 1045.7513 964.5360 1126.9667 1050 1864        5         2        0       0
##    Distance Shuttle Age
## 1      10.5       1   9
## 2       6.5       1  17
## 3       6.5       1  17
## 4       4.0       1   9
## 5       5.0       1  30
## 6       6.5       1  19
## 7       7.0       1  17
## 8       6.5       1  16
## 9       7.0       1  17
## 10      5.0       1   3
## 11      5.5       1   3
## 12      6.0       1  20
## 13      5.0       1  27
## 14      6.0       1  22
## 15      7.0       1  10
## 16      8.0       0  27
## 17      6.5       1  16
## 18      3.0       1  12
## 19      7.0       0  25
## 20      6.0       1  13
## 21      6.5       1   9
## 22      3.0       1  26
## 23      8.0       1  18
## 24      5.0       1  10
## 25      6.0       1  25
## 26      6.0       1  22
## 27      7.0       0  25
## 28      6.5       1  19
## 29      7.0       1  15
## 30      6.5       1  14
## 31      6.5       1   9
## 32      6.0       1  25
## 33      3.0       1  12
## 34      2.0       1  32
## 35      6.5       1  17
## 36      7.5       0  13
## 37      5.0       1  10
## 38      4.0       1   9
## 39     10.0       0  10
## 40      2.0       1  32
## 41      7.0       1   1
## 42      7.5       0  13
## 43      6.0       1  22
## 44      1.1       1  26
## 45      5.5       1   3
## 46      5.0       1   3
## 47      6.0       1  15
## 48      4.0       1   9
## 49      6.0       1  25
## 50      6.0       1  23
## 51      7.0       1  25
## 52      8.0       0  27
## 53      7.0       1   3
## 54      5.0       1  10
## 55      6.0       1  20
## 56      7.5       0  13
## 57      5.0       1  11
## 58      6.5       1  19
## 59      5.5       1   9
## 60      6.0       1  22&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p2a&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        fit      lwr      upr
## 1 427.3279 398.6624 455.9935
## 2 710.9866 675.8776 746.0955&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model3 &amp;lt;- lm(Rent ~ Area + Bathrooms + Security + Parking + Distance, data = data1)
summary(model3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = Rent ~ Area + Bathrooms + Security + Parking + Distance, 
##     data = data1)
## 
## Residuals:
##      Min       1Q   Median       3Q      Max 
## -163.199  -37.278    4.548   38.345  149.276 
## 
## Coefficients:
##              Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept) 167.45045   43.12346   3.883 0.000283 ***
## Area          0.39647    0.05084   7.798 2.09e-10 ***
## Bathrooms    92.60040   28.01804   3.305 0.001691 ** 
## Security     -0.67875   22.42818  -0.030 0.975969    
## Parking     -38.26531   25.89638  -1.478 0.145316    
## Distance     -4.92937    5.05014  -0.976 0.333374    
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 64.02 on 54 degrees of freedom
## Multiple R-squared:   0.81,  Adjusted R-squared:  0.7925 
## F-statistic: 46.06 on 5 and 54 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model4 &amp;lt;- lm(Rent ~ Distance + Parking + Security + Bathrooms + Area, data = data1)
summary(model4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = Rent ~ Distance + Parking + Security + Bathrooms + 
##     Area, data = data1)
## 
## Residuals:
##      Min       1Q   Median       3Q      Max 
## -163.199  -37.278    4.548   38.345  149.276 
## 
## Coefficients:
##              Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept) 167.45045   43.12346   3.883 0.000283 ***
## Distance     -4.92937    5.05014  -0.976 0.333374    
## Parking     -38.26531   25.89638  -1.478 0.145316    
## Security     -0.67875   22.42818  -0.030 0.975969    
## Bathrooms    92.60040   28.01804   3.305 0.001691 ** 
## Area          0.39647    0.05084   7.798 2.09e-10 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 64.02 on 54 degrees of freedom
## Multiple R-squared:   0.81,  Adjusted R-squared:  0.7925 
## F-statistic: 46.06 on 5 and 54 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Multicollinearity
#http://www.sthda.com/english/articles/39-regression-model-diagnostics/160-multicollinearity-essentials-and-vif-in-r/
library(caret)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;caret&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1234)

y &amp;lt;- runif(50,min=0, max =100)
x1 &amp;lt;- runif(50, min = 0, max = 100)
x2 &amp;lt;- runif(50, min = 0, max = 100)
z1 &amp;lt;- x1+x2
z2 &amp;lt;- x1 + x2 + 0.005*runif(50,min=0, max =100)



list &amp;lt;- cbind(y,x1,x2,z1,z2)
list&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                y        x1        x2        z1        z2
##  [1,] 11.3703411  7.377988  3.545673  10.92366  11.14318
##  [2,] 62.2299405 30.968660 56.507611  87.47627  87.59057
##  [3,] 60.9274733 71.727174 28.025778  99.75295  99.79403
##  [4,] 62.3379442 50.454591 20.419632  70.87422  71.29936
##  [5,] 86.0915384 15.299896 13.373890  28.67379  28.79112
##  [6,] 64.0310605 50.393349 32.568192  82.96154  83.45562
##  [7,]  0.9495756 49.396092 15.506197  64.90229  65.20324
##  [8,] 23.2550506 75.120020 12.996214  88.11623  88.61560
##  [9,] 66.6083758 17.464982 43.553106  61.01809  61.20589
## [10,] 51.4251141 84.839241  3.864265  88.70351  88.98107
## [11,] 69.3591292 86.483383 71.330156 157.81354 158.02826
## [12,] 54.4974836  4.185728 10.076904  14.26263  14.55057
## [13,] 28.2733584 31.718216 95.030494 126.74871 126.96496
## [14,] 92.3433484  1.374994 12.181776  13.55677  13.66919
## [15,] 29.2315840 23.902573 21.965662  45.86823  45.91073
## [16,] 83.7295628 70.649462 91.308777 161.95824 162.27689
## [17,] 28.6223285 30.809476 94.585312 125.39479 125.61030
## [18,] 26.6820780 50.854757 27.915622  78.77038  78.80674
## [19,] 18.6722790  5.164662 12.347109  17.51177  17.91297
## [20,] 23.2225911 56.456984 79.716046 136.17303 136.33567
## [21,] 31.6612455 12.148019 74.427722  86.57574  86.95438
## [22,] 30.2693371 89.283638 91.597422 180.88106 181.17320
## [23,] 15.9046003  1.462726 99.459825 100.92255 101.27697
## [24,]  3.9995918 78.312110 94.236072 172.54818 172.76167
## [25,] 21.8799541  8.996133 48.613541  57.60967  57.78146
## [26,] 81.0598552 51.918998 28.345954  80.26495  80.64451
## [27,] 52.5697547 38.426669 25.154570  63.58124  63.79325
## [28,] 91.4658166  7.005250 50.325517  57.33077  57.61121
## [29,] 83.1345047 32.064442 49.696617  81.76106  81.81913
## [30,]  4.5770263 66.849540 31.844581  98.69412  98.84563
## [31,] 45.6091482 92.640048 96.222283 188.86233 189.10173
## [32,] 26.5186672 47.190972 63.409937 110.60091 110.77332
## [33,] 30.4672203 14.261534 12.743340  27.00487  27.30523
## [34,] 50.7306870 54.426976 42.304699  96.73167  96.76972
## [35,] 18.1096208 19.617465 91.431691 111.04916 111.52715
## [36,] 75.9670635 89.858049 46.779233 136.63728 136.64839
## [37,] 20.1248038 38.949978 90.816915 129.76689 130.18775
## [38,] 25.8809819 31.087078 59.774328  90.86141  91.17763
## [39,] 99.2150418 16.002866 63.174282  79.17715  79.33219
## [40,] 80.7352340 89.618585 86.915832 176.53442 176.90570
## [41,] 55.3333591 16.639378 50.274982  66.91436  67.23382
## [42,] 64.6406094 90.042460 98.363511 188.40597 188.90223
## [43,] 31.1824307 13.407820 32.438603  45.84642  45.91056
## [44,] 62.1819198 13.161413 48.137495  61.29891  61.74053
## [45,] 32.9770176 10.528750 35.698708  46.22746  46.63250
## [46,] 50.1997473 51.158358 62.747768 113.90613 114.31705
## [47,] 67.7094527 30.019905 74.160019 104.17992 104.59728
## [48,] 48.4991239  2.671690 56.596682  59.26837  59.63474
## [49,] 24.3928827 30.964743 98.078651 129.04339 129.53492
## [50,] 76.5459788 74.211966 57.681274 131.89324 132.21284&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cor(list)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                y         x1          x2            z1            z2
## y   1.0000000000 0.07758827 -0.07522322 -0.0005374415 -0.0008533985
## x1  0.0775882672 1.00000000  0.25313221  0.7815275201  0.7811302343
## x2 -0.0752232228 0.25313221  1.00000000  0.8013821453  0.8017562132
## z1 -0.0005374415 0.78152752  0.80138215  1.0000000000  0.9999955888
## z2 -0.0008533985 0.78113023  0.80175621  0.9999955888  1.0000000000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#model catches exact multicollinearity easily
mcmodel1 &amp;lt;- lm(y ~ x1+x2+z1+z2)
summary(mcmodel1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = y ~ x1 + x2 + z1 + z2)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -48.767 -21.484  -2.126  19.999  53.375 
## 
## Coefficients: (1 not defined because of singularities)
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)    51.22      10.53   4.865 1.38e-05 ***
## x1             15.81      28.05   0.563    0.576    
## x2             15.65      28.09   0.557    0.580    
## z1                NA         NA      NA       NA    
## z2            -15.72      28.06  -0.560    0.578    
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 26.93 on 46 degrees of freedom
## Multiple R-squared:  0.0223, Adjusted R-squared:  -0.04146 
## F-statistic: 0.3498 on 3 and 46 DF,  p-value: 0.7895&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#has a harder time catching near multicollinearity useful to use VIF or tolerance
mcmodel2 &amp;lt;- lm(y ~ x1+x2+z2)
summary(mcmodel2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = y ~ x1 + x2 + z2)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -48.767 -21.484  -2.126  19.999  53.375 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)    51.22      10.53   4.865 1.38e-05 ***
## x1             15.81      28.05   0.563    0.576    
## x2             15.65      28.09   0.557    0.580    
## z2            -15.72      28.06  -0.560    0.578    
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 26.93 on 46 degrees of freedom
## Multiple R-squared:  0.0223, Adjusted R-squared:  -0.04146 
## F-statistic: 0.3498 on 3 and 46 DF,  p-value: 0.7895&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;car::vif(mcmodel2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        x1        x2        z2 
##  45305.13  49446.24 118711.40&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Can drop the collinear term
mcmodel3 &amp;lt;- lm(y ~ x1+x2)
summary(mcmodel3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = y ~ x1 + x2)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -50.044 -19.925  -0.354  19.215  55.525 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept) 47.74591    8.44508   5.654 8.96e-07 ***
## x1           0.09332    0.13522   0.690    0.493    
## x2          -0.08784    0.12964  -0.678    0.501    
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 26.73 on 47 degrees of freedom
## Multiple R-squared:  0.01564,    Adjusted R-squared:  -0.02625 
## F-statistic: 0.3733 on 2 and 47 DF,  p-value: 0.6905&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;car::vif(mcmodel3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       x1       x2 
## 1.068463 1.068463&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Or drop the other one
mcmodel4 &amp;lt;- lm(y ~ x1+z2)
summary(mcmodel4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = y ~ x1 + z2)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -50.050 -19.928  -0.363  19.217  55.519 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept) 47.77939    8.46296   5.646 9.21e-07 ***
## x1           0.18145    0.20950   0.866    0.391    
## z2          -0.08807    0.12948  -0.680    0.500    
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 26.73 on 47 degrees of freedom
## Multiple R-squared:  0.01571,    Adjusted R-squared:  -0.02618 
## F-statistic: 0.3751 on 2 and 47 DF,  p-value: 0.6893&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;car::vif(mcmodel4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       x1       z2 
## 2.565184 2.565184&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#normality check
#https://www.statmethods.net/stats/regression.html


nmodel &amp;lt;- summary(model2)
nmodel$residuals&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           1           2           3           4           5           6 
##    4.493754   55.950733   55.033809 -106.927120  -51.073841   37.578930 
##           7           8           9          10          11          12 
##   65.493754  120.893095   71.029094  -10.744020  -86.203964  -23.565690 
##          13          14          15          16          17          18 
##  -75.687837  -84.819765   31.434310  -48.823026   43.515067    9.922899 
##          19          20          21          22          23          24 
##  -64.562429   79.035614   25.236418   19.622717   -7.162278   43.016698 
##          25          26          27          28          29          30 
##  -23.694358  -53.011137  -98.070580   68.556457   25.217205  -10.982143 
##          31          32          33          34          35          36 
##   11.029094  -44.321396   38.869976  102.559718   44.664107  -36.757062 
##          37          38          39          40          41          42 
##   17.874692 -107.851374   23.022573   72.302382   62.061348  -26.430205 
##          43          44          45          46          47          48 
##  -54.710310  123.869976 -152.020273  -54.580187   10.826485 -122.311614 
##          49          50          51          52          53          54 
##   33.186756  -16.998095  -30.288845  -37.739008   20.415393   37.746024 
##          55          56          57          58          59          60 
##  -74.819765   14.551742  129.285270   24.309199  -22.697618    4.248650&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(model2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/Stat_basics_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hist(nmodel$residuals)

#Runs different tests for normality run from the predicted values for rent

p3 &amp;lt;- predict(model2)
summary(p3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   417.3   491.6   526.1   572.3   640.7  1045.8&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sd(p3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 125.7441&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#H0: from normal distribution p &amp;lt; 0.05 reject
shapiro.test(p3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Shapiro-Wilk normality test
## 
## data:  p3
## W = 0.86842, p-value = 1.114e-05&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#compares if two samples are from same distribution so comparing to a normal distribution H0: from different distributions p &amp;lt; 0.05 reject
ks.test(p3, rnorm(60,572.3,125.7441))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in ks.test(p3, rnorm(60, 572.3, 125.7441)): cannot compute exact p-value
## with ties&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Two-sample Kolmogorov-Smirnov test
## 
## data:  p3 and rnorm(60, 572.3, 125.7441)
## D = 0.18333, p-value = 0.2656
## alternative hypothesis: two-sided&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/Stat_basics_files/figure-html/unnamed-chunk-9-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Linearity Test
#https://bookdown.org/ccolonescu/RPoE4/further-inference-in-multiple-regression.html
#http://r-statistics.co/Statistical-Tests-in-R.html

library(lmtest)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;lmtest&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Ramsey RESET test test whether higher order polynomials are necessary H0: no higher order polynomials are necssary
resettest(model3, power = 2:3, type = &amp;#39;fitted&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  RESET test
## 
## data:  model3
## RESET = 1.3333, df1 = 2, df2 = 52, p-value = 0.2725&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;resettest(model3, power = 2:3, type = &amp;#39;regressor&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  RESET test
## 
## data:  model3
## RESET = 2.0443, df1 = 10, df2 = 44, p-value = 0.05111&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Heteroscedasticity
#Put simply, heteroscedasticity (also spelled heteroskedasticity) refers to the circumstance in which the variability of a variable is unequal across the range of values of a second variable that predicts it.
#http://www.statsmakemecry.com/smmctheblog/confusing-stats-terms-explained-heteroscedasticity-heteroske.html

#Fisher Test can be used to tell if two samples have the same variance H0: ratio of variances is 1 aka they are the same p &amp;lt; 0.05 reject H0
var.test(sample(35,p3, replace = TRUE),sample(35,p3, replace = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  F test to compare two variances
## 
## data:  sample(35, p3, replace = TRUE) and sample(35, p3, replace = TRUE)
## F = 0.91901, num df = 513, denom df = 513, p-value = 0.3391
## alternative hypothesis: true ratio of variances is not equal to 1
## 95 percent confidence interval:
##  0.7728094 1.0928623
## sample estimates:
## ratio of variances 
##          0.9190072&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Independance 

#Chi square tests if two caterogical variables are dependant on each other H0: variables are independant p &amp;lt; 0.05 reject H0
chisq.test(table(data1$Bedrooms,data1$Bathrooms))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in chisq.test(table(data1$Bedrooms, data1$Bathrooms)): Chi-squared
## approximation may be incorrect&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Pearson&amp;#39;s Chi-squared test
## 
## data:  table(data1$Bedrooms, data1$Bathrooms)
## X-squared = 29.391, df = 3, p-value = 1.853e-06&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(table(data1$Bedrooms,data1$Bathrooms))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Number of cases in table: 60 
## Number of factors: 2 
## Test for independence of all factors:
##  Chisq = 29.391, df = 3, p-value = 1.853e-06
##  Chi-squared approximation may be incorrect&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Correlation test between two continuous variables H0: correlation is 0 aka they are independant p &amp;lt; 0.05 reject H0

#All show some correlation
cor.test(data1$Rent, data1$Area)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Pearson&amp;#39;s product-moment correlation
## 
## data:  data1$Rent and data1$Area
## t = 13.702, df = 58, p-value &amp;lt; 2.2e-16
## alternative hypothesis: true correlation is not equal to 0
## 95 percent confidence interval:
##  0.7970327 0.9231055
## sample estimates:
##       cor 
## 0.8740597&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cor.test(data1$Bedrooms, data1$Area)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Pearson&amp;#39;s product-moment correlation
## 
## data:  data1$Bedrooms and data1$Area
## t = 12.811, df = 58, p-value &amp;lt; 2.2e-16
## alternative hypothesis: true correlation is not equal to 0
## 95 percent confidence interval:
##  0.7747757 0.9140118
## sample estimates:
##       cor 
## 0.8595894&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cor.test(data1$Bedrooms, data1$Bathrooms)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Pearson&amp;#39;s product-moment correlation
## 
## data:  data1$Bedrooms and data1$Bathrooms
## t = 6.6217, df = 58, p-value = 1.262e-08
## alternative hypothesis: true correlation is not equal to 0
## 95 percent confidence interval:
##  0.4826241 0.7800925
## sample estimates:
##       cor 
## 0.6561389&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cor.test(data1$Bedrooms, data1$Bathrooms)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Pearson&amp;#39;s product-moment correlation
## 
## data:  data1$Bedrooms and data1$Bathrooms
## t = 6.6217, df = 58, p-value = 1.262e-08
## alternative hypothesis: true correlation is not equal to 0
## 95 percent confidence interval:
##  0.4826241 0.7800925
## sample estimates:
##       cor 
## 0.6561389&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Are uncorrelated
cor.test(data1$Area, data1$Distance)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Pearson&amp;#39;s product-moment correlation
## 
## data:  data1$Area and data1$Distance
## t = -0.4492, df = 58, p-value = 0.655
## alternative hypothesis: true correlation is not equal to 0
## 95 percent confidence interval:
##  -0.3081967  0.1980052
## sample estimates:
##         cor 
## -0.05887988&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Both of these tests use log parameters as well as lag and leads to determine if the variance changes or if the predictors are truly independant of each other&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Other helpful Stat and R learning
#http://faculty.marshall.usc.edu/gareth-james/ISL/index.html
#https://web.stanford.edu/~hastie/ElemStatLearn/

#Essentials of Machine Learning https://www.analyticsvidhya.com/blog/2017/09/common-machine-learning-algorithms/

#CLT and Stat Basics https://www.analyticsvidhya.com/blog/2019/05/statistics-101-introduction-central-limit-theorem/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add a new chunk by clicking the &lt;em&gt;Insert Chunk&lt;/em&gt; button on the toolbar or by pressing &lt;em&gt;Ctrl+Alt+I&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the &lt;em&gt;Preview&lt;/em&gt; button or press &lt;em&gt;Ctrl+Shift+K&lt;/em&gt; to preview the HTML file).&lt;/p&gt;
&lt;p&gt;The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike &lt;em&gt;Knit&lt;/em&gt;, &lt;em&gt;Preview&lt;/em&gt; does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sim CCS City</title>
      <link>/post/orie/sci_res_city2/</link>
      <pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate>
      <guid>/post/orie/sci_res_city2/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I extended the work of (Wu and Plantinga 2003) using R and certain equation modififications to investigate how the addition of a light rail line would influence a city.&lt;/p&gt;
&lt;p&gt;Cities have housed most of the human race since 2004 and as a result influence most of the individual, commercial, and industrial energy and GHG patterns. However, city designs, have placed amenities in isolated suburban pockets, the abundance of roads have encouraged sprawl, and zoning laws have discouraged density. Therefore, for this study I will investigate how these choices can positively or negatively influence a city’s environmental footprint.&lt;/p&gt;
&lt;p&gt;I extended the work of (Wu and Plantinga 2003) using R and certain equation modififications to investigate how the addition of a light rail line would influence a city. First, I tried to replicate their city without any parks using their parameters. Second, I made some modifications to get the city to a scale that I could represent graphically. Third, I modeled the light rail as an amenity to see the influence it has on the city. Finally, I modeled the light rail so that it reduced travel costs for the citizens close to it instead of providing an amenity value.
The parameters I used where nearly identical to the (Wu and Plantinga 2003) parameters; however I did have to make some minor modifications. The given utility produced a much larger area then was graphically tractable, so I increased it to 6,000 for all the models excluding the original monocentric model which uses the original utility value. The transport cost for the rail is set to half of the normal transport costs (t¬¬rail=$500). The original parameters are shown in Table 1.&lt;/p&gt;
&lt;p&gt;Wu, Jun Jie, and Andrew J. Plantinga. 2003. “The Influence of Public Open Space on Urban Spatial Structure.” Journal of Environmental Economics and Management 46 (2): 288–309. &lt;a href=&#34;https://doi.org/10.1016/S0095-0696(03)00023-8&#34; class=&#34;uri&#34;&gt;https://doi.org/10.1016/S0095-0696(03)00023-8&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(ggplot2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: ggplot2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;ggplot2&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(grid)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: grid&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(gridExtra)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: gridExtra&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(RColorBrewer)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: RColorBrewer&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(viridis)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: viridis&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;viridis&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: viridisLite&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#budget 
#median income per capita Austin https://www.deptofnumbers.com/income/texas/austin/
y &amp;lt;- 40000

u &amp;lt;- c(0:150)
v &amp;lt;- c(0:150)

#Loop to give 15 miles worth of u and v

i &amp;lt;- 0
j &amp;lt;- 0
ii &amp;lt;- 1

while(i &amp;lt; 151){
  
  j &amp;lt;- 0
  while(j &amp;lt; 151){
  u[ii] &amp;lt;- i/5 - 15
  v[ii] &amp;lt;- j/5 - 15
  j &amp;lt;- j+1
  ii &amp;lt;- ii+1
  }
  
  i &amp;lt;- i +1
  
}

#distance from center
x &amp;lt;- sqrt(u^2+v^2)

#transportation cost 50 cents a mile by 320 days
t &amp;lt;- 1000
#housing price per sqft vector
p &amp;lt;- c(0:150)
#housing consumption (sqft) by mile vector
q &amp;lt;- c(0:150)
#general good
g &amp;lt;- c(0:150)
#utility level
V &amp;lt;- 4200
#alpha for Cobb Douglas
al &amp;lt;- .5
#beta for development cobb-douglas
bt &amp;lt;- 4/3
#capital 
c0 &amp;lt;- 0

#amentiy
ad &amp;lt;- 0.16
ng &amp;lt;- 1
d &amp;lt;- 0

#gamma for amenity
gm &amp;lt;- 0.5

#z distance to amentiy
z &amp;lt;- sqrt((x-d)^2)

#land rent/acre
r &amp;lt;- c(0:150)
#Housing floor space / acre
s &amp;lt;- c(0:150)
#ag rent
#Ausitn is about 8000 https://heritagelandbank.com/announcements/news-events/how-much-average-price-land-texas
ag &amp;lt;- 8000


#Multiplier values
tm1 &amp;lt;- 1 - 0
tm2 &amp;lt;- 1 - 0
tm3 &amp;lt;- 1 - 0
tm4 &amp;lt;- 1 - 0

im1 &amp;lt;- 1 + 0
im2 &amp;lt;- 1 + 0
im3 &amp;lt;- 1 + 0
im4 &amp;lt;- 1 + 0

am1 &amp;lt;- 1 + 0
am2 &amp;lt;- 1 + 0
am3 &amp;lt;- 1 + 0
am4 &amp;lt;- 1 + 0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#monocentric original model parameters, Iterations to determine Utility Value (V) that gives start of about 100k



V &amp;lt;- 4000

i &amp;lt;- 1

NN &amp;lt;- c(1:10)

while(i &amp;lt;= 10){

#finding x for various u,v
x &amp;lt;- sqrt(u^2+v^2)

#z distance to amentiy
z &amp;lt;- sqrt((x-d)^2)

#amentiy distribution
am &amp;lt;- 1 + ad*(exp(-ng*z))

#finding the price for various u,v
p &amp;lt;- (al^al*(1-al)^(1-al)*am^gm*(y-t*x)/V)^(1/al)

#optimal q
q &amp;lt;- al*(y-t*x)/p

#optimal g
g &amp;lt;- (1-al)*(y-t*x)



#theta some funciton of beta
ph &amp;lt;- ((bt-1)^((bt-1)/bt))/bt

#optimal r

r &amp;lt;- (ph*p)^(bt/(bt-1))

r1 &amp;lt;- ((ph*al)^al * (1-al)^(1-al) * (y-t*x)/V)^(bt/(al*(bt-1)))

#optimal s
s &amp;lt;- (p/bt)^(1/(bt-1))

s1 &amp;lt;- (bt-1)^(-1/bt) * (r)^(1/bt)




#population n s(floorspaceperacre/ floorspace per household * (size of square (sqmi)) * acres/sqmi * fraction of housing in area)
n &amp;lt;- s/q * (.2*.2) * 640 * .25  
#s &amp;lt;- n*q /(1 * 640 * .25 )
#q &amp;lt;-  s/(n*(1 * 640 * .25 ))



#Utility Value

U &amp;lt;- q^al*g^(1-al)

dfsc &amp;lt;- data.frame(u,v,x,p,g,q,s,r,U,n)

#delete values where ag rent exceeds land rent
dfsc1 &amp;lt;- dfsc[(dfsc$r &amp;gt; ag),]

#total population
NN[i] &amp;lt;- sum(dfsc1$n)

print(V)

V &amp;lt;- V + 50

i &amp;lt;- i + 1



}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4000
## [1] 4050
## [1] 4100
## [1] 4150
## [1] 4200
## [1] 4250
## [1] 4300
## [1] 4350
## [1] 4400
## [1] 4450&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dfsc1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          u    v         x        p        g         q        s         r
## 8531  -3.8 -0.2 3.8052595 16.59795 18097.37 1090.3376 1929.067  8004.640
## 8532  -3.8  0.0 3.8000000 16.60309 18100.00 1090.1587 1930.858  8014.550
## 8533  -3.8  0.2 3.8052595 16.59795 18097.37 1090.3376 1929.067  8004.640
## 8677  -3.6 -1.2 3.7947332 16.60823 18102.63 1089.9796 1932.653  8024.487
## 8678  -3.6 -1.0 3.7363083 16.66547 18131.85 1087.9889 1952.704  8135.684
## 8679  -3.6 -0.8 3.6878178 16.71322 18156.09 1086.3309 1969.539  8229.335
## 8680  -3.6 -0.6 3.6496575 16.75097 18175.17 1085.0221 1982.913  8303.926
## 8681  -3.6 -0.4 3.6221541 16.77826 18188.92 1084.0766 1992.622  8358.184
## 8682  -3.6 -0.2 3.6055513 16.79478 18197.22 1083.5048 1998.512  8391.142
## 8683  -3.6  0.0 3.6000000 16.80031 18200.00 1083.3134 2000.486  8402.197
## 8684  -3.6  0.2 3.6055513 16.79478 18197.22 1083.5048 1998.512  8391.142
## 8685  -3.6  0.4 3.6221541 16.77826 18188.92 1084.0766 1992.622  8358.184
## 8686  -3.6  0.6 3.6496575 16.75097 18175.17 1085.0221 1982.913  8303.926
## 8687  -3.6  0.8 3.6878178 16.71322 18156.09 1086.3309 1969.539  8229.335
## 8688  -3.6  1.0 3.7363083 16.66547 18131.85 1087.9889 1952.704  8135.684
## 8689  -3.6  1.2 3.7947332 16.60823 18102.63 1089.9796 1932.653  8024.487
## 8826  -3.4 -1.6 3.7576588 16.64452 18121.17 1088.7172 1945.348  8094.844
## 8827  -3.4 -1.4 3.6769553 16.72395 18161.52 1085.9587 1973.334  8250.487
## 8828  -3.4 -1.2 3.6055513 16.79478 18197.22 1083.5048 1998.512  8391.142
## 8829  -3.4 -1.0 3.5440090 16.85626 18228.00 1081.3786 2020.539  8514.682
## 8830  -3.4 -0.8 3.4928498 16.90768 18253.58 1079.6024 2039.089  8619.067
## 8831  -3.4 -0.6 3.4525353 16.94842 18273.73 1078.1967 2053.864  8702.437
## 8832  -3.4 -0.4 3.4234486 16.97794 18288.28 1077.1790 2064.612  8763.212
## 8833  -3.4 -0.2 3.4058773 16.99581 18297.06 1076.5628 2071.141  8800.184
## 8834  -3.4  0.0 3.4000000 17.00180 18300.00 1076.3564 2073.332  8812.595
## 8835  -3.4  0.2 3.4058773 16.99581 18297.06 1076.5628 2071.141  8800.184
## 8836  -3.4  0.4 3.4234486 16.97794 18288.28 1077.1790 2064.612  8763.212
## 8837  -3.4  0.6 3.4525353 16.94842 18273.73 1078.1967 2053.864  8702.437
## 8838  -3.4  0.8 3.4928498 16.90768 18253.58 1079.6024 2039.089  8619.067
## 8839  -3.4  1.0 3.5440090 16.85626 18228.00 1081.3786 2020.539  8514.682
## 8840  -3.4  1.2 3.6055513 16.79478 18197.22 1083.5048 1998.512  8391.142
## 8841  -3.4  1.4 3.6769553 16.72395 18161.52 1085.9587 1973.334  8250.487
## 8842  -3.4  1.6 3.7576588 16.64452 18121.17 1088.7172 1945.348  8094.844
## 8975  -3.2 -2.0 3.7735925 16.62891 18113.20 1089.2601 1939.880  8064.520
## 8976  -3.2 -1.8 3.6715120 16.72933 18164.24 1085.7721 1975.240  8261.110
## 8977  -3.2 -1.6 3.5777088 16.82254 18211.15 1082.5442 2008.439  8446.763
## 8978  -3.2 -1.4 3.4928498 16.90768 18253.58 1079.6024 2039.089  8619.067
## 8979  -3.2 -1.2 3.4176015 16.98388 18291.20 1076.9741 2066.782  8775.493
## 8980  -3.2 -1.0 3.3526109 17.05025 18323.69 1074.6875 2091.107  8913.477
## 8981  -3.2 -0.8 3.2984845 17.10595 18350.76 1072.7704 2111.667  9030.518
## 8982  -3.2 -0.6 3.2557641 17.15019 18372.12 1071.2484 2128.094  9124.307
## 8983  -3.2 -0.4 3.2249031 17.18231 18387.55 1070.1439 2140.074  9192.856
## 8984  -3.2 -0.2 3.2062439 17.20180 18396.88 1069.4738 2147.364  9234.634
## 8985  -3.2  0.0 3.2000000 17.20834 18400.00 1069.2492 2149.812  9248.670
## 8986  -3.2  0.2 3.2062439 17.20180 18396.88 1069.4738 2147.364  9234.634
## 8987  -3.2  0.4 3.2249031 17.18231 18387.55 1070.1439 2140.074  9192.856
## 8988  -3.2  0.6 3.2557641 17.15019 18372.12 1071.2484 2128.094  9124.307
## 8989  -3.2  0.8 3.2984845 17.10595 18350.76 1072.7704 2111.667  9030.518
## 8990  -3.2  1.0 3.3526109 17.05025 18323.69 1074.6875 2091.107  8913.477
## 8991  -3.2  1.2 3.4176015 16.98388 18291.20 1076.9741 2066.782  8775.493
## 8992  -3.2  1.4 3.4928498 16.90768 18253.58 1079.6024 2039.089  8619.067
## 8993  -3.2  1.6 3.5777088 16.82254 18211.15 1082.5442 2008.439  8446.763
## 8994  -3.2  1.8 3.6715120 16.72933 18164.24 1085.7721 1975.240  8261.110
## 8995  -3.2  2.0 3.7735925 16.62891 18113.20 1089.2601 1939.880  8064.520
## 9125  -3.0 -2.2 3.7202150 16.68129 18139.89 1087.4392 1958.272  8166.627
## 9126  -3.0 -2.0 3.6055513 16.79478 18197.22 1083.5048 1998.512  8391.142
## 9127  -3.0 -1.8 3.4985711 16.90192 18250.71 1079.8014 2037.003  8607.315
## 9128  -3.0 -1.6 3.4000000 17.00180 18300.00 1076.3564 2073.332  8812.595
## 9129  -3.0 -1.4 3.3105891 17.09346 18344.71 1073.2002 2107.045  9004.172
## 9130  -3.0 -1.2 3.2310989 17.17585 18384.45 1070.3660 2137.661  9179.040
## 9131  -3.0 -1.0 3.1622777 17.24793 18418.86 1067.8883 2164.685  9334.081
## 9132  -3.0 -0.8 3.1048349 17.30864 18447.58 1065.8018 2187.625  9466.205
## 9133  -3.0 -0.6 3.0594117 17.35703 18470.29 1064.1390 2206.023  9572.504
## 9134  -3.0 -0.4 3.0265492 17.39225 18486.73 1062.9286 2219.481  9650.444
## 9135  -3.0 -0.2 3.0066593 17.41366 18496.67 1062.1929 2227.688  9698.051
## 9136  -3.0  0.0 3.0000000 17.42085 18500.00 1061.9460 2230.446  9714.064
## 9137  -3.0  0.2 3.0066593 17.41366 18496.67 1062.1929 2227.688  9698.051
## 9138  -3.0  0.4 3.0265492 17.39225 18486.73 1062.9286 2219.481  9650.444
## 9139  -3.0  0.6 3.0594117 17.35703 18470.29 1064.1390 2206.023  9572.504
## 9140  -3.0  0.8 3.1048349 17.30864 18447.58 1065.8018 2187.625  9466.205
## 9141  -3.0  1.0 3.1622777 17.24793 18418.86 1067.8883 2164.685  9334.081
## 9142  -3.0  1.2 3.2310989 17.17585 18384.45 1070.3660 2137.661  9179.040
## 9143  -3.0  1.4 3.3105891 17.09346 18344.71 1073.2002 2107.045  9004.172
## 9144  -3.0  1.6 3.4000000 17.00180 18300.00 1076.3564 2073.332  8812.595
## 9145  -3.0  1.8 3.4985711 16.90192 18250.71 1079.8014 2037.003  8607.315
## 9146  -3.0  2.0 3.6055513 16.79478 18197.22 1083.5048 1998.512  8391.142
## 9147  -3.0  2.2 3.7202150 16.68129 18139.89 1087.4392 1958.272  8166.627
## 9275  -2.8 -2.4 3.6878178 16.71322 18156.09 1086.3309 1969.539  8229.335
## 9276  -2.8 -2.2 3.5608988 16.83934 18219.55 1081.9632 2014.463  8480.560
## 9277  -2.8 -2.0 3.4409301 16.96019 18279.53 1077.7910 2058.143  8726.622
## 9278  -2.8 -1.8 3.3286634 17.07485 18335.67 1073.8408 2100.169  8965.018
## 9279  -2.8 -1.6 3.2249031 17.18231 18387.55 1070.1439 2140.074  9192.856
## 9280  -2.8 -1.4 3.1304952 17.28146 18434.75 1066.7360 2177.333  9406.871
## 9281  -2.8 -1.2 3.0463092 17.37105 18476.85 1063.6572 2211.374  9603.473
## 9282  -2.8 -1.0 2.9732137 17.44982 18513.39 1060.9501 2241.594  9778.855
## 9283  -2.8 -0.8 2.9120440 17.51649 18543.98 1058.6583 2267.384  9929.151
## 9284  -2.8 -0.6 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662
## 9285  -2.8 -0.4 2.8284271 17.60880 18585.79 1055.4831 2303.418 10140.104
## 9286  -2.8 -0.2 2.8071338 17.63253 18596.43 1054.6662 2312.745 10194.884
## 9287  -2.8  0.0 2.8000000 17.64050 18600.00 1054.3917 2315.883 10213.336
## 9288  -2.8  0.2 2.8071338 17.63253 18596.43 1054.6662 2312.745 10194.884
## 9289  -2.8  0.4 2.8284271 17.60880 18585.79 1055.4831 2303.418 10140.104
## 9290  -2.8  0.6 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662
## 9291  -2.8  0.8 2.9120440 17.51649 18543.98 1058.6583 2267.384  9929.151
## 9292  -2.8  1.0 2.9732137 17.44982 18513.39 1060.9501 2241.594  9778.855
## 9293  -2.8  1.2 3.0463092 17.37105 18476.85 1063.6572 2211.374  9603.473
## 9294  -2.8  1.4 3.1304952 17.28146 18434.75 1066.7360 2177.333  9406.871
## 9295  -2.8  1.6 3.2249031 17.18231 18387.55 1070.1439 2140.074  9192.856
## 9296  -2.8  1.8 3.3286634 17.07485 18335.67 1073.8408 2100.169  8965.018
## 9297  -2.8  2.0 3.4409301 16.96019 18279.53 1077.7910 2058.143  8726.622
## 9298  -2.8  2.2 3.5608988 16.83934 18219.55 1081.9632 2014.463  8480.560
## 9299  -2.8  2.4 3.6878178 16.71322 18156.09 1086.3309 1969.539  8229.335
## 9425  -2.6 -2.6 3.6769553 16.72395 18161.52 1085.9587 1973.334  8250.487
## 9426  -2.6 -2.4 3.5383612 16.86192 18230.82 1081.1829 2022.576  8526.130
## 9427  -2.6 -2.2 3.4058773 16.99581 18297.06 1076.5628 2071.141  8800.184
## 9428  -2.6 -2.0 3.2802439 17.12481 18359.88 1072.1215 2118.659  9070.409
## 9429  -2.6 -1.8 3.1622777 17.24793 18418.86 1067.8883 2164.685  9334.081
## 9430  -2.6 -1.6 3.0528675 17.36403 18473.57 1063.8985 2208.693  9587.954
## 9431  -2.6 -1.4 2.9529646 17.47181 18523.52 1060.1942 2250.079  9828.243
## 9432  -2.6 -1.2 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662
## 9433  -2.6 -1.0 2.7856777 17.65654 18607.16 1053.8394 2322.206 10250.534
## 9434  -2.6 -0.8 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987
## 9435  -2.6 -0.6 2.6683328 17.78969 18665.83 1049.2501 2375.138 10563.243
## 9436  -2.6 -0.4 2.6305893 17.83321 18684.71 1047.7480 2392.611 10666.981
## 9437  -2.6 -0.2 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732
## 9438  -2.6  0.0 2.6000000 17.86874 18700.00 1046.5206 2406.940 10752.243
## 9439  -2.6  0.2 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732
## 9440  -2.6  0.4 2.6305893 17.83321 18684.71 1047.7480 2392.611 10666.981
## 9441  -2.6  0.6 2.6683328 17.78969 18665.83 1049.2501 2375.138 10563.243
## 9442  -2.6  0.8 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987
## 9443  -2.6  1.0 2.7856777 17.65654 18607.16 1053.8394 2322.206 10250.534
## 9444  -2.6  1.2 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662
## 9445  -2.6  1.4 2.9529646 17.47181 18523.52 1060.1942 2250.079  9828.243
## 9446  -2.6  1.6 3.0528675 17.36403 18473.57 1063.8985 2208.693  9587.954
## 9447  -2.6  1.8 3.1622777 17.24793 18418.86 1067.8883 2164.685  9334.081
## 9448  -2.6  2.0 3.2802439 17.12481 18359.88 1072.1215 2118.659  9070.409
## 9449  -2.6  2.2 3.4058773 16.99581 18297.06 1076.5628 2071.141  8800.184
## 9450  -2.6  2.4 3.5383612 16.86192 18230.82 1081.1829 2022.576  8526.130
## 9451  -2.6  2.6 3.6769553 16.72395 18161.52 1085.9587 1973.334  8250.487
## 9575  -2.4 -2.8 3.6878178 16.71322 18156.09 1086.3309 1969.539  8229.335
## 9576  -2.4 -2.6 3.5383612 16.86192 18230.82 1081.1829 2022.576  8526.130
## 9577  -2.4 -2.4 3.3941125 17.00781 18302.94 1076.1495 2075.529  8825.049
## 9578  -2.4 -2.2 3.2557641 17.15019 18372.12 1071.2484 2128.094  9124.307
## 9579  -2.4 -2.0 3.1240999 17.28822 18437.95 1066.5035 2179.891  9421.611
## 9580  -2.4 -1.8 3.0000000 17.42085 18500.00 1061.9460 2230.446  9714.064
## 9581  -2.4 -1.6 2.8844410 17.54681 18557.78 1057.6158 2279.177  9998.070
## 9582  -2.4 -1.4 2.7784888 17.66461 18610.76 1053.5616 2325.391 10269.282
## 9583  -2.4 -1.2 2.6832816 17.77255 18658.36 1049.8414 2368.280 10522.594
## 9584  -2.4 -1.0 2.6000000 17.86874 18700.00 1046.5206 2406.940 10752.243
## 9585  -2.4 -0.8 2.5298221 17.95117 18735.09 1043.6695 2440.406 10952.036
## 9586  -2.4 -0.6 2.4738634 18.01787 18763.07 1041.3588 2467.711 11115.723
## 9587  -2.4 -0.4 2.4331050 18.06702 18783.45 1039.6536 2487.962 11237.516
## 9588  -2.4 -0.2 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680
## 9589  -2.4  0.0 2.4000000 18.10732 18800.00 1038.2543 2504.644 11338.097
## 9590  -2.4  0.2 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680
## 9591  -2.4  0.4 2.4331050 18.06702 18783.45 1039.6536 2487.962 11237.516
## 9592  -2.4  0.6 2.4738634 18.01787 18763.07 1041.3588 2467.711 11115.723
## 9593  -2.4  0.8 2.5298221 17.95117 18735.09 1043.6695 2440.406 10952.036
## 9594  -2.4  1.0 2.6000000 17.86874 18700.00 1046.5206 2406.940 10752.243
## 9595  -2.4  1.2 2.6832816 17.77255 18658.36 1049.8414 2368.280 10522.594
## 9596  -2.4  1.4 2.7784888 17.66461 18610.76 1053.5616 2325.391 10269.282
## 9597  -2.4  1.6 2.8844410 17.54681 18557.78 1057.6158 2279.177  9998.070
## 9598  -2.4  1.8 3.0000000 17.42085 18500.00 1061.9460 2230.446  9714.064
## 9599  -2.4  2.0 3.1240999 17.28822 18437.95 1066.5035 2179.891  9421.611
## 9600  -2.4  2.2 3.2557641 17.15019 18372.12 1071.2484 2128.094  9124.307
## 9601  -2.4  2.4 3.3941125 17.00781 18302.94 1076.1495 2075.529  8825.049
## 9602  -2.4  2.6 3.5383612 16.86192 18230.82 1081.1829 2022.576  8526.130
## 9603  -2.4  2.8 3.6878178 16.71322 18156.09 1086.3309 1969.539  8229.335
## 9725  -2.2 -3.0 3.7202150 16.68129 18139.89 1087.4392 1958.272  8166.627
## 9726  -2.2 -2.8 3.5608988 16.83934 18219.55 1081.9632 2014.463  8480.560
## 9727  -2.2 -2.6 3.4058773 16.99581 18297.06 1076.5628 2071.141  8800.184
## 9728  -2.2 -2.4 3.2557641 17.15019 18372.12 1071.2484 2128.094  9124.307
## 9729  -2.2 -2.2 3.1112698 17.30182 18444.37 1066.0364 2185.037  9451.277
## 9730  -2.2 -2.0 2.9732137 17.44982 18513.39 1060.9501 2241.594  9778.855
## 9731  -2.2 -1.8 2.8425341 17.59312 18578.73 1056.0224 2297.273 10104.053
## 9732  -2.2 -1.6 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987
## 9733  -2.2 -1.4 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732
## 9734  -2.2 -1.2 2.5059928 17.97947 18747.00 1042.6897 2451.964 11021.252
## 9735  -2.2 -1.0 2.4166092 18.08706 18791.70 1038.9580 2496.248 11287.445
## 9736  -2.2 -0.8 2.3409400 18.18006 18829.53 1035.7245 2534.950 11521.384
## 9737  -2.2 -0.6 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795
## 9738  -2.2 -0.4 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785
## 9739  -2.2 -0.2 2.2090722 18.34673 18895.46 1029.9090 2605.313 11949.745
## 9740  -2.2  0.0 2.2000000 18.35843 18900.00 1029.4998 2610.300 11980.251
## 9741  -2.2  0.2 2.2090722 18.34673 18895.46 1029.9090 2605.313 11949.745
## 9742  -2.2  0.4 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785
## 9743  -2.2  0.6 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795
## 9744  -2.2  0.8 2.3409400 18.18006 18829.53 1035.7245 2534.950 11521.384
## 9745  -2.2  1.0 2.4166092 18.08706 18791.70 1038.9580 2496.248 11287.445
## 9746  -2.2  1.2 2.5059928 17.97947 18747.00 1042.6897 2451.964 11021.252
## 9747  -2.2  1.4 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732
## 9748  -2.2  1.6 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987
## 9749  -2.2  1.8 2.8425341 17.59312 18578.73 1056.0224 2297.273 10104.053
## 9750  -2.2  2.0 2.9732137 17.44982 18513.39 1060.9501 2241.594  9778.855
## 9751  -2.2  2.2 3.1112698 17.30182 18444.37 1066.0364 2185.037  9451.277
## 9752  -2.2  2.4 3.2557641 17.15019 18372.12 1071.2484 2128.094  9124.307
## 9753  -2.2  2.6 3.4058773 16.99581 18297.06 1076.5628 2071.141  8800.184
## 9754  -2.2  2.8 3.5608988 16.83934 18219.55 1081.9632 2014.463  8480.560
## 9755  -2.2  3.0 3.7202150 16.68129 18139.89 1087.4392 1958.272  8166.627
## 9875  -2.0 -3.2 3.7735925 16.62891 18113.20 1089.2601 1939.880  8064.520
## 9876  -2.0 -3.0 3.6055513 16.79478 18197.22 1083.5048 1998.512  8391.142
## 9877  -2.0 -2.8 3.4409301 16.96019 18279.53 1077.7910 2058.143  8726.622
## 9878  -2.0 -2.6 3.2802439 17.12481 18359.88 1072.1215 2118.659  9070.409
## 9879  -2.0 -2.4 3.1240999 17.28822 18437.95 1066.5035 2179.891  9421.611
## 9880  -2.0 -2.2 2.9732137 17.44982 18513.39 1060.9501 2241.594  9778.855
## 9881  -2.0 -2.0 2.8284271 17.60880 18585.79 1055.4831 2303.418 10140.104
## 9882  -2.0 -1.8 2.6907248 17.76404 18654.64 1050.1351 2364.878 10502.445
## 9883  -2.0 -1.6 2.5612497 17.91409 18719.38 1044.9525 2425.315 10861.828
## 9884  -2.0 -1.4 2.4413111 18.05709 18779.34 1039.9985 2483.859 11212.816
## 9885  -2.0 -1.2 2.3323808 18.19069 18833.81 1035.3542 2539.402 11548.369
## 9886  -2.0 -1.0 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785
## 9887  -2.0 -0.8 2.1540659 18.41814 18922.97 1027.4091 2635.854 12136.883
## 9888  -2.0 -0.6 2.0880613 18.50542 18955.97 1024.3466 2673.505 12368.585
## 9889  -2.0 -0.4 2.0396078 18.57067 18980.20 1022.0526 2701.881 12543.930
## 9890  -2.0 -0.2 2.0099751 18.61108 18995.01 1020.6295 2719.557 12653.470
## 9891  -2.0  0.0 2.0000000 18.62477 19000.00 1020.1469 2725.564 12690.750
## 9892  -2.0  0.2 2.0099751 18.61108 18995.01 1020.6295 2719.557 12653.470
## 9893  -2.0  0.4 2.0396078 18.57067 18980.20 1022.0526 2701.881 12543.930
## 9894  -2.0  0.6 2.0880613 18.50542 18955.97 1024.3466 2673.505 12368.585
## 9895  -2.0  0.8 2.1540659 18.41814 18922.97 1027.4091 2635.854 12136.883
## 9896  -2.0  1.0 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785
## 9897  -2.0  1.2 2.3323808 18.19069 18833.81 1035.3542 2539.402 11548.369
## 9898  -2.0  1.4 2.4413111 18.05709 18779.34 1039.9985 2483.859 11212.816
## 9899  -2.0  1.6 2.5612497 17.91409 18719.38 1044.9525 2425.315 10861.828
## 9900  -2.0  1.8 2.6907248 17.76404 18654.64 1050.1351 2364.878 10502.445
## 9901  -2.0  2.0 2.8284271 17.60880 18585.79 1055.4831 2303.418 10140.104
## 9902  -2.0  2.2 2.9732137 17.44982 18513.39 1060.9501 2241.594  9778.855
## 9903  -2.0  2.4 3.1240999 17.28822 18437.95 1066.5035 2179.891  9421.611
## 9904  -2.0  2.6 3.2802439 17.12481 18359.88 1072.1215 2118.659  9070.409
## 9905  -2.0  2.8 3.4409301 16.96019 18279.53 1077.7910 2058.143  8726.622
## 9906  -2.0  3.0 3.6055513 16.79478 18197.22 1083.5048 1998.512  8391.142
## 9907  -2.0  3.2 3.7735925 16.62891 18113.20 1089.2601 1939.880  8064.520
## 10026 -1.8 -3.2 3.6715120 16.72933 18164.24 1085.7721 1975.240  8261.110
## 10027 -1.8 -3.0 3.4985711 16.90192 18250.71 1079.8014 2037.003  8607.315
## 10028 -1.8 -2.8 3.3286634 17.07485 18335.67 1073.8408 2100.169  8965.018
## 10029 -1.8 -2.6 3.1622777 17.24793 18418.86 1067.8883 2164.685  9334.081
## 10030 -1.8 -2.4 3.0000000 17.42085 18500.00 1061.9460 2230.446  9714.064
## 10031 -1.8 -2.2 2.8425341 17.59312 18578.73 1056.0224 2297.273 10104.053
## 10032 -1.8 -2.0 2.6907248 17.76404 18654.64 1050.1351 2364.878 10502.445
## 10033 -1.8 -1.8 2.5455844 17.93254 18727.21 1044.3143 2432.816 10906.641
## 10034 -1.8 -1.6 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680
## 10035 -1.8 -1.4 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795
## 10036 -1.8 -1.2 2.1633308 18.40603 18918.33 1027.8334 2630.658 12104.994
## 10037 -1.8 -1.0 2.0591260 18.54426 18970.44 1022.9815 2690.373 12472.744
## 10038 -1.8 -0.8 1.9697716 18.66655 19015.11 1018.6735 2743.946 12805.000
## 10039 -1.8 -0.6 1.8973666 18.76841 19051.32 1015.0737 2789.113 13086.800
## 10040 -1.8 -0.4 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655
## 10041 -1.8 -0.2 1.8110770 18.89333 19094.46 1010.6459 2845.175 13438.704
## 10042 -1.8  0.0 1.8000000 18.90965 19100.00 1010.0661 2852.559 13485.224
## 10043 -1.8  0.2 1.8110770 18.89333 19094.46 1010.6459 2845.175 13438.704
## 10044 -1.8  0.4 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655
## 10045 -1.8  0.6 1.8973666 18.76841 19051.32 1015.0737 2789.113 13086.800
## 10046 -1.8  0.8 1.9697716 18.66655 19015.11 1018.6735 2743.946 12805.000
## 10047 -1.8  1.0 2.0591260 18.54426 18970.44 1022.9815 2690.373 12472.744
## 10048 -1.8  1.2 2.1633308 18.40603 18918.33 1027.8334 2630.658 12104.994
## 10049 -1.8  1.4 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795
## 10050 -1.8  1.6 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680
## 10051 -1.8  1.8 2.5455844 17.93254 18727.21 1044.3143 2432.816 10906.641
## 10052 -1.8  2.0 2.6907248 17.76404 18654.64 1050.1351 2364.878 10502.445
## 10053 -1.8  2.2 2.8425341 17.59312 18578.73 1056.0224 2297.273 10104.053
## 10054 -1.8  2.4 3.0000000 17.42085 18500.00 1061.9460 2230.446  9714.064
## 10055 -1.8  2.6 3.1622777 17.24793 18418.86 1067.8883 2164.685  9334.081
## 10056 -1.8  2.8 3.3286634 17.07485 18335.67 1073.8408 2100.169  8965.018
## 10057 -1.8  3.0 3.4985711 16.90192 18250.71 1079.8014 2037.003  8607.315
## 10058 -1.8  3.2 3.6715120 16.72933 18164.24 1085.7721 1975.240  8261.110
## 10176 -1.6 -3.4 3.7576588 16.64452 18121.17 1088.7172 1945.348  8094.844
## 10177 -1.6 -3.2 3.5777088 16.82254 18211.15 1082.5442 2008.439  8446.763
## 10178 -1.6 -3.0 3.4000000 17.00180 18300.00 1076.3564 2073.332  8812.595
## 10179 -1.6 -2.8 3.2249031 17.18231 18387.55 1070.1439 2140.074  9192.856
## 10180 -1.6 -2.6 3.0528675 17.36403 18473.57 1063.8985 2208.693  9587.954
## 10181 -1.6 -2.4 2.8844410 17.54681 18557.78 1057.6158 2279.177  9998.070
## 10182 -1.6 -2.2 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987
## 10183 -1.6 -2.0 2.5612497 17.91409 18719.38 1044.9525 2425.315 10861.828
## 10184 -1.6 -1.8 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680
## 10185 -1.6 -1.6 2.2627417 18.27815 18868.63 1032.3051 2576.207 11772.074
## 10186 -1.6 -1.4 2.1260292 18.45500 18936.99 1026.1168 2651.709 12234.324
## 10187 -1.6 -1.2 2.0000000 18.62477 19000.00 1020.1469 2725.564 12690.750
## 10188 -1.6 -1.0 1.8867962 18.78350 19056.60 1014.5396 2795.846 13128.941
## 10189 -1.6 -0.8 1.7888544 18.92615 19105.57 1009.4799 2860.032 13532.353
## 10190 -1.6 -0.6 1.7088007 19.04680 19145.60 1005.1872 2915.076 13880.715
## 10191 -1.6 -0.4 1.6492423 19.13911 19175.38 1001.8949 2957.666 14151.773
## 10192 -1.6 -0.2 1.6124515 19.19729 19193.77  999.8169 2984.720 14324.632
## 10193 -1.6  0.0 1.6000000 19.21719 19200.00  999.1057 2994.010 14384.112
## 10194 -1.6  0.2 1.6124515 19.19729 19193.77  999.8169 2984.720 14324.632
## 10195 -1.6  0.4 1.6492423 19.13911 19175.38 1001.8949 2957.666 14151.773
## 10196 -1.6  0.6 1.7088007 19.04680 19145.60 1005.1872 2915.076 13880.715
## 10197 -1.6  0.8 1.7888544 18.92615 19105.57 1009.4799 2860.032 13532.353
## 10198 -1.6  1.0 1.8867962 18.78350 19056.60 1014.5396 2795.846 13128.941
## 10199 -1.6  1.2 2.0000000 18.62477 19000.00 1020.1469 2725.564 12690.750
## 10200 -1.6  1.4 2.1260292 18.45500 18936.99 1026.1168 2651.709 12234.324
## 10201 -1.6  1.6 2.2627417 18.27815 18868.63 1032.3051 2576.207 11772.074
## 10202 -1.6  1.8 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680
## 10203 -1.6  2.0 2.5612497 17.91409 18719.38 1044.9525 2425.315 10861.828
## 10204 -1.6  2.2 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987
## 10205 -1.6  2.4 2.8844410 17.54681 18557.78 1057.6158 2279.177  9998.070
## 10206 -1.6  2.6 3.0528675 17.36403 18473.57 1063.8985 2208.693  9587.954
## 10207 -1.6  2.8 3.2249031 17.18231 18387.55 1070.1439 2140.074  9192.856
## 10208 -1.6  3.0 3.4000000 17.00180 18300.00 1076.3564 2073.332  8812.595
## 10209 -1.6  3.2 3.5777088 16.82254 18211.15 1082.5442 2008.439  8446.763
## 10210 -1.6  3.4 3.7576588 16.64452 18121.17 1088.7172 1945.348  8094.844
## 10327 -1.4 -3.4 3.6769553 16.72395 18161.52 1085.9587 1973.334  8250.487
## 10328 -1.4 -3.2 3.4928498 16.90768 18253.58 1079.6024 2039.089  8619.067
## 10329 -1.4 -3.0 3.3105891 17.09346 18344.71 1073.2002 2107.045  9004.172
## 10330 -1.4 -2.8 3.1304952 17.28146 18434.75 1066.7360 2177.333  9406.871
## 10331 -1.4 -2.6 2.9529646 17.47181 18523.52 1060.1942 2250.079  9828.243
## 10332 -1.4 -2.4 2.7784888 17.66461 18610.76 1053.5616 2325.391 10269.282
## 10333 -1.4 -2.2 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732
## 10334 -1.4 -2.0 2.4413111 18.05709 18779.34 1039.9985 2483.859 11212.816
## 10335 -1.4 -1.8 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795
## 10336 -1.4 -1.6 2.1260292 18.45500 18936.99 1026.1168 2651.709 12234.324
## 10337 -1.4 -1.4 1.9798990 18.65250 19010.05 1019.1690 2737.758 12766.506
## 10338 -1.4 -1.2 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655
## 10339 -1.4 -1.0 1.7204651 19.02898 19139.77 1005.8220 2906.902 13828.847
## 10340 -1.4 -0.8 1.6124515 19.19729 19193.77  999.8169 2984.720 14324.632
## 10341 -1.4 -0.6 1.5231546 19.34240 19238.42  994.6242 3052.918 14762.692
## 10342 -1.4 -0.4 1.4560220 19.45539 19271.99  990.5733 3106.730 15110.660
## 10343 -1.4 -0.2 1.4142136 19.52756 19292.89  987.9830 3141.431 15336.115
## 10344 -1.4  0.0 1.4000000 19.55242 19300.00  987.0901 3153.445 15414.371
## 10345 -1.4  0.2 1.4142136 19.52756 19292.89  987.9830 3141.431 15336.115
## 10346 -1.4  0.4 1.4560220 19.45539 19271.99  990.5733 3106.730 15110.660
## 10347 -1.4  0.6 1.5231546 19.34240 19238.42  994.6242 3052.918 14762.692
## 10348 -1.4  0.8 1.6124515 19.19729 19193.77  999.8169 2984.720 14324.632
## 10349 -1.4  1.0 1.7204651 19.02898 19139.77 1005.8220 2906.902 13828.847
## 10350 -1.4  1.2 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655
## 10351 -1.4  1.4 1.9798990 18.65250 19010.05 1019.1690 2737.758 12766.506
## 10352 -1.4  1.6 2.1260292 18.45500 18936.99 1026.1168 2651.709 12234.324
## 10353 -1.4  1.8 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795
## 10354 -1.4  2.0 2.4413111 18.05709 18779.34 1039.9985 2483.859 11212.816
## 10355 -1.4  2.2 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732
## 10356 -1.4  2.4 2.7784888 17.66461 18610.76 1053.5616 2325.391 10269.282
## 10357 -1.4  2.6 2.9529646 17.47181 18523.52 1060.1942 2250.079  9828.243
## 10358 -1.4  2.8 3.1304952 17.28146 18434.75 1066.7360 2177.333  9406.871
## 10359 -1.4  3.0 3.3105891 17.09346 18344.71 1073.2002 2107.045  9004.172
## 10360 -1.4  3.2 3.4928498 16.90768 18253.58 1079.6024 2039.089  8619.067
## 10361 -1.4  3.4 3.6769553 16.72395 18161.52 1085.9587 1973.334  8250.487
## 10477 -1.2 -3.6 3.7947332 16.60823 18102.63 1089.9796 1932.653  8024.487
## 10478 -1.2 -3.4 3.6055513 16.79478 18197.22 1083.5048 1998.512  8391.142
## 10479 -1.2 -3.2 3.4176015 16.98388 18291.20 1076.9741 2066.782  8775.493
## 10480 -1.2 -3.0 3.2310989 17.17585 18384.45 1070.3660 2137.661  9179.040
## 10481 -1.2 -2.8 3.0463092 17.37105 18476.85 1063.6572 2211.374  9603.473
## 10482 -1.2 -2.6 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662
## 10483 -1.2 -2.4 2.6832816 17.77255 18658.36 1049.8414 2368.280 10522.594
## 10484 -1.2 -2.2 2.5059928 17.97947 18747.00 1042.6897 2451.964 11021.252
## 10485 -1.2 -2.0 2.3323808 18.19069 18833.81 1035.3542 2539.402 11548.369
## 10486 -1.2 -1.8 2.1633308 18.40603 18918.33 1027.8334 2630.658 12104.994
## 10487 -1.2 -1.6 2.0000000 18.62477 19000.00 1020.1469 2725.564 12690.750
## 10488 -1.2 -1.4 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655
## 10489 -1.2 -1.2 1.6970563 19.06482 19151.47 1004.5449 2923.360 13933.335
## 10490 -1.2 -1.0 1.5620499 19.27850 19218.98  996.9126 3022.757 14568.551
## 10491 -1.2 -0.8 1.4422205 19.47905 19278.89  989.7241 3118.081 15184.319
## 10492 -1.2 -0.6 1.3416408 19.65632 19329.18  983.3569 3203.986 15744.646
## 10493 -1.2 -0.4 1.2649111 19.79761 19367.54  978.2767 3273.575 16202.244
## 10494 -1.2 -0.2 1.2165525 19.88957 19391.72  974.9696 3319.402 16505.369
## 10495 -1.2  0.0 1.2000000 19.92159 19400.00  973.8181 3335.458 16611.903
## 10496 -1.2  0.2 1.2165525 19.88957 19391.72  974.9696 3319.402 16505.369
## 10497 -1.2  0.4 1.2649111 19.79761 19367.54  978.2767 3273.575 16202.244
## 10498 -1.2  0.6 1.3416408 19.65632 19329.18  983.3569 3203.986 15744.646
## 10499 -1.2  0.8 1.4422205 19.47905 19278.89  989.7241 3118.081 15184.319
## 10500 -1.2  1.0 1.5620499 19.27850 19218.98  996.9126 3022.757 14568.551
## 10501 -1.2  1.2 1.6970563 19.06482 19151.47 1004.5449 2923.360 13933.335
## 10502 -1.2  1.4 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655
## 10503 -1.2  1.6 2.0000000 18.62477 19000.00 1020.1469 2725.564 12690.750
## 10504 -1.2  1.8 2.1633308 18.40603 18918.33 1027.8334 2630.658 12104.994
## 10505 -1.2  2.0 2.3323808 18.19069 18833.81 1035.3542 2539.402 11548.369
## 10506 -1.2  2.2 2.5059928 17.97947 18747.00 1042.6897 2451.964 11021.252
## 10507 -1.2  2.4 2.6832816 17.77255 18658.36 1049.8414 2368.280 10522.594
## 10508 -1.2  2.6 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662
## 10509 -1.2  2.8 3.0463092 17.37105 18476.85 1063.6572 2211.374  9603.473
## 10510 -1.2  3.0 3.2310989 17.17585 18384.45 1070.3660 2137.661  9179.040
## 10511 -1.2  3.2 3.4176015 16.98388 18291.20 1076.9741 2066.782  8775.493
## 10512 -1.2  3.4 3.6055513 16.79478 18197.22 1083.5048 1998.512  8391.142
## 10513 -1.2  3.6 3.7947332 16.60823 18102.63 1089.9796 1932.653  8024.487
## 10628 -1.0 -3.6 3.7363083 16.66547 18131.85 1087.9889 1952.704  8135.684
## 10629 -1.0 -3.4 3.5440090 16.85626 18228.00 1081.3786 2020.539  8514.682
## 10630 -1.0 -3.2 3.3526109 17.05025 18323.69 1074.6875 2091.107  8913.477
## 10631 -1.0 -3.0 3.1622777 17.24793 18418.86 1067.8883 2164.685  9334.081
## 10632 -1.0 -2.8 2.9732137 17.44982 18513.39 1060.9501 2241.594  9778.855
## 10633 -1.0 -2.6 2.7856777 17.65654 18607.16 1053.8394 2322.206 10250.534
## 10634 -1.0 -2.4 2.6000000 17.86874 18700.00 1046.5206 2406.940 10752.243
## 10635 -1.0 -2.2 2.4166092 18.08706 18791.70 1038.9580 2496.248 11287.445
## 10636 -1.0 -2.0 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785
## 10637 -1.0 -1.8 2.0591260 18.54426 18970.44 1022.9815 2690.373 12472.744
## 10638 -1.0 -1.6 1.8867962 18.78350 19056.60 1014.5396 2795.846 13128.941
## 10639 -1.0 -1.4 1.7204651 19.02898 19139.77 1005.8220 2906.902 13828.847
## 10640 -1.0 -1.2 1.5620499 19.27850 19218.98  996.9126 3022.757 14568.551
## 10641 -1.0 -1.0 1.4142136 19.52756 19292.89  987.9830 3141.431 15336.115
## 10642 -1.0 -0.8 1.2806248 19.76823 19359.69  979.3335 3259.019 16106.259
## 10643 -1.0 -0.6 1.1661904 19.98787 19416.90  971.4344 3368.863 16834.098
## 10644 -1.0 -0.4 1.0770330 20.16866 19461.48  964.9367 3461.108 17451.478
## 10645 -1.0 -0.2 1.0198039 20.28959 19490.10  960.5961 3523.736 17873.788
## 10646 -1.0  0.0 1.0000000 20.33237 19500.00  959.0618 3546.075 18025.028
## 10647 -1.0  0.2 1.0198039 20.28959 19490.10  960.5961 3523.736 17873.788
## 10648 -1.0  0.4 1.0770330 20.16866 19461.48  964.9367 3461.108 17451.478
## 10649 -1.0  0.6 1.1661904 19.98787 19416.90  971.4344 3368.863 16834.098
## 10650 -1.0  0.8 1.2806248 19.76823 19359.69  979.3335 3259.019 16106.259
## 10651 -1.0  1.0 1.4142136 19.52756 19292.89  987.9830 3141.431 15336.115
## 10652 -1.0  1.2 1.5620499 19.27850 19218.98  996.9126 3022.757 14568.551
## 10653 -1.0  1.4 1.7204651 19.02898 19139.77 1005.8220 2906.902 13828.847
## 10654 -1.0  1.6 1.8867962 18.78350 19056.60 1014.5396 2795.846 13128.941
## 10655 -1.0  1.8 2.0591260 18.54426 18970.44 1022.9815 2690.373 12472.744
## 10656 -1.0  2.0 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785
## 10657 -1.0  2.2 2.4166092 18.08706 18791.70 1038.9580 2496.248 11287.445
## 10658 -1.0  2.4 2.6000000 17.86874 18700.00 1046.5206 2406.940 10752.243
## 10659 -1.0  2.6 2.7856777 17.65654 18607.16 1053.8394 2322.206 10250.534
## 10660 -1.0  2.8 2.9732137 17.44982 18513.39 1060.9501 2241.594  9778.855
## 10661 -1.0  3.0 3.1622777 17.24793 18418.86 1067.8883 2164.685  9334.081
## 10662 -1.0  3.2 3.3526109 17.05025 18323.69 1074.6875 2091.107  8913.477
## 10663 -1.0  3.4 3.5440090 16.85626 18228.00 1081.3786 2020.539  8514.682
## 10664 -1.0  3.6 3.7363083 16.66547 18131.85 1087.9889 1952.704  8135.684
## 10779 -0.8 -3.6 3.6878178 16.71322 18156.09 1086.3309 1969.539  8229.335
## 10780 -0.8 -3.4 3.4928498 16.90768 18253.58 1079.6024 2039.089  8619.067
## 10781 -0.8 -3.2 3.2984845 17.10595 18350.76 1072.7704 2111.667  9030.518
## 10782 -0.8 -3.0 3.1048349 17.30864 18447.58 1065.8018 2187.625  9466.205
## 10783 -0.8 -2.8 2.9120440 17.51649 18543.98 1058.6583 2267.384  9929.151
## 10784 -0.8 -2.6 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987
## 10785 -0.8 -2.4 2.5298221 17.95117 18735.09 1043.6695 2440.406 10952.036
## 10786 -0.8 -2.2 2.3409400 18.18006 18829.53 1035.7245 2534.950 11521.384
## 10787 -0.8 -2.0 2.1540659 18.41814 18922.97 1027.4091 2635.854 12136.883
## 10788 -0.8 -1.8 1.9697716 18.66655 19015.11 1018.6735 2743.946 12805.000
## 10789 -0.8 -1.6 1.7888544 18.92615 19105.57 1009.4799 2860.032 13532.353
## 10790 -0.8 -1.4 1.6124515 19.19729 19193.77  999.8169 2984.720 14324.632
## 10791 -0.8 -1.2 1.4422205 19.47905 19278.89  989.7241 3118.081 15184.319
## 10792 -0.8 -1.0 1.2806248 19.76823 19359.69  979.3335 3259.019 16106.259
## 10793 -0.8 -0.8 1.1313708 20.05742 19434.31  968.9341 3404.151 17069.619
## 10794 -0.8 -0.6 1.0000000 20.33237 19500.00  959.0618 3546.075 18025.028
## 10795 -0.8 -0.4 0.8944272 20.56913 19552.79  950.5888 3671.400 18879.377
## 10796 -0.8 -0.2 0.8246211 20.73427 19587.69  944.7013 3760.537 19492.994
## 10797 -0.8  0.0 0.8000000 20.79426 19600.00  942.5679 3793.272 19719.569
## 10798 -0.8  0.2 0.8246211 20.73427 19587.69  944.7013 3760.537 19492.994
## 10799 -0.8  0.4 0.8944272 20.56913 19552.79  950.5888 3671.400 18879.377
## 10800 -0.8  0.6 1.0000000 20.33237 19500.00  959.0618 3546.075 18025.028
## 10801 -0.8  0.8 1.1313708 20.05742 19434.31  968.9341 3404.151 17069.619
## 10802 -0.8  1.0 1.2806248 19.76823 19359.69  979.3335 3259.019 16106.259
## 10803 -0.8  1.2 1.4422205 19.47905 19278.89  989.7241 3118.081 15184.319
## 10804 -0.8  1.4 1.6124515 19.19729 19193.77  999.8169 2984.720 14324.632
## 10805 -0.8  1.6 1.7888544 18.92615 19105.57 1009.4799 2860.032 13532.353
## 10806 -0.8  1.8 1.9697716 18.66655 19015.11 1018.6735 2743.946 12805.000
## 10807 -0.8  2.0 2.1540659 18.41814 18922.97 1027.4091 2635.854 12136.883
## 10808 -0.8  2.2 2.3409400 18.18006 18829.53 1035.7245 2534.950 11521.384
## 10809 -0.8  2.4 2.5298221 17.95117 18735.09 1043.6695 2440.406 10952.036
## 10810 -0.8  2.6 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987
## 10811 -0.8  2.8 2.9120440 17.51649 18543.98 1058.6583 2267.384  9929.151
## 10812 -0.8  3.0 3.1048349 17.30864 18447.58 1065.8018 2187.625  9466.205
## 10813 -0.8  3.2 3.2984845 17.10595 18350.76 1072.7704 2111.667  9030.518
## 10814 -0.8  3.4 3.4928498 16.90768 18253.58 1079.6024 2039.089  8619.067
## 10815 -0.8  3.6 3.6878178 16.71322 18156.09 1086.3309 1969.539  8229.335
## 10930 -0.6 -3.6 3.6496575 16.75097 18175.17 1085.0221 1982.913  8303.926
## 10931 -0.6 -3.4 3.4525353 16.94842 18273.73 1078.1967 2053.864  8702.437
## 10932 -0.6 -3.2 3.2557641 17.15019 18372.12 1071.2484 2128.094  9124.307
## 10933 -0.6 -3.0 3.0594117 17.35703 18470.29 1064.1390 2206.023  9572.504
## 10934 -0.6 -2.8 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662
## 10935 -0.6 -2.6 2.6683328 17.78969 18665.83 1049.2501 2375.138 10563.243
## 10936 -0.6 -2.4 2.4738634 18.01787 18763.07 1041.3588 2467.711 11115.723
## 10937 -0.6 -2.2 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795
## 10938 -0.6 -2.0 2.0880613 18.50542 18955.97 1024.3466 2673.505 12368.585
## 10939 -0.6 -1.8 1.8973666 18.76841 19051.32 1015.0737 2789.113 13086.800
## 10940 -0.6 -1.6 1.7088007 19.04680 19145.60 1005.1872 2915.076 13880.715
## 10941 -0.6 -1.4 1.5231546 19.34240 19238.42  994.6242 3052.918 14762.692
## 10942 -0.6 -1.2 1.3416408 19.65632 19329.18  983.3569 3203.986 15744.646
## 10943 -0.6 -1.0 1.1661904 19.98787 19416.90  971.4344 3368.863 16834.098
## 10944 -0.6 -0.8 1.0000000 20.33237 19500.00  959.0618 3546.075 18025.028
## 10945 -0.6 -0.6 0.8485281 20.67690 19575.74  946.7442 3729.410 19278.163
## 10946 -0.6 -0.4 0.7211103 20.99298 19639.44  935.5243 3903.069 20484.262
## 10947 -0.6 -0.2 0.6324555 21.22896 19683.77  927.2133 4036.173 21420.936
## 10948 -0.6  0.0 0.6000000 21.31893 19700.00  924.0613 4087.710 21786.401
## 10949 -0.6  0.2 0.6324555 21.22896 19683.77  927.2133 4036.173 21420.936
## 10950 -0.6  0.4 0.7211103 20.99298 19639.44  935.5243 3903.069 20484.262
## 10951 -0.6  0.6 0.8485281 20.67690 19575.74  946.7442 3729.410 19278.163
## 10952 -0.6  0.8 1.0000000 20.33237 19500.00  959.0618 3546.075 18025.028
## 10953 -0.6  1.0 1.1661904 19.98787 19416.90  971.4344 3368.863 16834.098
## 10954 -0.6  1.2 1.3416408 19.65632 19329.18  983.3569 3203.986 15744.646
## 10955 -0.6  1.4 1.5231546 19.34240 19238.42  994.6242 3052.918 14762.692
## 10956 -0.6  1.6 1.7088007 19.04680 19145.60 1005.1872 2915.076 13880.715
## 10957 -0.6  1.8 1.8973666 18.76841 19051.32 1015.0737 2789.113 13086.800
## 10958 -0.6  2.0 2.0880613 18.50542 18955.97 1024.3466 2673.505 12368.585
## 10959 -0.6  2.2 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795
## 10960 -0.6  2.4 2.4738634 18.01787 18763.07 1041.3588 2467.711 11115.723
## 10961 -0.6  2.6 2.6683328 17.78969 18665.83 1049.2501 2375.138 10563.243
## 10962 -0.6  2.8 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662
## 10963 -0.6  3.0 3.0594117 17.35703 18470.29 1064.1390 2206.023  9572.504
## 10964 -0.6  3.2 3.2557641 17.15019 18372.12 1071.2484 2128.094  9124.307
## 10965 -0.6  3.4 3.4525353 16.94842 18273.73 1078.1967 2053.864  8702.437
## 10966 -0.6  3.6 3.6496575 16.75097 18175.17 1085.0221 1982.913  8303.926
## 11081 -0.4 -3.6 3.6221541 16.77826 18188.92 1084.0766 1992.622  8358.184
## 11082 -0.4 -3.4 3.4234486 16.97794 18288.28 1077.1790 2064.612  8763.212
## 11083 -0.4 -3.2 3.2249031 17.18231 18387.55 1070.1439 2140.074  9192.856
## 11084 -0.4 -3.0 3.0265492 17.39225 18486.73 1062.9286 2219.481  9650.444
## 11085 -0.4 -2.8 2.8284271 17.60880 18585.79 1055.4831 2303.418 10140.104
## 11086 -0.4 -2.6 2.6305893 17.83321 18684.71 1047.7480 2392.611 10666.981
## 11087 -0.4 -2.4 2.4331050 18.06702 18783.45 1039.6536 2487.962 11237.516
## 11088 -0.4 -2.2 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785
## 11089 -0.4 -2.0 2.0396078 18.57067 18980.20 1022.0526 2701.881 12543.930
## 11090 -0.4 -1.8 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655
## 11091 -0.4 -1.6 1.6492423 19.13911 19175.38 1001.8949 2957.666 14151.773
## 11092 -0.4 -1.4 1.4560220 19.45539 19271.99  990.5733 3106.730 15110.660
## 11093 -0.4 -1.2 1.2649111 19.79761 19367.54  978.2767 3273.575 16202.244
## 11094 -0.4 -1.0 1.0770330 20.16866 19461.48  964.9367 3461.108 17451.478
## 11095 -0.4 -0.8 0.8944272 20.56913 19552.79  950.5888 3671.400 18879.377
## 11096 -0.4 -0.6 0.7211103 20.99298 19639.44  935.5243 3903.069 20484.262
## 11097 -0.4 -0.4 0.5656854 21.41626 19717.16  920.6628 4143.953 22187.000
## 11098 -0.4 -0.2 0.4472136 21.77088 19776.39  908.3874 4353.232 23693.422
## 11099 -0.4  0.0 0.4000000 21.92081 19800.00  903.2515 4443.788 24352.855
## 11100 -0.4  0.2 0.4472136 21.77088 19776.39  908.3874 4353.232 23693.422
## 11101 -0.4  0.4 0.5656854 21.41626 19717.16  920.6628 4143.953 22187.000
## 11102 -0.4  0.6 0.7211103 20.99298 19639.44  935.5243 3903.069 20484.262
## 11103 -0.4  0.8 0.8944272 20.56913 19552.79  950.5888 3671.400 18879.377
## 11104 -0.4  1.0 1.0770330 20.16866 19461.48  964.9367 3461.108 17451.478
## 11105 -0.4  1.2 1.2649111 19.79761 19367.54  978.2767 3273.575 16202.244
## 11106 -0.4  1.4 1.4560220 19.45539 19271.99  990.5733 3106.730 15110.660
## 11107 -0.4  1.6 1.6492423 19.13911 19175.38 1001.8949 2957.666 14151.773
## 11108 -0.4  1.8 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655
## 11109 -0.4  2.0 2.0396078 18.57067 18980.20 1022.0526 2701.881 12543.930
## 11110 -0.4  2.2 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785
## 11111 -0.4  2.4 2.4331050 18.06702 18783.45 1039.6536 2487.962 11237.516
## 11112 -0.4  2.6 2.6305893 17.83321 18684.71 1047.7480 2392.611 10666.981
## 11113 -0.4  2.8 2.8284271 17.60880 18585.79 1055.4831 2303.418 10140.104
## 11114 -0.4  3.0 3.0265492 17.39225 18486.73 1062.9286 2219.481  9650.444
## 11115 -0.4  3.2 3.2249031 17.18231 18387.55 1070.1439 2140.074  9192.856
## 11116 -0.4  3.4 3.4234486 16.97794 18288.28 1077.1790 2064.612  8763.212
## 11117 -0.4  3.6 3.6221541 16.77826 18188.92 1084.0766 1992.622  8358.184
## 11231 -0.2 -3.8 3.8052595 16.59795 18097.37 1090.3376 1929.067  8004.640
## 11232 -0.2 -3.6 3.6055513 16.79478 18197.22 1083.5048 1998.512  8391.142
## 11233 -0.2 -3.4 3.4058773 16.99581 18297.06 1076.5628 2071.141  8800.184
## 11234 -0.2 -3.2 3.2062439 17.20180 18396.88 1069.4738 2147.364  9234.634
## 11235 -0.2 -3.0 3.0066593 17.41366 18496.67 1062.1929 2227.688  9698.051
## 11236 -0.2 -2.8 2.8071338 17.63253 18596.43 1054.6662 2312.745 10194.884
## 11237 -0.2 -2.6 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732
## 11238 -0.2 -2.4 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680
## 11239 -0.2 -2.2 2.2090722 18.34673 18895.46 1029.9090 2605.313 11949.745
## 11240 -0.2 -2.0 2.0099751 18.61108 18995.01 1020.6295 2719.557 12653.470
## 11241 -0.2 -1.8 1.8110770 18.89333 19094.46 1010.6459 2845.175 13438.704
## 11242 -0.2 -1.6 1.6124515 19.19729 19193.77  999.8169 2984.720 14324.632
## 11243 -0.2 -1.4 1.4142136 19.52756 19292.89  987.9830 3141.431 15336.115
## 11244 -0.2 -1.2 1.2165525 19.88957 19391.72  974.9696 3319.402 16505.369
## 11245 -0.2 -1.0 1.0198039 20.28959 19490.10  960.5961 3523.736 17873.788
## 11246 -0.2 -0.8 0.8246211 20.73427 19587.69  944.7013 3760.537 19492.994
## 11247 -0.2 -0.6 0.6324555 21.22896 19683.77  927.2133 4036.173 21420.936
## 11248 -0.2 -0.4 0.4472136 21.77088 19776.39  908.3874 4353.232 23693.422
## 11249 -0.2 -0.2 0.2828427 22.31619 19858.58  889.8733 4688.606 26157.954
## 11250 -0.2  0.0 0.2000000 22.61765 19900.00  879.8437 4881.198 27600.313
## 11251 -0.2  0.2 0.2828427 22.31619 19858.58  889.8733 4688.606 26157.954
## 11252 -0.2  0.4 0.4472136 21.77088 19776.39  908.3874 4353.232 23693.422
## 11253 -0.2  0.6 0.6324555 21.22896 19683.77  927.2133 4036.173 21420.936
## 11254 -0.2  0.8 0.8246211 20.73427 19587.69  944.7013 3760.537 19492.994
## 11255 -0.2  1.0 1.0198039 20.28959 19490.10  960.5961 3523.736 17873.788
## 11256 -0.2  1.2 1.2165525 19.88957 19391.72  974.9696 3319.402 16505.369
## 11257 -0.2  1.4 1.4142136 19.52756 19292.89  987.9830 3141.431 15336.115
## 11258 -0.2  1.6 1.6124515 19.19729 19193.77  999.8169 2984.720 14324.632
## 11259 -0.2  1.8 1.8110770 18.89333 19094.46 1010.6459 2845.175 13438.704
## 11260 -0.2  2.0 2.0099751 18.61108 18995.01 1020.6295 2719.557 12653.470
## 11261 -0.2  2.2 2.2090722 18.34673 18895.46 1029.9090 2605.313 11949.745
## 11262 -0.2  2.4 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680
## 11263 -0.2  2.6 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732
## 11264 -0.2  2.8 2.8071338 17.63253 18596.43 1054.6662 2312.745 10194.884
## 11265 -0.2  3.0 3.0066593 17.41366 18496.67 1062.1929 2227.688  9698.051
## 11266 -0.2  3.2 3.2062439 17.20180 18396.88 1069.4738 2147.364  9234.634
## 11267 -0.2  3.4 3.4058773 16.99581 18297.06 1076.5628 2071.141  8800.184
## 11268 -0.2  3.6 3.6055513 16.79478 18197.22 1083.5048 1998.512  8391.142
## 11269 -0.2  3.8 3.8052595 16.59795 18097.37 1090.3376 1929.067  8004.640
## 11382  0.0 -3.8 3.8000000 16.60309 18100.00 1090.1587 1930.858  8014.550
## 11383  0.0 -3.6 3.6000000 16.80031 18200.00 1083.3134 2000.486  8402.197
## 11384  0.0 -3.4 3.4000000 17.00180 18300.00 1076.3564 2073.332  8812.595
## 11385  0.0 -3.2 3.2000000 17.20834 18400.00 1069.2492 2149.812  9248.670
## 11386  0.0 -3.0 3.0000000 17.42085 18500.00 1061.9460 2230.446  9714.064
## 11387  0.0 -2.8 2.8000000 17.64050 18600.00 1054.3917 2315.883 10213.336
## 11388  0.0 -2.6 2.6000000 17.86874 18700.00 1046.5206 2406.940 10752.243
## 11389  0.0 -2.4 2.4000000 18.10732 18800.00 1038.2543 2504.644 11338.097
## 11390  0.0 -2.2 2.2000000 18.35843 18900.00 1029.4998 2610.300 11980.251
## 11391  0.0 -2.0 2.0000000 18.62477 19000.00 1020.1469 2725.564 12690.750
## 11392  0.0 -1.8 1.8000000 18.90965 19100.00 1010.0661 2852.559 13485.224
## 11393  0.0 -1.6 1.6000000 19.21719 19200.00  999.1057 2994.010 14384.112
## 11394  0.0 -1.4 1.4000000 19.55242 19300.00  987.0901 3153.445 15414.371
## 11395  0.0 -1.2 1.2000000 19.92159 19400.00  973.8181 3335.458 16611.903
## 11396  0.0 -1.0 1.0000000 20.33237 19500.00  959.0618 3546.075 18025.028
## 11397  0.0 -0.8 0.8000000 20.79426 19600.00  942.5679 3793.272 19719.569
## 11398  0.0 -0.6 0.6000000 21.31893 19700.00  924.0613 4087.710 21786.401
## 11399  0.0 -0.4 0.4000000 21.92081 19800.00  903.2515 4443.788 24352.855
## 11400  0.0 -0.2 0.2000000 22.61765 19900.00  879.8437 4881.198 27600.313
## 11401  0.0  0.0 0.0000000 23.43138 20000.00  853.5560 5427.223 31791.838
## 11402  0.0  0.2 0.2000000 22.61765 19900.00  879.8437 4881.198 27600.313
## 11403  0.0  0.4 0.4000000 21.92081 19800.00  903.2515 4443.788 24352.855
## 11404  0.0  0.6 0.6000000 21.31893 19700.00  924.0613 4087.710 21786.401
## 11405  0.0  0.8 0.8000000 20.79426 19600.00  942.5679 3793.272 19719.569
## 11406  0.0  1.0 1.0000000 20.33237 19500.00  959.0618 3546.075 18025.028
## 11407  0.0  1.2 1.2000000 19.92159 19400.00  973.8181 3335.458 16611.903
## 11408  0.0  1.4 1.4000000 19.55242 19300.00  987.0901 3153.445 15414.371
## 11409  0.0  1.6 1.6000000 19.21719 19200.00  999.1057 2994.010 14384.112
## 11410  0.0  1.8 1.8000000 18.90965 19100.00 1010.0661 2852.559 13485.224
## 11411  0.0  2.0 2.0000000 18.62477 19000.00 1020.1469 2725.564 12690.750
## 11412  0.0  2.2 2.2000000 18.35843 18900.00 1029.4998 2610.300 11980.251
## 11413  0.0  2.4 2.4000000 18.10732 18800.00 1038.2543 2504.644 11338.097
## 11414  0.0  2.6 2.6000000 17.86874 18700.00 1046.5206 2406.940 10752.243
## 11415  0.0  2.8 2.8000000 17.64050 18600.00 1054.3917 2315.883 10213.336
## 11416  0.0  3.0 3.0000000 17.42085 18500.00 1061.9460 2230.446  9714.064
## 11417  0.0  3.2 3.2000000 17.20834 18400.00 1069.2492 2149.812  9248.670
## 11418  0.0  3.4 3.4000000 17.00180 18300.00 1076.3564 2073.332  8812.595
## 11419  0.0  3.6 3.6000000 16.80031 18200.00 1083.3134 2000.486  8402.197
## 11420  0.0  3.8 3.8000000 16.60309 18100.00 1090.1587 1930.858  8014.550
## 11533  0.2 -3.8 3.8052595 16.59795 18097.37 1090.3376 1929.067  8004.640
## 11534  0.2 -3.6 3.6055513 16.79478 18197.22 1083.5048 1998.512  8391.142
## 11535  0.2 -3.4 3.4058773 16.99581 18297.06 1076.5628 2071.141  8800.184
## 11536  0.2 -3.2 3.2062439 17.20180 18396.88 1069.4738 2147.364  9234.634
## 11537  0.2 -3.0 3.0066593 17.41366 18496.67 1062.1929 2227.688  9698.051
## 11538  0.2 -2.8 2.8071338 17.63253 18596.43 1054.6662 2312.745 10194.884
## 11539  0.2 -2.6 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732
## 11540  0.2 -2.4 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680
## 11541  0.2 -2.2 2.2090722 18.34673 18895.46 1029.9090 2605.313 11949.745
## 11542  0.2 -2.0 2.0099751 18.61108 18995.01 1020.6295 2719.557 12653.470
## 11543  0.2 -1.8 1.8110770 18.89333 19094.46 1010.6459 2845.175 13438.704
## 11544  0.2 -1.6 1.6124515 19.19729 19193.77  999.8169 2984.720 14324.632
## 11545  0.2 -1.4 1.4142136 19.52756 19292.89  987.9830 3141.431 15336.115
## 11546  0.2 -1.2 1.2165525 19.88957 19391.72  974.9696 3319.402 16505.369
## 11547  0.2 -1.0 1.0198039 20.28959 19490.10  960.5961 3523.736 17873.788
## 11548  0.2 -0.8 0.8246211 20.73427 19587.69  944.7013 3760.537 19492.994
## 11549  0.2 -0.6 0.6324555 21.22896 19683.77  927.2133 4036.173 21420.936
## 11550  0.2 -0.4 0.4472136 21.77088 19776.39  908.3874 4353.232 23693.422
## 11551  0.2 -0.2 0.2828427 22.31619 19858.58  889.8733 4688.606 26157.954
## 11552  0.2  0.0 0.2000000 22.61765 19900.00  879.8437 4881.198 27600.313
## 11553  0.2  0.2 0.2828427 22.31619 19858.58  889.8733 4688.606 26157.954
## 11554  0.2  0.4 0.4472136 21.77088 19776.39  908.3874 4353.232 23693.422
## 11555  0.2  0.6 0.6324555 21.22896 19683.77  927.2133 4036.173 21420.936
## 11556  0.2  0.8 0.8246211 20.73427 19587.69  944.7013 3760.537 19492.994
## 11557  0.2  1.0 1.0198039 20.28959 19490.10  960.5961 3523.736 17873.788
## 11558  0.2  1.2 1.2165525 19.88957 19391.72  974.9696 3319.402 16505.369
## 11559  0.2  1.4 1.4142136 19.52756 19292.89  987.9830 3141.431 15336.115
## 11560  0.2  1.6 1.6124515 19.19729 19193.77  999.8169 2984.720 14324.632
## 11561  0.2  1.8 1.8110770 18.89333 19094.46 1010.6459 2845.175 13438.704
## 11562  0.2  2.0 2.0099751 18.61108 18995.01 1020.6295 2719.557 12653.470
## 11563  0.2  2.2 2.2090722 18.34673 18895.46 1029.9090 2605.313 11949.745
## 11564  0.2  2.4 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680
## 11565  0.2  2.6 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732
## 11566  0.2  2.8 2.8071338 17.63253 18596.43 1054.6662 2312.745 10194.884
## 11567  0.2  3.0 3.0066593 17.41366 18496.67 1062.1929 2227.688  9698.051
## 11568  0.2  3.2 3.2062439 17.20180 18396.88 1069.4738 2147.364  9234.634
## 11569  0.2  3.4 3.4058773 16.99581 18297.06 1076.5628 2071.141  8800.184
## 11570  0.2  3.6 3.6055513 16.79478 18197.22 1083.5048 1998.512  8391.142
## 11571  0.2  3.8 3.8052595 16.59795 18097.37 1090.3376 1929.067  8004.640
## 11685  0.4 -3.6 3.6221541 16.77826 18188.92 1084.0766 1992.622  8358.184
## 11686  0.4 -3.4 3.4234486 16.97794 18288.28 1077.1790 2064.612  8763.212
## 11687  0.4 -3.2 3.2249031 17.18231 18387.55 1070.1439 2140.074  9192.856
## 11688  0.4 -3.0 3.0265492 17.39225 18486.73 1062.9286 2219.481  9650.444
## 11689  0.4 -2.8 2.8284271 17.60880 18585.79 1055.4831 2303.418 10140.104
## 11690  0.4 -2.6 2.6305893 17.83321 18684.71 1047.7480 2392.611 10666.981
## 11691  0.4 -2.4 2.4331050 18.06702 18783.45 1039.6536 2487.962 11237.516
## 11692  0.4 -2.2 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785
## 11693  0.4 -2.0 2.0396078 18.57067 18980.20 1022.0526 2701.881 12543.930
## 11694  0.4 -1.8 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655
## 11695  0.4 -1.6 1.6492423 19.13911 19175.38 1001.8949 2957.666 14151.773
## 11696  0.4 -1.4 1.4560220 19.45539 19271.99  990.5733 3106.730 15110.660
## 11697  0.4 -1.2 1.2649111 19.79761 19367.54  978.2767 3273.575 16202.244
## 11698  0.4 -1.0 1.0770330 20.16866 19461.48  964.9367 3461.108 17451.478
## 11699  0.4 -0.8 0.8944272 20.56913 19552.79  950.5888 3671.400 18879.377
## 11700  0.4 -0.6 0.7211103 20.99298 19639.44  935.5243 3903.069 20484.262
## 11701  0.4 -0.4 0.5656854 21.41626 19717.16  920.6628 4143.953 22187.000
## 11702  0.4 -0.2 0.4472136 21.77088 19776.39  908.3874 4353.232 23693.422
## 11703  0.4  0.0 0.4000000 21.92081 19800.00  903.2515 4443.788 24352.855
## 11704  0.4  0.2 0.4472136 21.77088 19776.39  908.3874 4353.232 23693.422
## 11705  0.4  0.4 0.5656854 21.41626 19717.16  920.6628 4143.953 22187.000
## 11706  0.4  0.6 0.7211103 20.99298 19639.44  935.5243 3903.069 20484.262
## 11707  0.4  0.8 0.8944272 20.56913 19552.79  950.5888 3671.400 18879.377
## 11708  0.4  1.0 1.0770330 20.16866 19461.48  964.9367 3461.108 17451.478
## 11709  0.4  1.2 1.2649111 19.79761 19367.54  978.2767 3273.575 16202.244
## 11710  0.4  1.4 1.4560220 19.45539 19271.99  990.5733 3106.730 15110.660
## 11711  0.4  1.6 1.6492423 19.13911 19175.38 1001.8949 2957.666 14151.773
## 11712  0.4  1.8 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655
## 11713  0.4  2.0 2.0396078 18.57067 18980.20 1022.0526 2701.881 12543.930
## 11714  0.4  2.2 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785
## 11715  0.4  2.4 2.4331050 18.06702 18783.45 1039.6536 2487.962 11237.516
## 11716  0.4  2.6 2.6305893 17.83321 18684.71 1047.7480 2392.611 10666.981
## 11717  0.4  2.8 2.8284271 17.60880 18585.79 1055.4831 2303.418 10140.104
## 11718  0.4  3.0 3.0265492 17.39225 18486.73 1062.9286 2219.481  9650.444
## 11719  0.4  3.2 3.2249031 17.18231 18387.55 1070.1439 2140.074  9192.856
## 11720  0.4  3.4 3.4234486 16.97794 18288.28 1077.1790 2064.612  8763.212
## 11721  0.4  3.6 3.6221541 16.77826 18188.92 1084.0766 1992.622  8358.184
## 11836  0.6 -3.6 3.6496575 16.75097 18175.17 1085.0221 1982.913  8303.926
## 11837  0.6 -3.4 3.4525353 16.94842 18273.73 1078.1967 2053.864  8702.437
## 11838  0.6 -3.2 3.2557641 17.15019 18372.12 1071.2484 2128.094  9124.307
## 11839  0.6 -3.0 3.0594117 17.35703 18470.29 1064.1390 2206.023  9572.504
## 11840  0.6 -2.8 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662
## 11841  0.6 -2.6 2.6683328 17.78969 18665.83 1049.2501 2375.138 10563.243
## 11842  0.6 -2.4 2.4738634 18.01787 18763.07 1041.3588 2467.711 11115.723
## 11843  0.6 -2.2 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795
## 11844  0.6 -2.0 2.0880613 18.50542 18955.97 1024.3466 2673.505 12368.585
## 11845  0.6 -1.8 1.8973666 18.76841 19051.32 1015.0737 2789.113 13086.800
## 11846  0.6 -1.6 1.7088007 19.04680 19145.60 1005.1872 2915.076 13880.715
## 11847  0.6 -1.4 1.5231546 19.34240 19238.42  994.6242 3052.918 14762.692
## 11848  0.6 -1.2 1.3416408 19.65632 19329.18  983.3569 3203.986 15744.646
## 11849  0.6 -1.0 1.1661904 19.98787 19416.90  971.4344 3368.863 16834.098
## 11850  0.6 -0.8 1.0000000 20.33237 19500.00  959.0618 3546.075 18025.028
## 11851  0.6 -0.6 0.8485281 20.67690 19575.74  946.7442 3729.410 19278.163
## 11852  0.6 -0.4 0.7211103 20.99298 19639.44  935.5243 3903.069 20484.262
## 11853  0.6 -0.2 0.6324555 21.22896 19683.77  927.2133 4036.173 21420.936
## 11854  0.6  0.0 0.6000000 21.31893 19700.00  924.0613 4087.710 21786.401
## 11855  0.6  0.2 0.6324555 21.22896 19683.77  927.2133 4036.173 21420.936
## 11856  0.6  0.4 0.7211103 20.99298 19639.44  935.5243 3903.069 20484.262
## 11857  0.6  0.6 0.8485281 20.67690 19575.74  946.7442 3729.410 19278.163
## 11858  0.6  0.8 1.0000000 20.33237 19500.00  959.0618 3546.075 18025.028
## 11859  0.6  1.0 1.1661904 19.98787 19416.90  971.4344 3368.863 16834.098
## 11860  0.6  1.2 1.3416408 19.65632 19329.18  983.3569 3203.986 15744.646
## 11861  0.6  1.4 1.5231546 19.34240 19238.42  994.6242 3052.918 14762.692
## 11862  0.6  1.6 1.7088007 19.04680 19145.60 1005.1872 2915.076 13880.715
## 11863  0.6  1.8 1.8973666 18.76841 19051.32 1015.0737 2789.113 13086.800
## 11864  0.6  2.0 2.0880613 18.50542 18955.97 1024.3466 2673.505 12368.585
## 11865  0.6  2.2 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795
## 11866  0.6  2.4 2.4738634 18.01787 18763.07 1041.3588 2467.711 11115.723
## 11867  0.6  2.6 2.6683328 17.78969 18665.83 1049.2501 2375.138 10563.243
## 11868  0.6  2.8 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662
## 11869  0.6  3.0 3.0594117 17.35703 18470.29 1064.1390 2206.023  9572.504
## 11870  0.6  3.2 3.2557641 17.15019 18372.12 1071.2484 2128.094  9124.307
## 11871  0.6  3.4 3.4525353 16.94842 18273.73 1078.1967 2053.864  8702.437
## 11872  0.6  3.6 3.6496575 16.75097 18175.17 1085.0221 1982.913  8303.926
## 11987  0.8 -3.6 3.6878178 16.71322 18156.09 1086.3309 1969.539  8229.335
## 11988  0.8 -3.4 3.4928498 16.90768 18253.58 1079.6024 2039.089  8619.067
## 11989  0.8 -3.2 3.2984845 17.10595 18350.76 1072.7704 2111.667  9030.518
## 11990  0.8 -3.0 3.1048349 17.30864 18447.58 1065.8018 2187.625  9466.205
## 11991  0.8 -2.8 2.9120440 17.51649 18543.98 1058.6583 2267.384  9929.151
## 11992  0.8 -2.6 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987
## 11993  0.8 -2.4 2.5298221 17.95117 18735.09 1043.6695 2440.406 10952.036
## 11994  0.8 -2.2 2.3409400 18.18006 18829.53 1035.7245 2534.950 11521.384
## 11995  0.8 -2.0 2.1540659 18.41814 18922.97 1027.4091 2635.854 12136.883
## 11996  0.8 -1.8 1.9697716 18.66655 19015.11 1018.6735 2743.946 12805.000
## 11997  0.8 -1.6 1.7888544 18.92615 19105.57 1009.4799 2860.032 13532.353
## 11998  0.8 -1.4 1.6124515 19.19729 19193.77  999.8169 2984.720 14324.632
## 11999  0.8 -1.2 1.4422205 19.47905 19278.89  989.7241 3118.081 15184.319
## 12000  0.8 -1.0 1.2806248 19.76823 19359.69  979.3335 3259.019 16106.259
## 12001  0.8 -0.8 1.1313708 20.05742 19434.31  968.9341 3404.151 17069.619
## 12002  0.8 -0.6 1.0000000 20.33237 19500.00  959.0618 3546.075 18025.028
## 12003  0.8 -0.4 0.8944272 20.56913 19552.79  950.5888 3671.400 18879.377
## 12004  0.8 -0.2 0.8246211 20.73427 19587.69  944.7013 3760.537 19492.994
## 12005  0.8  0.0 0.8000000 20.79426 19600.00  942.5679 3793.272 19719.569
## 12006  0.8  0.2 0.8246211 20.73427 19587.69  944.7013 3760.537 19492.994
## 12007  0.8  0.4 0.8944272 20.56913 19552.79  950.5888 3671.400 18879.377
## 12008  0.8  0.6 1.0000000 20.33237 19500.00  959.0618 3546.075 18025.028
## 12009  0.8  0.8 1.1313708 20.05742 19434.31  968.9341 3404.151 17069.619
## 12010  0.8  1.0 1.2806248 19.76823 19359.69  979.3335 3259.019 16106.259
## 12011  0.8  1.2 1.4422205 19.47905 19278.89  989.7241 3118.081 15184.319
## 12012  0.8  1.4 1.6124515 19.19729 19193.77  999.8169 2984.720 14324.632
## 12013  0.8  1.6 1.7888544 18.92615 19105.57 1009.4799 2860.032 13532.353
## 12014  0.8  1.8 1.9697716 18.66655 19015.11 1018.6735 2743.946 12805.000
## 12015  0.8  2.0 2.1540659 18.41814 18922.97 1027.4091 2635.854 12136.883
## 12016  0.8  2.2 2.3409400 18.18006 18829.53 1035.7245 2534.950 11521.384
## 12017  0.8  2.4 2.5298221 17.95117 18735.09 1043.6695 2440.406 10952.036
## 12018  0.8  2.6 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987
## 12019  0.8  2.8 2.9120440 17.51649 18543.98 1058.6583 2267.384  9929.151
## 12020  0.8  3.0 3.1048349 17.30864 18447.58 1065.8018 2187.625  9466.205
## 12021  0.8  3.2 3.2984845 17.10595 18350.76 1072.7704 2111.667  9030.518
## 12022  0.8  3.4 3.4928498 16.90768 18253.58 1079.6024 2039.089  8619.067
## 12023  0.8  3.6 3.6878178 16.71322 18156.09 1086.3309 1969.539  8229.335
## 12138  1.0 -3.6 3.7363083 16.66547 18131.85 1087.9889 1952.704  8135.684
## 12139  1.0 -3.4 3.5440090 16.85626 18228.00 1081.3786 2020.539  8514.682
## 12140  1.0 -3.2 3.3526109 17.05025 18323.69 1074.6875 2091.107  8913.477
## 12141  1.0 -3.0 3.1622777 17.24793 18418.86 1067.8883 2164.685  9334.081
## 12142  1.0 -2.8 2.9732137 17.44982 18513.39 1060.9501 2241.594  9778.855
## 12143  1.0 -2.6 2.7856777 17.65654 18607.16 1053.8394 2322.206 10250.534
## 12144  1.0 -2.4 2.6000000 17.86874 18700.00 1046.5206 2406.940 10752.243
## 12145  1.0 -2.2 2.4166092 18.08706 18791.70 1038.9580 2496.248 11287.445
## 12146  1.0 -2.0 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785
## 12147  1.0 -1.8 2.0591260 18.54426 18970.44 1022.9815 2690.373 12472.744
## 12148  1.0 -1.6 1.8867962 18.78350 19056.60 1014.5396 2795.846 13128.941
## 12149  1.0 -1.4 1.7204651 19.02898 19139.77 1005.8220 2906.902 13828.847
## 12150  1.0 -1.2 1.5620499 19.27850 19218.98  996.9126 3022.757 14568.551
## 12151  1.0 -1.0 1.4142136 19.52756 19292.89  987.9830 3141.431 15336.115
## 12152  1.0 -0.8 1.2806248 19.76823 19359.69  979.3335 3259.019 16106.259
## 12153  1.0 -0.6 1.1661904 19.98787 19416.90  971.4344 3368.863 16834.098
## 12154  1.0 -0.4 1.0770330 20.16866 19461.48  964.9367 3461.108 17451.478
## 12155  1.0 -0.2 1.0198039 20.28959 19490.10  960.5961 3523.736 17873.788
## 12156  1.0  0.0 1.0000000 20.33237 19500.00  959.0618 3546.075 18025.028
## 12157  1.0  0.2 1.0198039 20.28959 19490.10  960.5961 3523.736 17873.788
## 12158  1.0  0.4 1.0770330 20.16866 19461.48  964.9367 3461.108 17451.478
## 12159  1.0  0.6 1.1661904 19.98787 19416.90  971.4344 3368.863 16834.098
## 12160  1.0  0.8 1.2806248 19.76823 19359.69  979.3335 3259.019 16106.259
## 12161  1.0  1.0 1.4142136 19.52756 19292.89  987.9830 3141.431 15336.115
## 12162  1.0  1.2 1.5620499 19.27850 19218.98  996.9126 3022.757 14568.551
## 12163  1.0  1.4 1.7204651 19.02898 19139.77 1005.8220 2906.902 13828.847
## 12164  1.0  1.6 1.8867962 18.78350 19056.60 1014.5396 2795.846 13128.941
## 12165  1.0  1.8 2.0591260 18.54426 18970.44 1022.9815 2690.373 12472.744
## 12166  1.0  2.0 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785
## 12167  1.0  2.2 2.4166092 18.08706 18791.70 1038.9580 2496.248 11287.445
## 12168  1.0  2.4 2.6000000 17.86874 18700.00 1046.5206 2406.940 10752.243
## 12169  1.0  2.6 2.7856777 17.65654 18607.16 1053.8394 2322.206 10250.534
## 12170  1.0  2.8 2.9732137 17.44982 18513.39 1060.9501 2241.594  9778.855
## 12171  1.0  3.0 3.1622777 17.24793 18418.86 1067.8883 2164.685  9334.081
## 12172  1.0  3.2 3.3526109 17.05025 18323.69 1074.6875 2091.107  8913.477
## 12173  1.0  3.4 3.5440090 16.85626 18228.00 1081.3786 2020.539  8514.682
## 12174  1.0  3.6 3.7363083 16.66547 18131.85 1087.9889 1952.704  8135.684
## 12289  1.2 -3.6 3.7947332 16.60823 18102.63 1089.9796 1932.653  8024.487
## 12290  1.2 -3.4 3.6055513 16.79478 18197.22 1083.5048 1998.512  8391.142
## 12291  1.2 -3.2 3.4176015 16.98388 18291.20 1076.9741 2066.782  8775.493
## 12292  1.2 -3.0 3.2310989 17.17585 18384.45 1070.3660 2137.661  9179.040
## 12293  1.2 -2.8 3.0463092 17.37105 18476.85 1063.6572 2211.374  9603.473
## 12294  1.2 -2.6 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662
## 12295  1.2 -2.4 2.6832816 17.77255 18658.36 1049.8414 2368.280 10522.594
## 12296  1.2 -2.2 2.5059928 17.97947 18747.00 1042.6897 2451.964 11021.252
## 12297  1.2 -2.0 2.3323808 18.19069 18833.81 1035.3542 2539.402 11548.369
## 12298  1.2 -1.8 2.1633308 18.40603 18918.33 1027.8334 2630.658 12104.994
## 12299  1.2 -1.6 2.0000000 18.62477 19000.00 1020.1469 2725.564 12690.750
## 12300  1.2 -1.4 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655
## 12301  1.2 -1.2 1.6970563 19.06482 19151.47 1004.5449 2923.360 13933.335
## 12302  1.2 -1.0 1.5620499 19.27850 19218.98  996.9126 3022.757 14568.551
## 12303  1.2 -0.8 1.4422205 19.47905 19278.89  989.7241 3118.081 15184.319
## 12304  1.2 -0.6 1.3416408 19.65632 19329.18  983.3569 3203.986 15744.646
## 12305  1.2 -0.4 1.2649111 19.79761 19367.54  978.2767 3273.575 16202.244
## 12306  1.2 -0.2 1.2165525 19.88957 19391.72  974.9696 3319.402 16505.369
## 12307  1.2  0.0 1.2000000 19.92159 19400.00  973.8181 3335.458 16611.903
## 12308  1.2  0.2 1.2165525 19.88957 19391.72  974.9696 3319.402 16505.369
## 12309  1.2  0.4 1.2649111 19.79761 19367.54  978.2767 3273.575 16202.244
## 12310  1.2  0.6 1.3416408 19.65632 19329.18  983.3569 3203.986 15744.646
## 12311  1.2  0.8 1.4422205 19.47905 19278.89  989.7241 3118.081 15184.319
## 12312  1.2  1.0 1.5620499 19.27850 19218.98  996.9126 3022.757 14568.551
## 12313  1.2  1.2 1.6970563 19.06482 19151.47 1004.5449 2923.360 13933.335
## 12314  1.2  1.4 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655
## 12315  1.2  1.6 2.0000000 18.62477 19000.00 1020.1469 2725.564 12690.750
## 12316  1.2  1.8 2.1633308 18.40603 18918.33 1027.8334 2630.658 12104.994
## 12317  1.2  2.0 2.3323808 18.19069 18833.81 1035.3542 2539.402 11548.369
## 12318  1.2  2.2 2.5059928 17.97947 18747.00 1042.6897 2451.964 11021.252
## 12319  1.2  2.4 2.6832816 17.77255 18658.36 1049.8414 2368.280 10522.594
## 12320  1.2  2.6 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662
## 12321  1.2  2.8 3.0463092 17.37105 18476.85 1063.6572 2211.374  9603.473
## 12322  1.2  3.0 3.2310989 17.17585 18384.45 1070.3660 2137.661  9179.040
## 12323  1.2  3.2 3.4176015 16.98388 18291.20 1076.9741 2066.782  8775.493
## 12324  1.2  3.4 3.6055513 16.79478 18197.22 1083.5048 1998.512  8391.142
## 12325  1.2  3.6 3.7947332 16.60823 18102.63 1089.9796 1932.653  8024.487
## 12441  1.4 -3.4 3.6769553 16.72395 18161.52 1085.9587 1973.334  8250.487
## 12442  1.4 -3.2 3.4928498 16.90768 18253.58 1079.6024 2039.089  8619.067
## 12443  1.4 -3.0 3.3105891 17.09346 18344.71 1073.2002 2107.045  9004.172
## 12444  1.4 -2.8 3.1304952 17.28146 18434.75 1066.7360 2177.333  9406.871
## 12445  1.4 -2.6 2.9529646 17.47181 18523.52 1060.1942 2250.079  9828.243
## 12446  1.4 -2.4 2.7784888 17.66461 18610.76 1053.5616 2325.391 10269.282
## 12447  1.4 -2.2 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732
## 12448  1.4 -2.0 2.4413111 18.05709 18779.34 1039.9985 2483.859 11212.816
## 12449  1.4 -1.8 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795
## 12450  1.4 -1.6 2.1260292 18.45500 18936.99 1026.1168 2651.709 12234.324
## 12451  1.4 -1.4 1.9798990 18.65250 19010.05 1019.1690 2737.758 12766.506
## 12452  1.4 -1.2 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655
## 12453  1.4 -1.0 1.7204651 19.02898 19139.77 1005.8220 2906.902 13828.847
## 12454  1.4 -0.8 1.6124515 19.19729 19193.77  999.8169 2984.720 14324.632
## 12455  1.4 -0.6 1.5231546 19.34240 19238.42  994.6242 3052.918 14762.692
## 12456  1.4 -0.4 1.4560220 19.45539 19271.99  990.5733 3106.730 15110.660
## 12457  1.4 -0.2 1.4142136 19.52756 19292.89  987.9830 3141.431 15336.115
## 12458  1.4  0.0 1.4000000 19.55242 19300.00  987.0901 3153.445 15414.371
## 12459  1.4  0.2 1.4142136 19.52756 19292.89  987.9830 3141.431 15336.115
## 12460  1.4  0.4 1.4560220 19.45539 19271.99  990.5733 3106.730 15110.660
## 12461  1.4  0.6 1.5231546 19.34240 19238.42  994.6242 3052.918 14762.692
## 12462  1.4  0.8 1.6124515 19.19729 19193.77  999.8169 2984.720 14324.632
## 12463  1.4  1.0 1.7204651 19.02898 19139.77 1005.8220 2906.902 13828.847
## 12464  1.4  1.2 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655
## 12465  1.4  1.4 1.9798990 18.65250 19010.05 1019.1690 2737.758 12766.506
## 12466  1.4  1.6 2.1260292 18.45500 18936.99 1026.1168 2651.709 12234.324
## 12467  1.4  1.8 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795
## 12468  1.4  2.0 2.4413111 18.05709 18779.34 1039.9985 2483.859 11212.816
## 12469  1.4  2.2 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732
## 12470  1.4  2.4 2.7784888 17.66461 18610.76 1053.5616 2325.391 10269.282
## 12471  1.4  2.6 2.9529646 17.47181 18523.52 1060.1942 2250.079  9828.243
## 12472  1.4  2.8 3.1304952 17.28146 18434.75 1066.7360 2177.333  9406.871
## 12473  1.4  3.0 3.3105891 17.09346 18344.71 1073.2002 2107.045  9004.172
## 12474  1.4  3.2 3.4928498 16.90768 18253.58 1079.6024 2039.089  8619.067
## 12475  1.4  3.4 3.6769553 16.72395 18161.52 1085.9587 1973.334  8250.487
## 12592  1.6 -3.4 3.7576588 16.64452 18121.17 1088.7172 1945.348  8094.844
## 12593  1.6 -3.2 3.5777088 16.82254 18211.15 1082.5442 2008.439  8446.763
## 12594  1.6 -3.0 3.4000000 17.00180 18300.00 1076.3564 2073.332  8812.595
## 12595  1.6 -2.8 3.2249031 17.18231 18387.55 1070.1439 2140.074  9192.856
## 12596  1.6 -2.6 3.0528675 17.36403 18473.57 1063.8985 2208.693  9587.954
## 12597  1.6 -2.4 2.8844410 17.54681 18557.78 1057.6158 2279.177  9998.070
## 12598  1.6 -2.2 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987
## 12599  1.6 -2.0 2.5612497 17.91409 18719.38 1044.9525 2425.315 10861.828
## 12600  1.6 -1.8 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680
## 12601  1.6 -1.6 2.2627417 18.27815 18868.63 1032.3051 2576.207 11772.074
## 12602  1.6 -1.4 2.1260292 18.45500 18936.99 1026.1168 2651.709 12234.324
## 12603  1.6 -1.2 2.0000000 18.62477 19000.00 1020.1469 2725.564 12690.750
## 12604  1.6 -1.0 1.8867962 18.78350 19056.60 1014.5396 2795.846 13128.941
## 12605  1.6 -0.8 1.7888544 18.92615 19105.57 1009.4799 2860.032 13532.353
## 12606  1.6 -0.6 1.7088007 19.04680 19145.60 1005.1872 2915.076 13880.715
## 12607  1.6 -0.4 1.6492423 19.13911 19175.38 1001.8949 2957.666 14151.773
## 12608  1.6 -0.2 1.6124515 19.19729 19193.77  999.8169 2984.720 14324.632
## 12609  1.6  0.0 1.6000000 19.21719 19200.00  999.1057 2994.010 14384.112
## 12610  1.6  0.2 1.6124515 19.19729 19193.77  999.8169 2984.720 14324.632
## 12611  1.6  0.4 1.6492423 19.13911 19175.38 1001.8949 2957.666 14151.773
## 12612  1.6  0.6 1.7088007 19.04680 19145.60 1005.1872 2915.076 13880.715
## 12613  1.6  0.8 1.7888544 18.92615 19105.57 1009.4799 2860.032 13532.353
## 12614  1.6  1.0 1.8867962 18.78350 19056.60 1014.5396 2795.846 13128.941
## 12615  1.6  1.2 2.0000000 18.62477 19000.00 1020.1469 2725.564 12690.750
## 12616  1.6  1.4 2.1260292 18.45500 18936.99 1026.1168 2651.709 12234.324
## 12617  1.6  1.6 2.2627417 18.27815 18868.63 1032.3051 2576.207 11772.074
## 12618  1.6  1.8 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680
## 12619  1.6  2.0 2.5612497 17.91409 18719.38 1044.9525 2425.315 10861.828
## 12620  1.6  2.2 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987
## 12621  1.6  2.4 2.8844410 17.54681 18557.78 1057.6158 2279.177  9998.070
## 12622  1.6  2.6 3.0528675 17.36403 18473.57 1063.8985 2208.693  9587.954
## 12623  1.6  2.8 3.2249031 17.18231 18387.55 1070.1439 2140.074  9192.856
## 12624  1.6  3.0 3.4000000 17.00180 18300.00 1076.3564 2073.332  8812.595
## 12625  1.6  3.2 3.5777088 16.82254 18211.15 1082.5442 2008.439  8446.763
## 12626  1.6  3.4 3.7576588 16.64452 18121.17 1088.7172 1945.348  8094.844
## 12744  1.8 -3.2 3.6715120 16.72933 18164.24 1085.7721 1975.240  8261.110
## 12745  1.8 -3.0 3.4985711 16.90192 18250.71 1079.8014 2037.003  8607.315
## 12746  1.8 -2.8 3.3286634 17.07485 18335.67 1073.8408 2100.169  8965.018
## 12747  1.8 -2.6 3.1622777 17.24793 18418.86 1067.8883 2164.685  9334.081
## 12748  1.8 -2.4 3.0000000 17.42085 18500.00 1061.9460 2230.446  9714.064
## 12749  1.8 -2.2 2.8425341 17.59312 18578.73 1056.0224 2297.273 10104.053
## 12750  1.8 -2.0 2.6907248 17.76404 18654.64 1050.1351 2364.878 10502.445
## 12751  1.8 -1.8 2.5455844 17.93254 18727.21 1044.3143 2432.816 10906.641
## 12752  1.8 -1.6 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680
## 12753  1.8 -1.4 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795
## 12754  1.8 -1.2 2.1633308 18.40603 18918.33 1027.8334 2630.658 12104.994
## 12755  1.8 -1.0 2.0591260 18.54426 18970.44 1022.9815 2690.373 12472.744
## 12756  1.8 -0.8 1.9697716 18.66655 19015.11 1018.6735 2743.946 12805.000
## 12757  1.8 -0.6 1.8973666 18.76841 19051.32 1015.0737 2789.113 13086.800
## 12758  1.8 -0.4 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655
## 12759  1.8 -0.2 1.8110770 18.89333 19094.46 1010.6459 2845.175 13438.704
## 12760  1.8  0.0 1.8000000 18.90965 19100.00 1010.0661 2852.559 13485.224
## 12761  1.8  0.2 1.8110770 18.89333 19094.46 1010.6459 2845.175 13438.704
## 12762  1.8  0.4 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655
## 12763  1.8  0.6 1.8973666 18.76841 19051.32 1015.0737 2789.113 13086.800
## 12764  1.8  0.8 1.9697716 18.66655 19015.11 1018.6735 2743.946 12805.000
## 12765  1.8  1.0 2.0591260 18.54426 18970.44 1022.9815 2690.373 12472.744
## 12766  1.8  1.2 2.1633308 18.40603 18918.33 1027.8334 2630.658 12104.994
## 12767  1.8  1.4 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795
## 12768  1.8  1.6 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680
## 12769  1.8  1.8 2.5455844 17.93254 18727.21 1044.3143 2432.816 10906.641
## 12770  1.8  2.0 2.6907248 17.76404 18654.64 1050.1351 2364.878 10502.445
## 12771  1.8  2.2 2.8425341 17.59312 18578.73 1056.0224 2297.273 10104.053
## 12772  1.8  2.4 3.0000000 17.42085 18500.00 1061.9460 2230.446  9714.064
## 12773  1.8  2.6 3.1622777 17.24793 18418.86 1067.8883 2164.685  9334.081
## 12774  1.8  2.8 3.3286634 17.07485 18335.67 1073.8408 2100.169  8965.018
## 12775  1.8  3.0 3.4985711 16.90192 18250.71 1079.8014 2037.003  8607.315
## 12776  1.8  3.2 3.6715120 16.72933 18164.24 1085.7721 1975.240  8261.110
## 12895  2.0 -3.2 3.7735925 16.62891 18113.20 1089.2601 1939.880  8064.520
## 12896  2.0 -3.0 3.6055513 16.79478 18197.22 1083.5048 1998.512  8391.142
## 12897  2.0 -2.8 3.4409301 16.96019 18279.53 1077.7910 2058.143  8726.622
## 12898  2.0 -2.6 3.2802439 17.12481 18359.88 1072.1215 2118.659  9070.409
## 12899  2.0 -2.4 3.1240999 17.28822 18437.95 1066.5035 2179.891  9421.611
## 12900  2.0 -2.2 2.9732137 17.44982 18513.39 1060.9501 2241.594  9778.855
## 12901  2.0 -2.0 2.8284271 17.60880 18585.79 1055.4831 2303.418 10140.104
## 12902  2.0 -1.8 2.6907248 17.76404 18654.64 1050.1351 2364.878 10502.445
## 12903  2.0 -1.6 2.5612497 17.91409 18719.38 1044.9525 2425.315 10861.828
## 12904  2.0 -1.4 2.4413111 18.05709 18779.34 1039.9985 2483.859 11212.816
## 12905  2.0 -1.2 2.3323808 18.19069 18833.81 1035.3542 2539.402 11548.369
## 12906  2.0 -1.0 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785
## 12907  2.0 -0.8 2.1540659 18.41814 18922.97 1027.4091 2635.854 12136.883
## 12908  2.0 -0.6 2.0880613 18.50542 18955.97 1024.3466 2673.505 12368.585
## 12909  2.0 -0.4 2.0396078 18.57067 18980.20 1022.0526 2701.881 12543.930
## 12910  2.0 -0.2 2.0099751 18.61108 18995.01 1020.6295 2719.557 12653.470
## 12911  2.0  0.0 2.0000000 18.62477 19000.00 1020.1469 2725.564 12690.750
## 12912  2.0  0.2 2.0099751 18.61108 18995.01 1020.6295 2719.557 12653.470
## 12913  2.0  0.4 2.0396078 18.57067 18980.20 1022.0526 2701.881 12543.930
## 12914  2.0  0.6 2.0880613 18.50542 18955.97 1024.3466 2673.505 12368.585
## 12915  2.0  0.8 2.1540659 18.41814 18922.97 1027.4091 2635.854 12136.883
## 12916  2.0  1.0 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785
## 12917  2.0  1.2 2.3323808 18.19069 18833.81 1035.3542 2539.402 11548.369
## 12918  2.0  1.4 2.4413111 18.05709 18779.34 1039.9985 2483.859 11212.816
## 12919  2.0  1.6 2.5612497 17.91409 18719.38 1044.9525 2425.315 10861.828
## 12920  2.0  1.8 2.6907248 17.76404 18654.64 1050.1351 2364.878 10502.445
## 12921  2.0  2.0 2.8284271 17.60880 18585.79 1055.4831 2303.418 10140.104
## 12922  2.0  2.2 2.9732137 17.44982 18513.39 1060.9501 2241.594  9778.855
## 12923  2.0  2.4 3.1240999 17.28822 18437.95 1066.5035 2179.891  9421.611
## 12924  2.0  2.6 3.2802439 17.12481 18359.88 1072.1215 2118.659  9070.409
## 12925  2.0  2.8 3.4409301 16.96019 18279.53 1077.7910 2058.143  8726.622
## 12926  2.0  3.0 3.6055513 16.79478 18197.22 1083.5048 1998.512  8391.142
## 12927  2.0  3.2 3.7735925 16.62891 18113.20 1089.2601 1939.880  8064.520
## 13047  2.2 -3.0 3.7202150 16.68129 18139.89 1087.4392 1958.272  8166.627
## 13048  2.2 -2.8 3.5608988 16.83934 18219.55 1081.9632 2014.463  8480.560
## 13049  2.2 -2.6 3.4058773 16.99581 18297.06 1076.5628 2071.141  8800.184
## 13050  2.2 -2.4 3.2557641 17.15019 18372.12 1071.2484 2128.094  9124.307
## 13051  2.2 -2.2 3.1112698 17.30182 18444.37 1066.0364 2185.037  9451.277
## 13052  2.2 -2.0 2.9732137 17.44982 18513.39 1060.9501 2241.594  9778.855
## 13053  2.2 -1.8 2.8425341 17.59312 18578.73 1056.0224 2297.273 10104.053
## 13054  2.2 -1.6 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987
## 13055  2.2 -1.4 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732
## 13056  2.2 -1.2 2.5059928 17.97947 18747.00 1042.6897 2451.964 11021.252
## 13057  2.2 -1.0 2.4166092 18.08706 18791.70 1038.9580 2496.248 11287.445
## 13058  2.2 -0.8 2.3409400 18.18006 18829.53 1035.7245 2534.950 11521.384
## 13059  2.2 -0.6 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795
## 13060  2.2 -0.4 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785
## 13061  2.2 -0.2 2.2090722 18.34673 18895.46 1029.9090 2605.313 11949.745
## 13062  2.2  0.0 2.2000000 18.35843 18900.00 1029.4998 2610.300 11980.251
## 13063  2.2  0.2 2.2090722 18.34673 18895.46 1029.9090 2605.313 11949.745
## 13064  2.2  0.4 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785
## 13065  2.2  0.6 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795
## 13066  2.2  0.8 2.3409400 18.18006 18829.53 1035.7245 2534.950 11521.384
## 13067  2.2  1.0 2.4166092 18.08706 18791.70 1038.9580 2496.248 11287.445
## 13068  2.2  1.2 2.5059928 17.97947 18747.00 1042.6897 2451.964 11021.252
## 13069  2.2  1.4 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732
## 13070  2.2  1.6 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987
## 13071  2.2  1.8 2.8425341 17.59312 18578.73 1056.0224 2297.273 10104.053
## 13072  2.2  2.0 2.9732137 17.44982 18513.39 1060.9501 2241.594  9778.855
## 13073  2.2  2.2 3.1112698 17.30182 18444.37 1066.0364 2185.037  9451.277
## 13074  2.2  2.4 3.2557641 17.15019 18372.12 1071.2484 2128.094  9124.307
## 13075  2.2  2.6 3.4058773 16.99581 18297.06 1076.5628 2071.141  8800.184
## 13076  2.2  2.8 3.5608988 16.83934 18219.55 1081.9632 2014.463  8480.560
## 13077  2.2  3.0 3.7202150 16.68129 18139.89 1087.4392 1958.272  8166.627
## 13199  2.4 -2.8 3.6878178 16.71322 18156.09 1086.3309 1969.539  8229.335
## 13200  2.4 -2.6 3.5383612 16.86192 18230.82 1081.1829 2022.576  8526.130
## 13201  2.4 -2.4 3.3941125 17.00781 18302.94 1076.1495 2075.529  8825.049
## 13202  2.4 -2.2 3.2557641 17.15019 18372.12 1071.2484 2128.094  9124.307
## 13203  2.4 -2.0 3.1240999 17.28822 18437.95 1066.5035 2179.891  9421.611
## 13204  2.4 -1.8 3.0000000 17.42085 18500.00 1061.9460 2230.446  9714.064
## 13205  2.4 -1.6 2.8844410 17.54681 18557.78 1057.6158 2279.177  9998.070
## 13206  2.4 -1.4 2.7784888 17.66461 18610.76 1053.5616 2325.391 10269.282
## 13207  2.4 -1.2 2.6832816 17.77255 18658.36 1049.8414 2368.280 10522.594
## 13208  2.4 -1.0 2.6000000 17.86874 18700.00 1046.5206 2406.940 10752.243
## 13209  2.4 -0.8 2.5298221 17.95117 18735.09 1043.6695 2440.406 10952.036
## 13210  2.4 -0.6 2.4738634 18.01787 18763.07 1041.3588 2467.711 11115.723
## 13211  2.4 -0.4 2.4331050 18.06702 18783.45 1039.6536 2487.962 11237.516
## 13212  2.4 -0.2 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680
## 13213  2.4  0.0 2.4000000 18.10732 18800.00 1038.2543 2504.644 11338.097
## 13214  2.4  0.2 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680
## 13215  2.4  0.4 2.4331050 18.06702 18783.45 1039.6536 2487.962 11237.516
## 13216  2.4  0.6 2.4738634 18.01787 18763.07 1041.3588 2467.711 11115.723
## 13217  2.4  0.8 2.5298221 17.95117 18735.09 1043.6695 2440.406 10952.036
## 13218  2.4  1.0 2.6000000 17.86874 18700.00 1046.5206 2406.940 10752.243
## 13219  2.4  1.2 2.6832816 17.77255 18658.36 1049.8414 2368.280 10522.594
## 13220  2.4  1.4 2.7784888 17.66461 18610.76 1053.5616 2325.391 10269.282
## 13221  2.4  1.6 2.8844410 17.54681 18557.78 1057.6158 2279.177  9998.070
## 13222  2.4  1.8 3.0000000 17.42085 18500.00 1061.9460 2230.446  9714.064
## 13223  2.4  2.0 3.1240999 17.28822 18437.95 1066.5035 2179.891  9421.611
## 13224  2.4  2.2 3.2557641 17.15019 18372.12 1071.2484 2128.094  9124.307
## 13225  2.4  2.4 3.3941125 17.00781 18302.94 1076.1495 2075.529  8825.049
## 13226  2.4  2.6 3.5383612 16.86192 18230.82 1081.1829 2022.576  8526.130
## 13227  2.4  2.8 3.6878178 16.71322 18156.09 1086.3309 1969.539  8229.335
## 13351  2.6 -2.6 3.6769553 16.72395 18161.52 1085.9587 1973.334  8250.487
## 13352  2.6 -2.4 3.5383612 16.86192 18230.82 1081.1829 2022.576  8526.130
## 13353  2.6 -2.2 3.4058773 16.99581 18297.06 1076.5628 2071.141  8800.184
## 13354  2.6 -2.0 3.2802439 17.12481 18359.88 1072.1215 2118.659  9070.409
## 13355  2.6 -1.8 3.1622777 17.24793 18418.86 1067.8883 2164.685  9334.081
## 13356  2.6 -1.6 3.0528675 17.36403 18473.57 1063.8985 2208.693  9587.954
## 13357  2.6 -1.4 2.9529646 17.47181 18523.52 1060.1942 2250.079  9828.243
## 13358  2.6 -1.2 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662
## 13359  2.6 -1.0 2.7856777 17.65654 18607.16 1053.8394 2322.206 10250.534
## 13360  2.6 -0.8 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987
## 13361  2.6 -0.6 2.6683328 17.78969 18665.83 1049.2501 2375.138 10563.243
## 13362  2.6 -0.4 2.6305893 17.83321 18684.71 1047.7480 2392.611 10666.981
## 13363  2.6 -0.2 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732
## 13364  2.6  0.0 2.6000000 17.86874 18700.00 1046.5206 2406.940 10752.243
## 13365  2.6  0.2 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732
## 13366  2.6  0.4 2.6305893 17.83321 18684.71 1047.7480 2392.611 10666.981
## 13367  2.6  0.6 2.6683328 17.78969 18665.83 1049.2501 2375.138 10563.243
## 13368  2.6  0.8 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987
## 13369  2.6  1.0 2.7856777 17.65654 18607.16 1053.8394 2322.206 10250.534
## 13370  2.6  1.2 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662
## 13371  2.6  1.4 2.9529646 17.47181 18523.52 1060.1942 2250.079  9828.243
## 13372  2.6  1.6 3.0528675 17.36403 18473.57 1063.8985 2208.693  9587.954
## 13373  2.6  1.8 3.1622777 17.24793 18418.86 1067.8883 2164.685  9334.081
## 13374  2.6  2.0 3.2802439 17.12481 18359.88 1072.1215 2118.659  9070.409
## 13375  2.6  2.2 3.4058773 16.99581 18297.06 1076.5628 2071.141  8800.184
## 13376  2.6  2.4 3.5383612 16.86192 18230.82 1081.1829 2022.576  8526.130
## 13377  2.6  2.6 3.6769553 16.72395 18161.52 1085.9587 1973.334  8250.487
## 13503  2.8 -2.4 3.6878178 16.71322 18156.09 1086.3309 1969.539  8229.335
## 13504  2.8 -2.2 3.5608988 16.83934 18219.55 1081.9632 2014.463  8480.560
## 13505  2.8 -2.0 3.4409301 16.96019 18279.53 1077.7910 2058.143  8726.622
## 13506  2.8 -1.8 3.3286634 17.07485 18335.67 1073.8408 2100.169  8965.018
## 13507  2.8 -1.6 3.2249031 17.18231 18387.55 1070.1439 2140.074  9192.856
## 13508  2.8 -1.4 3.1304952 17.28146 18434.75 1066.7360 2177.333  9406.871
## 13509  2.8 -1.2 3.0463092 17.37105 18476.85 1063.6572 2211.374  9603.473
## 13510  2.8 -1.0 2.9732137 17.44982 18513.39 1060.9501 2241.594  9778.855
## 13511  2.8 -0.8 2.9120440 17.51649 18543.98 1058.6583 2267.384  9929.151
## 13512  2.8 -0.6 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662
## 13513  2.8 -0.4 2.8284271 17.60880 18585.79 1055.4831 2303.418 10140.104
## 13514  2.8 -0.2 2.8071338 17.63253 18596.43 1054.6662 2312.745 10194.884
## 13515  2.8  0.0 2.8000000 17.64050 18600.00 1054.3917 2315.883 10213.336
## 13516  2.8  0.2 2.8071338 17.63253 18596.43 1054.6662 2312.745 10194.884
## 13517  2.8  0.4 2.8284271 17.60880 18585.79 1055.4831 2303.418 10140.104
## 13518  2.8  0.6 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662
## 13519  2.8  0.8 2.9120440 17.51649 18543.98 1058.6583 2267.384  9929.151
## 13520  2.8  1.0 2.9732137 17.44982 18513.39 1060.9501 2241.594  9778.855
## 13521  2.8  1.2 3.0463092 17.37105 18476.85 1063.6572 2211.374  9603.473
## 13522  2.8  1.4 3.1304952 17.28146 18434.75 1066.7360 2177.333  9406.871
## 13523  2.8  1.6 3.2249031 17.18231 18387.55 1070.1439 2140.074  9192.856
## 13524  2.8  1.8 3.3286634 17.07485 18335.67 1073.8408 2100.169  8965.018
## 13525  2.8  2.0 3.4409301 16.96019 18279.53 1077.7910 2058.143  8726.622
## 13526  2.8  2.2 3.5608988 16.83934 18219.55 1081.9632 2014.463  8480.560
## 13527  2.8  2.4 3.6878178 16.71322 18156.09 1086.3309 1969.539  8229.335
## 13655  3.0 -2.2 3.7202150 16.68129 18139.89 1087.4392 1958.272  8166.627
## 13656  3.0 -2.0 3.6055513 16.79478 18197.22 1083.5048 1998.512  8391.142
## 13657  3.0 -1.8 3.4985711 16.90192 18250.71 1079.8014 2037.003  8607.315
## 13658  3.0 -1.6 3.4000000 17.00180 18300.00 1076.3564 2073.332  8812.595
## 13659  3.0 -1.4 3.3105891 17.09346 18344.71 1073.2002 2107.045  9004.172
## 13660  3.0 -1.2 3.2310989 17.17585 18384.45 1070.3660 2137.661  9179.040
## 13661  3.0 -1.0 3.1622777 17.24793 18418.86 1067.8883 2164.685  9334.081
## 13662  3.0 -0.8 3.1048349 17.30864 18447.58 1065.8018 2187.625  9466.205
## 13663  3.0 -0.6 3.0594117 17.35703 18470.29 1064.1390 2206.023  9572.504
## 13664  3.0 -0.4 3.0265492 17.39225 18486.73 1062.9286 2219.481  9650.444
## 13665  3.0 -0.2 3.0066593 17.41366 18496.67 1062.1929 2227.688  9698.051
## 13666  3.0  0.0 3.0000000 17.42085 18500.00 1061.9460 2230.446  9714.064
## 13667  3.0  0.2 3.0066593 17.41366 18496.67 1062.1929 2227.688  9698.051
## 13668  3.0  0.4 3.0265492 17.39225 18486.73 1062.9286 2219.481  9650.444
## 13669  3.0  0.6 3.0594117 17.35703 18470.29 1064.1390 2206.023  9572.504
## 13670  3.0  0.8 3.1048349 17.30864 18447.58 1065.8018 2187.625  9466.205
## 13671  3.0  1.0 3.1622777 17.24793 18418.86 1067.8883 2164.685  9334.081
## 13672  3.0  1.2 3.2310989 17.17585 18384.45 1070.3660 2137.661  9179.040
## 13673  3.0  1.4 3.3105891 17.09346 18344.71 1073.2002 2107.045  9004.172
## 13674  3.0  1.6 3.4000000 17.00180 18300.00 1076.3564 2073.332  8812.595
## 13675  3.0  1.8 3.4985711 16.90192 18250.71 1079.8014 2037.003  8607.315
## 13676  3.0  2.0 3.6055513 16.79478 18197.22 1083.5048 1998.512  8391.142
## 13677  3.0  2.2 3.7202150 16.68129 18139.89 1087.4392 1958.272  8166.627
## 13807  3.2 -2.0 3.7735925 16.62891 18113.20 1089.2601 1939.880  8064.520
## 13808  3.2 -1.8 3.6715120 16.72933 18164.24 1085.7721 1975.240  8261.110
## 13809  3.2 -1.6 3.5777088 16.82254 18211.15 1082.5442 2008.439  8446.763
## 13810  3.2 -1.4 3.4928498 16.90768 18253.58 1079.6024 2039.089  8619.067
## 13811  3.2 -1.2 3.4176015 16.98388 18291.20 1076.9741 2066.782  8775.493
## 13812  3.2 -1.0 3.3526109 17.05025 18323.69 1074.6875 2091.107  8913.477
## 13813  3.2 -0.8 3.2984845 17.10595 18350.76 1072.7704 2111.667  9030.518
## 13814  3.2 -0.6 3.2557641 17.15019 18372.12 1071.2484 2128.094  9124.307
## 13815  3.2 -0.4 3.2249031 17.18231 18387.55 1070.1439 2140.074  9192.856
## 13816  3.2 -0.2 3.2062439 17.20180 18396.88 1069.4738 2147.364  9234.634
## 13817  3.2  0.0 3.2000000 17.20834 18400.00 1069.2492 2149.812  9248.670
## 13818  3.2  0.2 3.2062439 17.20180 18396.88 1069.4738 2147.364  9234.634
## 13819  3.2  0.4 3.2249031 17.18231 18387.55 1070.1439 2140.074  9192.856
## 13820  3.2  0.6 3.2557641 17.15019 18372.12 1071.2484 2128.094  9124.307
## 13821  3.2  0.8 3.2984845 17.10595 18350.76 1072.7704 2111.667  9030.518
## 13822  3.2  1.0 3.3526109 17.05025 18323.69 1074.6875 2091.107  8913.477
## 13823  3.2  1.2 3.4176015 16.98388 18291.20 1076.9741 2066.782  8775.493
## 13824  3.2  1.4 3.4928498 16.90768 18253.58 1079.6024 2039.089  8619.067
## 13825  3.2  1.6 3.5777088 16.82254 18211.15 1082.5442 2008.439  8446.763
## 13826  3.2  1.8 3.6715120 16.72933 18164.24 1085.7721 1975.240  8261.110
## 13827  3.2  2.0 3.7735925 16.62891 18113.20 1089.2601 1939.880  8064.520
## 13960  3.4 -1.6 3.7576588 16.64452 18121.17 1088.7172 1945.348  8094.844
## 13961  3.4 -1.4 3.6769553 16.72395 18161.52 1085.9587 1973.334  8250.487
## 13962  3.4 -1.2 3.6055513 16.79478 18197.22 1083.5048 1998.512  8391.142
## 13963  3.4 -1.0 3.5440090 16.85626 18228.00 1081.3786 2020.539  8514.682
## 13964  3.4 -0.8 3.4928498 16.90768 18253.58 1079.6024 2039.089  8619.067
## 13965  3.4 -0.6 3.4525353 16.94842 18273.73 1078.1967 2053.864  8702.437
## 13966  3.4 -0.4 3.4234486 16.97794 18288.28 1077.1790 2064.612  8763.212
## 13967  3.4 -0.2 3.4058773 16.99581 18297.06 1076.5628 2071.141  8800.184
## 13968  3.4  0.0 3.4000000 17.00180 18300.00 1076.3564 2073.332  8812.595
## 13969  3.4  0.2 3.4058773 16.99581 18297.06 1076.5628 2071.141  8800.184
## 13970  3.4  0.4 3.4234486 16.97794 18288.28 1077.1790 2064.612  8763.212
## 13971  3.4  0.6 3.4525353 16.94842 18273.73 1078.1967 2053.864  8702.437
## 13972  3.4  0.8 3.4928498 16.90768 18253.58 1079.6024 2039.089  8619.067
## 13973  3.4  1.0 3.5440090 16.85626 18228.00 1081.3786 2020.539  8514.682
## 13974  3.4  1.2 3.6055513 16.79478 18197.22 1083.5048 1998.512  8391.142
## 13975  3.4  1.4 3.6769553 16.72395 18161.52 1085.9587 1973.334  8250.487
## 13976  3.4  1.6 3.7576588 16.64452 18121.17 1088.7172 1945.348  8094.844
## 14113  3.6 -1.2 3.7947332 16.60823 18102.63 1089.9796 1932.653  8024.487
## 14114  3.6 -1.0 3.7363083 16.66547 18131.85 1087.9889 1952.704  8135.684
## 14115  3.6 -0.8 3.6878178 16.71322 18156.09 1086.3309 1969.539  8229.335
## 14116  3.6 -0.6 3.6496575 16.75097 18175.17 1085.0221 1982.913  8303.926
## 14117  3.6 -0.4 3.6221541 16.77826 18188.92 1084.0766 1992.622  8358.184
## 14118  3.6 -0.2 3.6055513 16.79478 18197.22 1083.5048 1998.512  8391.142
## 14119  3.6  0.0 3.6000000 16.80031 18200.00 1083.3134 2000.486  8402.197
## 14120  3.6  0.2 3.6055513 16.79478 18197.22 1083.5048 1998.512  8391.142
## 14121  3.6  0.4 3.6221541 16.77826 18188.92 1084.0766 1992.622  8358.184
## 14122  3.6  0.6 3.6496575 16.75097 18175.17 1085.0221 1982.913  8303.926
## 14123  3.6  0.8 3.6878178 16.71322 18156.09 1086.3309 1969.539  8229.335
## 14124  3.6  1.0 3.7363083 16.66547 18131.85 1087.9889 1952.704  8135.684
## 14125  3.6  1.2 3.7947332 16.60823 18102.63 1089.9796 1932.653  8024.487
## 14269  3.8 -0.2 3.8052595 16.59795 18097.37 1090.3376 1929.067  8004.640
## 14270  3.8  0.0 3.8000000 16.60309 18100.00 1090.1587 1930.858  8014.550
## 14271  3.8  0.2 3.8052595 16.59795 18097.37 1090.3376 1929.067  8004.640
##              U        n
## 8531  4442.099 11.32312
## 8532  4442.057 11.33550
## 8533  4442.099 11.32312
## 8677  4442.015 11.34790
## 8678  4441.536 11.48661
## 8679  4441.117 11.60332
## 8680  4440.773 11.69620
## 8681  4440.516 11.76373
## 8682  4440.358 11.80473
## 8683  4440.305 11.81847
## 8684  4440.358 11.80473
## 8685  4440.516 11.76373
## 8686  4440.773 11.69620
## 8687  4441.117 11.60332
## 8688  4441.536 11.48661
## 8689  4442.015 11.34790
## 8826  4441.715 11.43568
## 8827  4441.020 11.62967
## 8828  4440.358 11.80473
## 8829  4439.748 11.95830
## 8830  4439.212 12.08794
## 8831  4438.770 12.19140
## 8832  4438.440 12.26678
## 8833  4438.236 12.31262
## 8834  4438.166 12.32800
## 8835  4438.236 12.31262
## 8836  4438.440 12.26678
## 8837  4438.770 12.19140
## 8838  4439.212 12.08794
## 8839  4439.748 11.95830
## 8840  4440.358 11.80473
## 8841  4441.020 11.62967
## 8842  4441.715 11.43568
## 8975  4441.845 11.39786
## 8976  4440.972 11.64290
## 8977  4440.087 11.87389
## 8978  4439.212 12.08794
## 8979  4438.372 12.28201
## 8980  4437.595 12.45300
## 8981  4436.908 12.59791
## 8982  4436.339 12.71395
## 8983  4435.913 12.79872
## 8984  4435.649 12.85037
## 8985  4435.559 12.86772
## 8986  4435.649 12.85037
## 8987  4435.913 12.79872
## 8988  4436.339 12.71395
## 8989  4436.908 12.59791
## 8990  4437.595 12.45300
## 8991  4438.372 12.28201
## 8992  4439.212 12.08794
## 8993  4440.087 11.87389
## 8994  4440.972 11.64290
## 8995  4441.845 11.39786
## 9125  4441.400 11.52519
## 9126  4440.358 11.80473
## 9127  4439.273 12.07335
## 9128  4438.166 12.32800
## 9129  4437.065 12.56530
## 9130  4435.999 12.78164
## 9131  4435.007 12.97325
## 9132  4434.125 13.13640
## 9133  4433.392 13.26758
## 9134  4432.840 13.36372
## 9135  4432.497 13.42242
## 9136  4432.381 13.44216
## 9137  4432.497 13.42242
## 9138  4432.840 13.36372
## 9139  4433.392 13.26758
## 9140  4434.125 13.13640
## 9141  4435.007 12.97325
## 9142  4435.999 12.78164
## 9143  4437.065 12.56530
## 9144  4438.166 12.32800
## 9145  4439.273 12.07335
## 9146  4440.358 11.80473
## 9147  4441.400 11.52519
## 9275  4441.117 11.60332
## 9276  4439.919 11.91590
## 9277  4438.639 12.22140
## 9278  4437.295 12.51683
## 9279  4435.913 12.79872
## 9280  4434.525 13.06315
## 9281  4433.174 13.30578
## 9282  4431.906 13.52203
## 9283  4430.772 13.70721
## 9284  4429.823 13.85685
## 9285  4429.106 13.96695
## 9286  4428.660 14.03436
## 9287  4428.508 14.05707
## 9288  4428.660 14.03436
## 9289  4429.106 13.96695
## 9290  4429.823 13.85685
## 9291  4430.772 13.70721
## 9292  4431.906 13.52203
## 9293  4433.174 13.30578
## 9294  4434.525 13.06315
## 9295  4435.913 12.79872
## 9296  4437.295 12.51683
## 9297  4438.639 12.22140
## 9298  4439.919 11.91590
## 9299  4441.117 11.60332
## 9425  4441.020 11.62967
## 9426  4439.690 11.97252
## 9427  4438.236 12.31262
## 9428  4436.668 12.64728
## 9429  4435.007 12.97325
## 9430  4433.283 13.28664
## 9431  4431.538 13.58290
## 9432  4429.823 13.85685
## 9433  4428.201 14.10283
## 9434  4426.739 14.31495
## 9435  4425.509 14.48738
## 9436  4424.575 14.61488
## 9437  4423.991 14.69322
## 9438  4423.792 14.71965
## 9439  4423.991 14.69322
## 9440  4424.575 14.61488
## 9441  4425.509 14.48738
## 9442  4426.739 14.31495
## 9443  4428.201 14.10283
## 9444  4429.823 13.85685
## 9445  4431.538 13.58290
## 9446  4433.283 13.28664
## 9447  4435.007 12.97325
## 9448  4436.668 12.64728
## 9449  4438.236 12.31262
## 9450  4439.690 11.97252
## 9451  4441.020 11.62967
## 9575  4441.117 11.60332
## 9576  4439.690 11.97252
## 9577  4438.097 12.34344
## 9578  4436.339 12.71395
## 9579  4434.427 13.08135
## 9580  4432.381 13.44216
## 9581  4430.237 13.79209
## 9582  4428.044 14.12590
## 9583  4425.869 14.43741
## 9584  4423.792 14.71965
## 9585  4421.905 14.96508
## 9586  4420.304 15.16610
## 9587  4419.081 15.31563
## 9588  4418.314 15.40791
## 9589  4418.052 15.43911
## 9590  4418.314 15.40791
## 9591  4419.081 15.31563
## 9592  4420.304 15.16610
## 9593  4421.905 14.96508
## 9594  4423.792 14.71965
## 9595  4425.869 14.43741
## 9596  4428.044 14.12590
## 9597  4430.237 13.79209
## 9598  4432.381 13.44216
## 9599  4434.427 13.08135
## 9600  4436.339 12.71395
## 9601  4438.097 12.34344
## 9602  4439.690 11.97252
## 9603  4441.117 11.60332
## 9725  4441.400 11.52519
## 9726  4439.919 11.91590
## 9727  4438.236 12.31262
## 9728  4436.339 12.71395
## 9729  4434.226 13.11797
## 9730  4431.906 13.52203
## 9731  4429.397 13.92257
## 9732  4426.739 14.31495
## 9733  4423.991 14.69322
## 9734  4421.234 15.05009
## 9735  4418.572 15.37693
## 9736  4416.130 15.66409
## 9737  4414.040 15.90146
## 9738  4412.433 16.07939
## 9739  4411.418 16.18978
## 9740  4411.071 16.22722
## 9741  4411.418 16.18978
## 9742  4412.433 16.07939
## 9743  4414.040 15.90146
## 9744  4416.130 15.66409
## 9745  4418.572 15.37693
## 9746  4421.234 15.05009
## 9747  4423.991 14.69322
## 9748  4426.739 14.31495
## 9749  4429.397 13.92257
## 9750  4431.906 13.52203
## 9751  4434.226 13.11797
## 9752  4436.339 12.71395
## 9753  4438.236 12.31262
## 9754  4439.919 11.91590
## 9755  4441.400 11.52519
## 9875  4441.845 11.39786
## 9876  4440.358 11.80473
## 9877  4438.639 12.22140
## 9878  4436.668 12.64728
## 9879  4434.427 13.08135
## 9880  4431.906 13.52203
## 9881  4429.106 13.96695
## 9882  4426.047 14.41264
## 9883  4422.766 14.85428
## 9884  4419.331 15.28531
## 9885  4415.842 15.69721
## 9886  4412.433 16.07939
## 9887  4409.266 16.41942
## 9888  4406.527 16.70375
## 9889  4404.402 16.91893
## 9890  4403.052 17.05336
## 9891  4402.589 17.09912
## 9892  4403.052 17.05336
## 9893  4404.402 16.91893
## 9894  4406.527 16.70375
## 9895  4409.266 16.41942
## 9896  4412.433 16.07939
## 9897  4415.842 15.69721
## 9898  4419.331 15.28531
## 9899  4422.766 14.85428
## 9900  4426.047 14.41264
## 9901  4429.106 13.96695
## 9902  4431.906 13.52203
## 9903  4434.427 13.08135
## 9904  4436.668 12.64728
## 9905  4438.639 12.22140
## 9906  4440.358 11.80473
## 9907  4441.845 11.39786
## 10026 4440.972 11.64290
## 10027 4439.273 12.07335
## 10028 4437.295 12.51683
## 10029 4435.007 12.97325
## 10030 4432.381 13.44216
## 10031 4429.397 13.92257
## 10032 4426.047 14.41264
## 10033 4422.340 14.90932
## 10034 4418.314 15.40791
## 10035 4414.040 15.90146
## 10036 4409.637 16.38029
## 10037 4405.270 16.83157
## 10038 4401.158 17.23934
## 10039 4397.555 17.58525
## 10040 4394.729 17.85025
## 10041 4392.919 18.01731
## 10042 4392.296 18.07444
## 10043 4392.919 18.01731
## 10044 4394.729 17.85025
## 10045 4397.555 17.58525
## 10046 4401.158 17.23934
## 10047 4405.270 16.83157
## 10048 4409.637 16.38029
## 10049 4414.040 15.90146
## 10050 4418.314 15.40791
## 10051 4422.340 14.90932
## 10052 4426.047 14.41264
## 10053 4429.397 13.92257
## 10054 4432.381 13.44216
## 10055 4435.007 12.97325
## 10056 4437.295 12.51683
## 10057 4439.273 12.07335
## 10058 4440.972 11.64290
## 10176 4441.715 11.43568
## 10177 4440.087 11.87389
## 10178 4438.166 12.32800
## 10179 4435.913 12.79872
## 10180 4433.283 13.28664
## 10181 4430.237 13.79209
## 10182 4426.739 14.31495
## 10183 4422.766 14.85428
## 10184 4418.314 15.40791
## 10185 4413.409 15.97175
## 10186 4408.124 16.53899
## 10187 4402.589 17.09912
## 10188 4397.008 17.63698
## 10189 4391.662 18.13231
## 10190 4386.902 18.56021
## 10191 4383.117 18.89326
## 10192 4380.669 19.10570
## 10193 4379.821 19.17882
## 10194 4380.669 19.10570
## 10195 4383.117 18.89326
## 10196 4386.902 18.56021
## 10197 4391.662 18.13231
## 10198 4397.008 17.63698
## 10199 4402.589 17.09912
## 10200 4408.124 16.53899
## 10201 4413.409 15.97175
## 10202 4418.314 15.40791
## 10203 4422.766 14.85428
## 10204 4426.739 14.31495
## 10205 4430.237 13.79209
## 10206 4433.283 13.28664
## 10207 4435.913 12.79872
## 10208 4438.166 12.32800
## 10209 4440.087 11.87389
## 10210 4441.715 11.43568
## 10327 4441.020 11.62967
## 10328 4439.212 12.08794
## 10329 4437.065 12.56530
## 10330 4434.525 13.06315
## 10331 4431.538 13.58290
## 10332 4428.044 14.12590
## 10333 4423.991 14.69322
## 10334 4419.331 15.28531
## 10335 4414.040 15.90146
## 10336 4408.124 16.53899
## 10337 4401.642 17.19209
## 10338 4394.729 17.85025
## 10339 4387.619 18.49649
## 10340 4380.669 19.10570
## 10341 4374.357 19.64428
## 10342 4369.247 20.07229
## 10343 4365.896 20.34970
## 10344 4364.727 20.44601
## 10345 4365.896 20.34970
## 10346 4369.247 20.07229
## 10347 4374.357 19.64428
## 10348 4380.669 19.10570
## 10349 4387.619 18.49649
## 10350 4394.729 17.85025
## 10351 4401.642 17.19209
## 10352 4408.124 16.53899
## 10353 4414.040 15.90146
## 10354 4419.331 15.28531
## 10355 4423.991 14.69322
## 10356 4428.044 14.12590
## 10357 4431.538 13.58290
## 10358 4434.525 13.06315
## 10359 4437.065 12.56530
## 10360 4439.212 12.08794
## 10361 4441.020 11.62967
## 10477 4442.015 11.34790
## 10478 4440.358 11.80473
## 10479 4438.372 12.28201
## 10480 4435.999 12.78164
## 10481 4433.174 13.30578
## 10482 4429.823 13.85685
## 10483 4425.869 14.43741
## 10484 4421.234 15.05009
## 10485 4415.842 15.69721
## 10486 4409.637 16.38029
## 10487 4402.589 17.09912
## 10488 4394.729 17.85025
## 10489 4386.173 18.62485
## 10490 4377.172 19.40556
## 10491 4368.155 20.16291
## 10492 4359.757 20.85256
## 10493 4352.794 21.41611
## 10494 4348.142 21.78958
## 10495 4346.501 21.92086
## 10496 4348.142 21.78958
## 10497 4352.794 21.41611
## 10498 4359.757 20.85256
## 10499 4368.155 20.16291
## 10500 4377.172 19.40556
## 10501 4386.173 18.62485
## 10502 4394.729 17.85025
## 10503 4402.589 17.09912
## 10504 4409.637 16.38029
## 10505 4415.842 15.69721
## 10506 4421.234 15.05009
## 10507 4425.869 14.43741
## 10508 4429.823 13.85685
## 10509 4433.174 13.30578
## 10510 4435.999 12.78164
## 10511 4438.372 12.28201
## 10512 4440.358 11.80473
## 10513 4442.015 11.34790
## 10628 4441.536 11.48661
## 10629 4439.748 11.95830
## 10630 4437.595 12.45300
## 10631 4435.007 12.97325
## 10632 4431.906 13.52203
## 10633 4428.201 14.10283
## 10634 4423.792 14.71965
## 10635 4418.572 15.37693
## 10636 4412.433 16.07939
## 10637 4405.270 16.83157
## 10638 4397.008 17.63698
## 10639 4387.619 18.49649
## 10640 4377.172 19.40556
## 10641 4365.896 20.34970
## 10642 4354.261 21.29788
## 10643 4343.069 22.19473
## 10644 4333.486 22.95600
## 10645 4326.906 23.47700
## 10646 4324.547 23.66363
## 10647 4326.906 23.47700
## 10648 4333.486 22.95600
## 10649 4343.069 22.19473
## 10650 4354.261 21.29788
## 10651 4365.896 20.34970
## 10652 4377.172 19.40556
## 10653 4387.619 18.49649
## 10654 4397.008 17.63698
## 10655 4405.270 16.83157
## 10656 4412.433 16.07939
## 10657 4418.572 15.37693
## 10658 4423.792 14.71965
## 10659 4428.201 14.10283
## 10660 4431.906 13.52203
## 10661 4435.007 12.97325
## 10662 4437.595 12.45300
## 10663 4439.748 11.95830
## 10664 4441.536 11.48661
## 10779 4441.117 11.60332
## 10780 4439.212 12.08794
## 10781 4436.908 12.59791
## 10782 4434.125 13.13640
## 10783 4430.772 13.70721
## 10784 4426.739 14.31495
## 10785 4421.905 14.96508
## 10786 4416.130 15.66409
## 10787 4409.266 16.41942
## 10788 4401.158 17.23934
## 10789 4391.662 18.13231
## 10790 4380.669 19.10570
## 10791 4368.155 20.16291
## 10792 4354.261 21.29788
## 10793 4339.420 22.48509
## 10794 4324.547 23.66363
## 10795 4311.225 24.71832
## 10796 4301.688 25.47624
## 10797 4298.178 25.75617
## 10798 4301.688 25.47624
## 10799 4311.225 24.71832
## 10800 4324.547 23.66363
## 10801 4339.420 22.48509
## 10802 4354.261 21.29788
## 10803 4368.155 20.16291
## 10804 4380.669 19.10570
## 10805 4391.662 18.13231
## 10806 4401.158 17.23934
## 10807 4409.266 16.41942
## 10808 4416.130 15.66409
## 10809 4421.905 14.96508
## 10810 4426.739 14.31495
## 10811 4430.772 13.70721
## 10812 4434.125 13.13640
## 10813 4436.908 12.59791
## 10814 4439.212 12.08794
## 10815 4441.117 11.60332
## 10930 4440.773 11.69620
## 10931 4438.770 12.19140
## 10932 4436.339 12.71395
## 10933 4433.392 13.26758
## 10934 4429.823 13.85685
## 10935 4425.509 14.48738
## 10936 4420.304 15.16610
## 10937 4414.040 15.90146
## 10938 4406.527 16.70375
## 10939 4397.555 17.58525
## 10940 4386.902 18.56021
## 10941 4374.357 19.64428
## 10942 4359.757 20.85256
## 10943 4343.069 22.19473
## 10944 4324.547 23.66363
## 10945 4305.022 25.21085
## 10946 4286.395 26.70122
## 10947 4272.125 27.85929
## 10948 4266.616 28.31126
## 10949 4272.125 27.85929
## 10950 4286.395 26.70122
## 10951 4305.022 25.21085
## 10952 4324.547 23.66363
## 10953 4343.069 22.19473
## 10954 4359.757 20.85256
## 10955 4374.357 19.64428
## 10956 4386.902 18.56021
## 10957 4397.555 17.58525
## 10958 4406.527 16.70375
## 10959 4414.040 15.90146
## 10960 4420.304 15.16610
## 10961 4425.509 14.48738
## 10962 4429.823 13.85685
## 10963 4433.392 13.26758
## 10964 4436.339 12.71395
## 10965 4438.770 12.19140
## 10966 4440.773 11.69620
## 11081 4440.516 11.76373
## 11082 4438.440 12.26678
## 11083 4435.913 12.79872
## 11084 4432.840 13.36372
## 11085 4429.106 13.96695
## 11086 4424.575 14.61488
## 11087 4419.081 15.31563
## 11088 4412.433 16.07939
## 11089 4404.402 16.91893
## 11090 4394.729 17.85025
## 11091 4383.117 18.89326
## 11092 4369.247 20.07229
## 11093 4352.794 21.41611
## 11094 4333.486 22.95600
## 11095 4311.225 24.71832
## 11096 4286.395 26.70122
## 11097 4260.617 28.80675
## 11098 4238.470 30.67049
## 11099 4228.993 31.48652
## 11100 4238.470 30.67049
## 11101 4260.617 28.80675
## 11102 4286.395 26.70122
## 11103 4311.225 24.71832
## 11104 4333.486 22.95600
## 11105 4352.794 21.41611
## 11106 4369.247 20.07229
## 11107 4383.117 18.89326
## 11108 4394.729 17.85025
## 11109 4404.402 16.91893
## 11110 4412.433 16.07939
## 11111 4419.081 15.31563
## 11112 4424.575 14.61488
## 11113 4429.106 13.96695
## 11114 4432.840 13.36372
## 11115 4435.913 12.79872
## 11116 4438.440 12.26678
## 11117 4440.516 11.76373
## 11231 4442.099 11.32312
## 11232 4440.358 11.80473
## 11233 4438.236 12.31262
## 11234 4435.649 12.85037
## 11235 4432.497 13.42242
## 11236 4428.660 14.03436
## 11237 4423.991 14.69322
## 11238 4418.314 15.40791
## 11239 4411.418 16.18978
## 11240 4403.052 17.05336
## 11241 4392.919 18.01731
## 11242 4380.669 19.10570
## 11243 4365.896 20.34970
## 11244 4348.142 21.78958
## 11245 4326.906 23.47700
## 11246 4301.688 25.47624
## 11247 4272.125 27.85929
## 11248 4238.470 30.67049
## 11249 4203.762 33.72062
## 11250 4184.362 35.50593
## 11251 4203.762 33.72062
## 11252 4238.470 30.67049
## 11253 4272.125 27.85929
## 11254 4301.688 25.47624
## 11255 4326.906 23.47700
## 11256 4348.142 21.78958
## 11257 4365.896 20.34970
## 11258 4380.669 19.10570
## 11259 4392.919 18.01731
## 11260 4403.052 17.05336
## 11261 4411.418 16.18978
## 11262 4418.314 15.40791
## 11263 4423.991 14.69322
## 11264 4428.660 14.03436
## 11265 4432.497 13.42242
## 11266 4435.649 12.85037
## 11267 4438.236 12.31262
## 11268 4440.358 11.80473
## 11269 4442.099 11.32312
## 11382 4442.057 11.33550
## 11383 4440.305 11.81847
## 11384 4438.166 12.32800
## 11385 4435.559 12.86772
## 11386 4432.381 13.44216
## 11387 4428.508 14.05707
## 11388 4423.792 14.71965
## 11389 4418.052 15.43911
## 11390 4411.071 16.22722
## 11391 4402.589 17.09912
## 11392 4392.296 18.07444
## 11393 4379.821 19.17882
## 11394 4364.727 20.44601
## 11395 4346.501 21.92086
## 11396 4324.547 23.66363
## 11397 4298.178 25.75617
## 11398 4266.616 28.31126
## 11399 4228.993 31.48652
## 11400 4184.362 35.50593
## 11401 4131.721 40.69355
## 11402 4184.362 35.50593
## 11403 4228.993 31.48652
## 11404 4266.616 28.31126
## 11405 4298.178 25.75617
## 11406 4324.547 23.66363
## 11407 4346.501 21.92086
## 11408 4364.727 20.44601
## 11409 4379.821 19.17882
## 11410 4392.296 18.07444
## 11411 4402.589 17.09912
## 11412 4411.071 16.22722
## 11413 4418.052 15.43911
## 11414 4423.792 14.71965
## 11415 4428.508 14.05707
## 11416 4432.381 13.44216
## 11417 4435.559 12.86772
## 11418 4438.166 12.32800
## 11419 4440.305 11.81847
## 11420 4442.057 11.33550
## 11533 4442.099 11.32312
## 11534 4440.358 11.80473
## 11535 4438.236 12.31262
## 11536 4435.649 12.85037
## 11537 4432.497 13.42242
## 11538 4428.660 14.03436
## 11539 4423.991 14.69322
## 11540 4418.314 15.40791
## 11541 4411.418 16.18978
## 11542 4403.052 17.05336
## 11543 4392.919 18.01731
## 11544 4380.669 19.10570
## 11545 4365.896 20.34970
## 11546 4348.142 21.78958
## 11547 4326.906 23.47700
## 11548 4301.688 25.47624
## 11549 4272.125 27.85929
## 11550 4238.470 30.67049
## 11551 4203.762 33.72062
## 11552 4184.362 35.50593
## 11553 4203.762 33.72062
## 11554 4238.470 30.67049
## 11555 4272.125 27.85929
## 11556 4301.688 25.47624
## 11557 4326.906 23.47700
## 11558 4348.142 21.78958
## 11559 4365.896 20.34970
## 11560 4380.669 19.10570
## 11561 4392.919 18.01731
## 11562 4403.052 17.05336
## 11563 4411.418 16.18978
## 11564 4418.314 15.40791
## 11565 4423.991 14.69322
## 11566 4428.660 14.03436
## 11567 4432.497 13.42242
## 11568 4435.649 12.85037
## 11569 4438.236 12.31262
## 11570 4440.358 11.80473
## 11571 4442.099 11.32312
## 11685 4440.516 11.76373
## 11686 4438.440 12.26678
## 11687 4435.913 12.79872
## 11688 4432.840 13.36372
## 11689 4429.106 13.96695
## 11690 4424.575 14.61488
## 11691 4419.081 15.31563
## 11692 4412.433 16.07939
## 11693 4404.402 16.91893
## 11694 4394.729 17.85025
## 11695 4383.117 18.89326
## 11696 4369.247 20.07229
## 11697 4352.794 21.41611
## 11698 4333.486 22.95600
## 11699 4311.225 24.71832
## 11700 4286.395 26.70122
## 11701 4260.617 28.80675
## 11702 4238.470 30.67049
## 11703 4228.993 31.48652
## 11704 4238.470 30.67049
## 11705 4260.617 28.80675
## 11706 4286.395 26.70122
## 11707 4311.225 24.71832
## 11708 4333.486 22.95600
## 11709 4352.794 21.41611
## 11710 4369.247 20.07229
## 11711 4383.117 18.89326
## 11712 4394.729 17.85025
## 11713 4404.402 16.91893
## 11714 4412.433 16.07939
## 11715 4419.081 15.31563
## 11716 4424.575 14.61488
## 11717 4429.106 13.96695
## 11718 4432.840 13.36372
## 11719 4435.913 12.79872
## 11720 4438.440 12.26678
## 11721 4440.516 11.76373
## 11836 4440.773 11.69620
## 11837 4438.770 12.19140
## 11838 4436.339 12.71395
## 11839 4433.392 13.26758
## 11840 4429.823 13.85685
## 11841 4425.509 14.48738
## 11842 4420.304 15.16610
## 11843 4414.040 15.90146
## 11844 4406.527 16.70375
## 11845 4397.555 17.58525
## 11846 4386.902 18.56021
## 11847 4374.357 19.64428
## 11848 4359.757 20.85256
## 11849 4343.069 22.19473
## 11850 4324.547 23.66363
## 11851 4305.022 25.21085
## 11852 4286.395 26.70122
## 11853 4272.125 27.85929
## 11854 4266.616 28.31126
## 11855 4272.125 27.85929
## 11856 4286.395 26.70122
## 11857 4305.022 25.21085
## 11858 4324.547 23.66363
## 11859 4343.069 22.19473
## 11860 4359.757 20.85256
## 11861 4374.357 19.64428
## 11862 4386.902 18.56021
## 11863 4397.555 17.58525
## 11864 4406.527 16.70375
## 11865 4414.040 15.90146
## 11866 4420.304 15.16610
## 11867 4425.509 14.48738
## 11868 4429.823 13.85685
## 11869 4433.392 13.26758
## 11870 4436.339 12.71395
## 11871 4438.770 12.19140
## 11872 4440.773 11.69620
## 11987 4441.117 11.60332
## 11988 4439.212 12.08794
## 11989 4436.908 12.59791
## 11990 4434.125 13.13640
## 11991 4430.772 13.70721
## 11992 4426.739 14.31495
## 11993 4421.905 14.96508
## 11994 4416.130 15.66409
## 11995 4409.266 16.41942
## 11996 4401.158 17.23934
## 11997 4391.662 18.13231
## 11998 4380.669 19.10570
## 11999 4368.155 20.16291
## 12000 4354.261 21.29788
## 12001 4339.420 22.48509
## 12002 4324.547 23.66363
## 12003 4311.225 24.71832
## 12004 4301.688 25.47624
## 12005 4298.178 25.75617
## 12006 4301.688 25.47624
## 12007 4311.225 24.71832
## 12008 4324.547 23.66363
## 12009 4339.420 22.48509
## 12010 4354.261 21.29788
## 12011 4368.155 20.16291
## 12012 4380.669 19.10570
## 12013 4391.662 18.13231
## 12014 4401.158 17.23934
## 12015 4409.266 16.41942
## 12016 4416.130 15.66409
## 12017 4421.905 14.96508
## 12018 4426.739 14.31495
## 12019 4430.772 13.70721
## 12020 4434.125 13.13640
## 12021 4436.908 12.59791
## 12022 4439.212 12.08794
## 12023 4441.117 11.60332
## 12138 4441.536 11.48661
## 12139 4439.748 11.95830
## 12140 4437.595 12.45300
## 12141 4435.007 12.97325
## 12142 4431.906 13.52203
## 12143 4428.201 14.10283
## 12144 4423.792 14.71965
## 12145 4418.572 15.37693
## 12146 4412.433 16.07939
## 12147 4405.270 16.83157
## 12148 4397.008 17.63698
## 12149 4387.619 18.49649
## 12150 4377.172 19.40556
## 12151 4365.896 20.34970
## 12152 4354.261 21.29788
## 12153 4343.069 22.19473
## 12154 4333.486 22.95600
## 12155 4326.906 23.47700
## 12156 4324.547 23.66363
## 12157 4326.906 23.47700
## 12158 4333.486 22.95600
## 12159 4343.069 22.19473
## 12160 4354.261 21.29788
## 12161 4365.896 20.34970
## 12162 4377.172 19.40556
## 12163 4387.619 18.49649
## 12164 4397.008 17.63698
## 12165 4405.270 16.83157
## 12166 4412.433 16.07939
## 12167 4418.572 15.37693
## 12168 4423.792 14.71965
## 12169 4428.201 14.10283
## 12170 4431.906 13.52203
## 12171 4435.007 12.97325
## 12172 4437.595 12.45300
## 12173 4439.748 11.95830
## 12174 4441.536 11.48661
## 12289 4442.015 11.34790
## 12290 4440.358 11.80473
## 12291 4438.372 12.28201
## 12292 4435.999 12.78164
## 12293 4433.174 13.30578
## 12294 4429.823 13.85685
## 12295 4425.869 14.43741
## 12296 4421.234 15.05009
## 12297 4415.842 15.69721
## 12298 4409.637 16.38029
## 12299 4402.589 17.09912
## 12300 4394.729 17.85025
## 12301 4386.173 18.62485
## 12302 4377.172 19.40556
## 12303 4368.155 20.16291
## 12304 4359.757 20.85256
## 12305 4352.794 21.41611
## 12306 4348.142 21.78958
## 12307 4346.501 21.92086
## 12308 4348.142 21.78958
## 12309 4352.794 21.41611
## 12310 4359.757 20.85256
## 12311 4368.155 20.16291
## 12312 4377.172 19.40556
## 12313 4386.173 18.62485
## 12314 4394.729 17.85025
## 12315 4402.589 17.09912
## 12316 4409.637 16.38029
## 12317 4415.842 15.69721
## 12318 4421.234 15.05009
## 12319 4425.869 14.43741
## 12320 4429.823 13.85685
## 12321 4433.174 13.30578
## 12322 4435.999 12.78164
## 12323 4438.372 12.28201
## 12324 4440.358 11.80473
## 12325 4442.015 11.34790
## 12441 4441.020 11.62967
## 12442 4439.212 12.08794
## 12443 4437.065 12.56530
## 12444 4434.525 13.06315
## 12445 4431.538 13.58290
## 12446 4428.044 14.12590
## 12447 4423.991 14.69322
## 12448 4419.331 15.28531
## 12449 4414.040 15.90146
## 12450 4408.124 16.53899
## 12451 4401.642 17.19209
## 12452 4394.729 17.85025
## 12453 4387.619 18.49649
## 12454 4380.669 19.10570
## 12455 4374.357 19.64428
## 12456 4369.247 20.07229
## 12457 4365.896 20.34970
## 12458 4364.727 20.44601
## 12459 4365.896 20.34970
## 12460 4369.247 20.07229
## 12461 4374.357 19.64428
## 12462 4380.669 19.10570
## 12463 4387.619 18.49649
## 12464 4394.729 17.85025
## 12465 4401.642 17.19209
## 12466 4408.124 16.53899
## 12467 4414.040 15.90146
## 12468 4419.331 15.28531
## 12469 4423.991 14.69322
## 12470 4428.044 14.12590
## 12471 4431.538 13.58290
## 12472 4434.525 13.06315
## 12473 4437.065 12.56530
## 12474 4439.212 12.08794
## 12475 4441.020 11.62967
## 12592 4441.715 11.43568
## 12593 4440.087 11.87389
## 12594 4438.166 12.32800
## 12595 4435.913 12.79872
## 12596 4433.283 13.28664
## 12597 4430.237 13.79209
## 12598 4426.739 14.31495
## 12599 4422.766 14.85428
## 12600 4418.314 15.40791
## 12601 4413.409 15.97175
## 12602 4408.124 16.53899
## 12603 4402.589 17.09912
## 12604 4397.008 17.63698
## 12605 4391.662 18.13231
## 12606 4386.902 18.56021
## 12607 4383.117 18.89326
## 12608 4380.669 19.10570
## 12609 4379.821 19.17882
## 12610 4380.669 19.10570
## 12611 4383.117 18.89326
## 12612 4386.902 18.56021
## 12613 4391.662 18.13231
## 12614 4397.008 17.63698
## 12615 4402.589 17.09912
## 12616 4408.124 16.53899
## 12617 4413.409 15.97175
## 12618 4418.314 15.40791
## 12619 4422.766 14.85428
## 12620 4426.739 14.31495
## 12621 4430.237 13.79209
## 12622 4433.283 13.28664
## 12623 4435.913 12.79872
## 12624 4438.166 12.32800
## 12625 4440.087 11.87389
## 12626 4441.715 11.43568
## 12744 4440.972 11.64290
## 12745 4439.273 12.07335
## 12746 4437.295 12.51683
## 12747 4435.007 12.97325
## 12748 4432.381 13.44216
## 12749 4429.397 13.92257
## 12750 4426.047 14.41264
## 12751 4422.340 14.90932
## 12752 4418.314 15.40791
## 12753 4414.040 15.90146
## 12754 4409.637 16.38029
## 12755 4405.270 16.83157
## 12756 4401.158 17.23934
## 12757 4397.555 17.58525
## 12758 4394.729 17.85025
## 12759 4392.919 18.01731
## 12760 4392.296 18.07444
## 12761 4392.919 18.01731
## 12762 4394.729 17.85025
## 12763 4397.555 17.58525
## 12764 4401.158 17.23934
## 12765 4405.270 16.83157
## 12766 4409.637 16.38029
## 12767 4414.040 15.90146
## 12768 4418.314 15.40791
## 12769 4422.340 14.90932
## 12770 4426.047 14.41264
## 12771 4429.397 13.92257
## 12772 4432.381 13.44216
## 12773 4435.007 12.97325
## 12774 4437.295 12.51683
## 12775 4439.273 12.07335
## 12776 4440.972 11.64290
## 12895 4441.845 11.39786
## 12896 4440.358 11.80473
## 12897 4438.639 12.22140
## 12898 4436.668 12.64728
## 12899 4434.427 13.08135
## 12900 4431.906 13.52203
## 12901 4429.106 13.96695
## 12902 4426.047 14.41264
## 12903 4422.766 14.85428
## 12904 4419.331 15.28531
## 12905 4415.842 15.69721
## 12906 4412.433 16.07939
## 12907 4409.266 16.41942
## 12908 4406.527 16.70375
## 12909 4404.402 16.91893
## 12910 4403.052 17.05336
## 12911 4402.589 17.09912
## 12912 4403.052 17.05336
## 12913 4404.402 16.91893
## 12914 4406.527 16.70375
## 12915 4409.266 16.41942
## 12916 4412.433 16.07939
## 12917 4415.842 15.69721
## 12918 4419.331 15.28531
## 12919 4422.766 14.85428
## 12920 4426.047 14.41264
## 12921 4429.106 13.96695
## 12922 4431.906 13.52203
## 12923 4434.427 13.08135
## 12924 4436.668 12.64728
## 12925 4438.639 12.22140
## 12926 4440.358 11.80473
## 12927 4441.845 11.39786
## 13047 4441.400 11.52519
## 13048 4439.919 11.91590
## 13049 4438.236 12.31262
## 13050 4436.339 12.71395
## 13051 4434.226 13.11797
## 13052 4431.906 13.52203
## 13053 4429.397 13.92257
## 13054 4426.739 14.31495
## 13055 4423.991 14.69322
## 13056 4421.234 15.05009
## 13057 4418.572 15.37693
## 13058 4416.130 15.66409
## 13059 4414.040 15.90146
## 13060 4412.433 16.07939
## 13061 4411.418 16.18978
## 13062 4411.071 16.22722
## 13063 4411.418 16.18978
## 13064 4412.433 16.07939
## 13065 4414.040 15.90146
## 13066 4416.130 15.66409
## 13067 4418.572 15.37693
## 13068 4421.234 15.05009
## 13069 4423.991 14.69322
## 13070 4426.739 14.31495
## 13071 4429.397 13.92257
## 13072 4431.906 13.52203
## 13073 4434.226 13.11797
## 13074 4436.339 12.71395
## 13075 4438.236 12.31262
## 13076 4439.919 11.91590
## 13077 4441.400 11.52519
## 13199 4441.117 11.60332
## 13200 4439.690 11.97252
## 13201 4438.097 12.34344
## 13202 4436.339 12.71395
## 13203 4434.427 13.08135
## 13204 4432.381 13.44216
## 13205 4430.237 13.79209
## 13206 4428.044 14.12590
## 13207 4425.869 14.43741
## 13208 4423.792 14.71965
## 13209 4421.905 14.96508
## 13210 4420.304 15.16610
## 13211 4419.081 15.31563
## 13212 4418.314 15.40791
## 13213 4418.052 15.43911
## 13214 4418.314 15.40791
## 13215 4419.081 15.31563
## 13216 4420.304 15.16610
## 13217 4421.905 14.96508
## 13218 4423.792 14.71965
## 13219 4425.869 14.43741
## 13220 4428.044 14.12590
## 13221 4430.237 13.79209
## 13222 4432.381 13.44216
## 13223 4434.427 13.08135
## 13224 4436.339 12.71395
## 13225 4438.097 12.34344
## 13226 4439.690 11.97252
## 13227 4441.117 11.60332
## 13351 4441.020 11.62967
## 13352 4439.690 11.97252
## 13353 4438.236 12.31262
## 13354 4436.668 12.64728
## 13355 4435.007 12.97325
## 13356 4433.283 13.28664
## 13357 4431.538 13.58290
## 13358 4429.823 13.85685
## 13359 4428.201 14.10283
## 13360 4426.739 14.31495
## 13361 4425.509 14.48738
## 13362 4424.575 14.61488
## 13363 4423.991 14.69322
## 13364 4423.792 14.71965
## 13365 4423.991 14.69322
## 13366 4424.575 14.61488
## 13367 4425.509 14.48738
## 13368 4426.739 14.31495
## 13369 4428.201 14.10283
## 13370 4429.823 13.85685
## 13371 4431.538 13.58290
## 13372 4433.283 13.28664
## 13373 4435.007 12.97325
## 13374 4436.668 12.64728
## 13375 4438.236 12.31262
## 13376 4439.690 11.97252
## 13377 4441.020 11.62967
## 13503 4441.117 11.60332
## 13504 4439.919 11.91590
## 13505 4438.639 12.22140
## 13506 4437.295 12.51683
## 13507 4435.913 12.79872
## 13508 4434.525 13.06315
## 13509 4433.174 13.30578
## 13510 4431.906 13.52203
## 13511 4430.772 13.70721
## 13512 4429.823 13.85685
## 13513 4429.106 13.96695
## 13514 4428.660 14.03436
## 13515 4428.508 14.05707
## 13516 4428.660 14.03436
## 13517 4429.106 13.96695
## 13518 4429.823 13.85685
## 13519 4430.772 13.70721
## 13520 4431.906 13.52203
## 13521 4433.174 13.30578
## 13522 4434.525 13.06315
## 13523 4435.913 12.79872
## 13524 4437.295 12.51683
## 13525 4438.639 12.22140
## 13526 4439.919 11.91590
## 13527 4441.117 11.60332
## 13655 4441.400 11.52519
## 13656 4440.358 11.80473
## 13657 4439.273 12.07335
## 13658 4438.166 12.32800
## 13659 4437.065 12.56530
## 13660 4435.999 12.78164
## 13661 4435.007 12.97325
## 13662 4434.125 13.13640
## 13663 4433.392 13.26758
## 13664 4432.840 13.36372
## 13665 4432.497 13.42242
## 13666 4432.381 13.44216
## 13667 4432.497 13.42242
## 13668 4432.840 13.36372
## 13669 4433.392 13.26758
## 13670 4434.125 13.13640
## 13671 4435.007 12.97325
## 13672 4435.999 12.78164
## 13673 4437.065 12.56530
## 13674 4438.166 12.32800
## 13675 4439.273 12.07335
## 13676 4440.358 11.80473
## 13677 4441.400 11.52519
## 13807 4441.845 11.39786
## 13808 4440.972 11.64290
## 13809 4440.087 11.87389
## 13810 4439.212 12.08794
## 13811 4438.372 12.28201
## 13812 4437.595 12.45300
## 13813 4436.908 12.59791
## 13814 4436.339 12.71395
## 13815 4435.913 12.79872
## 13816 4435.649 12.85037
## 13817 4435.559 12.86772
## 13818 4435.649 12.85037
## 13819 4435.913 12.79872
## 13820 4436.339 12.71395
## 13821 4436.908 12.59791
## 13822 4437.595 12.45300
## 13823 4438.372 12.28201
## 13824 4439.212 12.08794
## 13825 4440.087 11.87389
## 13826 4440.972 11.64290
## 13827 4441.845 11.39786
## 13960 4441.715 11.43568
## 13961 4441.020 11.62967
## 13962 4440.358 11.80473
## 13963 4439.748 11.95830
## 13964 4439.212 12.08794
## 13965 4438.770 12.19140
## 13966 4438.440 12.26678
## 13967 4438.236 12.31262
## 13968 4438.166 12.32800
## 13969 4438.236 12.31262
## 13970 4438.440 12.26678
## 13971 4438.770 12.19140
## 13972 4439.212 12.08794
## 13973 4439.748 11.95830
## 13974 4440.358 11.80473
## 13975 4441.020 11.62967
## 13976 4441.715 11.43568
## 14113 4442.015 11.34790
## 14114 4441.536 11.48661
## 14115 4441.117 11.60332
## 14116 4440.773 11.69620
## 14117 4440.516 11.76373
## 14118 4440.358 11.80473
## 14119 4440.305 11.81847
## 14120 4440.358 11.80473
## 14121 4440.516 11.76373
## 14122 4440.773 11.69620
## 14123 4441.117 11.60332
## 14124 4441.536 11.48661
## 14125 4442.015 11.34790
## 14269 4442.099 11.32312
## 14270 4442.057 11.33550
## 14271 4442.099 11.32312&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nrow(dfsc1$n)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(dfsc1$n)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 17997.98&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NN&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 99500.53 84673.14 71395.90 60045.24 50182.63 41877.02 34273.63 27997.58
##  [9] 22468.26 17997.98&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Reseting Parameters for All Cities


V &amp;lt;- 4000
#housing price per sqft vector
p &amp;lt;- c(0:150)
#housing consumption (sqft) by mile vector
q &amp;lt;- c(0:150)
#general good
g &amp;lt;- c(0:150)

#land rent/acre
r &amp;lt;- c(0:150)
#Housing floor space / acre
s &amp;lt;- c(0:150)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#City 1


#new t,y,and ad multiplication factors



t &amp;lt;- 1000*tm1

y &amp;lt;- 40000*im1

ad &amp;lt;- 0.16*am1



#finding x for various u,v
x &amp;lt;- sqrt(u^2+v^2)

#finding distance to rail
z &amp;lt;- sqrt((x-d)^2)


#amentiy distribution
am &amp;lt;- 1 + ad*(exp(-ng*z))

#finding the price for various u,v
p &amp;lt;- (al^al*(1-al)^(1-al)*am^gm*(y-t*x)/V)^(1/al)

#optimal q
q &amp;lt;- al*(y-t*x)/p

#optimal g
g &amp;lt;- (1-al)*(y-t*x)


#theta some funciton of beta
ph &amp;lt;- ((bt-1)^((bt-1)/bt))/bt

#optimal r

r &amp;lt;- (ph*p)^(bt/(bt-1))

r1 &amp;lt;- ((ph*al)^al * (1-al)^(1-al) * (y-t*x)/V)^(bt/(al*(bt-1)))

#optimal s
s &amp;lt;- (p/bt)^(1/(bt-1))

s1 &amp;lt;- (bt-1)^(-1/bt) * (r)^(1/bt)

#Utility Value

U &amp;lt;- q^al*g^(1-al)


#population n s(floorspaceperacre/ floorspace per household * (size of square (sqmi)) * acres/sqmi * fraction of housing in area)
n &amp;lt;- s/q * (.2*.2) * 640 * .25 

nn &amp;lt;- s/q



dfscm &amp;lt;- data.frame(u,v,t,x,p,g,q,s,r,U,n,nn)

#delete values where ag rent exceeds land rent
dfscm1 &amp;lt;- dfscm[(dfscm$r &amp;gt; ag),]

head(dfscm1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         u    v    t        x        p        g        q        s        r
## 5812 -7.4 -0.4 1000 7.410803 16.59623 16294.60 981.8255 1928.466 8001.313
## 5813 -7.4 -0.2 1000 7.402702 16.60449 16298.65 981.5807 1931.348 8017.263
## 5814 -7.4  0.0 1000 7.400000 16.60725 16300.00 981.4991 1932.310 8022.590
## 5815 -7.4  0.2 1000 7.402702 16.60449 16298.65 981.5807 1931.348 8017.263
## 5816 -7.4  0.4 1000 7.410803 16.59623 16294.60 981.8255 1928.466 8001.313
## 5957 -7.2 -1.6 1000 7.375636 16.63212 16312.18 980.7637 1941.006 8070.760
##             U        n       nn
## 5812 3999.807 12.57064 1.964163
## 5813 3999.805 12.59257 1.967590
## 5814 3999.804 12.59990 1.968734
## 5815 3999.805 12.59257 1.967590
## 5816 3999.807 12.57064 1.964163
## 5957 3999.800 12.66608 1.979076&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Total Land Area of the City

print(&amp;#39;Land Area&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Land Area&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nrow(dfscm1)*(.2*.2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 172.68&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;max(dfscm1$u)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 7.4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;max(dfscm1$v)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 7.4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Total Population

print(&amp;#39;Population&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Population&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;round(sum(dfscm1$n),0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 99501&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p1&amp;lt;-ggplot(dfscm1, aes(x = u, y = v, color = n)) +
   geom_point(size = 2, shape = 7) +
  
  scale_color_viridis(limits = c(5,150), direction = -1) +
  lims(x=c(-15,15),y=c(-15,15)) +
  coord_fixed() +  
  theme_minimal()+
  geom_vline(xintercept = 0) + 
  geom_hline(yintercept = 0) +
  labs(title = &amp;#39;City 1&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#City 2

#new t,y,and ad multiplication factors

t &amp;lt;- 1000*tm2

y &amp;lt;- 40000*im2

ad &amp;lt;- 0.16*am2


#finding x for various u,v
x &amp;lt;- sqrt(u^2+v^2)

#finding distance to rail
z &amp;lt;- sqrt((x-d)^2)


#amentiy distribution
am &amp;lt;- 1 + ad*(exp(-ng*z))

#finding the price for various u,v
p &amp;lt;- (al^al*(1-al)^(1-al)*am^gm*(y-t*x)/V)^(1/al)

#optimal q
q &amp;lt;- al*(y-t*x)/p

#optimal g
g &amp;lt;- (1-al)*(y-t*x)


#theta some funciton of beta
ph &amp;lt;- ((bt-1)^((bt-1)/bt))/bt

#optimal r

r &amp;lt;- (ph*p)^(bt/(bt-1))

r1 &amp;lt;- ((ph*al)^al * (1-al)^(1-al) * (y-t*x)/V)^(bt/(al*(bt-1)))

#optimal s
s &amp;lt;- (p/bt)^(1/(bt-1))

s1 &amp;lt;- (bt-1)^(-1/bt) * (r)^(1/bt)

#Utility Value

U &amp;lt;- q^al*g^(1-al)


#population n s(floorspaceperacre/ floorspace per household * (size of square (sqmi)) * acres/sqmi * fraction of housing in area)
n &amp;lt;- s/q * (.2*.2) * 640 * .25 

nn &amp;lt;- s/q



dfscm &amp;lt;- data.frame(u,v,t,x,p,g,q,s,r,U,n,nn)

#delete values where ag rent exceeds land rent
dfscm2 &amp;lt;- dfscm[(dfscm$r &amp;gt; ag),]

head(dfscm2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         u    v    t        x        p        g        q        s        r
## 5812 -7.4 -0.4 1000 7.410803 16.59623 16294.60 981.8255 1928.466 8001.313
## 5813 -7.4 -0.2 1000 7.402702 16.60449 16298.65 981.5807 1931.348 8017.263
## 5814 -7.4  0.0 1000 7.400000 16.60725 16300.00 981.4991 1932.310 8022.590
## 5815 -7.4  0.2 1000 7.402702 16.60449 16298.65 981.5807 1931.348 8017.263
## 5816 -7.4  0.4 1000 7.410803 16.59623 16294.60 981.8255 1928.466 8001.313
## 5957 -7.2 -1.6 1000 7.375636 16.63212 16312.18 980.7637 1941.006 8070.760
##             U        n       nn
## 5812 3999.807 12.57064 1.964163
## 5813 3999.805 12.59257 1.967590
## 5814 3999.804 12.59990 1.968734
## 5815 3999.805 12.59257 1.967590
## 5816 3999.807 12.57064 1.964163
## 5957 3999.800 12.66608 1.979076&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Total Land Area of the City

print(&amp;#39;Land Area&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Land Area&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nrow(dfscm2)*(.2*.2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 172.68&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;max(dfscm2$u)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 7.4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;max(dfscm2$v)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 7.4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Total Population

print(&amp;#39;Population&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Population&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;round(sum(dfscm2$n),0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 99501&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p2&amp;lt;-ggplot(dfscm2, aes(x = u, y = v, color = n)) +
   geom_point(size = 2, shape = 7) +
  
  scale_color_viridis(limits = c(5,150), direction = -1) +
  lims(x=c(-15,15),y=c(-15,15)) +
  coord_fixed() +  
  theme_minimal()+
  geom_vline(xintercept = 0) + 
  geom_hline(yintercept = 0) +
  labs(title = &amp;#39;City 2&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#City 3


#new t,y,and ad multiplication factors

t &amp;lt;- 1000*tm3

y &amp;lt;- 40000*im3

ad &amp;lt;- 0.16*am3


#finding x for various u,v
x &amp;lt;- sqrt(u^2+v^2)

#finding distance to rail
z &amp;lt;- sqrt((x-d)^2)


#amentiy distribution
am &amp;lt;- 1 + ad*(exp(-ng*z))

#finding the price for various u,v
p &amp;lt;- (al^al*(1-al)^(1-al)*am^gm*(y-t*x)/V)^(1/al)

#optimal q
q &amp;lt;- al*(y-t*x)/p

#optimal g
g &amp;lt;- (1-al)*(y-t*x)


#theta some funciton of beta
ph &amp;lt;- ((bt-1)^((bt-1)/bt))/bt

#optimal r

r &amp;lt;- (ph*p)^(bt/(bt-1))

r1 &amp;lt;- ((ph*al)^al * (1-al)^(1-al) * (y-t*x)/V)^(bt/(al*(bt-1)))

#optimal s
s &amp;lt;- (p/bt)^(1/(bt-1))

s1 &amp;lt;- (bt-1)^(-1/bt) * (r)^(1/bt)

#Utility Value

U &amp;lt;- q^al*g^(1-al)


#population n s(floorspaceperacre/ floorspace per household * (size of square (sqmi)) * acres/sqmi * fraction of housing in area)
n &amp;lt;- s/q * (.2*.2) * 640 * .25 

nn &amp;lt;- s/q



dfscm &amp;lt;- data.frame(u,v,t,x,p,g,q,s,r,U,n,nn)

#delete values where ag rent exceeds land rent
dfscm3 &amp;lt;- dfscm[(dfscm$r &amp;gt; ag),]

head(dfscm3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         u    v    t        x        p        g        q        s        r
## 5812 -7.4 -0.4 1000 7.410803 16.59623 16294.60 981.8255 1928.466 8001.313
## 5813 -7.4 -0.2 1000 7.402702 16.60449 16298.65 981.5807 1931.348 8017.263
## 5814 -7.4  0.0 1000 7.400000 16.60725 16300.00 981.4991 1932.310 8022.590
## 5815 -7.4  0.2 1000 7.402702 16.60449 16298.65 981.5807 1931.348 8017.263
## 5816 -7.4  0.4 1000 7.410803 16.59623 16294.60 981.8255 1928.466 8001.313
## 5957 -7.2 -1.6 1000 7.375636 16.63212 16312.18 980.7637 1941.006 8070.760
##             U        n       nn
## 5812 3999.807 12.57064 1.964163
## 5813 3999.805 12.59257 1.967590
## 5814 3999.804 12.59990 1.968734
## 5815 3999.805 12.59257 1.967590
## 5816 3999.807 12.57064 1.964163
## 5957 3999.800 12.66608 1.979076&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Total Land Area of the City

print(&amp;#39;Land Area&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Land Area&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nrow(dfscm3)*(.2*.2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 172.68&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;max(dfscm3$u)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 7.4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;max(dfscm3$v)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 7.4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Total Population

print(&amp;#39;Population&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Population&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;round(sum(dfscm3$n),0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 99501&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p3 &amp;lt;- ggplot(dfscm3, aes(x = u, y = v, color = n)) +
   geom_point(size = 2, shape = 7) +
  
  scale_color_viridis(limits = c(5,150), direction = -1) +
  lims(x=c(-15,15),y=c(-15,15)) +
  coord_fixed() +  
  theme_minimal()+
  geom_vline(xintercept = 0) + 
  geom_hline(yintercept = 0) +
  labs(title = &amp;#39;City 3&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#City 4

#new t,y,and ad multiplication factors

t &amp;lt;- 1000*tm4

y &amp;lt;- 40000*im4

ad &amp;lt;- 0.16*am4


#finding x for various u,v
x &amp;lt;- sqrt(u^2+v^2)

#finding distance to rail
z &amp;lt;- sqrt((x-d)^2)


#amentiy distribution
am &amp;lt;- 1 + ad*(exp(-ng*z))

#finding the price for various u,v
p &amp;lt;- (al^al*(1-al)^(1-al)*am^gm*(y-t*x)/V)^(1/al)

#optimal q
q &amp;lt;- al*(y-t*x)/p

#optimal g
g &amp;lt;- (1-al)*(y-t*x)


#theta some funciton of beta
ph &amp;lt;- ((bt-1)^((bt-1)/bt))/bt

#optimal r

r &amp;lt;- (ph*p)^(bt/(bt-1))

r1 &amp;lt;- ((ph*al)^al * (1-al)^(1-al) * (y-t*x)/V)^(bt/(al*(bt-1)))

#optimal s
s &amp;lt;- (p/bt)^(1/(bt-1))

s1 &amp;lt;- (bt-1)^(-1/bt) * (r)^(1/bt)

#Utility Value

U &amp;lt;- q^al*g^(1-al)


#population n s(floorspaceperacre/ floorspace per household * (size of square (sqmi)) * acres/sqmi * fraction of housing in area)
n &amp;lt;- s/q * (.2*.2) * 640 * .25 

nn &amp;lt;- s/q



dfscm &amp;lt;- data.frame(u,v,t,x,p,g,q,s,r,U,n,nn)

#delete values where ag rent exceeds land rent
dfscm4 &amp;lt;- dfscm[(dfscm$r &amp;gt; ag),]

head(dfscm4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         u    v    t        x        p        g        q        s        r
## 5812 -7.4 -0.4 1000 7.410803 16.59623 16294.60 981.8255 1928.466 8001.313
## 5813 -7.4 -0.2 1000 7.402702 16.60449 16298.65 981.5807 1931.348 8017.263
## 5814 -7.4  0.0 1000 7.400000 16.60725 16300.00 981.4991 1932.310 8022.590
## 5815 -7.4  0.2 1000 7.402702 16.60449 16298.65 981.5807 1931.348 8017.263
## 5816 -7.4  0.4 1000 7.410803 16.59623 16294.60 981.8255 1928.466 8001.313
## 5957 -7.2 -1.6 1000 7.375636 16.63212 16312.18 980.7637 1941.006 8070.760
##             U        n       nn
## 5812 3999.807 12.57064 1.964163
## 5813 3999.805 12.59257 1.967590
## 5814 3999.804 12.59990 1.968734
## 5815 3999.805 12.59257 1.967590
## 5816 3999.807 12.57064 1.964163
## 5957 3999.800 12.66608 1.979076&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Total Land Area of the City

print(&amp;#39;Land Area&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Land Area&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nrow(dfscm4)*(.2*.2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 172.68&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;max(dfscm4$u)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 7.4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;max(dfscm4$v)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 7.4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Total Population

print(&amp;#39;Population&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Population&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;round(sum(dfscm4$n),0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 99501&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p4 &amp;lt;- ggplot(dfscm4, aes(x = u, y = v, color = n)) +
   geom_point(size = 2, shape = 7) +
  
  scale_color_viridis(limits = c(5,150), direction = -1) +
  lims(x=c(-15,15),y=c(-15,15)) +
  coord_fixed() +  
  theme_minimal()+
  geom_vline(xintercept = 0) + 
  geom_hline(yintercept = 0) +
  labs(title = &amp;#39;City 4&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Displaying all graphs and Saving All Graphs




#Population Density Across Urban Areas
pop_den &amp;lt;- grid.arrange(p1,p2,p3,p4, ncol=2, nrow = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/Sci_Res_City2_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Land and Population Table

lnda &amp;lt;- c(nrow(dfscm1)*(0.2*0.2),nrow(dfscm2)*(0.2*0.2),nrow(dfscm3)*(0.2*0.2),nrow(dfscm4)*(0.2*0.2))
popg &amp;lt;- c(sum(dfscm1$n),sum(dfscm2$n),sum(dfscm3$n),sum(dfscm4$n))
lap &amp;lt;- data.frame(Land_Area = lnda, Population = round(popg), Population_Density = round(popg/lnda))
rownames(lap) &amp;lt;- c(&amp;#39;City 1&amp;#39;, &amp;#39;City 2&amp;#39;, &amp;#39;City 3&amp;#39;, &amp;#39;City 4&amp;#39;)
lap&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        Land_Area Population Population_Density
## City 1    172.68      99501                576
## City 2    172.68      99501                576
## City 3    172.68      99501                576
## City 4    172.68      99501                576&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Multiplier Table

mtable &amp;lt;- data.frame(Income_Multiplier = c(im1, im2, im3, im4), Traffic_Multiplier = c(tm1, tm2, tm3, tm4), Amenity_Multiplier = c(am1, am2, am3, am4) )
rownames(mtable) &amp;lt;- c(&amp;#39;City 1&amp;#39;, &amp;#39;City 2&amp;#39;, &amp;#39;City 3&amp;#39;, &amp;#39;City 4&amp;#39;)
mtable&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        Income_Multiplier Traffic_Multiplier Amenity_Multiplier
## City 1                 1                  1                  1
## City 2                 1                  1                  1
## City 3                 1                  1                  1
## City 4                 1                  1                  1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Saving files as Pdfs

# pdf(&amp;quot;land_pop.pdf&amp;quot;, height =2, width = 8.5)
# grid.table(lap)
# dev.off()

# ggsave(filename = &amp;quot;pop_den.pdf&amp;quot;, pop_den)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add a new chunk by clicking the &lt;em&gt;Insert Chunk&lt;/em&gt; button on the toolbar or by pressing &lt;em&gt;Ctrl+Alt+I&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the &lt;em&gt;Preview&lt;/em&gt; button or press &lt;em&gt;Ctrl+Shift+K&lt;/em&gt; to preview the HTML file).&lt;/p&gt;
&lt;p&gt;The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike &lt;em&gt;Knit&lt;/em&gt;, &lt;em&gt;Preview&lt;/em&gt; does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Monocentric City Modeling</title>
      <link>/post/orie/modeling_city/</link>
      <pubDate>Sun, 03 Mar 2019 00:00:00 +0000</pubDate>
      <guid>/post/orie/modeling_city/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I extended the work of (Wu and Plantinga 2003) using R and certain equation modififications to investigate how the addition of a light rail line would influence a city.&lt;/p&gt;
&lt;p&gt;Cities have housed most of the human race since 2004 and as a result influence most of the individual, commercial, and industrial energy and GHG patterns. However, city designs, have placed amenities in isolated suburban pockets, the abundance of roads have encouraged sprawl, and zoning laws have discouraged density. Therefore, for this study I will investigate how these choices can positively or negatively influence a city’s environmental footprint.&lt;/p&gt;
&lt;p&gt;I extended the work of (Wu and Plantinga 2003) using R and certain equation modififications to investigate how the addition of a light rail line would influence a city. First, I tried to replicate their city without any parks using their parameters. Second, I made some modifications to get the city to a scale that I could represent graphically. Third, I modeled the light rail as an amenity to see the influence it has on the city. Finally, I modeled the light rail so that it reduced travel costs for the citizens close to it instead of providing an amenity value.
The parameters I used where nearly identical to the (Wu and Plantinga 2003) parameters; however I did have to make some minor modifications. The given utility produced a much larger area then was graphically tractable, so I increased it to 6,000 for all the models excluding the original monocentric model which uses the original utility value. The transport cost for the rail is set to half of the normal transport costs (t¬¬rail=$500). The original parameters are shown in Table 1.&lt;/p&gt;
&lt;p&gt;Wu, Jun Jie, and Andrew J. Plantinga. 2003. “The Influence of Public Open Space on Urban Spatial Structure.” Journal of Environmental Economics and Management 46 (2): 288–309. &lt;a href=&#34;https://doi.org/10.1016/S0095-0696(03)00023-8&#34; class=&#34;uri&#34;&gt;https://doi.org/10.1016/S0095-0696(03)00023-8&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is an &lt;a href=&#34;http://rmarkdown.rstudio.com&#34;&gt;R Markdown&lt;/a&gt; Notebook. When you execute code within the notebook, the results appear beneath the code.&lt;/p&gt;
&lt;p&gt;Try executing this chunk by clicking the &lt;em&gt;Run&lt;/em&gt; button within the chunk or by placing your cursor inside it and pressing &lt;em&gt;Ctrl+Shift+Enter&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;nleqslv&amp;quot;)
#library(circlize)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#budget 
y &amp;lt;- 40000
#distance from center (miles) vector
x &amp;lt;- c(0:25)
#transportation cost 50 cents a mile by 320 days
t &amp;lt;- 1000
#housing price per sqft vector
p &amp;lt;- c(0:25)
#housing consumption (sqft) by mile vector
q &amp;lt;- c(0:25)
#general good
g &amp;lt;- c(0:25)
#utility level
V &amp;lt;- 2702
#alpha for Cobb Douglas
al &amp;lt;- .5
#beta for development cobb-douglas
bt &amp;lt;- 4/3
#capital 
c0 &amp;lt;- 0
#land acres
l &amp;lt;- .5
#interest
i &amp;lt;- .03
#land rent/acre
r &amp;lt;- c(0:25)
#Housing floor space / acre
s &amp;lt;- c(0:25)
#ag rent
ag &amp;lt;- 1000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The equations are also nearly identical to the (Wu and Plantinga 2003) equations. I used the equations and the given parameters to calculate the optimal values at each point (u,v) for housing price (p), housing consumption (q), good consumption (g), land rent (r), housing floor space per area (s), and amenity. These optimal equations naturally satisfy the equilibrium conditions : no house moves because house prices are bid up to their maximum, no business profits because land rents are bid up to the max, the price that households are willing to pay is equal to the price businesses are willing to accept, and the floor space equals the total supply. The final equilibrium conditions that the land rent is equal to the agriculture rent at the city boundary is solved for numerically in the model.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#monocentric original model parameters

u &amp;lt;- c(1:50)
v &amp;lt;- c(1:50)

#new u,v

i &amp;lt;- 0
j &amp;lt;- 0
ii &amp;lt;- 1

while(i &amp;lt; 51){
  
  j &amp;lt;- 0
  while(j &amp;lt; 51){
  u[ii] &amp;lt;- i - 25
  v[ii] &amp;lt;- j - 25
  j &amp;lt;- j+1
  ii &amp;lt;- ii+1
  }
  
  i &amp;lt;- i +1
  
  }


#finding x for various u,v
x &amp;lt;- sqrt(u^2+v^2)

#finding the price for various x
p &amp;lt;- (al^al*(1-al)^(1-al)*(y-t*x)/V)^(1/al)

#optimal q
q &amp;lt;- al*(y-t*x)/p

#optimal g
g &amp;lt;- (1-al)*(y-t*x)


#theta some funciton of beta
ph &amp;lt;- ((bt-1)^((bt-1)/bt))/bt

#optimal r

r &amp;lt;- (ph*p)^(bt/(bt-1))

r1 &amp;lt;- ((ph*al)^al * (1-al)^(1-al) * (y-t*x)/V)^(bt/(al*(bt-1)))

#optimal s
s &amp;lt;- (p/bt)^(1/(bt-1))

s1 &amp;lt;- (bt-1)^(-1/bt) * (r)^(1/bt)

#Utility Value

U &amp;lt;- q^al*g^(1-al)


#population n s(floorspaceperacre/ floorspace per household * (size of square (sqmi)) * acres/sqmi * fraction of housing in area)
n &amp;lt;- s/q * 1 * 640 * .25 



dfsc &amp;lt;- data.frame(u,v,x,p,g,q,s,r,U,n)

#delete values where ag rent exceeds land rent
dfsc1 &amp;lt;- dfsc[(dfsc$r &amp;gt; ag),]

dfsc1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        u   v         x         p         g        q          s          r    U
## 127  -23  -1 23.021729  9.870889  8489.136 860.0174   405.7444   1001.264 2702
## 128  -23   0 23.000000  9.896170  8500.000 858.9181   408.8700   1011.562 2702
## 129  -23   1 23.021729  9.870889  8489.136 860.0174   405.7444   1001.264 2702
## 173  -22  -6 22.803509 10.126259  8598.246 849.1039   438.0572   1108.970 2702
## 174  -22  -5 22.561028 10.413844  8719.486 837.2975   476.4496   1240.418 2702
## 175  -22  -4 22.360680 10.654498  8819.660 827.7875   510.2498   1359.114 2702
## 176  -22  -3 22.203603 10.845098  8898.198 820.4811   538.1263   1459.008 2702
## 177  -22  -2 22.090722 10.983114  8954.639 815.3097   558.9336   1534.708 2702
## 178  -22  -1 22.022716 11.066684  8988.642 812.2255   571.7897   1581.954 2702
## 179  -22   0 22.000000 11.094668  9000.000 811.2004   576.1383   1598.016 2702
## 180  -22   1 22.022716 11.066684  8988.642 812.2255   571.7897   1581.954 2702
## 181  -22   2 22.090722 10.983114  8954.639 815.3097   558.9336   1534.708 2702
## 182  -22   3 22.203603 10.845098  8898.198 820.4811   538.1263   1459.008 2702
## 183  -22   4 22.360680 10.654498  8819.660 827.7875   510.2498   1359.114 2702
## 184  -22   5 22.561028 10.413844  8719.486 837.2975   476.4496   1240.418 2702
## 185  -22   6 22.803509 10.126259  8598.246 849.1039   438.0572   1108.970 2702
## 221  -21  -9 22.847319 10.074728  8576.340 851.2727   431.4036   1086.568 2702
## 222  -21  -8 22.472205 10.520197  8763.897 833.0545   491.1967   1291.872 2702
## 223  -21  -7 22.135944 10.927718  8932.028 817.3736   550.5189   1503.979 2702
## 224  -21  -6 21.840330 11.292374  9079.835 804.0679   607.4905   1715.002 2702
## 225  -21  -5 21.587033 11.609589  9206.483 793.0068   660.1375   1915.981 2702
## 226  -21  -4 21.377558 11.875245  9311.221 784.0867   706.4989   2097.462 2702
## 227  -21  -3 21.213203 12.085783  9393.398 777.2271   744.7459   2250.209 2702
## 228  -21  -2 21.095023 12.238315  9452.488 772.3685   773.3011   2365.976 2702
## 229  -21  -1 21.023796 12.330708  9488.102 769.4694   790.9477   2438.236 2702
## 230  -21   0 21.000000 12.361652  9500.000 768.5057   796.9175   2462.804 2702
## 231  -21   1 21.023796 12.330708  9488.102 769.4694   790.9477   2438.236 2702
## 232  -21   2 21.095023 12.238315  9452.488 772.3685   773.3011   2365.976 2702
## 233  -21   3 21.213203 12.085783  9393.398 777.2271   744.7459   2250.209 2702
## 234  -21   4 21.377558 11.875245  9311.221 784.0867   706.4989   2097.462 2702
## 235  -21   5 21.587033 11.609589  9206.483 793.0068   660.1375   1915.981 2702
## 236  -21   6 21.840330 11.292374  9079.835 804.0679   607.4905   1715.002 2702
## 237  -21   7 22.135944 10.927718  8932.028 817.3736   550.5189   1503.979 2702
## 238  -21   8 22.472205 10.520197  8763.897 833.0545   491.1967   1291.872 2702
## 239  -21   9 22.847319 10.074728  8576.340 851.2727   431.4036   1086.568 2702
## 270  -20 -11 22.825424 10.100464  8587.288 850.1874   434.7182   1097.714 2702
## 271  -20 -10 22.360680 10.654498  8819.660 827.7875   510.2498   1359.114 2702
## 272  -20  -9 21.931712 11.179009  9034.144 808.1346   589.3778   1647.165 2702
## 273  -20  -8 21.540659 11.668142  9229.670 791.0146   670.1760   1954.927 2702
## 274  -20  -7 21.189620 12.116145  9405.190 776.2527   750.3729   2272.907 2702
## 275  -20  -6 20.880613 12.517490  9559.693 763.7069   827.4381   2589.362 2702
## 276  -20  -5 20.615528 12.866999  9692.236 753.2631   898.7017   2890.899 2702
## 277  -20  -4 20.396078 13.159981  9801.961 744.8310   961.5005   3163.332 2702
## 278  -20  -3 20.223748 13.392365  9888.126 738.3405  1013.3410   3392.758 2702
## 279  -20  -2 20.099751 13.560832  9950.124 733.7400  1052.0655   3566.721 2702
## 280  -20  -1 20.024984 13.662922  9987.508 730.9936  1076.0056   3675.345 2702
## 281  -20   0 20.000000 13.697122 10000.000 730.0804  1084.1059   3712.283 2702
## 282  -20   1 20.024984 13.662922  9987.508 730.9936  1076.0056   3675.345 2702
## 283  -20   2 20.099751 13.560832  9950.124 733.7400  1052.0655   3566.721 2702
## 284  -20   3 20.223748 13.392365  9888.126 738.3405  1013.3410   3392.758 2702
## 285  -20   4 20.396078 13.159981  9801.961 744.8310   961.5005   3163.332 2702
## 286  -20   5 20.615528 12.866999  9692.236 753.2631   898.7017   2890.899 2702
## 287  -20   6 20.880613 12.517490  9559.693 763.7069   827.4381   2589.362 2702
## 288  -20   7 21.189620 12.116145  9405.190 776.2527   750.3729   2272.907 2702
## 289  -20   8 21.540659 11.668142  9229.670 791.0146   670.1760   1954.927 2702
## 290  -20   9 21.931712 11.179009  9034.144 808.1346   589.3778   1647.165 2702
## 291  -20  10 22.360680 10.654498  8819.660 827.7875   510.2498   1359.114 2702
## 292  -20  11 22.825424 10.100464  8587.288 850.1874   434.7182   1097.714 2702
## 319  -19 -13 23.021729  9.870889  8489.136 860.0174   405.7444   1001.264 2702
## 320  -19 -12 22.472205 10.520197  8763.897 833.0545   491.1967   1291.872 2702
## 321  -19 -11 21.954498 11.150831  9022.751 809.1550   584.9322   1630.620 2702
## 322  -19 -10 21.470911 11.756484  9264.545 788.0370   685.5138   2014.808 2702
## 323  -19  -9 21.023796 12.330708  9488.102 769.4694   790.9477   2438.236 2702
## 324  -19  -8 20.615528 12.866999  9692.236 753.2631   898.7017   2890.899 2702
## 325  -19  -7 20.248457 13.358921  9875.772 739.2642  1005.7683   3358.995 2702
## 326  -19  -6 19.924859 13.800237 10037.571 727.3477  1108.7749   3825.339 2702
## 327  -19  -5 19.646883 14.185060 10176.559 717.4138  1204.1410   4270.203 2702
## 328  -19  -4 19.416488 14.508024 10291.756 709.3837  1288.2752   4672.582 2702
## 329  -19  -3 19.235384 14.764445 10382.308 703.1966  1357.7980   5011.783 2702
## 330  -19  -2 19.104973 14.950482 10447.513 698.8078  1409.7735   5269.198 2702
## 331  -19  -1 19.026298 15.063279 10486.851 696.1865  1441.9240   5430.026 2702
## 332  -19   0 19.000000 15.101077 10500.000 695.3147  1452.8056   5484.732 2702
## 333  -19   1 19.026298 15.063279 10486.851 696.1865  1441.9240   5430.026 2702
## 334  -19   2 19.104973 14.950482 10447.513 698.8078  1409.7735   5269.198 2702
## 335  -19   3 19.235384 14.764445 10382.308 703.1966  1357.7980   5011.783 2702
## 336  -19   4 19.416488 14.508024 10291.756 709.3837  1288.2752   4672.582 2702
## 337  -19   5 19.646883 14.185060 10176.559 717.4138  1204.1410   4270.203 2702
## 338  -19   6 19.924859 13.800237 10037.571 727.3477  1108.7749   3825.339 2702
## 339  -19   7 20.248457 13.358921  9875.772 739.2642  1005.7683   3358.995 2702
## 340  -19   8 20.615528 12.866999  9692.236 753.2631   898.7017   2890.899 2702
## 341  -19   9 21.023796 12.330708  9488.102 769.4694   790.9477   2438.236 2702
## 342  -19  10 21.470911 11.756484  9264.545 788.0370   685.5138   2014.808 2702
## 343  -19  11 21.954498 11.150831  9022.751 809.1550   584.9322   1630.620 2702
## 344  -19  12 22.472205 10.520197  8763.897 833.0545   491.1967   1291.872 2702
## 345  -19  13 23.021729  9.870889  8489.136 860.0174   405.7444   1001.264 2702
## 369  -18 -14 22.803509 10.126259  8598.246 849.1039   438.0572   1108.970 2702
## 370  -18 -13 22.203603 10.845098  8898.198 820.4811   538.1263   1459.008 2702
## 371  -18 -12 21.633308 11.551310  9183.346 795.0048   650.2457   1877.797 2702
## 372  -18 -11 21.095023 12.238315  9452.488 772.3685   773.3011   2365.976 2702
## 373  -18 -10 20.591260 12.899236  9704.370 752.3213   905.4735   2919.979 2702
## 374  -18  -9 20.124612 13.526971  9937.694 734.6578  1044.2043   3531.230 2702
## 375  -18  -8 19.697716 14.114293 10151.142 719.2101  1186.2089   4185.625 2702
## 376  -18  -7 19.313208 14.653981 10343.396 705.8421  1327.5493   4863.470 2702
## 377  -18  -6 18.973666 15.138974 10513.167 694.4438  1463.7709   5539.997 2702
## 378  -18  -5 18.681542 15.562555 10659.229 684.9280  1590.1076   6186.534 2702
## 379  -18  -4 18.439089 15.918551 10780.456 677.2259  1701.7447   6772.327 2702
## 380  -18  -3 18.248288 16.201537 10875.856 671.2854  1794.1240   7266.892 2702
## 381  -18  -2 18.110770 16.407042 10944.615 667.0682  1863.2650   7642.667 2702
## 382  -18  -1 18.027756 16.531723 10986.122 664.5479  1906.0671   7877.643 2702
## 383  -18   0 18.000000 16.573517 11000.000 663.7095  1920.5598   7957.608 2702
## 384  -18   1 18.027756 16.531723 10986.122 664.5479  1906.0671   7877.643 2702
## 385  -18   2 18.110770 16.407042 10944.615 667.0682  1863.2650   7642.667 2702
## 386  -18   3 18.248288 16.201537 10875.856 671.2854  1794.1240   7266.892 2702
## 387  -18   4 18.439089 15.918551 10780.456 677.2259  1701.7447   6772.327 2702
## 388  -18   5 18.681542 15.562555 10659.229 684.9280  1590.1076   6186.534 2702
## 389  -18   6 18.973666 15.138974 10513.167 694.4438  1463.7709   5539.997 2702
## 390  -18   7 19.313208 14.653981 10343.396 705.8421  1327.5493   4863.470 2702
## 391  -18   8 19.697716 14.114293 10151.142 719.2101  1186.2089   4185.625 2702
## 392  -18   9 20.124612 13.526971  9937.694 734.6578  1044.2043   3531.230 2702
## 393  -18  10 20.591260 12.899236  9704.370 752.3213   905.4735   2919.979 2702
## 394  -18  11 21.095023 12.238315  9452.488 772.3685   773.3011   2365.976 2702
## 395  -18  12 21.633308 11.551310  9183.346 795.0048   650.2457   1877.797 2702
## 396  -18  13 22.203603 10.845098  8898.198 820.4811   538.1263   1459.008 2702
## 397  -18  14 22.803509 10.126259  8598.246 849.1039   438.0572   1108.970 2702
## 419  -17 -15 22.671568 10.282243  8664.216 842.6387   458.6140   1178.895 2702
## 420  -17 -14 22.022716 11.066684  8988.642 812.2255   571.7897   1581.954 2702
## 421  -17 -13 21.400935 11.845450  9299.533 785.0721   701.1945   2076.491 2702
## 422  -17 -12 20.808652 12.611893  9595.674 760.8433   846.3006   2668.363 2702
## 423  -17 -11 20.248457 13.358921  9875.772 739.2642  1005.7683   3358.995 2702
## 424  -17 -10 19.723083 14.079044 10138.459 720.1099  1177.3438   4143.969 2702
## 425  -17  -9 19.235384 14.764445 10382.308 703.1966  1357.7980   5011.783 2702
## 426  -17  -8 18.788294 15.407086 10605.853 688.3750  1542.9268   5943.001 2702
## 427  -17  -7 18.384776 15.998851 10807.612 675.5243  1727.6277   6910.014 2702
## 428  -17  -6 18.027756 16.531723 10986.122 664.5479  1906.0671   7877.643 2702
## 429  -17  -5 17.720045 16.998004 11139.977 655.3697  2071.9420   8804.720 2702
## 430  -17  -4 17.464249 17.390553 11267.875 647.9308  2218.8295   9646.668 2702
## 431  -17  -3 17.262677 17.703046 11368.662 642.1868  2340.6032  10358.952 2702
## 432  -17  -2 17.117243 17.930237 11441.379 638.1053  2431.8785  10901.039 2702
## 433  -17  -1 17.029386 18.068184 11485.307 635.6647  2488.4409  11240.402 2702
## 434  -17   0 17.000000 18.114443 11500.000 634.8525  2507.6029  11355.958 2702
## 435  -17   1 17.029386 18.068184 11485.307 635.6647  2488.4409  11240.402 2702
## 436  -17   2 17.117243 17.930237 11441.379 638.1053  2431.8785  10901.039 2702
## 437  -17   3 17.262677 17.703046 11368.662 642.1868  2340.6032  10358.952 2702
## 438  -17   4 17.464249 17.390553 11267.875 647.9308  2218.8295   9646.668 2702
## 439  -17   5 17.720045 16.998004 11139.977 655.3697  2071.9420   8804.720 2702
## 440  -17   6 18.027756 16.531723 10986.122 664.5479  1906.0671   7877.643 2702
## 441  -17   7 18.384776 15.998851 10807.612 675.5243  1727.6277   6910.014 2702
## 442  -17   8 18.788294 15.407086 10605.853 688.3750  1542.9268   5943.001 2702
## 443  -17   9 19.235384 14.764445 10382.308 703.1966  1357.7980   5011.783 2702
## 444  -17  10 19.723083 14.079044 10138.459 720.1099  1177.3438   4143.969 2702
## 445  -17  11 20.248457 13.358921  9875.772 739.2642  1005.7683   3358.995 2702
## 446  -17  12 20.808652 12.611893  9595.674 760.8433   846.3006   2668.363 2702
## 447  -17  13 21.400935 11.845450  9299.533 785.0721   701.1945   2076.491 2702
## 448  -17  14 22.022716 11.066684  8988.642 812.2255   571.7897   1581.954 2702
## 449  -17  15 22.671568 10.282243  8664.216 842.6387   458.6140   1178.895 2702
## 469  -16 -16 22.627417 10.334706  8686.292 840.4972   465.6698   1203.140 2702
## 470  -16 -15 21.931712 11.179009  9034.144 808.1346   589.3778   1647.165 2702
## 471  -16 -14 21.260292 12.025274  9369.854 779.1801   733.6159   2205.483 2702
## 472  -16 -13 20.615528 12.866999  9692.236 753.2631   898.7017   2890.899 2702
## 473  -16 -12 20.000000 13.697122 10000.000 730.0804  1084.1059   3712.283 2702
## 474  -16 -11 19.416488 14.508024 10291.756 709.3837  1288.2752   4672.582 2702
## 475  -16 -10 18.867962 15.291570 10566.019 690.9702  1508.4816   5766.763 2702
## 476  -16  -9 18.357560 16.039166 10821.220 674.6748  1740.7208   6979.927 2702
## 477  -16  -8 17.888544 16.741872 11055.728 660.3639  1979.6837   8285.903 2702
## 478  -16  -7 17.464249 17.390553 11267.875 647.9308  2218.8295   9646.668 2702
## 479  -16  -6 17.088007 17.976082 11455.996 637.2911  2450.5801  11012.957 2702
## 480  -16  -5 16.763055 18.489595 11618.473 628.3790  2666.6497  12326.318 2702
## 481  -16  -4 16.492423 18.922786 11753.789 621.1447  2858.5053  13522.721 2702
## 482  -16  -3 16.278821 19.268232 11860.590 615.5515  3017.9318  14537.553 2702
## 483  -16  -2 16.124515 19.519726 11937.742 611.5733  3137.6530  15311.531 2702
## 484  -16  -1 16.031220 19.672574 11984.390 609.1928  3211.9396  15796.780 2702
## 485  -16   0 16.000000 19.723855 12000.000 608.4003  3237.1230  15962.136 2702
## 486  -16   1 16.031220 19.672574 11984.390 609.1928  3211.9396  15796.780 2702
## 487  -16   2 16.124515 19.519726 11937.742 611.5733  3137.6530  15311.531 2702
## 488  -16   3 16.278821 19.268232 11860.590 615.5515  3017.9318  14537.553 2702
## 489  -16   4 16.492423 18.922786 11753.789 621.1447  2858.5053  13522.721 2702
## 490  -16   5 16.763055 18.489595 11618.473 628.3790  2666.6497  12326.318 2702
## 491  -16   6 17.088007 17.976082 11455.996 637.2911  2450.5801  11012.957 2702
## 492  -16   7 17.464249 17.390553 11267.875 647.9308  2218.8295   9646.668 2702
## 493  -16   8 17.888544 16.741872 11055.728 660.3639  1979.6837   8285.903 2702
## 494  -16   9 18.357560 16.039166 10821.220 674.6748  1740.7208   6979.927 2702
## 495  -16  10 18.867962 15.291570 10566.019 690.9702  1508.4816   5766.763 2702
## 496  -16  11 19.416488 14.508024 10291.756 709.3837  1288.2752   4672.582 2702
## 497  -16  12 20.000000 13.697122 10000.000 730.0804  1084.1059   3712.283 2702
## 498  -16  13 20.615528 12.866999  9692.236 753.2631   898.7017   2890.899 2702
## 499  -16  14 21.260292 12.025274  9369.854 779.1801   733.6159   2205.483 2702
## 500  -16  15 21.931712 11.179009  9034.144 808.1346   589.3778   1647.165 2702
## 501  -16  16 22.627417 10.334706  8686.292 840.4972   465.6698   1203.140 2702
## 519  -15 -17 22.671568 10.282243  8664.216 842.6387   458.6140   1178.895 2702
## 520  -15 -16 21.931712 11.179009  9034.144 808.1346   589.3778   1647.165 2702
## 521  -15 -15 21.213203 12.085783  9393.398 777.2271   744.7459   2250.209 2702
## 522  -15 -14 20.518285 12.996419  9740.858 749.5032   926.0937   3008.975 2702
## 523  -15 -13 19.849433 13.904131 10075.283 724.6252  1134.0060   3941.842 2702
## 524  -15 -12 19.209373 14.801458 10395.314 702.3169  1368.0353   5062.229 2702
## 525  -15 -11 18.601075 15.680259 10699.462 682.3524  1626.4603   6375.829 2702
## 526  -15 -10 18.027756 16.531723 10986.122 664.5479  1906.0671   7877.643 2702
## 527  -15  -9 17.492856 17.346430 11253.572 648.7544  2201.9838   9549.140 2702
## 528  -15  -8 17.000000 18.114443 11500.000 634.8525  2507.6029  11355.958 2702
## 529  -15  -7 16.552945 18.825474 11723.527 622.7481  2814.6314  13246.692 2702
## 530  -15  -6 16.155494 19.469104 11922.253 612.3678  3113.3051  15153.315 2702
## 531  -15  -5 15.811388 20.035086 12094.306 603.6563  3392.7933  16993.726 2702
## 532  -15  -4 15.524175 20.513700 12237.913 596.5727  3641.7977  18676.687 2702
## 533  -15  -3 15.297059 20.896168 12351.471 591.0878  3849.3178  20108.998 2702
## 534  -15  -2 15.132746 21.175076 12433.627 587.1822  4005.5184  21204.290 2702
## 535  -15  -1 15.033296 21.344782 12483.352 584.8432  4102.5982  21892.266 2702
## 536  -15   0 15.000000 21.401752 12500.000 584.0643  4135.5359  22126.929 2702
## 537  -15   1 15.033296 21.344782 12483.352 584.8432  4102.5982  21892.266 2702
## 538  -15   2 15.132746 21.175076 12433.627 587.1822  4005.5184  21204.290 2702
## 539  -15   3 15.297059 20.896168 12351.471 591.0878  3849.3178  20108.998 2702
## 540  -15   4 15.524175 20.513700 12237.913 596.5727  3641.7977  18676.687 2702
## 541  -15   5 15.811388 20.035086 12094.306 603.6563  3392.7933  16993.726 2702
## 542  -15   6 16.155494 19.469104 11922.253 612.3678  3113.3051  15153.315 2702
## 543  -15   7 16.552945 18.825474 11723.527 622.7481  2814.6314  13246.692 2702
## 544  -15   8 17.000000 18.114443 11500.000 634.8525  2507.6029  11355.958 2702
## 545  -15   9 17.492856 17.346430 11253.572 648.7544  2201.9838   9549.140 2702
## 546  -15  10 18.027756 16.531723 10986.122 664.5479  1906.0671   7877.643 2702
## 547  -15  11 18.601075 15.680259 10699.462 682.3524  1626.4603   6375.829 2702
## 548  -15  12 19.209373 14.801458 10395.314 702.3169  1368.0353   5062.229 2702
## 549  -15  13 19.849433 13.904131 10075.283 724.6252  1134.0060   3941.842 2702
## 550  -15  14 20.518285 12.996419  9740.858 749.5032   926.0937   3008.975 2702
## 551  -15  15 21.213203 12.085783  9393.398 777.2271   744.7459   2250.209 2702
## 552  -15  16 21.931712 11.179009  9034.144 808.1346   589.3778   1647.165 2702
## 553  -15  17 22.671568 10.282243  8664.216 842.6387   458.6140   1178.895 2702
## 569  -14 -18 22.803509 10.126259  8598.246 849.1039   438.0572   1108.970 2702
## 570  -14 -17 22.022716 11.066684  8988.642 812.2255   571.7897   1581.954 2702
## 571  -14 -16 21.260292 12.025274  9369.854 779.1801   733.6159   2205.483 2702
## 572  -14 -15 20.518285 12.996419  9740.858 749.5032   926.0937   3008.975 2702
## 573  -14 -14 19.798990 13.973831 10100.505 722.8157  1151.1456   4021.479 2702
## 574  -14 -13 19.104973 14.950482 10447.513 698.8078  1409.7735   5269.198 2702
## 575  -14 -12 18.439089 15.918551 10780.456 677.2259  1701.7447   6772.327 2702
## 576  -14 -11 17.804494 16.869392 11097.753 657.8633  2025.2660   8541.251 2702
## 577  -14 -10 17.204651 17.793518 11397.675 640.5521  2376.6721  10572.340 2702
## 578  -14  -9 16.643317 18.680636 11678.342 625.1576  2750.1650  12843.708 2702
## 579  -14  -8 16.124515 19.519726 11937.742 611.5733  3137.6530  15311.531 2702
## 580  -14  -7 15.652476 20.299200 12173.762 599.7163  3528.7475  17907.688 2702
## 581  -14  -6 15.231546 21.007149 12384.227 589.5244  3910.9758  20539.612 2702
## 582  -14  -5 14.866069 21.631676 12566.966 580.9520  4270.2597  23093.218 2702
## 583  -14  -4 14.560220 22.161341 12719.890 573.9675  4591.6828  25439.462 2702
## 584  -14  -3 14.317821 22.585674 12841.089 568.5502  4860.5224  27444.544 2702
## 585  -14  -2 14.142136 22.895737 12928.932 564.6873  5063.4633  28982.931 2702
## 586  -14  -1 14.035669 23.084666 12982.166 562.3718  5189.8474  29951.473 2702
## 587  -14   0 14.000000 23.148135 13000.000 561.6003  5232.7723  30282.230 2702
## 588  -14   1 14.035669 23.084666 12982.166 562.3718  5189.8474  29951.473 2702
## 589  -14   2 14.142136 22.895737 12928.932 564.6873  5063.4633  28982.931 2702
## 590  -14   3 14.317821 22.585674 12841.089 568.5502  4860.5224  27444.544 2702
## 591  -14   4 14.560220 22.161341 12719.890 573.9675  4591.6828  25439.462 2702
## 592  -14   5 14.866069 21.631676 12566.966 580.9520  4270.2597  23093.218 2702
## 593  -14   6 15.231546 21.007149 12384.227 589.5244  3910.9758  20539.612 2702
## 594  -14   7 15.652476 20.299200 12173.762 599.7163  3528.7475  17907.688 2702
## 595  -14   8 16.124515 19.519726 11937.742 611.5733  3137.6530  15311.531 2702
## 596  -14   9 16.643317 18.680636 11678.342 625.1576  2750.1650  12843.708 2702
## 597  -14  10 17.204651 17.793518 11397.675 640.5521  2376.6721  10572.340 2702
## 598  -14  11 17.804494 16.869392 11097.753 657.8633  2025.2660   8541.251 2702
## 599  -14  12 18.439089 15.918551 10780.456 677.2259  1701.7447   6772.327 2702
## 600  -14  13 19.104973 14.950482 10447.513 698.8078  1409.7735   5269.198 2702
## 601  -14  14 19.798990 13.973831 10100.505 722.8157  1151.1456   4021.479 2702
## 602  -14  15 20.518285 12.996419  9740.858 749.5032   926.0937   3008.975 2702
## 603  -14  16 21.260292 12.025274  9369.854 779.1801   733.6159   2205.483 2702
## 604  -14  17 22.022716 11.066684  8988.642 812.2255   571.7897   1581.954 2702
## 605  -14  18 22.803509 10.126259  8598.246 849.1039   438.0572   1108.970 2702
## 619  -13 -19 23.021729  9.870889  8489.136 860.0174   405.7444   1001.264 2702
## 620  -13 -18 22.203603 10.845098  8898.198 820.4811   538.1263   1459.008 2702
## 621  -13 -17 21.400935 11.845450  9299.533 785.0721   701.1945   2076.491 2702
## 622  -13 -16 20.615528 12.866999  9692.236 753.2631   898.7017   2890.899 2702
## 623  -13 -15 19.849433 13.904131 10075.283 724.6252  1134.0060   3941.842 2702
## 624  -13 -14 19.104973 14.950482 10447.513 698.8078  1409.7735   5269.198 2702
## 625  -13 -13 18.384776 15.998851 10807.612 675.5243  1727.6277   6910.014 2702
## 626  -13 -12 17.691806 17.041120 11154.097 654.5401  2087.7487   8894.394 2702
## 627  -13 -11 17.029386 18.068184 11485.307 635.6647  2488.4409  11240.402 2702
## 628  -13 -10 16.401219 19.069901 11799.390 618.7442  2925.6955  13948.181 2702
## 629  -13  -9 15.811388 20.035086 12094.306 603.6563  3392.7933  16993.726 2702
## 630  -13  -8 15.264338 20.951562 12367.831 590.3059  3880.0116  20323.076 2702
## 631  -13  -7 14.764823 21.806302 12617.588 578.6212  4374.5146  23847.997 2702
## 632  -13  -6 14.317821 22.585674 12841.089 568.5502  4860.5224  27444.544 2702
## 633  -13  -5 13.928388 23.275825 13035.806 560.0577  5319.8456  30955.948 2702
## 634  -13  -4 13.601471 23.863206 13199.265 553.1220  5732.8445  34201.012 2702
## 635  -13  -3 13.341664 24.335226 13329.168 547.7314  6079.8094  36988.385 2702
## 636  -13  -2 13.152946 24.680990 13423.527 543.8812  6342.6613  39135.790 2702
## 637  -13  -1 13.038405 24.892040 13480.798 541.5706  6506.7669  40491.675 2702
## 638  -13   0 13.000000 24.963004 13500.000 540.8003  6562.5758  40955.402 2702
## 639  -13   1 13.038405 24.892040 13480.798 541.5706  6506.7669  40491.675 2702
## 640  -13   2 13.152946 24.680990 13423.527 543.8812  6342.6613  39135.790 2702
## 641  -13   3 13.341664 24.335226 13329.168 547.7314  6079.8094  36988.385 2702
## 642  -13   4 13.601471 23.863206 13199.265 553.1220  5732.8445  34201.012 2702
## 643  -13   5 13.928388 23.275825 13035.806 560.0577  5319.8456  30955.948 2702
## 644  -13   6 14.317821 22.585674 12841.089 568.5502  4860.5224  27444.544 2702
## 645  -13   7 14.764823 21.806302 12617.588 578.6212  4374.5146  23847.997 2702
## 646  -13   8 15.264338 20.951562 12367.831 590.3059  3880.0116  20323.076 2702
## 647  -13   9 15.811388 20.035086 12094.306 603.6563  3392.7933  16993.726 2702
## 648  -13  10 16.401219 19.069901 11799.390 618.7442  2925.6955  13948.181 2702
## 649  -13  11 17.029386 18.068184 11485.307 635.6647  2488.4409  11240.402 2702
## 650  -13  12 17.691806 17.041120 11154.097 654.5401  2087.7487   8894.394 2702
## 651  -13  13 18.384776 15.998851 10807.612 675.5243  1727.6277   6910.014 2702
## 652  -13  14 19.104973 14.950482 10447.513 698.8078  1409.7735   5269.198 2702
## 653  -13  15 19.849433 13.904131 10075.283 724.6252  1134.0060   3941.842 2702
## 654  -13  16 20.615528 12.866999  9692.236 753.2631   898.7017   2890.899 2702
## 655  -13  17 21.400935 11.845450  9299.533 785.0721   701.1945   2076.491 2702
## 656  -13  18 22.203603 10.845098  8898.198 820.4811   538.1263   1459.008 2702
## 657  -13  19 23.021729  9.870889  8489.136 860.0174   405.7444   1001.264 2702
## 670  -12 -19 22.472205 10.520197  8763.897 833.0545   491.1967   1291.872 2702
## 671  -12 -18 21.633308 11.551310  9183.346 795.0048   650.2457   1877.797 2702
## 672  -12 -17 20.808652 12.611893  9595.674 760.8433   846.3006   2668.363 2702
## 673  -12 -16 20.000000 13.697122 10000.000 730.0804  1084.1059   3712.283 2702
## 674  -12 -15 19.209373 14.801458 10395.314 702.3169  1368.0353   5062.229 2702
## 675  -12 -14 18.439089 15.918551 10780.456 677.2259  1701.7447   6772.327 2702
## 676  -12 -13 17.691806 17.041120 11154.097 654.5401  2087.7487   8894.394 2702
## 677  -12 -12 16.970563 18.160842 11514.719 634.0410  2526.9212  11472.754 2702
## 678  -12 -11 16.278821 19.268232 11860.590 615.5515  3017.9318  14537.553 2702
## 679  -12 -10 15.620499 20.352555 12189.750 598.9297  3556.6455  18096.706 2702
## 680  -12  -9 15.000000 21.401752 12500.000 584.0643  4135.5359  22126.929 2702
## 681  -12  -8 14.422205 22.402450 12788.897 570.8705  4743.1881  26564.759 2702
## 682  -12  -7 13.892444 23.340049 13053.778 559.2867  5364.0036  31299.026 2702
## 683  -12  -6 13.416408 24.198957 13291.796 549.2714  5978.2454  36166.826 2702
## 684  -12  -5 13.000000 24.963004 13500.000 540.8003  6562.5758  40955.402 2702
## 685  -12  -4 12.649111 25.616054 13675.445 533.8623  7091.2119  45412.216 2702
## 686  -12  -3 12.369317 26.142828 13815.342 528.4563  7537.7457  49264.497 2702
## 687  -12  -2 12.165525 26.529886 13917.237 524.5872  7877.5279  52247.479 2702
## 688  -12  -1 12.041595 26.766656 13979.203 522.2618  8090.3282  54137.757 2702
## 689  -12   0 12.000000 26.846358 14000.000 521.4860  8162.8147  54785.462 2702
## 690  -12   1 12.041595 26.766656 13979.203 522.2618  8090.3282  54137.757 2702
## 691  -12   2 12.165525 26.529886 13917.237 524.5872  7877.5279  52247.479 2702
## 692  -12   3 12.369317 26.142828 13815.342 528.4563  7537.7457  49264.497 2702
## 693  -12   4 12.649111 25.616054 13675.445 533.8623  7091.2119  45412.216 2702
## 694  -12   5 13.000000 24.963004 13500.000 540.8003  6562.5758  40955.402 2702
## 695  -12   6 13.416408 24.198957 13291.796 549.2714  5978.2454  36166.826 2702
## 696  -12   7 13.892444 23.340049 13053.778 559.2867  5364.0036  31299.026 2702
## 697  -12   8 14.422205 22.402450 12788.897 570.8705  4743.1881  26564.759 2702
## 698  -12   9 15.000000 21.401752 12500.000 584.0643  4135.5359  22126.929 2702
## 699  -12  10 15.620499 20.352555 12189.750 598.9297  3556.6455  18096.706 2702
## 700  -12  11 16.278821 19.268232 11860.590 615.5515  3017.9318  14537.553 2702
## 701  -12  12 16.970563 18.160842 11514.719 634.0410  2526.9212  11472.754 2702
## 702  -12  13 17.691806 17.041120 11154.097 654.5401  2087.7487   8894.394 2702
## 703  -12  14 18.439089 15.918551 10780.456 677.2259  1701.7447   6772.327 2702
## 704  -12  15 19.209373 14.801458 10395.314 702.3169  1368.0353   5062.229 2702
## 705  -12  16 20.000000 13.697122 10000.000 730.0804  1084.1059   3712.283 2702
## 706  -12  17 20.808652 12.611893  9595.674 760.8433   846.3006   2668.363 2702
## 707  -12  18 21.633308 11.551310  9183.346 795.0048   650.2457   1877.797 2702
## 708  -12  19 22.472205 10.520197  8763.897 833.0545   491.1967   1291.872 2702
## 720  -11 -20 22.825424 10.100464  8587.288 850.1874   434.7182   1097.714 2702
## 721  -11 -19 21.954498 11.150831  9022.751 809.1550   584.9322   1630.620 2702
## 722  -11 -18 21.095023 12.238315  9452.488 772.3685   773.3011   2365.976 2702
## 723  -11 -17 20.248457 13.358921  9875.772 739.2642  1005.7683   3358.995 2702
## 724  -11 -16 19.416488 14.508024 10291.756 709.3837  1288.2752   4672.582 2702
## 725  -11 -15 18.601075 15.680259 10699.462 682.3524  1626.4603   6375.829 2702
## 726  -11 -14 17.804494 16.869392 11097.753 657.8633  2025.2660   8541.251 2702
## 727  -11 -13 17.029386 18.068184 11485.307 635.6647  2488.4409  11240.402 2702
## 728  -11 -12 16.278821 19.268232 11860.590 615.5515  3017.9318  14537.553 2702
## 729  -11 -11 15.556349 20.459804 12221.825 597.3579  3613.1682  18481.178 2702
## 730  -11 -10 14.866069 21.631676 12566.966 580.9520  4270.2597  23093.218 2702
## 731  -11  -9 14.212670 22.770998 12893.665 566.2319  4981.1541  28356.462 2702
## 732  -11  -8 13.601471 23.863206 13199.265 553.1220  5732.8445  34201.012 2702
## 733  -11  -7 13.038405 24.892040 13480.798 541.5706  6506.7669  40491.675 2702
## 734  -11  -6 12.529964 25.839718 13735.018 531.5467  7278.5876  47019.163 2702
## 735  -11  -5 12.083046 26.687346 13958.477 523.0373  8018.6256  53498.958 2702
## 736  -11  -4 11.704700 27.415611 14147.650 516.0436  8693.1580  59582.059 2702
## 737  -11  -3 11.401754 28.005808 14299.123 510.5771  9266.7642  64880.805 2702
## 738  -11  -2 11.180340 28.441142 14409.830 506.6544  9705.6556  69009.982 2702
## 739  -11  -1 11.045361 28.708178 14477.319 504.2925  9981.6118  71638.471 2702
## 740  -11   0 11.000000 28.798198 14500.000 503.5037 10075.8046  72541.254 2702
## 741  -11   1 11.045361 28.708178 14477.319 504.2925  9981.6118  71638.471 2702
## 742  -11   2 11.180340 28.441142 14409.830 506.6544  9705.6556  69009.982 2702
## 743  -11   3 11.401754 28.005808 14299.123 510.5771  9266.7642  64880.805 2702
## 744  -11   4 11.704700 27.415611 14147.650 516.0436  8693.1580  59582.059 2702
## 745  -11   5 12.083046 26.687346 13958.477 523.0373  8018.6256  53498.958 2702
## 746  -11   6 12.529964 25.839718 13735.018 531.5467  7278.5876  47019.163 2702
## 747  -11   7 13.038405 24.892040 13480.798 541.5706  6506.7669  40491.675 2702
## 748  -11   8 13.601471 23.863206 13199.265 553.1220  5732.8445  34201.012 2702
## 749  -11   9 14.212670 22.770998 12893.665 566.2319  4981.1541  28356.462 2702
## 750  -11  10 14.866069 21.631676 12566.966 580.9520  4270.2597  23093.218 2702
## 751  -11  11 15.556349 20.459804 12221.825 597.3579  3613.1682  18481.178 2702
## 752  -11  12 16.278821 19.268232 11860.590 615.5515  3017.9318  14537.553 2702
## 753  -11  13 17.029386 18.068184 11485.307 635.6647  2488.4409  11240.402 2702
## 754  -11  14 17.804494 16.869392 11097.753 657.8633  2025.2660   8541.251 2702
## 755  -11  15 18.601075 15.680259 10699.462 682.3524  1626.4603   6375.829 2702
## 756  -11  16 19.416488 14.508024 10291.756 709.3837  1288.2752   4672.582 2702
## 757  -11  17 20.248457 13.358921  9875.772 739.2642  1005.7683   3358.995 2702
## 758  -11  18 21.095023 12.238315  9452.488 772.3685   773.3011   2365.976 2702
## 759  -11  19 21.954498 11.150831  9022.751 809.1550   584.9322   1630.620 2702
## 760  -11  20 22.825424 10.100464  8587.288 850.1874   434.7182   1097.714 2702
## 771  -10 -20 22.360680 10.654498  8819.660 827.7875   510.2498   1359.114 2702
## 772  -10 -19 21.470911 11.756484  9264.545 788.0370   685.5138   2014.808 2702
## 773  -10 -18 20.591260 12.899236  9704.370 752.3213   905.4735   2919.979 2702
## 774  -10 -17 19.723083 14.079044 10138.459 720.1099  1177.3438   4143.969 2702
## 775  -10 -16 18.867962 15.291570 10566.019 690.9702  1508.4816   5766.763 2702
## 776  -10 -15 18.027756 16.531723 10986.122 664.5479  1906.0671   7877.643 2702
## 777  -10 -14 17.204651 17.793518 11397.675 640.5521  2376.6721  10572.340 2702
## 778  -10 -13 16.401219 19.069901 11799.390 618.7442  2925.6955  13948.181 2702
## 779  -10 -12 15.620499 20.352555 12189.750 598.9297  3556.6455  18096.706 2702
## 780  -10 -11 14.866069 21.631676 12566.966 580.9520  4270.2597  23093.218 2702
## 781  -10 -10 14.142136 22.895737 12928.932 564.6873  5063.4633  28982.931 2702
## 782  -10  -9 13.453624 24.131249 13273.188 550.0415  5928.2047  35763.746 2702
## 783  -10  -8 12.806248 25.322558 13596.876 536.9472  6850.2512  43366.470 2702
## 784  -10  -7 12.206556 26.451729 13896.722 525.3616  7808.1110  51634.508 2702
## 785  -10  -6 11.661904 27.498605 14169.048 515.2643  8772.3464  60306.822 2702
## 786  -10  -5 11.180340 28.441142 14409.830 506.6544  9705.6556  69009.982 2702
## 787  -10  -4 10.770330 29.256149 14614.835 499.5475 10564.1670  77266.710 2702
## 788  -10  -3 10.440307 29.920522 14779.847 493.9702 11300.3347  84527.979 2702
## 789  -10  -2 10.198039 30.412982 14900.980 489.9546 11867.5426  90231.839 2702
## 790  -10  -1 10.049876 30.716136 14975.062 487.5308 12225.9757  93883.683 2702
## 791  -10   0 10.000000 30.818524 15000.000 486.7203 12348.6442  95141.745 2702
## 792  -10   1 10.049876 30.716136 14975.062 487.5308 12225.9757  93883.683 2702
## 793  -10   2 10.198039 30.412982 14900.980 489.9546 11867.5426  90231.839 2702
## 794  -10   3 10.440307 29.920522 14779.847 493.9702 11300.3347  84527.979 2702
## 795  -10   4 10.770330 29.256149 14614.835 499.5475 10564.1670  77266.710 2702
## 796  -10   5 11.180340 28.441142 14409.830 506.6544  9705.6556  69009.982 2702
## 797  -10   6 11.661904 27.498605 14169.048 515.2643  8772.3464  60306.822 2702
## 798  -10   7 12.206556 26.451729 13896.722 525.3616  7808.1110  51634.508 2702
## 799  -10   8 12.806248 25.322558 13596.876 536.9472  6850.2512  43366.470 2702
## 800  -10   9 13.453624 24.131249 13273.188 550.0415  5928.2047  35763.746 2702
## 801  -10  10 14.142136 22.895737 12928.932 564.6873  5063.4633  28982.931 2702
## 802  -10  11 14.866069 21.631676 12566.966 580.9520  4270.2597  23093.218 2702
## 803  -10  12 15.620499 20.352555 12189.750 598.9297  3556.6455  18096.706 2702
## 804  -10  13 16.401219 19.069901 11799.390 618.7442  2925.6955  13948.181 2702
## 805  -10  14 17.204651 17.793518 11397.675 640.5521  2376.6721  10572.340 2702
## 806  -10  15 18.027756 16.531723 10986.122 664.5479  1906.0671   7877.643 2702
## 807  -10  16 18.867962 15.291570 10566.019 690.9702  1508.4816   5766.763 2702
## 808  -10  17 19.723083 14.079044 10138.459 720.1099  1177.3438   4143.969 2702
## 809  -10  18 20.591260 12.899236  9704.370 752.3213   905.4735   2919.979 2702
## 810  -10  19 21.470911 11.756484  9264.545 788.0370   685.5138   2014.808 2702
## 811  -10  20 22.360680 10.654498  8819.660 827.7875   510.2498   1359.114 2702
## 821   -9 -21 22.847319 10.074728  8576.340 851.2727   431.4036   1086.568 2702
## 822   -9 -20 21.931712 11.179009  9034.144 808.1346   589.3778   1647.165 2702
## 823   -9 -19 21.023796 12.330708  9488.102 769.4694   790.9477   2438.236 2702
## 824   -9 -18 20.124612 13.526971  9937.694 734.6578  1044.2043   3531.230 2702
## 825   -9 -17 19.235384 14.764445 10382.308 703.1966  1357.7980   5011.783 2702
## 826   -9 -16 18.357560 16.039166 10821.220 674.6748  1740.7208   6979.927 2702
## 827   -9 -15 17.492856 17.346430 11253.572 648.7544  2201.9838   9549.140 2702
## 828   -9 -14 16.643317 18.680636 11678.342 625.1576  2750.1650  12843.708 2702
## 829   -9 -13 15.811388 20.035086 12094.306 603.6563  3392.7933  16993.726 2702
## 830   -9 -12 15.000000 21.401752 12500.000 584.0643  4135.5359  22126.929 2702
## 831   -9 -11 14.212670 22.770998 12893.665 566.2319  4981.1541  28356.462 2702
## 832   -9 -10 13.453624 24.131249 13273.188 550.0415  5928.2047  35763.746 2702
## 833   -9  -9 12.727922 25.468641 13636.039 535.4050  6969.4920  44375.873 2702
## 834   -9  -8 12.041595 26.766656 13979.203 522.2618  8090.3282  54137.757 2702
## 835   -9  -7 11.401754 28.005808 14299.123 510.5771  9266.7642  64880.805 2702
## 836   -9  -6 10.816654 29.163490 14591.673 500.3404 10464.1093  76292.487 2702
## 837   -9  -5 10.295630 30.214124 14852.185 491.5643 11636.2706  87894.930 2702
## 838   -9  -4  9.848858 31.129838 15075.571 484.2804 12726.6576  99044.697 2702
## 839   -9  -3  9.486833 31.881878 15256.584 478.5347 13671.4779 108968.097 2702
## 840   -9  -2  9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702
## 841   -9  -1  9.055385 32.789854 15472.307 471.8627 14873.1254 121921.902 2702
## 842   -9   0  9.000000 32.907335 15500.000 471.0196 15033.5626 123678.619 2702
## 843   -9   1  9.055385 32.789854 15472.307 471.8627 14873.1254 121921.902 2702
## 844   -9   2  9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702
## 845   -9   3  9.486833 31.881878 15256.584 478.5347 13671.4779 108968.097 2702
## 846   -9   4  9.848858 31.129838 15075.571 484.2804 12726.6576  99044.697 2702
## 847   -9   5 10.295630 30.214124 14852.185 491.5643 11636.2706  87894.930 2702
## 848   -9   6 10.816654 29.163490 14591.673 500.3404 10464.1093  76292.487 2702
## 849   -9   7 11.401754 28.005808 14299.123 510.5771  9266.7642  64880.805 2702
## 850   -9   8 12.041595 26.766656 13979.203 522.2618  8090.3282  54137.757 2702
## 851   -9   9 12.727922 25.468641 13636.039 535.4050  6969.4920  44375.873 2702
## 852   -9  10 13.453624 24.131249 13273.188 550.0415  5928.2047  35763.746 2702
## 853   -9  11 14.212670 22.770998 12893.665 566.2319  4981.1541  28356.462 2702
## 854   -9  12 15.000000 21.401752 12500.000 584.0643  4135.5359  22126.929 2702
## 855   -9  13 15.811388 20.035086 12094.306 603.6563  3392.7933  16993.726 2702
## 856   -9  14 16.643317 18.680636 11678.342 625.1576  2750.1650  12843.708 2702
## 857   -9  15 17.492856 17.346430 11253.572 648.7544  2201.9838   9549.140 2702
## 858   -9  16 18.357560 16.039166 10821.220 674.6748  1740.7208   6979.927 2702
## 859   -9  17 19.235384 14.764445 10382.308 703.1966  1357.7980   5011.783 2702
## 860   -9  18 20.124612 13.526971  9937.694 734.6578  1044.2043   3531.230 2702
## 861   -9  19 21.023796 12.330708  9488.102 769.4694   790.9477   2438.236 2702
## 862   -9  20 21.931712 11.179009  9034.144 808.1346   589.3778   1647.165 2702
## 863   -9  21 22.847319 10.074728  8576.340 851.2727   431.4036   1086.568 2702
## 872   -8 -21 22.472205 10.520197  8763.897 833.0545   491.1967   1291.872 2702
## 873   -8 -20 21.540659 11.668142  9229.670 791.0146   670.1760   1954.927 2702
## 874   -8 -19 20.615528 12.866999  9692.236 753.2631   898.7017   2890.899 2702
## 875   -8 -18 19.697716 14.114293 10151.142 719.2101  1186.2089   4185.625 2702
## 876   -8 -17 18.788294 15.407086 10605.853 688.3750  1542.9268   5943.001 2702
## 877   -8 -16 17.888544 16.741872 11055.728 660.3639  1979.6837   8285.903 2702
## 878   -8 -15 17.000000 18.114443 11500.000 634.8525  2507.6029  11355.958 2702
## 879   -8 -14 16.124515 19.519726 11937.742 611.5733  3137.6530  15311.531 2702
## 880   -8 -13 15.264338 20.951562 12367.831 590.3059  3880.0116  20323.076 2702
## 881   -8 -12 14.422205 22.402450 12788.897 570.8705  4743.1881  26564.759 2702
## 882   -8 -11 13.601471 23.863206 13199.265 553.1220  5732.8445  34201.012 2702
## 883   -8 -10 12.806248 25.322558 13596.876 536.9472  6850.2512  43366.470 2702
## 884   -8  -9 12.041595 26.766656 13979.203 522.2618  8090.3282  54137.757 2702
## 885   -8  -8 11.313708 28.178517 14343.146 509.0100  9439.2653  66496.124 2702
## 886   -8  -7 10.630146 29.537443 14684.927 497.1631 10871.8259  80281.485 2702
## 887   -8  -6 10.000000 30.818524 15000.000 486.7203 12348.6442  95141.745 2702
## 888   -8  -5  9.433981 31.992419 15283.009 477.7072 13814.1768 110487.231 2702
## 889   -8  -4  8.944272 33.025755 15527.864 470.1744 15196.4464 125468.527 2702
## 890   -8  -3  8.544004 33.882559 15727.998 464.1916 16410.1449 139004.427 2702
## 891   -8  -2  8.246211 34.527125 15876.894 459.8383 17364.6109 149887.524 2702
## 892   -8  -1  8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702
## 893   -8   0  8.000000 35.064631 16000.000 456.3002 18188.2794 159441.328 2702
## 894   -8   1  8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702
## 895   -8   2  8.246211 34.527125 15876.894 459.8383 17364.6109 149887.524 2702
## 896   -8   3  8.544004 33.882559 15727.998 464.1916 16410.1449 139004.427 2702
## 897   -8   4  8.944272 33.025755 15527.864 470.1744 15196.4464 125468.527 2702
## 898   -8   5  9.433981 31.992419 15283.009 477.7072 13814.1768 110487.231 2702
## 899   -8   6 10.000000 30.818524 15000.000 486.7203 12348.6442  95141.745 2702
## 900   -8   7 10.630146 29.537443 14684.927 497.1631 10871.8259  80281.485 2702
## 901   -8   8 11.313708 28.178517 14343.146 509.0100  9439.2653  66496.124 2702
## 902   -8   9 12.041595 26.766656 13979.203 522.2618  8090.3282  54137.757 2702
## 903   -8  10 12.806248 25.322558 13596.876 536.9472  6850.2512  43366.470 2702
## 904   -8  11 13.601471 23.863206 13199.265 553.1220  5732.8445  34201.012 2702
## 905   -8  12 14.422205 22.402450 12788.897 570.8705  4743.1881  26564.759 2702
## 906   -8  13 15.264338 20.951562 12367.831 590.3059  3880.0116  20323.076 2702
## 907   -8  14 16.124515 19.519726 11937.742 611.5733  3137.6530  15311.531 2702
## 908   -8  15 17.000000 18.114443 11500.000 634.8525  2507.6029  11355.958 2702
## 909   -8  16 17.888544 16.741872 11055.728 660.3639  1979.6837   8285.903 2702
## 910   -8  17 18.788294 15.407086 10605.853 688.3750  1542.9268   5943.001 2702
## 911   -8  18 19.697716 14.114293 10151.142 719.2101  1186.2089   4185.625 2702
## 912   -8  19 20.615528 12.866999  9692.236 753.2631   898.7017   2890.899 2702
## 913   -8  20 21.540659 11.668142  9229.670 791.0146   670.1760   1954.927 2702
## 914   -8  21 22.472205 10.520197  8763.897 833.0545   491.1967   1291.872 2702
## 923   -7 -21 22.135944 10.927718  8932.028 817.3736   550.5189   1503.979 2702
## 924   -7 -20 21.189620 12.116145  9405.190 776.2527   750.3729   2272.907 2702
## 925   -7 -19 20.248457 13.358921  9875.772 739.2642  1005.7683   3358.995 2702
## 926   -7 -18 19.313208 14.653981 10343.396 705.8421  1327.5493   4863.470 2702
## 927   -7 -17 18.384776 15.998851 10807.612 675.5243  1727.6277   6910.014 2702
## 928   -7 -16 17.464249 17.390553 11267.875 647.9308  2218.8295   9646.668 2702
## 929   -7 -15 16.552945 18.825474 11723.527 622.7481  2814.6314  13246.692 2702
## 930   -7 -14 15.652476 20.299200 12173.762 599.7163  3528.7475  17907.688 2702
## 931   -7 -13 14.764823 21.806302 12617.588 578.6212  4374.5146  23847.997 2702
## 932   -7 -12 13.892444 23.340049 13053.778 559.2867  5364.0036  31299.026 2702
## 933   -7 -11 13.038405 24.892040 13480.798 541.5706  6506.7669  40491.675 2702
## 934   -7 -10 12.206556 26.451729 13896.722 525.3616  7808.1110  51634.508 2702
## 935   -7  -9 11.401754 28.005808 14299.123 510.5771  9266.7642  64880.805 2702
## 936   -7  -8 10.630146 29.537443 14684.927 497.1631 10871.8259  80281.485 2702
## 937   -7  -7  9.899495 31.025364 15050.253 485.0951 12598.9527  97721.773 2702
## 938   -7  -6  9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702
## 939   -7  -5  8.602325 33.757035 15698.837 465.0538 16228.4359 136955.969 2702
## 940   -7  -4  8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702
## 941   -7  -3  7.615773 35.911735 16192.113 450.8864 19538.5779 175416.057 2702
## 942   -7  -2  7.280110 36.660045 16359.945 446.2609 20785.6096 190500.345 2702
## 943   -7  -1  7.071068 37.129971 16464.466 443.4279 21595.2201 200457.476 2702
## 944   -7   0  7.000000 37.290413 16500.000 442.4730 21876.3764 203944.781 2702
## 945   -7   1  7.071068 37.129971 16464.466 443.4279 21595.2201 200457.476 2702
## 946   -7   2  7.280110 36.660045 16359.945 446.2609 20785.6096 190500.345 2702
## 947   -7   3  7.615773 35.911735 16192.113 450.8864 19538.5779 175416.057 2702
## 948   -7   4  8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702
## 949   -7   5  8.602325 33.757035 15698.837 465.0538 16228.4359 136955.969 2702
## 950   -7   6  9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702
## 951   -7   7  9.899495 31.025364 15050.253 485.0951 12598.9527  97721.773 2702
## 952   -7   8 10.630146 29.537443 14684.927 497.1631 10871.8259  80281.485 2702
## 953   -7   9 11.401754 28.005808 14299.123 510.5771  9266.7642  64880.805 2702
## 954   -7  10 12.206556 26.451729 13896.722 525.3616  7808.1110  51634.508 2702
## 955   -7  11 13.038405 24.892040 13480.798 541.5706  6506.7669  40491.675 2702
## 956   -7  12 13.892444 23.340049 13053.778 559.2867  5364.0036  31299.026 2702
## 957   -7  13 14.764823 21.806302 12617.588 578.6212  4374.5146  23847.997 2702
## 958   -7  14 15.652476 20.299200 12173.762 599.7163  3528.7475  17907.688 2702
## 959   -7  15 16.552945 18.825474 11723.527 622.7481  2814.6314  13246.692 2702
## 960   -7  16 17.464249 17.390553 11267.875 647.9308  2218.8295   9646.668 2702
## 961   -7  17 18.384776 15.998851 10807.612 675.5243  1727.6277   6910.014 2702
## 962   -7  18 19.313208 14.653981 10343.396 705.8421  1327.5493   4863.470 2702
## 963   -7  19 20.248457 13.358921  9875.772 739.2642  1005.7683   3358.995 2702
## 964   -7  20 21.189620 12.116145  9405.190 776.2527   750.3729   2272.907 2702
## 965   -7  21 22.135944 10.927718  8932.028 817.3736   550.5189   1503.979 2702
## 973   -6 -22 22.803509 10.126259  8598.246 849.1039   438.0572   1108.970 2702
## 974   -6 -21 21.840330 11.292374  9079.835 804.0679   607.4905   1715.002 2702
## 975   -6 -20 20.880613 12.517490  9559.693 763.7069   827.4381   2589.362 2702
## 976   -6 -19 19.924859 13.800237 10037.571 727.3477  1108.7749   3825.339 2702
## 977   -6 -18 18.973666 15.138974 10513.167 694.4438  1463.7709   5539.997 2702
## 978   -6 -17 18.027756 16.531723 10986.122 664.5479  1906.0671   7877.643 2702
## 979   -6 -16 17.088007 17.976082 11455.996 637.2911  2450.5801  11012.957 2702
## 980   -6 -15 16.155494 19.469104 11922.253 612.3678  3113.3051  15153.315 2702
## 981   -6 -14 15.231546 21.007149 12384.227 589.5244  3910.9758  20539.612 2702
## 982   -6 -13 14.317821 22.585674 12841.089 568.5502  4860.5224  27444.544 2702
## 983   -6 -12 13.416408 24.198957 13291.796 549.2714  5978.2454  36166.826 2702
## 984   -6 -11 12.529964 25.839718 13735.018 531.5467  7278.5876  47019.163 2702
## 985   -6 -10 11.661904 27.498605 14169.048 515.2643  8772.3464  60306.822 2702
## 986   -6  -9 10.816654 29.163490 14591.673 500.3404 10464.1093  76292.487 2702
## 987   -6  -8 10.000000 30.818524 15000.000 486.7203 12348.6442  95141.745 2702
## 988   -6  -7  9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702
## 989   -6  -6  8.485281 34.009182 15757.359 463.3266 16594.8126 141094.001 2702
## 990   -6  -5  7.810250 35.481709 16094.875 453.6105 18845.0545 167163.687 2702
## 991   -6  -4  7.211103 36.814842 16394.449 445.3217 21050.0256 193738.344 2702
## 992   -6  -3  6.708204 37.952796 16645.898 438.5948 23062.9630 218825.980 2702
## 993   -6  -2  6.324555 38.832558 16837.722 433.5981 24704.2562 239832.365 2702
## 994   -6  -1  6.082763 39.392202 16958.619 430.5070 25787.8171 253959.728 2702
## 995   -6   0  6.000000 39.584681 17000.000 429.4591 26167.6818 258959.837 2702
## 996   -6   1  6.082763 39.392202 16958.619 430.5070 25787.8171 253959.728 2702
## 997   -6   2  6.324555 38.832558 16837.722 433.5981 24704.2562 239832.365 2702
## 998   -6   3  6.708204 37.952796 16645.898 438.5948 23062.9630 218825.980 2702
## 999   -6   4  7.211103 36.814842 16394.449 445.3217 21050.0256 193738.344 2702
## 1000  -6   5  7.810250 35.481709 16094.875 453.6105 18845.0545 167163.687 2702
## 1001  -6   6  8.485281 34.009182 15757.359 463.3266 16594.8126 141094.001 2702
## 1002  -6   7  9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702
## 1003  -6   8 10.000000 30.818524 15000.000 486.7203 12348.6442  95141.745 2702
## 1004  -6   9 10.816654 29.163490 14591.673 500.3404 10464.1093  76292.487 2702
## 1005  -6  10 11.661904 27.498605 14169.048 515.2643  8772.3464  60306.822 2702
## 1006  -6  11 12.529964 25.839718 13735.018 531.5467  7278.5876  47019.163 2702
## 1007  -6  12 13.416408 24.198957 13291.796 549.2714  5978.2454  36166.826 2702
## 1008  -6  13 14.317821 22.585674 12841.089 568.5502  4860.5224  27444.544 2702
## 1009  -6  14 15.231546 21.007149 12384.227 589.5244  3910.9758  20539.612 2702
## 1010  -6  15 16.155494 19.469104 11922.253 612.3678  3113.3051  15153.315 2702
## 1011  -6  16 17.088007 17.976082 11455.996 637.2911  2450.5801  11012.957 2702
## 1012  -6  17 18.027756 16.531723 10986.122 664.5479  1906.0671   7877.643 2702
## 1013  -6  18 18.973666 15.138974 10513.167 694.4438  1463.7709   5539.997 2702
## 1014  -6  19 19.924859 13.800237 10037.571 727.3477  1108.7749   3825.339 2702
## 1015  -6  20 20.880613 12.517490  9559.693 763.7069   827.4381   2589.362 2702
## 1016  -6  21 21.840330 11.292374  9079.835 804.0679   607.4905   1715.002 2702
## 1017  -6  22 22.803509 10.126259  8598.246 849.1039   438.0572   1108.970 2702
## 1024  -5 -22 22.561028 10.413844  8719.486 837.2975   476.4496   1240.418 2702
## 1025  -5 -21 21.587033 11.609589  9206.483 793.0068   660.1375   1915.981 2702
## 1026  -5 -20 20.615528 12.866999  9692.236 753.2631   898.7017   2890.899 2702
## 1027  -5 -19 19.646883 14.185060 10176.559 717.4138  1204.1410   4270.203 2702
## 1028  -5 -18 18.681542 15.562555 10659.229 684.9280  1590.1076   6186.534 2702
## 1029  -5 -17 17.720045 16.998004 11139.977 655.3697  2071.9420   8804.720 2702
## 1030  -5 -16 16.763055 18.489595 11618.473 628.3790  2666.6497  12326.318 2702
## 1031  -5 -15 15.811388 20.035086 12094.306 603.6563  3392.7933  16993.726 2702
## 1032  -5 -14 14.866069 21.631676 12566.966 580.9520  4270.2597  23093.218 2702
## 1033  -5 -13 13.928388 23.275825 13035.806 560.0577  5319.8456  30955.948 2702
## 1034  -5 -12 13.000000 24.963004 13500.000 540.8003  6562.5758  40955.402 2702
## 1035  -5 -11 12.083046 26.687346 13958.477 523.0373  8018.6256  53498.958 2702
## 1036  -5 -10 11.180340 28.441142 14409.830 506.6544  9705.6556  69009.982 2702
## 1037  -5  -9 10.295630 30.214124 14852.185 491.5643 11636.2706  87894.930 2702
## 1038  -5  -8  9.433981 31.992419 15283.009 477.7072 13814.1768 110487.231 2702
## 1039  -5  -7  8.602325 33.757035 15698.837 465.0538 16228.4359 136955.969 2702
## 1040  -5  -6  7.810250 35.481709 16094.875 453.6105 18845.0545 167163.687 2702
## 1041  -5  -5  7.071068 37.129971 16464.466 443.4279 21595.2201 200457.476 2702
## 1042  -5  -4  6.403124 38.651567 16798.438 434.6121 24360.4389 235392.284 2702
## 1043  -5  -3  5.830952 39.979290 17084.524 427.3344 26958.0844 269441.271 2702
## 1044  -5  -2  5.385165 41.029276 17307.418 421.8309 29138.3770 298881.629 2702
## 1045  -5  -1  5.099020 41.710421 17450.490 418.3724 30613.8194 319228.825 2702
## 1046  -5   0  5.000000 41.947435 17500.000 417.1888 31138.6668 326546.799 2702
## 1047  -5   1  5.099020 41.710421 17450.490 418.3724 30613.8194 319228.825 2702
## 1048  -5   2  5.385165 41.029276 17307.418 421.8309 29138.3770 298881.629 2702
## 1049  -5   3  5.830952 39.979290 17084.524 427.3344 26958.0844 269441.271 2702
## 1050  -5   4  6.403124 38.651567 16798.438 434.6121 24360.4389 235392.284 2702
## 1051  -5   5  7.071068 37.129971 16464.466 443.4279 21595.2201 200457.476 2702
## 1052  -5   6  7.810250 35.481709 16094.875 453.6105 18845.0545 167163.687 2702
## 1053  -5   7  8.602325 33.757035 15698.837 465.0538 16228.4359 136955.969 2702
## 1054  -5   8  9.433981 31.992419 15283.009 477.7072 13814.1768 110487.231 2702
## 1055  -5   9 10.295630 30.214124 14852.185 491.5643 11636.2706  87894.930 2702
## 1056  -5  10 11.180340 28.441142 14409.830 506.6544  9705.6556  69009.982 2702
## 1057  -5  11 12.083046 26.687346 13958.477 523.0373  8018.6256  53498.958 2702
## 1058  -5  12 13.000000 24.963004 13500.000 540.8003  6562.5758  40955.402 2702
## 1059  -5  13 13.928388 23.275825 13035.806 560.0577  5319.8456  30955.948 2702
## 1060  -5  14 14.866069 21.631676 12566.966 580.9520  4270.2597  23093.218 2702
## 1061  -5  15 15.811388 20.035086 12094.306 603.6563  3392.7933  16993.726 2702
## 1062  -5  16 16.763055 18.489595 11618.473 628.3790  2666.6497  12326.318 2702
## 1063  -5  17 17.720045 16.998004 11139.977 655.3697  2071.9420   8804.720 2702
## 1064  -5  18 18.681542 15.562555 10659.229 684.9280  1590.1076   6186.534 2702
## 1065  -5  19 19.646883 14.185060 10176.559 717.4138  1204.1410   4270.203 2702
## 1066  -5  20 20.615528 12.866999  9692.236 753.2631   898.7017   2890.899 2702
## 1067  -5  21 21.587033 11.609589  9206.483 793.0068   660.1375   1915.981 2702
## 1068  -5  22 22.561028 10.413844  8719.486 837.2975   476.4496   1240.418 2702
## 1075  -4 -22 22.360680 10.654498  8819.660 827.7875   510.2498   1359.114 2702
## 1076  -4 -21 21.377558 11.875245  9311.221 784.0867   706.4989   2097.462 2702
## 1077  -4 -20 20.396078 13.159981  9801.961 744.8310   961.5005   3163.332 2702
## 1078  -4 -19 19.416488 14.508024 10291.756 709.3837  1288.2752   4672.582 2702
## 1079  -4 -18 18.439089 15.918551 10780.456 677.2259  1701.7447   6772.327 2702
## 1080  -4 -17 17.464249 17.390553 11267.875 647.9308  2218.8295   9646.668 2702
## 1081  -4 -16 16.492423 18.922786 11753.789 621.1447  2858.5053  13522.721 2702
## 1082  -4 -15 15.524175 20.513700 12237.913 596.5727  3641.7977  18676.687 2702
## 1083  -4 -14 14.560220 22.161341 12719.890 573.9675  4591.6828  25439.462 2702
## 1084  -4 -13 13.601471 23.863206 13199.265 553.1220  5732.8445  34201.012 2702
## 1085  -4 -12 12.649111 25.616054 13675.445 533.8623  7091.2119  45412.216 2702
## 1086  -4 -11 11.704700 27.415611 14147.650 516.0436  8693.1580  59582.059 2702
## 1087  -4 -10 10.770330 29.256149 14614.835 499.5475 10564.1670  77266.710 2702
## 1088  -4  -9  9.848858 31.129838 15075.571 484.2804 12726.6576  99044.697 2702
## 1089  -4  -8  8.944272 33.025755 15527.864 470.1744 15196.4464 125468.527 2702
## 1090  -4  -7  8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702
## 1091  -4  -6  7.211103 36.814842 16394.449 445.3217 21050.0256 193738.344 2702
## 1092  -4  -5  6.403124 38.651567 16798.438 434.6121 24360.4389 235392.284 2702
## 1093  -4  -4  5.656854 40.387732 17171.573 425.1680 27792.7926 280621.964 2702
## 1094  -4  -3  5.000000 41.947435 17500.000 417.1888 31138.6668 326546.799 2702
## 1095  -4  -2  4.472136 43.222264 17763.932 410.9903 34064.8388 368089.867 2702
## 1096  -4  -1  4.123106 44.075678 17938.447 406.9920 36122.7496 398033.671 2702
## 1097  -4   0  4.000000 44.378674 18000.000 405.6002 36872.8539 409092.090 2702
## 1098  -4   1  4.123106 44.075678 17938.447 406.9920 36122.7496 398033.671 2702
## 1099  -4   2  4.472136 43.222264 17763.932 410.9903 34064.8388 368089.867 2702
## 1100  -4   3  5.000000 41.947435 17500.000 417.1888 31138.6668 326546.799 2702
## 1101  -4   4  5.656854 40.387732 17171.573 425.1680 27792.7926 280621.964 2702
## 1102  -4   5  6.403124 38.651567 16798.438 434.6121 24360.4389 235392.284 2702
## 1103  -4   6  7.211103 36.814842 16394.449 445.3217 21050.0256 193738.344 2702
## 1104  -4   7  8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702
## 1105  -4   8  8.944272 33.025755 15527.864 470.1744 15196.4464 125468.527 2702
## 1106  -4   9  9.848858 31.129838 15075.571 484.2804 12726.6576  99044.697 2702
## 1107  -4  10 10.770330 29.256149 14614.835 499.5475 10564.1670  77266.710 2702
## 1108  -4  11 11.704700 27.415611 14147.650 516.0436  8693.1580  59582.059 2702
## 1109  -4  12 12.649111 25.616054 13675.445 533.8623  7091.2119  45412.216 2702
## 1110  -4  13 13.601471 23.863206 13199.265 553.1220  5732.8445  34201.012 2702
## 1111  -4  14 14.560220 22.161341 12719.890 573.9675  4591.6828  25439.462 2702
## 1112  -4  15 15.524175 20.513700 12237.913 596.5727  3641.7977  18676.687 2702
## 1113  -4  16 16.492423 18.922786 11753.789 621.1447  2858.5053  13522.721 2702
## 1114  -4  17 17.464249 17.390553 11267.875 647.9308  2218.8295   9646.668 2702
## 1115  -4  18 18.439089 15.918551 10780.456 677.2259  1701.7447   6772.327 2702
## 1116  -4  19 19.416488 14.508024 10291.756 709.3837  1288.2752   4672.582 2702
## 1117  -4  20 20.396078 13.159981  9801.961 744.8310   961.5005   3163.332 2702
## 1118  -4  21 21.377558 11.875245  9311.221 784.0867   706.4989   2097.462 2702
## 1119  -4  22 22.360680 10.654498  8819.660 827.7875   510.2498   1359.114 2702
## 1126  -3 -22 22.203603 10.845098  8898.198 820.4811   538.1263   1459.008 2702
## 1127  -3 -21 21.213203 12.085783  9393.398 777.2271   744.7459   2250.209 2702
## 1128  -3 -20 20.223748 13.392365  9888.126 738.3405  1013.3410   3392.758 2702
## 1129  -3 -19 19.235384 14.764445 10382.308 703.1966  1357.7980   5011.783 2702
## 1130  -3 -18 18.248288 16.201537 10875.856 671.2854  1794.1240   7266.892 2702
## 1131  -3 -17 17.262677 17.703046 11368.662 642.1868  2340.6032  10358.952 2702
## 1132  -3 -16 16.278821 19.268232 11860.590 615.5515  3017.9318  14537.553 2702
## 1133  -3 -15 15.297059 20.896168 12351.471 591.0878  3849.3178  20108.998 2702
## 1134  -3 -14 14.317821 22.585674 12841.089 568.5502  4860.5224  27444.544 2702
## 1135  -3 -13 13.341664 24.335226 13329.168 547.7314  6079.8094  36988.385 2702
## 1136  -3 -12 12.369317 26.142828 13815.342 528.4563  7537.7457  49264.497 2702
## 1137  -3 -11 11.401754 28.005808 14299.123 510.5771  9266.7642  64880.805 2702
## 1138  -3 -10 10.440307 29.920522 14779.847 493.9702 11300.3347  84527.979 2702
## 1139  -3  -9  9.486833 31.881878 15256.584 478.5347 13671.4779 108968.097 2702
## 1140  -3  -8  8.544004 33.882559 15727.998 464.1916 16410.1449 139004.427 2702
## 1141  -3  -7  7.615773 35.911735 16192.113 450.8864 19538.5779 175416.057 2702
## 1142  -3  -6  6.708204 37.952796 16645.898 438.5948 23062.9630 218825.980 2702
## 1143  -3  -5  5.830952 39.979290 17084.524 427.3344 26958.0844 269441.271 2702
## 1144  -3  -4  5.000000 41.947435 17500.000 417.1888 31138.6668 326546.799 2702
## 1145  -3  -3  4.242641 43.782464 17878.680 408.3525 35406.6126 387547.183 2702
## 1146  -3  -2  3.605551 45.356508 18197.224 401.2043 39364.3079 446356.886 2702
## 1147  -3  -1  3.162278 46.468094 18418.861 396.3765 42330.0098 491748.719 2702
## 1148  -3   0  3.000000 46.878399 18500.000 394.6381 43461.2379 509348.309 2702
## 1149  -3   1  3.162278 46.468094 18418.861 396.3765 42330.0098 491748.719 2702
## 1150  -3   2  3.605551 45.356508 18197.224 401.2043 39364.3079 446356.886 2702
## 1151  -3   3  4.242641 43.782464 17878.680 408.3525 35406.6126 387547.183 2702
## 1152  -3   4  5.000000 41.947435 17500.000 417.1888 31138.6668 326546.799 2702
## 1153  -3   5  5.830952 39.979290 17084.524 427.3344 26958.0844 269441.271 2702
## 1154  -3   6  6.708204 37.952796 16645.898 438.5948 23062.9630 218825.980 2702
## 1155  -3   7  7.615773 35.911735 16192.113 450.8864 19538.5779 175416.057 2702
## 1156  -3   8  8.544004 33.882559 15727.998 464.1916 16410.1449 139004.427 2702
## 1157  -3   9  9.486833 31.881878 15256.584 478.5347 13671.4779 108968.097 2702
## 1158  -3  10 10.440307 29.920522 14779.847 493.9702 11300.3347  84527.979 2702
## 1159  -3  11 11.401754 28.005808 14299.123 510.5771  9266.7642  64880.805 2702
## 1160  -3  12 12.369317 26.142828 13815.342 528.4563  7537.7457  49264.497 2702
## 1161  -3  13 13.341664 24.335226 13329.168 547.7314  6079.8094  36988.385 2702
## 1162  -3  14 14.317821 22.585674 12841.089 568.5502  4860.5224  27444.544 2702
## 1163  -3  15 15.297059 20.896168 12351.471 591.0878  3849.3178  20108.998 2702
## 1164  -3  16 16.278821 19.268232 11860.590 615.5515  3017.9318  14537.553 2702
## 1165  -3  17 17.262677 17.703046 11368.662 642.1868  2340.6032  10358.952 2702
## 1166  -3  18 18.248288 16.201537 10875.856 671.2854  1794.1240   7266.892 2702
## 1167  -3  19 19.235384 14.764445 10382.308 703.1966  1357.7980   5011.783 2702
## 1168  -3  20 20.223748 13.392365  9888.126 738.3405  1013.3410   3392.758 2702
## 1169  -3  21 21.213203 12.085783  9393.398 777.2271   744.7459   2250.209 2702
## 1170  -3  22 22.203603 10.845098  8898.198 820.4811   538.1263   1459.008 2702
## 1177  -2 -22 22.090722 10.983114  8954.639 815.3097   558.9336   1534.708 2702
## 1178  -2 -21 21.095023 12.238315  9452.488 772.3685   773.3011   2365.976 2702
## 1179  -2 -20 20.099751 13.560832  9950.124 733.7400  1052.0655   3566.721 2702
## 1180  -2 -19 19.104973 14.950482 10447.513 698.8078  1409.7735   5269.198 2702
## 1181  -2 -18 18.110770 16.407042 10944.615 667.0682  1863.2650   7642.667 2702
## 1182  -2 -17 17.117243 17.930237 11441.379 638.1053  2431.8785  10901.039 2702
## 1183  -2 -16 16.124515 19.519726 11937.742 611.5733  3137.6530  15311.531 2702
## 1184  -2 -15 15.132746 21.175076 12433.627 587.1822  4005.5184  21204.290 2702
## 1185  -2 -14 14.142136 22.895737 12928.932 564.6873  5063.4633  28982.931 2702
## 1186  -2 -13 13.152946 24.680990 13423.527 543.8812  6342.6613  39135.790 2702
## 1187  -2 -12 12.165525 26.529886 13917.237 524.5872  7877.5279  52247.479 2702
## 1188  -2 -11 11.180340 28.441142 14409.830 506.6544  9705.6556  69009.982 2702
## 1189  -2 -10 10.198039 30.412982 14900.980 489.9546 11867.5426  90231.839 2702
## 1190  -2  -9  9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702
## 1191  -2  -8  8.246211 34.527125 15876.894 459.8383 17364.6109 149887.524 2702
## 1192  -2  -7  7.280110 36.660045 16359.945 446.2609 20785.6096 190500.345 2702
## 1193  -2  -6  6.324555 38.832558 16837.722 433.5981 24704.2562 239832.365 2702
## 1194  -2  -5  5.385165 41.029276 17307.418 421.8309 29138.3770 298881.629 2702
## 1195  -2  -4  4.472136 43.222264 17763.932 410.9903 34064.8388 368089.867 2702
## 1196  -2  -3  3.605551 45.356508 18197.224 401.2043 39364.3079 446356.886 2702
## 1197  -2  -2  2.828427 47.314167 18585.786 392.8165 44684.5488 528553.048 2702
## 1198  -2  -1  2.236068 48.834161 18881.966 386.6549 49130.9307 599816.949 2702
## 1199  -2   0  2.000000 49.446609 19000.000 384.2528 51002.7188 630477.872 2702
## 1200  -2   1  2.236068 48.834161 18881.966 386.6549 49130.9307 599816.949 2702
## 1201  -2   2  2.828427 47.314167 18585.786 392.8165 44684.5488 528553.048 2702
## 1202  -2   3  3.605551 45.356508 18197.224 401.2043 39364.3079 446356.886 2702
## 1203  -2   4  4.472136 43.222264 17763.932 410.9903 34064.8388 368089.867 2702
## 1204  -2   5  5.385165 41.029276 17307.418 421.8309 29138.3770 298881.629 2702
## 1205  -2   6  6.324555 38.832558 16837.722 433.5981 24704.2562 239832.365 2702
## 1206  -2   7  7.280110 36.660045 16359.945 446.2609 20785.6096 190500.345 2702
## 1207  -2   8  8.246211 34.527125 15876.894 459.8383 17364.6109 149887.524 2702
## 1208  -2   9  9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702
## 1209  -2  10 10.198039 30.412982 14900.980 489.9546 11867.5426  90231.839 2702
## 1210  -2  11 11.180340 28.441142 14409.830 506.6544  9705.6556  69009.982 2702
## 1211  -2  12 12.165525 26.529886 13917.237 524.5872  7877.5279  52247.479 2702
## 1212  -2  13 13.152946 24.680990 13423.527 543.8812  6342.6613  39135.790 2702
## 1213  -2  14 14.142136 22.895737 12928.932 564.6873  5063.4633  28982.931 2702
## 1214  -2  15 15.132746 21.175076 12433.627 587.1822  4005.5184  21204.290 2702
## 1215  -2  16 16.124515 19.519726 11937.742 611.5733  3137.6530  15311.531 2702
## 1216  -2  17 17.117243 17.930237 11441.379 638.1053  2431.8785  10901.039 2702
## 1217  -2  18 18.110770 16.407042 10944.615 667.0682  1863.2650   7642.667 2702
## 1218  -2  19 19.104973 14.950482 10447.513 698.8078  1409.7735   5269.198 2702
## 1219  -2  20 20.099751 13.560832  9950.124 733.7400  1052.0655   3566.721 2702
## 1220  -2  21 21.095023 12.238315  9452.488 772.3685   773.3011   2365.976 2702
## 1221  -2  22 22.090722 10.983114  8954.639 815.3097   558.9336   1534.708 2702
## 1227  -1 -23 23.021729  9.870889  8489.136 860.0174   405.7444   1001.264 2702
## 1228  -1 -22 22.022716 11.066684  8988.642 812.2255   571.7897   1581.954 2702
## 1229  -1 -21 21.023796 12.330708  9488.102 769.4694   790.9477   2438.236 2702
## 1230  -1 -20 20.024984 13.662922  9987.508 730.9936  1076.0056   3675.345 2702
## 1231  -1 -19 19.026298 15.063279 10486.851 696.1865  1441.9240   5430.026 2702
## 1232  -1 -18 18.027756 16.531723 10986.122 664.5479  1906.0671   7877.643 2702
## 1233  -1 -17 17.029386 18.068184 11485.307 635.6647  2488.4409  11240.402 2702
## 1234  -1 -16 16.031220 19.672574 11984.390 609.1928  3211.9396  15796.780 2702
## 1235  -1 -15 15.033296 21.344782 12483.352 584.8432  4102.5982  21892.266 2702
## 1236  -1 -14 14.035669 23.084666 12982.166 562.3718  5189.8474  29951.473 2702
## 1237  -1 -13 13.038405 24.892040 13480.798 541.5706  6506.7669  40491.675 2702
## 1238  -1 -12 12.041595 26.766656 13979.203 522.2618  8090.3282  54137.757 2702
## 1239  -1 -11 11.045361 28.708178 14477.319 504.2925  9981.6118  71638.471 2702
## 1240  -1 -10 10.049876 30.716136 14975.062 487.5308 12225.9757  93883.683 2702
## 1241  -1  -9  9.055385 32.789854 15472.307 471.8627 14873.1254 121921.902 2702
## 1242  -1  -8  8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702
## 1243  -1  -7  7.071068 37.129971 16464.466 443.4279 21595.2201 200457.476 2702
## 1244  -1  -6  6.082763 39.392202 16958.619 430.5070 25787.8171 253959.728 2702
## 1245  -1  -5  5.099020 41.710421 17450.490 418.3724 30613.8194 319228.825 2702
## 1246  -1  -4  4.123106 44.075678 17938.447 406.9920 36122.7496 398033.671 2702
## 1247  -1  -3  3.162278 46.468094 18418.861 396.3765 42330.0098 491748.719 2702
## 1248  -1  -2  2.236068 48.834161 18881.966 386.6549 49130.9307 599816.949 2702
## 1249  -1  -1  1.414214 50.982841 19292.893 378.4193 55905.6737 712557.517 2702
## 1250  -1   0  1.000000 52.083305 19500.000 374.4002 59604.5468 776100.445 2702
## 1251  -1   1  1.414214 50.982841 19292.893 378.4193 55905.6737 712557.517 2702
## 1252  -1   2  2.236068 48.834161 18881.966 386.6549 49130.9307 599816.949 2702
## 1253  -1   3  3.162278 46.468094 18418.861 396.3765 42330.0098 491748.719 2702
## 1254  -1   4  4.123106 44.075678 17938.447 406.9920 36122.7496 398033.671 2702
## 1255  -1   5  5.099020 41.710421 17450.490 418.3724 30613.8194 319228.825 2702
## 1256  -1   6  6.082763 39.392202 16958.619 430.5070 25787.8171 253959.728 2702
## 1257  -1   7  7.071068 37.129971 16464.466 443.4279 21595.2201 200457.476 2702
## 1258  -1   8  8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702
## 1259  -1   9  9.055385 32.789854 15472.307 471.8627 14873.1254 121921.902 2702
## 1260  -1  10 10.049876 30.716136 14975.062 487.5308 12225.9757  93883.683 2702
## 1261  -1  11 11.045361 28.708178 14477.319 504.2925  9981.6118  71638.471 2702
## 1262  -1  12 12.041595 26.766656 13979.203 522.2618  8090.3282  54137.757 2702
## 1263  -1  13 13.038405 24.892040 13480.798 541.5706  6506.7669  40491.675 2702
## 1264  -1  14 14.035669 23.084666 12982.166 562.3718  5189.8474  29951.473 2702
## 1265  -1  15 15.033296 21.344782 12483.352 584.8432  4102.5982  21892.266 2702
## 1266  -1  16 16.031220 19.672574 11984.390 609.1928  3211.9396  15796.780 2702
## 1267  -1  17 17.029386 18.068184 11485.307 635.6647  2488.4409  11240.402 2702
## 1268  -1  18 18.027756 16.531723 10986.122 664.5479  1906.0671   7877.643 2702
## 1269  -1  19 19.026298 15.063279 10486.851 696.1865  1441.9240   5430.026 2702
## 1270  -1  20 20.024984 13.662922  9987.508 730.9936  1076.0056   3675.345 2702
## 1271  -1  21 21.023796 12.330708  9488.102 769.4694   790.9477   2438.236 2702
## 1272  -1  22 22.022716 11.066684  8988.642 812.2255   571.7897   1581.954 2702
## 1273  -1  23 23.021729  9.870889  8489.136 860.0174   405.7444   1001.264 2702
## 1278   0 -23 23.000000  9.896170  8500.000 858.9181   408.8700   1011.562 2702
## 1279   0 -22 22.000000 11.094668  9000.000 811.2004   576.1383   1598.016 2702
## 1280   0 -21 21.000000 12.361652  9500.000 768.5057   796.9175   2462.804 2702
## 1281   0 -20 20.000000 13.697122 10000.000 730.0804  1084.1059   3712.283 2702
## 1282   0 -19 19.000000 15.101077 10500.000 695.3147  1452.8056   5484.732 2702
## 1283   0 -18 18.000000 16.573517 11000.000 663.7095  1920.5598   7957.608 2702
## 1284   0 -17 17.000000 18.114443 11500.000 634.8525  2507.6029  11355.958 2702
## 1285   0 -16 16.000000 19.723855 12000.000 608.4003  3237.1230  15962.136 2702
## 1286   0 -15 15.000000 21.401752 12500.000 584.0643  4135.5359  22126.929 2702
## 1287   0 -14 14.000000 23.148135 13000.000 561.6003  5232.7723  30282.230 2702
## 1288   0 -13 13.000000 24.963004 13500.000 540.8003  6562.5758  40955.402 2702
## 1289   0 -12 12.000000 26.846358 14000.000 521.4860  8162.8147  54785.462 2702
## 1290   0 -11 11.000000 28.798198 14500.000 503.5037 10075.8046  72541.254 2702
## 1291   0 -10 10.000000 30.818524 15000.000 486.7203 12348.6442  95141.745 2702
## 1292   0  -9  9.000000 32.907335 15500.000 471.0196 15033.5626 123678.619 2702
## 1293   0  -8  8.000000 35.064631 16000.000 456.3002 18188.2794 159441.328 2702
## 1294   0  -7  7.000000 37.290413 16500.000 442.4730 21876.3764 203944.781 2702
## 1295   0  -6  6.000000 39.584681 17000.000 429.4591 26167.6818 258959.837 2702
## 1296   0  -5  5.000000 41.947435 17500.000 417.1888 31138.6668 326546.799 2702
## 1297   0  -4  4.000000 44.378674 18000.000 405.6002 36872.8539 409092.090 2702
## 1298   0  -3  3.000000 46.878399 18500.000 394.6381 43461.2379 509348.309 2702
## 1299   0  -2  2.000000 49.446609 19000.000 384.2528 51002.7188 630477.872 2702
## 1300   0  -1  1.000000 52.083305 19500.000 374.4002 59604.5468 776100.445 2702
## 1301   0   0  0.000000 54.788486 20000.000 365.0402 69382.7798 950344.371 2702
## 1302   0   1  1.000000 52.083305 19500.000 374.4002 59604.5468 776100.445 2702
## 1303   0   2  2.000000 49.446609 19000.000 384.2528 51002.7188 630477.872 2702
## 1304   0   3  3.000000 46.878399 18500.000 394.6381 43461.2379 509348.309 2702
## 1305   0   4  4.000000 44.378674 18000.000 405.6002 36872.8539 409092.090 2702
## 1306   0   5  5.000000 41.947435 17500.000 417.1888 31138.6668 326546.799 2702
## 1307   0   6  6.000000 39.584681 17000.000 429.4591 26167.6818 258959.837 2702
## 1308   0   7  7.000000 37.290413 16500.000 442.4730 21876.3764 203944.781 2702
## 1309   0   8  8.000000 35.064631 16000.000 456.3002 18188.2794 159441.328 2702
## 1310   0   9  9.000000 32.907335 15500.000 471.0196 15033.5626 123678.619 2702
## 1311   0  10 10.000000 30.818524 15000.000 486.7203 12348.6442  95141.745 2702
## 1312   0  11 11.000000 28.798198 14500.000 503.5037 10075.8046  72541.254 2702
## 1313   0  12 12.000000 26.846358 14000.000 521.4860  8162.8147  54785.462 2702
## 1314   0  13 13.000000 24.963004 13500.000 540.8003  6562.5758  40955.402 2702
## 1315   0  14 14.000000 23.148135 13000.000 561.6003  5232.7723  30282.230 2702
## 1316   0  15 15.000000 21.401752 12500.000 584.0643  4135.5359  22126.929 2702
## 1317   0  16 16.000000 19.723855 12000.000 608.4003  3237.1230  15962.136 2702
## 1318   0  17 17.000000 18.114443 11500.000 634.8525  2507.6029  11355.958 2702
## 1319   0  18 18.000000 16.573517 11000.000 663.7095  1920.5598   7957.608 2702
## 1320   0  19 19.000000 15.101077 10500.000 695.3147  1452.8056   5484.732 2702
## 1321   0  20 20.000000 13.697122 10000.000 730.0804  1084.1059   3712.283 2702
## 1322   0  21 21.000000 12.361652  9500.000 768.5057   796.9175   2462.804 2702
## 1323   0  22 22.000000 11.094668  9000.000 811.2004   576.1383   1598.016 2702
## 1324   0  23 23.000000  9.896170  8500.000 858.9181   408.8700   1011.562 2702
## 1329   1 -23 23.021729  9.870889  8489.136 860.0174   405.7444   1001.264 2702
## 1330   1 -22 22.022716 11.066684  8988.642 812.2255   571.7897   1581.954 2702
## 1331   1 -21 21.023796 12.330708  9488.102 769.4694   790.9477   2438.236 2702
## 1332   1 -20 20.024984 13.662922  9987.508 730.9936  1076.0056   3675.345 2702
## 1333   1 -19 19.026298 15.063279 10486.851 696.1865  1441.9240   5430.026 2702
## 1334   1 -18 18.027756 16.531723 10986.122 664.5479  1906.0671   7877.643 2702
## 1335   1 -17 17.029386 18.068184 11485.307 635.6647  2488.4409  11240.402 2702
## 1336   1 -16 16.031220 19.672574 11984.390 609.1928  3211.9396  15796.780 2702
## 1337   1 -15 15.033296 21.344782 12483.352 584.8432  4102.5982  21892.266 2702
## 1338   1 -14 14.035669 23.084666 12982.166 562.3718  5189.8474  29951.473 2702
## 1339   1 -13 13.038405 24.892040 13480.798 541.5706  6506.7669  40491.675 2702
## 1340   1 -12 12.041595 26.766656 13979.203 522.2618  8090.3282  54137.757 2702
## 1341   1 -11 11.045361 28.708178 14477.319 504.2925  9981.6118  71638.471 2702
## 1342   1 -10 10.049876 30.716136 14975.062 487.5308 12225.9757  93883.683 2702
## 1343   1  -9  9.055385 32.789854 15472.307 471.8627 14873.1254 121921.902 2702
## 1344   1  -8  8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702
## 1345   1  -7  7.071068 37.129971 16464.466 443.4279 21595.2201 200457.476 2702
## 1346   1  -6  6.082763 39.392202 16958.619 430.5070 25787.8171 253959.728 2702
## 1347   1  -5  5.099020 41.710421 17450.490 418.3724 30613.8194 319228.825 2702
## 1348   1  -4  4.123106 44.075678 17938.447 406.9920 36122.7496 398033.671 2702
## 1349   1  -3  3.162278 46.468094 18418.861 396.3765 42330.0098 491748.719 2702
## 1350   1  -2  2.236068 48.834161 18881.966 386.6549 49130.9307 599816.949 2702
## 1351   1  -1  1.414214 50.982841 19292.893 378.4193 55905.6737 712557.517 2702
## 1352   1   0  1.000000 52.083305 19500.000 374.4002 59604.5468 776100.445 2702
## 1353   1   1  1.414214 50.982841 19292.893 378.4193 55905.6737 712557.517 2702
## 1354   1   2  2.236068 48.834161 18881.966 386.6549 49130.9307 599816.949 2702
## 1355   1   3  3.162278 46.468094 18418.861 396.3765 42330.0098 491748.719 2702
## 1356   1   4  4.123106 44.075678 17938.447 406.9920 36122.7496 398033.671 2702
## 1357   1   5  5.099020 41.710421 17450.490 418.3724 30613.8194 319228.825 2702
## 1358   1   6  6.082763 39.392202 16958.619 430.5070 25787.8171 253959.728 2702
## 1359   1   7  7.071068 37.129971 16464.466 443.4279 21595.2201 200457.476 2702
## 1360   1   8  8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702
## 1361   1   9  9.055385 32.789854 15472.307 471.8627 14873.1254 121921.902 2702
## 1362   1  10 10.049876 30.716136 14975.062 487.5308 12225.9757  93883.683 2702
## 1363   1  11 11.045361 28.708178 14477.319 504.2925  9981.6118  71638.471 2702
## 1364   1  12 12.041595 26.766656 13979.203 522.2618  8090.3282  54137.757 2702
## 1365   1  13 13.038405 24.892040 13480.798 541.5706  6506.7669  40491.675 2702
## 1366   1  14 14.035669 23.084666 12982.166 562.3718  5189.8474  29951.473 2702
## 1367   1  15 15.033296 21.344782 12483.352 584.8432  4102.5982  21892.266 2702
## 1368   1  16 16.031220 19.672574 11984.390 609.1928  3211.9396  15796.780 2702
## 1369   1  17 17.029386 18.068184 11485.307 635.6647  2488.4409  11240.402 2702
## 1370   1  18 18.027756 16.531723 10986.122 664.5479  1906.0671   7877.643 2702
## 1371   1  19 19.026298 15.063279 10486.851 696.1865  1441.9240   5430.026 2702
## 1372   1  20 20.024984 13.662922  9987.508 730.9936  1076.0056   3675.345 2702
## 1373   1  21 21.023796 12.330708  9488.102 769.4694   790.9477   2438.236 2702
## 1374   1  22 22.022716 11.066684  8988.642 812.2255   571.7897   1581.954 2702
## 1375   1  23 23.021729  9.870889  8489.136 860.0174   405.7444   1001.264 2702
## 1381   2 -22 22.090722 10.983114  8954.639 815.3097   558.9336   1534.708 2702
## 1382   2 -21 21.095023 12.238315  9452.488 772.3685   773.3011   2365.976 2702
## 1383   2 -20 20.099751 13.560832  9950.124 733.7400  1052.0655   3566.721 2702
## 1384   2 -19 19.104973 14.950482 10447.513 698.8078  1409.7735   5269.198 2702
## 1385   2 -18 18.110770 16.407042 10944.615 667.0682  1863.2650   7642.667 2702
## 1386   2 -17 17.117243 17.930237 11441.379 638.1053  2431.8785  10901.039 2702
## 1387   2 -16 16.124515 19.519726 11937.742 611.5733  3137.6530  15311.531 2702
## 1388   2 -15 15.132746 21.175076 12433.627 587.1822  4005.5184  21204.290 2702
## 1389   2 -14 14.142136 22.895737 12928.932 564.6873  5063.4633  28982.931 2702
## 1390   2 -13 13.152946 24.680990 13423.527 543.8812  6342.6613  39135.790 2702
## 1391   2 -12 12.165525 26.529886 13917.237 524.5872  7877.5279  52247.479 2702
## 1392   2 -11 11.180340 28.441142 14409.830 506.6544  9705.6556  69009.982 2702
## 1393   2 -10 10.198039 30.412982 14900.980 489.9546 11867.5426  90231.839 2702
## 1394   2  -9  9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702
## 1395   2  -8  8.246211 34.527125 15876.894 459.8383 17364.6109 149887.524 2702
## 1396   2  -7  7.280110 36.660045 16359.945 446.2609 20785.6096 190500.345 2702
## 1397   2  -6  6.324555 38.832558 16837.722 433.5981 24704.2562 239832.365 2702
## 1398   2  -5  5.385165 41.029276 17307.418 421.8309 29138.3770 298881.629 2702
## 1399   2  -4  4.472136 43.222264 17763.932 410.9903 34064.8388 368089.867 2702
## 1400   2  -3  3.605551 45.356508 18197.224 401.2043 39364.3079 446356.886 2702
## 1401   2  -2  2.828427 47.314167 18585.786 392.8165 44684.5488 528553.048 2702
## 1402   2  -1  2.236068 48.834161 18881.966 386.6549 49130.9307 599816.949 2702
## 1403   2   0  2.000000 49.446609 19000.000 384.2528 51002.7188 630477.872 2702
## 1404   2   1  2.236068 48.834161 18881.966 386.6549 49130.9307 599816.949 2702
## 1405   2   2  2.828427 47.314167 18585.786 392.8165 44684.5488 528553.048 2702
## 1406   2   3  3.605551 45.356508 18197.224 401.2043 39364.3079 446356.886 2702
## 1407   2   4  4.472136 43.222264 17763.932 410.9903 34064.8388 368089.867 2702
## 1408   2   5  5.385165 41.029276 17307.418 421.8309 29138.3770 298881.629 2702
## 1409   2   6  6.324555 38.832558 16837.722 433.5981 24704.2562 239832.365 2702
## 1410   2   7  7.280110 36.660045 16359.945 446.2609 20785.6096 190500.345 2702
## 1411   2   8  8.246211 34.527125 15876.894 459.8383 17364.6109 149887.524 2702
## 1412   2   9  9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702
## 1413   2  10 10.198039 30.412982 14900.980 489.9546 11867.5426  90231.839 2702
## 1414   2  11 11.180340 28.441142 14409.830 506.6544  9705.6556  69009.982 2702
## 1415   2  12 12.165525 26.529886 13917.237 524.5872  7877.5279  52247.479 2702
## 1416   2  13 13.152946 24.680990 13423.527 543.8812  6342.6613  39135.790 2702
## 1417   2  14 14.142136 22.895737 12928.932 564.6873  5063.4633  28982.931 2702
## 1418   2  15 15.132746 21.175076 12433.627 587.1822  4005.5184  21204.290 2702
## 1419   2  16 16.124515 19.519726 11937.742 611.5733  3137.6530  15311.531 2702
## 1420   2  17 17.117243 17.930237 11441.379 638.1053  2431.8785  10901.039 2702
## 1421   2  18 18.110770 16.407042 10944.615 667.0682  1863.2650   7642.667 2702
## 1422   2  19 19.104973 14.950482 10447.513 698.8078  1409.7735   5269.198 2702
## 1423   2  20 20.099751 13.560832  9950.124 733.7400  1052.0655   3566.721 2702
## 1424   2  21 21.095023 12.238315  9452.488 772.3685   773.3011   2365.976 2702
## 1425   2  22 22.090722 10.983114  8954.639 815.3097   558.9336   1534.708 2702
## 1432   3 -22 22.203603 10.845098  8898.198 820.4811   538.1263   1459.008 2702
## 1433   3 -21 21.213203 12.085783  9393.398 777.2271   744.7459   2250.209 2702
## 1434   3 -20 20.223748 13.392365  9888.126 738.3405  1013.3410   3392.758 2702
## 1435   3 -19 19.235384 14.764445 10382.308 703.1966  1357.7980   5011.783 2702
## 1436   3 -18 18.248288 16.201537 10875.856 671.2854  1794.1240   7266.892 2702
## 1437   3 -17 17.262677 17.703046 11368.662 642.1868  2340.6032  10358.952 2702
## 1438   3 -16 16.278821 19.268232 11860.590 615.5515  3017.9318  14537.553 2702
## 1439   3 -15 15.297059 20.896168 12351.471 591.0878  3849.3178  20108.998 2702
## 1440   3 -14 14.317821 22.585674 12841.089 568.5502  4860.5224  27444.544 2702
## 1441   3 -13 13.341664 24.335226 13329.168 547.7314  6079.8094  36988.385 2702
## 1442   3 -12 12.369317 26.142828 13815.342 528.4563  7537.7457  49264.497 2702
## 1443   3 -11 11.401754 28.005808 14299.123 510.5771  9266.7642  64880.805 2702
## 1444   3 -10 10.440307 29.920522 14779.847 493.9702 11300.3347  84527.979 2702
## 1445   3  -9  9.486833 31.881878 15256.584 478.5347 13671.4779 108968.097 2702
## 1446   3  -8  8.544004 33.882559 15727.998 464.1916 16410.1449 139004.427 2702
## 1447   3  -7  7.615773 35.911735 16192.113 450.8864 19538.5779 175416.057 2702
## 1448   3  -6  6.708204 37.952796 16645.898 438.5948 23062.9630 218825.980 2702
## 1449   3  -5  5.830952 39.979290 17084.524 427.3344 26958.0844 269441.271 2702
## 1450   3  -4  5.000000 41.947435 17500.000 417.1888 31138.6668 326546.799 2702
## 1451   3  -3  4.242641 43.782464 17878.680 408.3525 35406.6126 387547.183 2702
## 1452   3  -2  3.605551 45.356508 18197.224 401.2043 39364.3079 446356.886 2702
## 1453   3  -1  3.162278 46.468094 18418.861 396.3765 42330.0098 491748.719 2702
## 1454   3   0  3.000000 46.878399 18500.000 394.6381 43461.2379 509348.309 2702
## 1455   3   1  3.162278 46.468094 18418.861 396.3765 42330.0098 491748.719 2702
## 1456   3   2  3.605551 45.356508 18197.224 401.2043 39364.3079 446356.886 2702
## 1457   3   3  4.242641 43.782464 17878.680 408.3525 35406.6126 387547.183 2702
## 1458   3   4  5.000000 41.947435 17500.000 417.1888 31138.6668 326546.799 2702
## 1459   3   5  5.830952 39.979290 17084.524 427.3344 26958.0844 269441.271 2702
## 1460   3   6  6.708204 37.952796 16645.898 438.5948 23062.9630 218825.980 2702
## 1461   3   7  7.615773 35.911735 16192.113 450.8864 19538.5779 175416.057 2702
## 1462   3   8  8.544004 33.882559 15727.998 464.1916 16410.1449 139004.427 2702
## 1463   3   9  9.486833 31.881878 15256.584 478.5347 13671.4779 108968.097 2702
## 1464   3  10 10.440307 29.920522 14779.847 493.9702 11300.3347  84527.979 2702
## 1465   3  11 11.401754 28.005808 14299.123 510.5771  9266.7642  64880.805 2702
## 1466   3  12 12.369317 26.142828 13815.342 528.4563  7537.7457  49264.497 2702
## 1467   3  13 13.341664 24.335226 13329.168 547.7314  6079.8094  36988.385 2702
## 1468   3  14 14.317821 22.585674 12841.089 568.5502  4860.5224  27444.544 2702
## 1469   3  15 15.297059 20.896168 12351.471 591.0878  3849.3178  20108.998 2702
## 1470   3  16 16.278821 19.268232 11860.590 615.5515  3017.9318  14537.553 2702
## 1471   3  17 17.262677 17.703046 11368.662 642.1868  2340.6032  10358.952 2702
## 1472   3  18 18.248288 16.201537 10875.856 671.2854  1794.1240   7266.892 2702
## 1473   3  19 19.235384 14.764445 10382.308 703.1966  1357.7980   5011.783 2702
## 1474   3  20 20.223748 13.392365  9888.126 738.3405  1013.3410   3392.758 2702
## 1475   3  21 21.213203 12.085783  9393.398 777.2271   744.7459   2250.209 2702
## 1476   3  22 22.203603 10.845098  8898.198 820.4811   538.1263   1459.008 2702
## 1483   4 -22 22.360680 10.654498  8819.660 827.7875   510.2498   1359.114 2702
## 1484   4 -21 21.377558 11.875245  9311.221 784.0867   706.4989   2097.462 2702
## 1485   4 -20 20.396078 13.159981  9801.961 744.8310   961.5005   3163.332 2702
## 1486   4 -19 19.416488 14.508024 10291.756 709.3837  1288.2752   4672.582 2702
## 1487   4 -18 18.439089 15.918551 10780.456 677.2259  1701.7447   6772.327 2702
## 1488   4 -17 17.464249 17.390553 11267.875 647.9308  2218.8295   9646.668 2702
## 1489   4 -16 16.492423 18.922786 11753.789 621.1447  2858.5053  13522.721 2702
## 1490   4 -15 15.524175 20.513700 12237.913 596.5727  3641.7977  18676.687 2702
## 1491   4 -14 14.560220 22.161341 12719.890 573.9675  4591.6828  25439.462 2702
## 1492   4 -13 13.601471 23.863206 13199.265 553.1220  5732.8445  34201.012 2702
## 1493   4 -12 12.649111 25.616054 13675.445 533.8623  7091.2119  45412.216 2702
## 1494   4 -11 11.704700 27.415611 14147.650 516.0436  8693.1580  59582.059 2702
## 1495   4 -10 10.770330 29.256149 14614.835 499.5475 10564.1670  77266.710 2702
## 1496   4  -9  9.848858 31.129838 15075.571 484.2804 12726.6576  99044.697 2702
## 1497   4  -8  8.944272 33.025755 15527.864 470.1744 15196.4464 125468.527 2702
## 1498   4  -7  8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702
## 1499   4  -6  7.211103 36.814842 16394.449 445.3217 21050.0256 193738.344 2702
## 1500   4  -5  6.403124 38.651567 16798.438 434.6121 24360.4389 235392.284 2702
## 1501   4  -4  5.656854 40.387732 17171.573 425.1680 27792.7926 280621.964 2702
## 1502   4  -3  5.000000 41.947435 17500.000 417.1888 31138.6668 326546.799 2702
## 1503   4  -2  4.472136 43.222264 17763.932 410.9903 34064.8388 368089.867 2702
## 1504   4  -1  4.123106 44.075678 17938.447 406.9920 36122.7496 398033.671 2702
## 1505   4   0  4.000000 44.378674 18000.000 405.6002 36872.8539 409092.090 2702
## 1506   4   1  4.123106 44.075678 17938.447 406.9920 36122.7496 398033.671 2702
## 1507   4   2  4.472136 43.222264 17763.932 410.9903 34064.8388 368089.867 2702
## 1508   4   3  5.000000 41.947435 17500.000 417.1888 31138.6668 326546.799 2702
## 1509   4   4  5.656854 40.387732 17171.573 425.1680 27792.7926 280621.964 2702
## 1510   4   5  6.403124 38.651567 16798.438 434.6121 24360.4389 235392.284 2702
## 1511   4   6  7.211103 36.814842 16394.449 445.3217 21050.0256 193738.344 2702
## 1512   4   7  8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702
## 1513   4   8  8.944272 33.025755 15527.864 470.1744 15196.4464 125468.527 2702
## 1514   4   9  9.848858 31.129838 15075.571 484.2804 12726.6576  99044.697 2702
## 1515   4  10 10.770330 29.256149 14614.835 499.5475 10564.1670  77266.710 2702
## 1516   4  11 11.704700 27.415611 14147.650 516.0436  8693.1580  59582.059 2702
## 1517   4  12 12.649111 25.616054 13675.445 533.8623  7091.2119  45412.216 2702
## 1518   4  13 13.601471 23.863206 13199.265 553.1220  5732.8445  34201.012 2702
## 1519   4  14 14.560220 22.161341 12719.890 573.9675  4591.6828  25439.462 2702
## 1520   4  15 15.524175 20.513700 12237.913 596.5727  3641.7977  18676.687 2702
## 1521   4  16 16.492423 18.922786 11753.789 621.1447  2858.5053  13522.721 2702
## 1522   4  17 17.464249 17.390553 11267.875 647.9308  2218.8295   9646.668 2702
## 1523   4  18 18.439089 15.918551 10780.456 677.2259  1701.7447   6772.327 2702
## 1524   4  19 19.416488 14.508024 10291.756 709.3837  1288.2752   4672.582 2702
## 1525   4  20 20.396078 13.159981  9801.961 744.8310   961.5005   3163.332 2702
## 1526   4  21 21.377558 11.875245  9311.221 784.0867   706.4989   2097.462 2702
## 1527   4  22 22.360680 10.654498  8819.660 827.7875   510.2498   1359.114 2702
## 1534   5 -22 22.561028 10.413844  8719.486 837.2975   476.4496   1240.418 2702
## 1535   5 -21 21.587033 11.609589  9206.483 793.0068   660.1375   1915.981 2702
## 1536   5 -20 20.615528 12.866999  9692.236 753.2631   898.7017   2890.899 2702
## 1537   5 -19 19.646883 14.185060 10176.559 717.4138  1204.1410   4270.203 2702
## 1538   5 -18 18.681542 15.562555 10659.229 684.9280  1590.1076   6186.534 2702
## 1539   5 -17 17.720045 16.998004 11139.977 655.3697  2071.9420   8804.720 2702
## 1540   5 -16 16.763055 18.489595 11618.473 628.3790  2666.6497  12326.318 2702
## 1541   5 -15 15.811388 20.035086 12094.306 603.6563  3392.7933  16993.726 2702
## 1542   5 -14 14.866069 21.631676 12566.966 580.9520  4270.2597  23093.218 2702
## 1543   5 -13 13.928388 23.275825 13035.806 560.0577  5319.8456  30955.948 2702
## 1544   5 -12 13.000000 24.963004 13500.000 540.8003  6562.5758  40955.402 2702
## 1545   5 -11 12.083046 26.687346 13958.477 523.0373  8018.6256  53498.958 2702
## 1546   5 -10 11.180340 28.441142 14409.830 506.6544  9705.6556  69009.982 2702
## 1547   5  -9 10.295630 30.214124 14852.185 491.5643 11636.2706  87894.930 2702
## 1548   5  -8  9.433981 31.992419 15283.009 477.7072 13814.1768 110487.231 2702
## 1549   5  -7  8.602325 33.757035 15698.837 465.0538 16228.4359 136955.969 2702
## 1550   5  -6  7.810250 35.481709 16094.875 453.6105 18845.0545 167163.687 2702
## 1551   5  -5  7.071068 37.129971 16464.466 443.4279 21595.2201 200457.476 2702
## 1552   5  -4  6.403124 38.651567 16798.438 434.6121 24360.4389 235392.284 2702
## 1553   5  -3  5.830952 39.979290 17084.524 427.3344 26958.0844 269441.271 2702
## 1554   5  -2  5.385165 41.029276 17307.418 421.8309 29138.3770 298881.629 2702
## 1555   5  -1  5.099020 41.710421 17450.490 418.3724 30613.8194 319228.825 2702
## 1556   5   0  5.000000 41.947435 17500.000 417.1888 31138.6668 326546.799 2702
## 1557   5   1  5.099020 41.710421 17450.490 418.3724 30613.8194 319228.825 2702
## 1558   5   2  5.385165 41.029276 17307.418 421.8309 29138.3770 298881.629 2702
## 1559   5   3  5.830952 39.979290 17084.524 427.3344 26958.0844 269441.271 2702
## 1560   5   4  6.403124 38.651567 16798.438 434.6121 24360.4389 235392.284 2702
## 1561   5   5  7.071068 37.129971 16464.466 443.4279 21595.2201 200457.476 2702
## 1562   5   6  7.810250 35.481709 16094.875 453.6105 18845.0545 167163.687 2702
## 1563   5   7  8.602325 33.757035 15698.837 465.0538 16228.4359 136955.969 2702
## 1564   5   8  9.433981 31.992419 15283.009 477.7072 13814.1768 110487.231 2702
## 1565   5   9 10.295630 30.214124 14852.185 491.5643 11636.2706  87894.930 2702
## 1566   5  10 11.180340 28.441142 14409.830 506.6544  9705.6556  69009.982 2702
## 1567   5  11 12.083046 26.687346 13958.477 523.0373  8018.6256  53498.958 2702
## 1568   5  12 13.000000 24.963004 13500.000 540.8003  6562.5758  40955.402 2702
## 1569   5  13 13.928388 23.275825 13035.806 560.0577  5319.8456  30955.948 2702
## 1570   5  14 14.866069 21.631676 12566.966 580.9520  4270.2597  23093.218 2702
## 1571   5  15 15.811388 20.035086 12094.306 603.6563  3392.7933  16993.726 2702
## 1572   5  16 16.763055 18.489595 11618.473 628.3790  2666.6497  12326.318 2702
## 1573   5  17 17.720045 16.998004 11139.977 655.3697  2071.9420   8804.720 2702
## 1574   5  18 18.681542 15.562555 10659.229 684.9280  1590.1076   6186.534 2702
## 1575   5  19 19.646883 14.185060 10176.559 717.4138  1204.1410   4270.203 2702
## 1576   5  20 20.615528 12.866999  9692.236 753.2631   898.7017   2890.899 2702
## 1577   5  21 21.587033 11.609589  9206.483 793.0068   660.1375   1915.981 2702
## 1578   5  22 22.561028 10.413844  8719.486 837.2975   476.4496   1240.418 2702
## 1585   6 -22 22.803509 10.126259  8598.246 849.1039   438.0572   1108.970 2702
## 1586   6 -21 21.840330 11.292374  9079.835 804.0679   607.4905   1715.002 2702
## 1587   6 -20 20.880613 12.517490  9559.693 763.7069   827.4381   2589.362 2702
## 1588   6 -19 19.924859 13.800237 10037.571 727.3477  1108.7749   3825.339 2702
## 1589   6 -18 18.973666 15.138974 10513.167 694.4438  1463.7709   5539.997 2702
## 1590   6 -17 18.027756 16.531723 10986.122 664.5479  1906.0671   7877.643 2702
## 1591   6 -16 17.088007 17.976082 11455.996 637.2911  2450.5801  11012.957 2702
## 1592   6 -15 16.155494 19.469104 11922.253 612.3678  3113.3051  15153.315 2702
## 1593   6 -14 15.231546 21.007149 12384.227 589.5244  3910.9758  20539.612 2702
## 1594   6 -13 14.317821 22.585674 12841.089 568.5502  4860.5224  27444.544 2702
## 1595   6 -12 13.416408 24.198957 13291.796 549.2714  5978.2454  36166.826 2702
## 1596   6 -11 12.529964 25.839718 13735.018 531.5467  7278.5876  47019.163 2702
## 1597   6 -10 11.661904 27.498605 14169.048 515.2643  8772.3464  60306.822 2702
## 1598   6  -9 10.816654 29.163490 14591.673 500.3404 10464.1093  76292.487 2702
## 1599   6  -8 10.000000 30.818524 15000.000 486.7203 12348.6442  95141.745 2702
## 1600   6  -7  9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702
## 1601   6  -6  8.485281 34.009182 15757.359 463.3266 16594.8126 141094.001 2702
## 1602   6  -5  7.810250 35.481709 16094.875 453.6105 18845.0545 167163.687 2702
## 1603   6  -4  7.211103 36.814842 16394.449 445.3217 21050.0256 193738.344 2702
## 1604   6  -3  6.708204 37.952796 16645.898 438.5948 23062.9630 218825.980 2702
## 1605   6  -2  6.324555 38.832558 16837.722 433.5981 24704.2562 239832.365 2702
## 1606   6  -1  6.082763 39.392202 16958.619 430.5070 25787.8171 253959.728 2702
## 1607   6   0  6.000000 39.584681 17000.000 429.4591 26167.6818 258959.837 2702
## 1608   6   1  6.082763 39.392202 16958.619 430.5070 25787.8171 253959.728 2702
## 1609   6   2  6.324555 38.832558 16837.722 433.5981 24704.2562 239832.365 2702
## 1610   6   3  6.708204 37.952796 16645.898 438.5948 23062.9630 218825.980 2702
## 1611   6   4  7.211103 36.814842 16394.449 445.3217 21050.0256 193738.344 2702
## 1612   6   5  7.810250 35.481709 16094.875 453.6105 18845.0545 167163.687 2702
## 1613   6   6  8.485281 34.009182 15757.359 463.3266 16594.8126 141094.001 2702
## 1614   6   7  9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702
## 1615   6   8 10.000000 30.818524 15000.000 486.7203 12348.6442  95141.745 2702
## 1616   6   9 10.816654 29.163490 14591.673 500.3404 10464.1093  76292.487 2702
## 1617   6  10 11.661904 27.498605 14169.048 515.2643  8772.3464  60306.822 2702
## 1618   6  11 12.529964 25.839718 13735.018 531.5467  7278.5876  47019.163 2702
## 1619   6  12 13.416408 24.198957 13291.796 549.2714  5978.2454  36166.826 2702
## 1620   6  13 14.317821 22.585674 12841.089 568.5502  4860.5224  27444.544 2702
## 1621   6  14 15.231546 21.007149 12384.227 589.5244  3910.9758  20539.612 2702
## 1622   6  15 16.155494 19.469104 11922.253 612.3678  3113.3051  15153.315 2702
## 1623   6  16 17.088007 17.976082 11455.996 637.2911  2450.5801  11012.957 2702
## 1624   6  17 18.027756 16.531723 10986.122 664.5479  1906.0671   7877.643 2702
## 1625   6  18 18.973666 15.138974 10513.167 694.4438  1463.7709   5539.997 2702
## 1626   6  19 19.924859 13.800237 10037.571 727.3477  1108.7749   3825.339 2702
## 1627   6  20 20.880613 12.517490  9559.693 763.7069   827.4381   2589.362 2702
## 1628   6  21 21.840330 11.292374  9079.835 804.0679   607.4905   1715.002 2702
## 1629   6  22 22.803509 10.126259  8598.246 849.1039   438.0572   1108.970 2702
## 1637   7 -21 22.135944 10.927718  8932.028 817.3736   550.5189   1503.979 2702
## 1638   7 -20 21.189620 12.116145  9405.190 776.2527   750.3729   2272.907 2702
## 1639   7 -19 20.248457 13.358921  9875.772 739.2642  1005.7683   3358.995 2702
## 1640   7 -18 19.313208 14.653981 10343.396 705.8421  1327.5493   4863.470 2702
## 1641   7 -17 18.384776 15.998851 10807.612 675.5243  1727.6277   6910.014 2702
## 1642   7 -16 17.464249 17.390553 11267.875 647.9308  2218.8295   9646.668 2702
## 1643   7 -15 16.552945 18.825474 11723.527 622.7481  2814.6314  13246.692 2702
## 1644   7 -14 15.652476 20.299200 12173.762 599.7163  3528.7475  17907.688 2702
## 1645   7 -13 14.764823 21.806302 12617.588 578.6212  4374.5146  23847.997 2702
## 1646   7 -12 13.892444 23.340049 13053.778 559.2867  5364.0036  31299.026 2702
## 1647   7 -11 13.038405 24.892040 13480.798 541.5706  6506.7669  40491.675 2702
## 1648   7 -10 12.206556 26.451729 13896.722 525.3616  7808.1110  51634.508 2702
## 1649   7  -9 11.401754 28.005808 14299.123 510.5771  9266.7642  64880.805 2702
## 1650   7  -8 10.630146 29.537443 14684.927 497.1631 10871.8259  80281.485 2702
## 1651   7  -7  9.899495 31.025364 15050.253 485.0951 12598.9527  97721.773 2702
## 1652   7  -6  9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702
## 1653   7  -5  8.602325 33.757035 15698.837 465.0538 16228.4359 136955.969 2702
## 1654   7  -4  8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702
## 1655   7  -3  7.615773 35.911735 16192.113 450.8864 19538.5779 175416.057 2702
## 1656   7  -2  7.280110 36.660045 16359.945 446.2609 20785.6096 190500.345 2702
## 1657   7  -1  7.071068 37.129971 16464.466 443.4279 21595.2201 200457.476 2702
## 1658   7   0  7.000000 37.290413 16500.000 442.4730 21876.3764 203944.781 2702
## 1659   7   1  7.071068 37.129971 16464.466 443.4279 21595.2201 200457.476 2702
## 1660   7   2  7.280110 36.660045 16359.945 446.2609 20785.6096 190500.345 2702
## 1661   7   3  7.615773 35.911735 16192.113 450.8864 19538.5779 175416.057 2702
## 1662   7   4  8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702
## 1663   7   5  8.602325 33.757035 15698.837 465.0538 16228.4359 136955.969 2702
## 1664   7   6  9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702
## 1665   7   7  9.899495 31.025364 15050.253 485.0951 12598.9527  97721.773 2702
## 1666   7   8 10.630146 29.537443 14684.927 497.1631 10871.8259  80281.485 2702
## 1667   7   9 11.401754 28.005808 14299.123 510.5771  9266.7642  64880.805 2702
## 1668   7  10 12.206556 26.451729 13896.722 525.3616  7808.1110  51634.508 2702
## 1669   7  11 13.038405 24.892040 13480.798 541.5706  6506.7669  40491.675 2702
## 1670   7  12 13.892444 23.340049 13053.778 559.2867  5364.0036  31299.026 2702
## 1671   7  13 14.764823 21.806302 12617.588 578.6212  4374.5146  23847.997 2702
## 1672   7  14 15.652476 20.299200 12173.762 599.7163  3528.7475  17907.688 2702
## 1673   7  15 16.552945 18.825474 11723.527 622.7481  2814.6314  13246.692 2702
## 1674   7  16 17.464249 17.390553 11267.875 647.9308  2218.8295   9646.668 2702
## 1675   7  17 18.384776 15.998851 10807.612 675.5243  1727.6277   6910.014 2702
## 1676   7  18 19.313208 14.653981 10343.396 705.8421  1327.5493   4863.470 2702
## 1677   7  19 20.248457 13.358921  9875.772 739.2642  1005.7683   3358.995 2702
## 1678   7  20 21.189620 12.116145  9405.190 776.2527   750.3729   2272.907 2702
## 1679   7  21 22.135944 10.927718  8932.028 817.3736   550.5189   1503.979 2702
## 1688   8 -21 22.472205 10.520197  8763.897 833.0545   491.1967   1291.872 2702
## 1689   8 -20 21.540659 11.668142  9229.670 791.0146   670.1760   1954.927 2702
## 1690   8 -19 20.615528 12.866999  9692.236 753.2631   898.7017   2890.899 2702
## 1691   8 -18 19.697716 14.114293 10151.142 719.2101  1186.2089   4185.625 2702
## 1692   8 -17 18.788294 15.407086 10605.853 688.3750  1542.9268   5943.001 2702
## 1693   8 -16 17.888544 16.741872 11055.728 660.3639  1979.6837   8285.903 2702
## 1694   8 -15 17.000000 18.114443 11500.000 634.8525  2507.6029  11355.958 2702
## 1695   8 -14 16.124515 19.519726 11937.742 611.5733  3137.6530  15311.531 2702
## 1696   8 -13 15.264338 20.951562 12367.831 590.3059  3880.0116  20323.076 2702
## 1697   8 -12 14.422205 22.402450 12788.897 570.8705  4743.1881  26564.759 2702
## 1698   8 -11 13.601471 23.863206 13199.265 553.1220  5732.8445  34201.012 2702
## 1699   8 -10 12.806248 25.322558 13596.876 536.9472  6850.2512  43366.470 2702
## 1700   8  -9 12.041595 26.766656 13979.203 522.2618  8090.3282  54137.757 2702
## 1701   8  -8 11.313708 28.178517 14343.146 509.0100  9439.2653  66496.124 2702
## 1702   8  -7 10.630146 29.537443 14684.927 497.1631 10871.8259  80281.485 2702
## 1703   8  -6 10.000000 30.818524 15000.000 486.7203 12348.6442  95141.745 2702
## 1704   8  -5  9.433981 31.992419 15283.009 477.7072 13814.1768 110487.231 2702
## 1705   8  -4  8.944272 33.025755 15527.864 470.1744 15196.4464 125468.527 2702
## 1706   8  -3  8.544004 33.882559 15727.998 464.1916 16410.1449 139004.427 2702
## 1707   8  -2  8.246211 34.527125 15876.894 459.8383 17364.6109 149887.524 2702
## 1708   8  -1  8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702
## 1709   8   0  8.000000 35.064631 16000.000 456.3002 18188.2794 159441.328 2702
## 1710   8   1  8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702
## 1711   8   2  8.246211 34.527125 15876.894 459.8383 17364.6109 149887.524 2702
## 1712   8   3  8.544004 33.882559 15727.998 464.1916 16410.1449 139004.427 2702
## 1713   8   4  8.944272 33.025755 15527.864 470.1744 15196.4464 125468.527 2702
## 1714   8   5  9.433981 31.992419 15283.009 477.7072 13814.1768 110487.231 2702
## 1715   8   6 10.000000 30.818524 15000.000 486.7203 12348.6442  95141.745 2702
## 1716   8   7 10.630146 29.537443 14684.927 497.1631 10871.8259  80281.485 2702
## 1717   8   8 11.313708 28.178517 14343.146 509.0100  9439.2653  66496.124 2702
## 1718   8   9 12.041595 26.766656 13979.203 522.2618  8090.3282  54137.757 2702
## 1719   8  10 12.806248 25.322558 13596.876 536.9472  6850.2512  43366.470 2702
## 1720   8  11 13.601471 23.863206 13199.265 553.1220  5732.8445  34201.012 2702
## 1721   8  12 14.422205 22.402450 12788.897 570.8705  4743.1881  26564.759 2702
## 1722   8  13 15.264338 20.951562 12367.831 590.3059  3880.0116  20323.076 2702
## 1723   8  14 16.124515 19.519726 11937.742 611.5733  3137.6530  15311.531 2702
## 1724   8  15 17.000000 18.114443 11500.000 634.8525  2507.6029  11355.958 2702
## 1725   8  16 17.888544 16.741872 11055.728 660.3639  1979.6837   8285.903 2702
## 1726   8  17 18.788294 15.407086 10605.853 688.3750  1542.9268   5943.001 2702
## 1727   8  18 19.697716 14.114293 10151.142 719.2101  1186.2089   4185.625 2702
## 1728   8  19 20.615528 12.866999  9692.236 753.2631   898.7017   2890.899 2702
## 1729   8  20 21.540659 11.668142  9229.670 791.0146   670.1760   1954.927 2702
## 1730   8  21 22.472205 10.520197  8763.897 833.0545   491.1967   1291.872 2702
## 1739   9 -21 22.847319 10.074728  8576.340 851.2727   431.4036   1086.568 2702
## 1740   9 -20 21.931712 11.179009  9034.144 808.1346   589.3778   1647.165 2702
## 1741   9 -19 21.023796 12.330708  9488.102 769.4694   790.9477   2438.236 2702
## 1742   9 -18 20.124612 13.526971  9937.694 734.6578  1044.2043   3531.230 2702
## 1743   9 -17 19.235384 14.764445 10382.308 703.1966  1357.7980   5011.783 2702
## 1744   9 -16 18.357560 16.039166 10821.220 674.6748  1740.7208   6979.927 2702
## 1745   9 -15 17.492856 17.346430 11253.572 648.7544  2201.9838   9549.140 2702
## 1746   9 -14 16.643317 18.680636 11678.342 625.1576  2750.1650  12843.708 2702
## 1747   9 -13 15.811388 20.035086 12094.306 603.6563  3392.7933  16993.726 2702
## 1748   9 -12 15.000000 21.401752 12500.000 584.0643  4135.5359  22126.929 2702
## 1749   9 -11 14.212670 22.770998 12893.665 566.2319  4981.1541  28356.462 2702
## 1750   9 -10 13.453624 24.131249 13273.188 550.0415  5928.2047  35763.746 2702
## 1751   9  -9 12.727922 25.468641 13636.039 535.4050  6969.4920  44375.873 2702
## 1752   9  -8 12.041595 26.766656 13979.203 522.2618  8090.3282  54137.757 2702
## 1753   9  -7 11.401754 28.005808 14299.123 510.5771  9266.7642  64880.805 2702
## 1754   9  -6 10.816654 29.163490 14591.673 500.3404 10464.1093  76292.487 2702
## 1755   9  -5 10.295630 30.214124 14852.185 491.5643 11636.2706  87894.930 2702
## 1756   9  -4  9.848858 31.129838 15075.571 484.2804 12726.6576  99044.697 2702
## 1757   9  -3  9.486833 31.881878 15256.584 478.5347 13671.4779 108968.097 2702
## 1758   9  -2  9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702
## 1759   9  -1  9.055385 32.789854 15472.307 471.8627 14873.1254 121921.902 2702
## 1760   9   0  9.000000 32.907335 15500.000 471.0196 15033.5626 123678.619 2702
## 1761   9   1  9.055385 32.789854 15472.307 471.8627 14873.1254 121921.902 2702
## 1762   9   2  9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702
## 1763   9   3  9.486833 31.881878 15256.584 478.5347 13671.4779 108968.097 2702
## 1764   9   4  9.848858 31.129838 15075.571 484.2804 12726.6576  99044.697 2702
## 1765   9   5 10.295630 30.214124 14852.185 491.5643 11636.2706  87894.930 2702
## 1766   9   6 10.816654 29.163490 14591.673 500.3404 10464.1093  76292.487 2702
## 1767   9   7 11.401754 28.005808 14299.123 510.5771  9266.7642  64880.805 2702
## 1768   9   8 12.041595 26.766656 13979.203 522.2618  8090.3282  54137.757 2702
## 1769   9   9 12.727922 25.468641 13636.039 535.4050  6969.4920  44375.873 2702
## 1770   9  10 13.453624 24.131249 13273.188 550.0415  5928.2047  35763.746 2702
## 1771   9  11 14.212670 22.770998 12893.665 566.2319  4981.1541  28356.462 2702
## 1772   9  12 15.000000 21.401752 12500.000 584.0643  4135.5359  22126.929 2702
## 1773   9  13 15.811388 20.035086 12094.306 603.6563  3392.7933  16993.726 2702
## 1774   9  14 16.643317 18.680636 11678.342 625.1576  2750.1650  12843.708 2702
## 1775   9  15 17.492856 17.346430 11253.572 648.7544  2201.9838   9549.140 2702
## 1776   9  16 18.357560 16.039166 10821.220 674.6748  1740.7208   6979.927 2702
## 1777   9  17 19.235384 14.764445 10382.308 703.1966  1357.7980   5011.783 2702
## 1778   9  18 20.124612 13.526971  9937.694 734.6578  1044.2043   3531.230 2702
## 1779   9  19 21.023796 12.330708  9488.102 769.4694   790.9477   2438.236 2702
## 1780   9  20 21.931712 11.179009  9034.144 808.1346   589.3778   1647.165 2702
## 1781   9  21 22.847319 10.074728  8576.340 851.2727   431.4036   1086.568 2702
## 1791  10 -20 22.360680 10.654498  8819.660 827.7875   510.2498   1359.114 2702
## 1792  10 -19 21.470911 11.756484  9264.545 788.0370   685.5138   2014.808 2702
## 1793  10 -18 20.591260 12.899236  9704.370 752.3213   905.4735   2919.979 2702
## 1794  10 -17 19.723083 14.079044 10138.459 720.1099  1177.3438   4143.969 2702
## 1795  10 -16 18.867962 15.291570 10566.019 690.9702  1508.4816   5766.763 2702
## 1796  10 -15 18.027756 16.531723 10986.122 664.5479  1906.0671   7877.643 2702
## 1797  10 -14 17.204651 17.793518 11397.675 640.5521  2376.6721  10572.340 2702
## 1798  10 -13 16.401219 19.069901 11799.390 618.7442  2925.6955  13948.181 2702
## 1799  10 -12 15.620499 20.352555 12189.750 598.9297  3556.6455  18096.706 2702
## 1800  10 -11 14.866069 21.631676 12566.966 580.9520  4270.2597  23093.218 2702
## 1801  10 -10 14.142136 22.895737 12928.932 564.6873  5063.4633  28982.931 2702
## 1802  10  -9 13.453624 24.131249 13273.188 550.0415  5928.2047  35763.746 2702
## 1803  10  -8 12.806248 25.322558 13596.876 536.9472  6850.2512  43366.470 2702
## 1804  10  -7 12.206556 26.451729 13896.722 525.3616  7808.1110  51634.508 2702
## 1805  10  -6 11.661904 27.498605 14169.048 515.2643  8772.3464  60306.822 2702
## 1806  10  -5 11.180340 28.441142 14409.830 506.6544  9705.6556  69009.982 2702
## 1807  10  -4 10.770330 29.256149 14614.835 499.5475 10564.1670  77266.710 2702
## 1808  10  -3 10.440307 29.920522 14779.847 493.9702 11300.3347  84527.979 2702
## 1809  10  -2 10.198039 30.412982 14900.980 489.9546 11867.5426  90231.839 2702
## 1810  10  -1 10.049876 30.716136 14975.062 487.5308 12225.9757  93883.683 2702
## 1811  10   0 10.000000 30.818524 15000.000 486.7203 12348.6442  95141.745 2702
## 1812  10   1 10.049876 30.716136 14975.062 487.5308 12225.9757  93883.683 2702
## 1813  10   2 10.198039 30.412982 14900.980 489.9546 11867.5426  90231.839 2702
## 1814  10   3 10.440307 29.920522 14779.847 493.9702 11300.3347  84527.979 2702
## 1815  10   4 10.770330 29.256149 14614.835 499.5475 10564.1670  77266.710 2702
## 1816  10   5 11.180340 28.441142 14409.830 506.6544  9705.6556  69009.982 2702
## 1817  10   6 11.661904 27.498605 14169.048 515.2643  8772.3464  60306.822 2702
## 1818  10   7 12.206556 26.451729 13896.722 525.3616  7808.1110  51634.508 2702
## 1819  10   8 12.806248 25.322558 13596.876 536.9472  6850.2512  43366.470 2702
## 1820  10   9 13.453624 24.131249 13273.188 550.0415  5928.2047  35763.746 2702
## 1821  10  10 14.142136 22.895737 12928.932 564.6873  5063.4633  28982.931 2702
## 1822  10  11 14.866069 21.631676 12566.966 580.9520  4270.2597  23093.218 2702
## 1823  10  12 15.620499 20.352555 12189.750 598.9297  3556.6455  18096.706 2702
## 1824  10  13 16.401219 19.069901 11799.390 618.7442  2925.6955  13948.181 2702
## 1825  10  14 17.204651 17.793518 11397.675 640.5521  2376.6721  10572.340 2702
## 1826  10  15 18.027756 16.531723 10986.122 664.5479  1906.0671   7877.643 2702
## 1827  10  16 18.867962 15.291570 10566.019 690.9702  1508.4816   5766.763 2702
## 1828  10  17 19.723083 14.079044 10138.459 720.1099  1177.3438   4143.969 2702
## 1829  10  18 20.591260 12.899236  9704.370 752.3213   905.4735   2919.979 2702
## 1830  10  19 21.470911 11.756484  9264.545 788.0370   685.5138   2014.808 2702
## 1831  10  20 22.360680 10.654498  8819.660 827.7875   510.2498   1359.114 2702
## 1842  11 -20 22.825424 10.100464  8587.288 850.1874   434.7182   1097.714 2702
## 1843  11 -19 21.954498 11.150831  9022.751 809.1550   584.9322   1630.620 2702
## 1844  11 -18 21.095023 12.238315  9452.488 772.3685   773.3011   2365.976 2702
## 1845  11 -17 20.248457 13.358921  9875.772 739.2642  1005.7683   3358.995 2702
## 1846  11 -16 19.416488 14.508024 10291.756 709.3837  1288.2752   4672.582 2702
## 1847  11 -15 18.601075 15.680259 10699.462 682.3524  1626.4603   6375.829 2702
## 1848  11 -14 17.804494 16.869392 11097.753 657.8633  2025.2660   8541.251 2702
## 1849  11 -13 17.029386 18.068184 11485.307 635.6647  2488.4409  11240.402 2702
## 1850  11 -12 16.278821 19.268232 11860.590 615.5515  3017.9318  14537.553 2702
## 1851  11 -11 15.556349 20.459804 12221.825 597.3579  3613.1682  18481.178 2702
## 1852  11 -10 14.866069 21.631676 12566.966 580.9520  4270.2597  23093.218 2702
## 1853  11  -9 14.212670 22.770998 12893.665 566.2319  4981.1541  28356.462 2702
## 1854  11  -8 13.601471 23.863206 13199.265 553.1220  5732.8445  34201.012 2702
## 1855  11  -7 13.038405 24.892040 13480.798 541.5706  6506.7669  40491.675 2702
## 1856  11  -6 12.529964 25.839718 13735.018 531.5467  7278.5876  47019.163 2702
## 1857  11  -5 12.083046 26.687346 13958.477 523.0373  8018.6256  53498.958 2702
## 1858  11  -4 11.704700 27.415611 14147.650 516.0436  8693.1580  59582.059 2702
## 1859  11  -3 11.401754 28.005808 14299.123 510.5771  9266.7642  64880.805 2702
## 1860  11  -2 11.180340 28.441142 14409.830 506.6544  9705.6556  69009.982 2702
## 1861  11  -1 11.045361 28.708178 14477.319 504.2925  9981.6118  71638.471 2702
## 1862  11   0 11.000000 28.798198 14500.000 503.5037 10075.8046  72541.254 2702
## 1863  11   1 11.045361 28.708178 14477.319 504.2925  9981.6118  71638.471 2702
## 1864  11   2 11.180340 28.441142 14409.830 506.6544  9705.6556  69009.982 2702
## 1865  11   3 11.401754 28.005808 14299.123 510.5771  9266.7642  64880.805 2702
## 1866  11   4 11.704700 27.415611 14147.650 516.0436  8693.1580  59582.059 2702
## 1867  11   5 12.083046 26.687346 13958.477 523.0373  8018.6256  53498.958 2702
## 1868  11   6 12.529964 25.839718 13735.018 531.5467  7278.5876  47019.163 2702
## 1869  11   7 13.038405 24.892040 13480.798 541.5706  6506.7669  40491.675 2702
## 1870  11   8 13.601471 23.863206 13199.265 553.1220  5732.8445  34201.012 2702
## 1871  11   9 14.212670 22.770998 12893.665 566.2319  4981.1541  28356.462 2702
## 1872  11  10 14.866069 21.631676 12566.966 580.9520  4270.2597  23093.218 2702
## 1873  11  11 15.556349 20.459804 12221.825 597.3579  3613.1682  18481.178 2702
## 1874  11  12 16.278821 19.268232 11860.590 615.5515  3017.9318  14537.553 2702
## 1875  11  13 17.029386 18.068184 11485.307 635.6647  2488.4409  11240.402 2702
## 1876  11  14 17.804494 16.869392 11097.753 657.8633  2025.2660   8541.251 2702
## 1877  11  15 18.601075 15.680259 10699.462 682.3524  1626.4603   6375.829 2702
## 1878  11  16 19.416488 14.508024 10291.756 709.3837  1288.2752   4672.582 2702
## 1879  11  17 20.248457 13.358921  9875.772 739.2642  1005.7683   3358.995 2702
## 1880  11  18 21.095023 12.238315  9452.488 772.3685   773.3011   2365.976 2702
## 1881  11  19 21.954498 11.150831  9022.751 809.1550   584.9322   1630.620 2702
## 1882  11  20 22.825424 10.100464  8587.288 850.1874   434.7182   1097.714 2702
## 1894  12 -19 22.472205 10.520197  8763.897 833.0545   491.1967   1291.872 2702
## 1895  12 -18 21.633308 11.551310  9183.346 795.0048   650.2457   1877.797 2702
## 1896  12 -17 20.808652 12.611893  9595.674 760.8433   846.3006   2668.363 2702
## 1897  12 -16 20.000000 13.697122 10000.000 730.0804  1084.1059   3712.283 2702
## 1898  12 -15 19.209373 14.801458 10395.314 702.3169  1368.0353   5062.229 2702
## 1899  12 -14 18.439089 15.918551 10780.456 677.2259  1701.7447   6772.327 2702
## 1900  12 -13 17.691806 17.041120 11154.097 654.5401  2087.7487   8894.394 2702
## 1901  12 -12 16.970563 18.160842 11514.719 634.0410  2526.9212  11472.754 2702
## 1902  12 -11 16.278821 19.268232 11860.590 615.5515  3017.9318  14537.553 2702
## 1903  12 -10 15.620499 20.352555 12189.750 598.9297  3556.6455  18096.706 2702
## 1904  12  -9 15.000000 21.401752 12500.000 584.0643  4135.5359  22126.929 2702
## 1905  12  -8 14.422205 22.402450 12788.897 570.8705  4743.1881  26564.759 2702
## 1906  12  -7 13.892444 23.340049 13053.778 559.2867  5364.0036  31299.026 2702
## 1907  12  -6 13.416408 24.198957 13291.796 549.2714  5978.2454  36166.826 2702
## 1908  12  -5 13.000000 24.963004 13500.000 540.8003  6562.5758  40955.402 2702
## 1909  12  -4 12.649111 25.616054 13675.445 533.8623  7091.2119  45412.216 2702
## 1910  12  -3 12.369317 26.142828 13815.342 528.4563  7537.7457  49264.497 2702
## 1911  12  -2 12.165525 26.529886 13917.237 524.5872  7877.5279  52247.479 2702
## 1912  12  -1 12.041595 26.766656 13979.203 522.2618  8090.3282  54137.757 2702
## 1913  12   0 12.000000 26.846358 14000.000 521.4860  8162.8147  54785.462 2702
## 1914  12   1 12.041595 26.766656 13979.203 522.2618  8090.3282  54137.757 2702
## 1915  12   2 12.165525 26.529886 13917.237 524.5872  7877.5279  52247.479 2702
## 1916  12   3 12.369317 26.142828 13815.342 528.4563  7537.7457  49264.497 2702
## 1917  12   4 12.649111 25.616054 13675.445 533.8623  7091.2119  45412.216 2702
## 1918  12   5 13.000000 24.963004 13500.000 540.8003  6562.5758  40955.402 2702
## 1919  12   6 13.416408 24.198957 13291.796 549.2714  5978.2454  36166.826 2702
## 1920  12   7 13.892444 23.340049 13053.778 559.2867  5364.0036  31299.026 2702
## 1921  12   8 14.422205 22.402450 12788.897 570.8705  4743.1881  26564.759 2702
## 1922  12   9 15.000000 21.401752 12500.000 584.0643  4135.5359  22126.929 2702
## 1923  12  10 15.620499 20.352555 12189.750 598.9297  3556.6455  18096.706 2702
## 1924  12  11 16.278821 19.268232 11860.590 615.5515  3017.9318  14537.553 2702
## 1925  12  12 16.970563 18.160842 11514.719 634.0410  2526.9212  11472.754 2702
## 1926  12  13 17.691806 17.041120 11154.097 654.5401  2087.7487   8894.394 2702
## 1927  12  14 18.439089 15.918551 10780.456 677.2259  1701.7447   6772.327 2702
## 1928  12  15 19.209373 14.801458 10395.314 702.3169  1368.0353   5062.229 2702
## 1929  12  16 20.000000 13.697122 10000.000 730.0804  1084.1059   3712.283 2702
## 1930  12  17 20.808652 12.611893  9595.674 760.8433   846.3006   2668.363 2702
## 1931  12  18 21.633308 11.551310  9183.346 795.0048   650.2457   1877.797 2702
## 1932  12  19 22.472205 10.520197  8763.897 833.0545   491.1967   1291.872 2702
## 1945  13 -19 23.021729  9.870889  8489.136 860.0174   405.7444   1001.264 2702
## 1946  13 -18 22.203603 10.845098  8898.198 820.4811   538.1263   1459.008 2702
## 1947  13 -17 21.400935 11.845450  9299.533 785.0721   701.1945   2076.491 2702
## 1948  13 -16 20.615528 12.866999  9692.236 753.2631   898.7017   2890.899 2702
## 1949  13 -15 19.849433 13.904131 10075.283 724.6252  1134.0060   3941.842 2702
## 1950  13 -14 19.104973 14.950482 10447.513 698.8078  1409.7735   5269.198 2702
## 1951  13 -13 18.384776 15.998851 10807.612 675.5243  1727.6277   6910.014 2702
## 1952  13 -12 17.691806 17.041120 11154.097 654.5401  2087.7487   8894.394 2702
## 1953  13 -11 17.029386 18.068184 11485.307 635.6647  2488.4409  11240.402 2702
## 1954  13 -10 16.401219 19.069901 11799.390 618.7442  2925.6955  13948.181 2702
## 1955  13  -9 15.811388 20.035086 12094.306 603.6563  3392.7933  16993.726 2702
## 1956  13  -8 15.264338 20.951562 12367.831 590.3059  3880.0116  20323.076 2702
## 1957  13  -7 14.764823 21.806302 12617.588 578.6212  4374.5146  23847.997 2702
## 1958  13  -6 14.317821 22.585674 12841.089 568.5502  4860.5224  27444.544 2702
## 1959  13  -5 13.928388 23.275825 13035.806 560.0577  5319.8456  30955.948 2702
## 1960  13  -4 13.601471 23.863206 13199.265 553.1220  5732.8445  34201.012 2702
## 1961  13  -3 13.341664 24.335226 13329.168 547.7314  6079.8094  36988.385 2702
## 1962  13  -2 13.152946 24.680990 13423.527 543.8812  6342.6613  39135.790 2702
## 1963  13  -1 13.038405 24.892040 13480.798 541.5706  6506.7669  40491.675 2702
## 1964  13   0 13.000000 24.963004 13500.000 540.8003  6562.5758  40955.402 2702
## 1965  13   1 13.038405 24.892040 13480.798 541.5706  6506.7669  40491.675 2702
## 1966  13   2 13.152946 24.680990 13423.527 543.8812  6342.6613  39135.790 2702
## 1967  13   3 13.341664 24.335226 13329.168 547.7314  6079.8094  36988.385 2702
## 1968  13   4 13.601471 23.863206 13199.265 553.1220  5732.8445  34201.012 2702
## 1969  13   5 13.928388 23.275825 13035.806 560.0577  5319.8456  30955.948 2702
## 1970  13   6 14.317821 22.585674 12841.089 568.5502  4860.5224  27444.544 2702
## 1971  13   7 14.764823 21.806302 12617.588 578.6212  4374.5146  23847.997 2702
## 1972  13   8 15.264338 20.951562 12367.831 590.3059  3880.0116  20323.076 2702
## 1973  13   9 15.811388 20.035086 12094.306 603.6563  3392.7933  16993.726 2702
## 1974  13  10 16.401219 19.069901 11799.390 618.7442  2925.6955  13948.181 2702
## 1975  13  11 17.029386 18.068184 11485.307 635.6647  2488.4409  11240.402 2702
## 1976  13  12 17.691806 17.041120 11154.097 654.5401  2087.7487   8894.394 2702
## 1977  13  13 18.384776 15.998851 10807.612 675.5243  1727.6277   6910.014 2702
## 1978  13  14 19.104973 14.950482 10447.513 698.8078  1409.7735   5269.198 2702
## 1979  13  15 19.849433 13.904131 10075.283 724.6252  1134.0060   3941.842 2702
## 1980  13  16 20.615528 12.866999  9692.236 753.2631   898.7017   2890.899 2702
## 1981  13  17 21.400935 11.845450  9299.533 785.0721   701.1945   2076.491 2702
## 1982  13  18 22.203603 10.845098  8898.198 820.4811   538.1263   1459.008 2702
## 1983  13  19 23.021729  9.870889  8489.136 860.0174   405.7444   1001.264 2702
## 1997  14 -18 22.803509 10.126259  8598.246 849.1039   438.0572   1108.970 2702
## 1998  14 -17 22.022716 11.066684  8988.642 812.2255   571.7897   1581.954 2702
## 1999  14 -16 21.260292 12.025274  9369.854 779.1801   733.6159   2205.483 2702
## 2000  14 -15 20.518285 12.996419  9740.858 749.5032   926.0937   3008.975 2702
## 2001  14 -14 19.798990 13.973831 10100.505 722.8157  1151.1456   4021.479 2702
## 2002  14 -13 19.104973 14.950482 10447.513 698.8078  1409.7735   5269.198 2702
## 2003  14 -12 18.439089 15.918551 10780.456 677.2259  1701.7447   6772.327 2702
## 2004  14 -11 17.804494 16.869392 11097.753 657.8633  2025.2660   8541.251 2702
## 2005  14 -10 17.204651 17.793518 11397.675 640.5521  2376.6721  10572.340 2702
## 2006  14  -9 16.643317 18.680636 11678.342 625.1576  2750.1650  12843.708 2702
## 2007  14  -8 16.124515 19.519726 11937.742 611.5733  3137.6530  15311.531 2702
## 2008  14  -7 15.652476 20.299200 12173.762 599.7163  3528.7475  17907.688 2702
## 2009  14  -6 15.231546 21.007149 12384.227 589.5244  3910.9758  20539.612 2702
## 2010  14  -5 14.866069 21.631676 12566.966 580.9520  4270.2597  23093.218 2702
## 2011  14  -4 14.560220 22.161341 12719.890 573.9675  4591.6828  25439.462 2702
## 2012  14  -3 14.317821 22.585674 12841.089 568.5502  4860.5224  27444.544 2702
## 2013  14  -2 14.142136 22.895737 12928.932 564.6873  5063.4633  28982.931 2702
## 2014  14  -1 14.035669 23.084666 12982.166 562.3718  5189.8474  29951.473 2702
## 2015  14   0 14.000000 23.148135 13000.000 561.6003  5232.7723  30282.230 2702
## 2016  14   1 14.035669 23.084666 12982.166 562.3718  5189.8474  29951.473 2702
## 2017  14   2 14.142136 22.895737 12928.932 564.6873  5063.4633  28982.931 2702
## 2018  14   3 14.317821 22.585674 12841.089 568.5502  4860.5224  27444.544 2702
## 2019  14   4 14.560220 22.161341 12719.890 573.9675  4591.6828  25439.462 2702
## 2020  14   5 14.866069 21.631676 12566.966 580.9520  4270.2597  23093.218 2702
## 2021  14   6 15.231546 21.007149 12384.227 589.5244  3910.9758  20539.612 2702
## 2022  14   7 15.652476 20.299200 12173.762 599.7163  3528.7475  17907.688 2702
## 2023  14   8 16.124515 19.519726 11937.742 611.5733  3137.6530  15311.531 2702
## 2024  14   9 16.643317 18.680636 11678.342 625.1576  2750.1650  12843.708 2702
## 2025  14  10 17.204651 17.793518 11397.675 640.5521  2376.6721  10572.340 2702
## 2026  14  11 17.804494 16.869392 11097.753 657.8633  2025.2660   8541.251 2702
## 2027  14  12 18.439089 15.918551 10780.456 677.2259  1701.7447   6772.327 2702
## 2028  14  13 19.104973 14.950482 10447.513 698.8078  1409.7735   5269.198 2702
## 2029  14  14 19.798990 13.973831 10100.505 722.8157  1151.1456   4021.479 2702
## 2030  14  15 20.518285 12.996419  9740.858 749.5032   926.0937   3008.975 2702
## 2031  14  16 21.260292 12.025274  9369.854 779.1801   733.6159   2205.483 2702
## 2032  14  17 22.022716 11.066684  8988.642 812.2255   571.7897   1581.954 2702
## 2033  14  18 22.803509 10.126259  8598.246 849.1039   438.0572   1108.970 2702
## 2049  15 -17 22.671568 10.282243  8664.216 842.6387   458.6140   1178.895 2702
## 2050  15 -16 21.931712 11.179009  9034.144 808.1346   589.3778   1647.165 2702
## 2051  15 -15 21.213203 12.085783  9393.398 777.2271   744.7459   2250.209 2702
## 2052  15 -14 20.518285 12.996419  9740.858 749.5032   926.0937   3008.975 2702
## 2053  15 -13 19.849433 13.904131 10075.283 724.6252  1134.0060   3941.842 2702
## 2054  15 -12 19.209373 14.801458 10395.314 702.3169  1368.0353   5062.229 2702
## 2055  15 -11 18.601075 15.680259 10699.462 682.3524  1626.4603   6375.829 2702
## 2056  15 -10 18.027756 16.531723 10986.122 664.5479  1906.0671   7877.643 2702
## 2057  15  -9 17.492856 17.346430 11253.572 648.7544  2201.9838   9549.140 2702
## 2058  15  -8 17.000000 18.114443 11500.000 634.8525  2507.6029  11355.958 2702
## 2059  15  -7 16.552945 18.825474 11723.527 622.7481  2814.6314  13246.692 2702
## 2060  15  -6 16.155494 19.469104 11922.253 612.3678  3113.3051  15153.315 2702
## 2061  15  -5 15.811388 20.035086 12094.306 603.6563  3392.7933  16993.726 2702
## 2062  15  -4 15.524175 20.513700 12237.913 596.5727  3641.7977  18676.687 2702
## 2063  15  -3 15.297059 20.896168 12351.471 591.0878  3849.3178  20108.998 2702
## 2064  15  -2 15.132746 21.175076 12433.627 587.1822  4005.5184  21204.290 2702
## 2065  15  -1 15.033296 21.344782 12483.352 584.8432  4102.5982  21892.266 2702
## 2066  15   0 15.000000 21.401752 12500.000 584.0643  4135.5359  22126.929 2702
## 2067  15   1 15.033296 21.344782 12483.352 584.8432  4102.5982  21892.266 2702
## 2068  15   2 15.132746 21.175076 12433.627 587.1822  4005.5184  21204.290 2702
## 2069  15   3 15.297059 20.896168 12351.471 591.0878  3849.3178  20108.998 2702
## 2070  15   4 15.524175 20.513700 12237.913 596.5727  3641.7977  18676.687 2702
## 2071  15   5 15.811388 20.035086 12094.306 603.6563  3392.7933  16993.726 2702
## 2072  15   6 16.155494 19.469104 11922.253 612.3678  3113.3051  15153.315 2702
## 2073  15   7 16.552945 18.825474 11723.527 622.7481  2814.6314  13246.692 2702
## 2074  15   8 17.000000 18.114443 11500.000 634.8525  2507.6029  11355.958 2702
## 2075  15   9 17.492856 17.346430 11253.572 648.7544  2201.9838   9549.140 2702
## 2076  15  10 18.027756 16.531723 10986.122 664.5479  1906.0671   7877.643 2702
## 2077  15  11 18.601075 15.680259 10699.462 682.3524  1626.4603   6375.829 2702
## 2078  15  12 19.209373 14.801458 10395.314 702.3169  1368.0353   5062.229 2702
## 2079  15  13 19.849433 13.904131 10075.283 724.6252  1134.0060   3941.842 2702
## 2080  15  14 20.518285 12.996419  9740.858 749.5032   926.0937   3008.975 2702
## 2081  15  15 21.213203 12.085783  9393.398 777.2271   744.7459   2250.209 2702
## 2082  15  16 21.931712 11.179009  9034.144 808.1346   589.3778   1647.165 2702
## 2083  15  17 22.671568 10.282243  8664.216 842.6387   458.6140   1178.895 2702
## 2101  16 -16 22.627417 10.334706  8686.292 840.4972   465.6698   1203.140 2702
## 2102  16 -15 21.931712 11.179009  9034.144 808.1346   589.3778   1647.165 2702
## 2103  16 -14 21.260292 12.025274  9369.854 779.1801   733.6159   2205.483 2702
## 2104  16 -13 20.615528 12.866999  9692.236 753.2631   898.7017   2890.899 2702
## 2105  16 -12 20.000000 13.697122 10000.000 730.0804  1084.1059   3712.283 2702
## 2106  16 -11 19.416488 14.508024 10291.756 709.3837  1288.2752   4672.582 2702
## 2107  16 -10 18.867962 15.291570 10566.019 690.9702  1508.4816   5766.763 2702
## 2108  16  -9 18.357560 16.039166 10821.220 674.6748  1740.7208   6979.927 2702
## 2109  16  -8 17.888544 16.741872 11055.728 660.3639  1979.6837   8285.903 2702
## 2110  16  -7 17.464249 17.390553 11267.875 647.9308  2218.8295   9646.668 2702
## 2111  16  -6 17.088007 17.976082 11455.996 637.2911  2450.5801  11012.957 2702
## 2112  16  -5 16.763055 18.489595 11618.473 628.3790  2666.6497  12326.318 2702
## 2113  16  -4 16.492423 18.922786 11753.789 621.1447  2858.5053  13522.721 2702
## 2114  16  -3 16.278821 19.268232 11860.590 615.5515  3017.9318  14537.553 2702
## 2115  16  -2 16.124515 19.519726 11937.742 611.5733  3137.6530  15311.531 2702
## 2116  16  -1 16.031220 19.672574 11984.390 609.1928  3211.9396  15796.780 2702
## 2117  16   0 16.000000 19.723855 12000.000 608.4003  3237.1230  15962.136 2702
## 2118  16   1 16.031220 19.672574 11984.390 609.1928  3211.9396  15796.780 2702
## 2119  16   2 16.124515 19.519726 11937.742 611.5733  3137.6530  15311.531 2702
## 2120  16   3 16.278821 19.268232 11860.590 615.5515  3017.9318  14537.553 2702
## 2121  16   4 16.492423 18.922786 11753.789 621.1447  2858.5053  13522.721 2702
## 2122  16   5 16.763055 18.489595 11618.473 628.3790  2666.6497  12326.318 2702
## 2123  16   6 17.088007 17.976082 11455.996 637.2911  2450.5801  11012.957 2702
## 2124  16   7 17.464249 17.390553 11267.875 647.9308  2218.8295   9646.668 2702
## 2125  16   8 17.888544 16.741872 11055.728 660.3639  1979.6837   8285.903 2702
## 2126  16   9 18.357560 16.039166 10821.220 674.6748  1740.7208   6979.927 2702
## 2127  16  10 18.867962 15.291570 10566.019 690.9702  1508.4816   5766.763 2702
## 2128  16  11 19.416488 14.508024 10291.756 709.3837  1288.2752   4672.582 2702
## 2129  16  12 20.000000 13.697122 10000.000 730.0804  1084.1059   3712.283 2702
## 2130  16  13 20.615528 12.866999  9692.236 753.2631   898.7017   2890.899 2702
## 2131  16  14 21.260292 12.025274  9369.854 779.1801   733.6159   2205.483 2702
## 2132  16  15 21.931712 11.179009  9034.144 808.1346   589.3778   1647.165 2702
## 2133  16  16 22.627417 10.334706  8686.292 840.4972   465.6698   1203.140 2702
## 2153  17 -15 22.671568 10.282243  8664.216 842.6387   458.6140   1178.895 2702
## 2154  17 -14 22.022716 11.066684  8988.642 812.2255   571.7897   1581.954 2702
## 2155  17 -13 21.400935 11.845450  9299.533 785.0721   701.1945   2076.491 2702
## 2156  17 -12 20.808652 12.611893  9595.674 760.8433   846.3006   2668.363 2702
## 2157  17 -11 20.248457 13.358921  9875.772 739.2642  1005.7683   3358.995 2702
## 2158  17 -10 19.723083 14.079044 10138.459 720.1099  1177.3438   4143.969 2702
## 2159  17  -9 19.235384 14.764445 10382.308 703.1966  1357.7980   5011.783 2702
## 2160  17  -8 18.788294 15.407086 10605.853 688.3750  1542.9268   5943.001 2702
## 2161  17  -7 18.384776 15.998851 10807.612 675.5243  1727.6277   6910.014 2702
## 2162  17  -6 18.027756 16.531723 10986.122 664.5479  1906.0671   7877.643 2702
## 2163  17  -5 17.720045 16.998004 11139.977 655.3697  2071.9420   8804.720 2702
## 2164  17  -4 17.464249 17.390553 11267.875 647.9308  2218.8295   9646.668 2702
## 2165  17  -3 17.262677 17.703046 11368.662 642.1868  2340.6032  10358.952 2702
## 2166  17  -2 17.117243 17.930237 11441.379 638.1053  2431.8785  10901.039 2702
## 2167  17  -1 17.029386 18.068184 11485.307 635.6647  2488.4409  11240.402 2702
## 2168  17   0 17.000000 18.114443 11500.000 634.8525  2507.6029  11355.958 2702
## 2169  17   1 17.029386 18.068184 11485.307 635.6647  2488.4409  11240.402 2702
## 2170  17   2 17.117243 17.930237 11441.379 638.1053  2431.8785  10901.039 2702
## 2171  17   3 17.262677 17.703046 11368.662 642.1868  2340.6032  10358.952 2702
## 2172  17   4 17.464249 17.390553 11267.875 647.9308  2218.8295   9646.668 2702
## 2173  17   5 17.720045 16.998004 11139.977 655.3697  2071.9420   8804.720 2702
## 2174  17   6 18.027756 16.531723 10986.122 664.5479  1906.0671   7877.643 2702
## 2175  17   7 18.384776 15.998851 10807.612 675.5243  1727.6277   6910.014 2702
## 2176  17   8 18.788294 15.407086 10605.853 688.3750  1542.9268   5943.001 2702
## 2177  17   9 19.235384 14.764445 10382.308 703.1966  1357.7980   5011.783 2702
## 2178  17  10 19.723083 14.079044 10138.459 720.1099  1177.3438   4143.969 2702
## 2179  17  11 20.248457 13.358921  9875.772 739.2642  1005.7683   3358.995 2702
## 2180  17  12 20.808652 12.611893  9595.674 760.8433   846.3006   2668.363 2702
## 2181  17  13 21.400935 11.845450  9299.533 785.0721   701.1945   2076.491 2702
## 2182  17  14 22.022716 11.066684  8988.642 812.2255   571.7897   1581.954 2702
## 2183  17  15 22.671568 10.282243  8664.216 842.6387   458.6140   1178.895 2702
## 2205  18 -14 22.803509 10.126259  8598.246 849.1039   438.0572   1108.970 2702
## 2206  18 -13 22.203603 10.845098  8898.198 820.4811   538.1263   1459.008 2702
## 2207  18 -12 21.633308 11.551310  9183.346 795.0048   650.2457   1877.797 2702
## 2208  18 -11 21.095023 12.238315  9452.488 772.3685   773.3011   2365.976 2702
## 2209  18 -10 20.591260 12.899236  9704.370 752.3213   905.4735   2919.979 2702
## 2210  18  -9 20.124612 13.526971  9937.694 734.6578  1044.2043   3531.230 2702
## 2211  18  -8 19.697716 14.114293 10151.142 719.2101  1186.2089   4185.625 2702
## 2212  18  -7 19.313208 14.653981 10343.396 705.8421  1327.5493   4863.470 2702
## 2213  18  -6 18.973666 15.138974 10513.167 694.4438  1463.7709   5539.997 2702
## 2214  18  -5 18.681542 15.562555 10659.229 684.9280  1590.1076   6186.534 2702
## 2215  18  -4 18.439089 15.918551 10780.456 677.2259  1701.7447   6772.327 2702
## 2216  18  -3 18.248288 16.201537 10875.856 671.2854  1794.1240   7266.892 2702
## 2217  18  -2 18.110770 16.407042 10944.615 667.0682  1863.2650   7642.667 2702
## 2218  18  -1 18.027756 16.531723 10986.122 664.5479  1906.0671   7877.643 2702
## 2219  18   0 18.000000 16.573517 11000.000 663.7095  1920.5598   7957.608 2702
## 2220  18   1 18.027756 16.531723 10986.122 664.5479  1906.0671   7877.643 2702
## 2221  18   2 18.110770 16.407042 10944.615 667.0682  1863.2650   7642.667 2702
## 2222  18   3 18.248288 16.201537 10875.856 671.2854  1794.1240   7266.892 2702
## 2223  18   4 18.439089 15.918551 10780.456 677.2259  1701.7447   6772.327 2702
## 2224  18   5 18.681542 15.562555 10659.229 684.9280  1590.1076   6186.534 2702
## 2225  18   6 18.973666 15.138974 10513.167 694.4438  1463.7709   5539.997 2702
## 2226  18   7 19.313208 14.653981 10343.396 705.8421  1327.5493   4863.470 2702
## 2227  18   8 19.697716 14.114293 10151.142 719.2101  1186.2089   4185.625 2702
## 2228  18   9 20.124612 13.526971  9937.694 734.6578  1044.2043   3531.230 2702
## 2229  18  10 20.591260 12.899236  9704.370 752.3213   905.4735   2919.979 2702
## 2230  18  11 21.095023 12.238315  9452.488 772.3685   773.3011   2365.976 2702
## 2231  18  12 21.633308 11.551310  9183.346 795.0048   650.2457   1877.797 2702
## 2232  18  13 22.203603 10.845098  8898.198 820.4811   538.1263   1459.008 2702
## 2233  18  14 22.803509 10.126259  8598.246 849.1039   438.0572   1108.970 2702
## 2257  19 -13 23.021729  9.870889  8489.136 860.0174   405.7444   1001.264 2702
## 2258  19 -12 22.472205 10.520197  8763.897 833.0545   491.1967   1291.872 2702
## 2259  19 -11 21.954498 11.150831  9022.751 809.1550   584.9322   1630.620 2702
## 2260  19 -10 21.470911 11.756484  9264.545 788.0370   685.5138   2014.808 2702
## 2261  19  -9 21.023796 12.330708  9488.102 769.4694   790.9477   2438.236 2702
## 2262  19  -8 20.615528 12.866999  9692.236 753.2631   898.7017   2890.899 2702
## 2263  19  -7 20.248457 13.358921  9875.772 739.2642  1005.7683   3358.995 2702
## 2264  19  -6 19.924859 13.800237 10037.571 727.3477  1108.7749   3825.339 2702
## 2265  19  -5 19.646883 14.185060 10176.559 717.4138  1204.1410   4270.203 2702
## 2266  19  -4 19.416488 14.508024 10291.756 709.3837  1288.2752   4672.582 2702
## 2267  19  -3 19.235384 14.764445 10382.308 703.1966  1357.7980   5011.783 2702
## 2268  19  -2 19.104973 14.950482 10447.513 698.8078  1409.7735   5269.198 2702
## 2269  19  -1 19.026298 15.063279 10486.851 696.1865  1441.9240   5430.026 2702
## 2270  19   0 19.000000 15.101077 10500.000 695.3147  1452.8056   5484.732 2702
## 2271  19   1 19.026298 15.063279 10486.851 696.1865  1441.9240   5430.026 2702
## 2272  19   2 19.104973 14.950482 10447.513 698.8078  1409.7735   5269.198 2702
## 2273  19   3 19.235384 14.764445 10382.308 703.1966  1357.7980   5011.783 2702
## 2274  19   4 19.416488 14.508024 10291.756 709.3837  1288.2752   4672.582 2702
## 2275  19   5 19.646883 14.185060 10176.559 717.4138  1204.1410   4270.203 2702
## 2276  19   6 19.924859 13.800237 10037.571 727.3477  1108.7749   3825.339 2702
## 2277  19   7 20.248457 13.358921  9875.772 739.2642  1005.7683   3358.995 2702
## 2278  19   8 20.615528 12.866999  9692.236 753.2631   898.7017   2890.899 2702
## 2279  19   9 21.023796 12.330708  9488.102 769.4694   790.9477   2438.236 2702
## 2280  19  10 21.470911 11.756484  9264.545 788.0370   685.5138   2014.808 2702
## 2281  19  11 21.954498 11.150831  9022.751 809.1550   584.9322   1630.620 2702
## 2282  19  12 22.472205 10.520197  8763.897 833.0545   491.1967   1291.872 2702
## 2283  19  13 23.021729  9.870889  8489.136 860.0174   405.7444   1001.264 2702
## 2310  20 -11 22.825424 10.100464  8587.288 850.1874   434.7182   1097.714 2702
## 2311  20 -10 22.360680 10.654498  8819.660 827.7875   510.2498   1359.114 2702
## 2312  20  -9 21.931712 11.179009  9034.144 808.1346   589.3778   1647.165 2702
## 2313  20  -8 21.540659 11.668142  9229.670 791.0146   670.1760   1954.927 2702
## 2314  20  -7 21.189620 12.116145  9405.190 776.2527   750.3729   2272.907 2702
## 2315  20  -6 20.880613 12.517490  9559.693 763.7069   827.4381   2589.362 2702
## 2316  20  -5 20.615528 12.866999  9692.236 753.2631   898.7017   2890.899 2702
## 2317  20  -4 20.396078 13.159981  9801.961 744.8310   961.5005   3163.332 2702
## 2318  20  -3 20.223748 13.392365  9888.126 738.3405  1013.3410   3392.758 2702
## 2319  20  -2 20.099751 13.560832  9950.124 733.7400  1052.0655   3566.721 2702
## 2320  20  -1 20.024984 13.662922  9987.508 730.9936  1076.0056   3675.345 2702
## 2321  20   0 20.000000 13.697122 10000.000 730.0804  1084.1059   3712.283 2702
## 2322  20   1 20.024984 13.662922  9987.508 730.9936  1076.0056   3675.345 2702
## 2323  20   2 20.099751 13.560832  9950.124 733.7400  1052.0655   3566.721 2702
## 2324  20   3 20.223748 13.392365  9888.126 738.3405  1013.3410   3392.758 2702
## 2325  20   4 20.396078 13.159981  9801.961 744.8310   961.5005   3163.332 2702
## 2326  20   5 20.615528 12.866999  9692.236 753.2631   898.7017   2890.899 2702
## 2327  20   6 20.880613 12.517490  9559.693 763.7069   827.4381   2589.362 2702
## 2328  20   7 21.189620 12.116145  9405.190 776.2527   750.3729   2272.907 2702
## 2329  20   8 21.540659 11.668142  9229.670 791.0146   670.1760   1954.927 2702
## 2330  20   9 21.931712 11.179009  9034.144 808.1346   589.3778   1647.165 2702
## 2331  20  10 22.360680 10.654498  8819.660 827.7875   510.2498   1359.114 2702
## 2332  20  11 22.825424 10.100464  8587.288 850.1874   434.7182   1097.714 2702
## 2363  21  -9 22.847319 10.074728  8576.340 851.2727   431.4036   1086.568 2702
## 2364  21  -8 22.472205 10.520197  8763.897 833.0545   491.1967   1291.872 2702
## 2365  21  -7 22.135944 10.927718  8932.028 817.3736   550.5189   1503.979 2702
## 2366  21  -6 21.840330 11.292374  9079.835 804.0679   607.4905   1715.002 2702
## 2367  21  -5 21.587033 11.609589  9206.483 793.0068   660.1375   1915.981 2702
## 2368  21  -4 21.377558 11.875245  9311.221 784.0867   706.4989   2097.462 2702
## 2369  21  -3 21.213203 12.085783  9393.398 777.2271   744.7459   2250.209 2702
## 2370  21  -2 21.095023 12.238315  9452.488 772.3685   773.3011   2365.976 2702
## 2371  21  -1 21.023796 12.330708  9488.102 769.4694   790.9477   2438.236 2702
## 2372  21   0 21.000000 12.361652  9500.000 768.5057   796.9175   2462.804 2702
## 2373  21   1 21.023796 12.330708  9488.102 769.4694   790.9477   2438.236 2702
## 2374  21   2 21.095023 12.238315  9452.488 772.3685   773.3011   2365.976 2702
## 2375  21   3 21.213203 12.085783  9393.398 777.2271   744.7459   2250.209 2702
## 2376  21   4 21.377558 11.875245  9311.221 784.0867   706.4989   2097.462 2702
## 2377  21   5 21.587033 11.609589  9206.483 793.0068   660.1375   1915.981 2702
## 2378  21   6 21.840330 11.292374  9079.835 804.0679   607.4905   1715.002 2702
## 2379  21   7 22.135944 10.927718  8932.028 817.3736   550.5189   1503.979 2702
## 2380  21   8 22.472205 10.520197  8763.897 833.0545   491.1967   1291.872 2702
## 2381  21   9 22.847319 10.074728  8576.340 851.2727   431.4036   1086.568 2702
## 2417  22  -6 22.803509 10.126259  8598.246 849.1039   438.0572   1108.970 2702
## 2418  22  -5 22.561028 10.413844  8719.486 837.2975   476.4496   1240.418 2702
## 2419  22  -4 22.360680 10.654498  8819.660 827.7875   510.2498   1359.114 2702
## 2420  22  -3 22.203603 10.845098  8898.198 820.4811   538.1263   1459.008 2702
## 2421  22  -2 22.090722 10.983114  8954.639 815.3097   558.9336   1534.708 2702
## 2422  22  -1 22.022716 11.066684  8988.642 812.2255   571.7897   1581.954 2702
## 2423  22   0 22.000000 11.094668  9000.000 811.2004   576.1383   1598.016 2702
## 2424  22   1 22.022716 11.066684  8988.642 812.2255   571.7897   1581.954 2702
## 2425  22   2 22.090722 10.983114  8954.639 815.3097   558.9336   1534.708 2702
## 2426  22   3 22.203603 10.845098  8898.198 820.4811   538.1263   1459.008 2702
## 2427  22   4 22.360680 10.654498  8819.660 827.7875   510.2498   1359.114 2702
## 2428  22   5 22.561028 10.413844  8719.486 837.2975   476.4496   1240.418 2702
## 2429  22   6 22.803509 10.126259  8598.246 849.1039   438.0572   1108.970 2702
## 2473  23  -1 23.021729  9.870889  8489.136 860.0174   405.7444   1001.264 2702
## 2474  23   0 23.000000  9.896170  8500.000 858.9181   408.8700   1011.562 2702
## 2475  23   1 23.021729  9.870889  8489.136 860.0174   405.7444   1001.264 2702
##                n
## 127     75.48581
## 128     76.16466
## 129     75.48581
## 173     82.54485
## 174     91.04522
## 175     98.62431
## 176    104.93868
## 177    109.68761
## 178    112.63664
## 179    113.63669
## 180    112.63664
## 181    109.68761
## 182    104.93868
## 183     98.62431
## 184     91.04522
## 185     82.54485
## 221     81.08398
## 222     94.34134
## 223    107.76348
## 224    120.88343
## 225    133.19179
## 226    144.16751
## 227    153.31342
## 228    160.19321
## 229    164.46611
## 230    165.91523
## 231    164.46611
## 232    160.19321
## 233    153.31342
## 234    144.16751
## 235    133.19179
## 236    120.88343
## 237    107.76348
## 238     94.34134
## 239     81.08398
## 270     81.81127
## 271     98.62431
## 272    116.68903
## 273    135.55775
## 274    154.66570
## 275    173.35197
## 276    190.89250
## 277    206.54363
## 278    219.59320
## 279    229.41435
## 280    235.51628
## 281    237.58609
## 282    235.51628
## 283    229.41435
## 284    219.59320
## 285    206.54363
## 286    190.89250
## 287    173.35197
## 288    154.66570
## 289    135.55775
## 290    116.68903
## 291     98.62431
## 292     81.81127
## 319     75.48581
## 320     94.34134
## 321    115.66281
## 322    139.18409
## 323    164.46611
## 324    190.89250
## 325    217.67988
## 326    243.90533
## 327    268.55151
## 328    290.56775
## 329    308.94300
## 330    322.78369
## 331    331.38798
## 332    334.30749
## 333    331.38798
## 334    322.78369
## 335    308.94300
## 336    290.56775
## 337    268.55151
## 338    243.90533
## 339    217.67988
## 340    190.89250
## 341    164.46611
## 342    139.18409
## 343    115.66281
## 344     94.34134
## 345     75.48581
## 369     82.54485
## 370    104.93868
## 371    130.86626
## 372    160.19321
## 373    192.57167
## 374    227.41567
## 375    263.89150
## 376    300.92834
## 377    337.25311
## 378    371.45106
## 379    402.05068
## 380    427.62709
## 381    446.91445
## 382    458.91461
## 383    462.98808
## 384    458.91461
## 385    446.91445
## 386    427.62709
## 387    402.05068
## 388    371.45106
## 389    337.25311
## 390    300.92834
## 391    263.89150
## 392    227.41567
## 393    192.57167
## 394    160.19321
## 395    130.86626
## 396    104.93868
## 397     82.54485
## 419     87.08150
## 420    112.63664
## 421    142.90549
## 422    177.97107
## 423    217.67988
## 424    261.59204
## 425    308.94300
## 426    358.62471
## 427    409.19393
## 428    458.91461
## 429    505.83770
## 430    547.91762
## 431    583.15826
## 432    609.77486
## 433    626.35309
## 434    631.98373
## 435    626.35309
## 436    609.77486
## 437    583.15826
## 438    547.91762
## 439    505.83770
## 440    458.91461
## 441    409.19393
## 442    358.62471
## 443    308.94300
## 444    261.59204
## 445    217.67988
## 446    177.97107
## 447    142.90549
## 448    112.63664
## 449     87.08150
## 469     88.64654
## 470    116.68903
## 471    150.64365
## 472    190.89250
## 473    237.58609
## 474    290.56775
## 475    349.30169
## 476    412.81421
## 477    479.65885
## 478    547.91762
## 479    615.24920
## 480    678.99145
## 481    736.31930
## 482    784.44950
## 483    820.87381
## 484    843.59230
## 485    851.31393
## 486    843.59230
## 487    820.87381
## 488    784.44950
## 489    736.31930
## 490    678.99145
## 491    615.24920
## 492    547.91762
## 493    479.65885
## 494    412.81421
## 495    349.30169
## 496    290.56775
## 497    237.58609
## 498    190.89250
## 499    150.64365
## 500    116.68903
## 501     88.64654
## 519     87.08150
## 520    116.68903
## 521    153.31342
## 522    197.69761
## 523    250.39284
## 524    311.66225
## 525    381.37718
## 526    458.91461
## 527    543.06750
## 528    631.98373
## 529    723.15121
## 530    813.44707
## 531    899.26491
## 532    976.72535
## 533   1041.96164
## 534   1091.45507
## 535   1122.37888
## 536   1132.89877
## 537   1122.37888
## 538   1091.45507
## 539   1041.96164
## 540    976.72535
## 541    899.26491
## 542    813.44707
## 543    723.15121
## 544    631.98373
## 545    543.06750
## 546    458.91461
## 547    381.37718
## 548    311.66225
## 549    250.39284
## 550    197.69761
## 551    153.31342
## 552    116.68903
## 553     87.08150
## 569     82.54485
## 570    112.63664
## 571    150.64365
## 572    197.69761
## 573    254.81363
## 574    322.78369
## 575    402.05068
## 576    492.56826
## 577    593.65595
## 578    703.86475
## 579    820.87381
## 580    941.44442
## 581   1061.45923
## 582   1176.07226
## 583   1279.98397
## 584   1367.83628
## 585   1434.69511
## 586   1476.55974
## 587   1490.81750
## 588   1476.55974
## 589   1434.69511
## 590   1367.83628
## 591   1279.98397
## 592   1176.07226
## 593   1061.45923
## 594    941.44442
## 595    820.87381
## 596    703.86475
## 597    593.65595
## 598    492.56826
## 599    402.05068
## 600    322.78369
## 601    254.81363
## 602    197.69761
## 603    150.64365
## 604    112.63664
## 605     82.54485
## 619     75.48581
## 620    104.93868
## 621    142.90549
## 622    190.89250
## 623    250.39284
## 624    322.78369
## 625    409.19393
## 626    510.34273
## 627    626.35309
## 628    756.55059
## 629    899.26491
## 630   1051.66124
## 631   1209.63829
## 632   1367.83628
## 633   1519.79917
## 634   1658.32327
## 635   1775.99730
## 636   1865.89607
## 637   1922.33969
## 638   1941.58941
## 639   1922.33969
## 640   1865.89607
## 641   1775.99730
## 642   1658.32327
## 643   1519.79917
## 644   1367.83628
## 645   1209.63829
## 646   1051.66124
## 647    899.26491
## 648    756.55059
## 649    626.35309
## 650    510.34273
## 651    409.19393
## 652    322.78369
## 653    250.39284
## 654    190.89250
## 655    142.90549
## 656    104.93868
## 657     75.48581
## 670     94.34134
## 671    130.86626
## 672    177.97107
## 673    237.58609
## 674    311.66225
## 675    402.05068
## 676    510.34273
## 677    637.66756
## 678    784.44950
## 679    950.13362
## 680   1132.89877
## 681   1329.39105
## 682   1534.52714
## 683   1741.43272
## 684   1941.58941
## 685   2125.25582
## 686   2282.19317
## 687   2402.65978
## 688   2478.55085
## 689   2504.47825
## 690   2478.55085
## 691   2402.65978
## 692   2282.19317
## 693   2125.25582
## 694   1941.58941
## 695   1741.43272
## 696   1534.52714
## 697   1329.39105
## 698   1132.89877
## 699    950.13362
## 700    784.44950
## 701    637.66756
## 702    510.34273
## 703    402.05068
## 704    311.66225
## 705    237.58609
## 706    177.97107
## 707    130.86626
## 708     94.34134
## 720     81.81127
## 721    115.66281
## 722    160.19321
## 723    217.67988
## 724    290.56775
## 725    381.37718
## 726    492.56826
## 727    626.35309
## 728    784.44950
## 729    967.77309
## 730   1176.07226
## 731   1407.52347
## 732   1658.32327
## 733   1922.33969
## 734   2190.91554
## 735   2452.94192
## 736   2695.32522
## 737   2903.93441
## 738   3065.01799
## 739   3166.92754
## 740   3201.82087
## 741   3166.92754
## 742   3065.01799
## 743   2903.93441
## 744   2695.32522
## 745   2452.94192
## 746   2190.91554
## 747   1922.33969
## 748   1658.32327
## 749   1407.52347
## 750   1176.07226
## 751    967.77309
## 752    784.44950
## 753    626.35309
## 754    492.56826
## 755    381.37718
## 756    290.56775
## 757    217.67988
## 758    160.19321
## 759    115.66281
## 760     81.81127
## 771     98.62431
## 772    139.18409
## 773    192.57167
## 774    261.59204
## 775    349.30169
## 776    458.91461
## 777    593.65595
## 778    756.55059
## 779    950.13362
## 780   1176.07226
## 781   1434.69511
## 782   1724.43858
## 783   2041.24400
## 784   2377.97697
## 785   2723.99144
## 786   3065.01799
## 787   3383.59576
## 788   3660.24816
## 789   3875.47498
## 790   4012.37446
## 791   4059.38113
## 792   4012.37446
## 793   3875.47498
## 794   3660.24816
## 795   3383.59576
## 796   3065.01799
## 797   2723.99144
## 798   2377.97697
## 799   2041.24400
## 800   1724.43858
## 801   1434.69511
## 802   1176.07226
## 803    950.13362
## 804    756.55059
## 805    593.65595
## 806    458.91461
## 807    349.30169
## 808    261.59204
## 809    192.57167
## 810    139.18409
## 811     98.62431
## 821     81.08398
## 822    116.68903
## 823    164.46611
## 824    227.41567
## 825    308.94300
## 826    412.81421
## 827    543.06750
## 828    703.86475
## 829    899.26491
## 830   1132.89877
## 831   1407.52347
## 832   1724.43858
## 833   2082.75723
## 834   2478.55085
## 835   2903.93441
## 836   3346.23666
## 837   3787.50707
## 838   4204.72336
## 839   4571.11397
## 840   4858.88194
## 841   5043.20496
## 842   5106.73007
## 843   5043.20496
## 844   4858.88194
## 845   4571.11397
## 846   4204.72336
## 847   3787.50707
## 848   3346.23666
## 849   2903.93441
## 850   2478.55085
## 851   2082.75723
## 852   1724.43858
## 853   1407.52347
## 854   1132.89877
## 855    899.26491
## 856    703.86475
## 857    543.06750
## 858    412.81421
## 859    308.94300
## 860    227.41567
## 861    164.46611
## 862    116.68903
## 863     81.08398
## 872     94.34134
## 873    135.55775
## 874    190.89250
## 875    263.89150
## 876    358.62471
## 877    479.65885
## 878    631.98373
## 879    820.87381
## 880   1051.66124
## 881   1329.39105
## 882   1658.32327
## 883   2041.24400
## 884   2478.55085
## 885   2967.09804
## 886   3498.83594
## 887   4059.38113
## 888   4626.82617
## 889   5171.33955
## 890   5656.33544
## 891   6041.98863
## 892   6291.30192
## 893   6377.65311
## 894   6291.30192
## 895   6041.98863
## 896   5656.33544
## 897   5171.33955
## 898   4626.82617
## 899   4059.38113
## 900   3498.83594
## 901   2967.09804
## 902   2478.55085
## 903   2041.24400
## 904   1658.32327
## 905   1329.39105
## 906   1051.66124
## 907    820.87381
## 908    631.98373
## 909    479.65885
## 910    358.62471
## 911    263.89150
## 912    190.89250
## 913    135.55775
## 914     94.34134
## 923    107.76348
## 924    154.66570
## 925    217.67988
## 926    300.92834
## 927    409.19393
## 928    547.91762
## 929    723.15121
## 930    941.44442
## 931   1209.63829
## 932   1534.52714
## 933   1922.33969
## 934   2377.97697
## 935   2903.93441
## 936   3498.83594
## 937   4155.54056
## 938   4858.88194
## 939   5583.33194
## 940   6291.30192
## 941   6933.39242
## 942   7452.36128
## 943   7792.10112
## 944   7910.58543
## 945   7792.10112
## 946   7452.36128
## 947   6933.39242
## 948   6291.30192
## 949   5583.33194
## 950   4858.88194
## 951   4155.54056
## 952   3498.83594
## 953   2903.93441
## 954   2377.97697
## 955   1922.33969
## 956   1534.52714
## 957   1209.63829
## 958    941.44442
## 959    723.15121
## 960    547.91762
## 961    409.19393
## 962    300.92834
## 963    217.67988
## 964    154.66570
## 965    107.76348
## 973     82.54485
## 974    120.88343
## 975    173.35197
## 976    243.90533
## 977    337.25311
## 978    458.91461
## 979    615.24920
## 980    813.44707
## 981   1061.45923
## 982   1367.83628
## 983   1741.43272
## 984   2190.91554
## 985   2723.99144
## 986   3346.23666
## 987   4059.38113
## 988   4858.88194
## 989   5730.66582
## 990   6647.13199
## 991   7563.08079
## 992   8413.40171
## 993   9116.00218
## 994   9584.16651
## 995   9749.07620
## 996   9584.16651
## 997   9116.00218
## 998   8413.40171
## 999   7563.08079
## 1000  6647.13199
## 1001  5730.66582
## 1002  4858.88194
## 1003  4059.38113
## 1004  3346.23666
## 1005  2723.99144
## 1006  2190.91554
## 1007  1741.43272
## 1008  1367.83628
## 1009  1061.45923
## 1010   813.44707
## 1011   615.24920
## 1012   458.91461
## 1013   337.25311
## 1014   243.90533
## 1015   173.35197
## 1016   120.88343
## 1017    82.54485
## 1024    91.04522
## 1025   133.19179
## 1026   190.89250
## 1027   268.55151
## 1028   371.45106
## 1029   505.83770
## 1030   678.99145
## 1031   899.26491
## 1032  1176.07226
## 1033  1519.79917
## 1034  1941.58941
## 1035  2452.94192
## 1036  3065.01799
## 1037  3787.50707
## 1038  4626.82617
## 1039  5583.33194
## 1040  6647.13199
## 1041  7792.10112
## 1042  8968.15900
## 1043 10093.48652
## 1044 11052.15388
## 1045 11707.77698
## 1046 11942.28293
## 1047 11707.77698
## 1048 11052.15388
## 1049 10093.48652
## 1050  8968.15900
## 1051  7792.10112
## 1052  6647.13199
## 1053  5583.33194
## 1054  4626.82617
## 1055  3787.50707
## 1056  3065.01799
## 1057  2452.94192
## 1058  1941.58941
## 1059  1519.79917
## 1060  1176.07226
## 1061   899.26491
## 1062   678.99145
## 1063   505.83770
## 1064   371.45106
## 1065   268.55151
## 1066   190.89250
## 1067   133.19179
## 1068    91.04522
## 1075    98.62431
## 1076   144.16751
## 1077   206.54363
## 1078   290.56775
## 1079   402.05068
## 1080   547.91762
## 1081   736.31930
## 1082   976.72535
## 1083  1279.98397
## 1084  1658.32327
## 1085  2125.25582
## 1086  2695.32522
## 1087  3383.59576
## 1088  4204.72336
## 1089  5171.33955
## 1090  6291.30192
## 1091  7563.08079
## 1092  8968.15900
## 1093 10459.03356
## 1094 11942.28293
## 1095 13261.56363
## 1096 14200.86960
## 1097 14545.49653
## 1098 14200.86960
## 1099 13261.56363
## 1100 11942.28293
## 1101 10459.03356
## 1102  8968.15900
## 1103  7563.08079
## 1104  6291.30192
## 1105  5171.33955
## 1106  4204.72336
## 1107  3383.59576
## 1108  2695.32522
## 1109  2125.25582
## 1110  1658.32327
## 1111  1279.98397
## 1112   976.72535
## 1113   736.31930
## 1114   547.91762
## 1115   402.05068
## 1116   290.56775
## 1117   206.54363
## 1118   144.16751
## 1119    98.62431
## 1126   104.93868
## 1127   153.31342
## 1128   219.59320
## 1129   308.94300
## 1130   427.62709
## 1131   583.15826
## 1132   784.44950
## 1133  1041.96164
## 1134  1367.83628
## 1135  1775.99730
## 1136  2282.19317
## 1137  2903.93441
## 1138  3660.24816
## 1139  4571.11397
## 1140  5656.33544
## 1141  6933.39242
## 1142  8413.40171
## 1143 10093.48652
## 1144 11942.28293
## 1145 13872.95942
## 1146 15698.46046
## 1147 17086.78821
## 1148 17620.69825
## 1149 17086.78821
## 1150 15698.46046
## 1151 13872.95942
## 1152 11942.28293
## 1153 10093.48652
## 1154  8413.40171
## 1155  6933.39242
## 1156  5656.33544
## 1157  4571.11397
## 1158  3660.24816
## 1159  2903.93441
## 1160  2282.19317
## 1161  1775.99730
## 1162  1367.83628
## 1163  1041.96164
## 1164   784.44950
## 1165   583.15826
## 1166   427.62709
## 1167   308.94300
## 1168   219.59320
## 1169   153.31342
## 1170   104.93868
## 1177   109.68761
## 1178   160.19321
## 1179   229.41435
## 1180   322.78369
## 1181   446.91445
## 1182   609.77486
## 1183   820.87381
## 1184  1091.45507
## 1185  1434.69511
## 1186  1865.89607
## 1187  2402.65978
## 1188  3065.01799
## 1189  3875.47498
## 1190  4858.88194
## 1191  6041.98863
## 1192  7452.36128
## 1193  9116.00218
## 1194 11052.15388
## 1195 13261.56363
## 1196 15698.46046
## 1197 18200.67996
## 1198 20330.66087
## 1199 21237.14939
## 1200 20330.66087
## 1201 18200.67996
## 1202 15698.46046
## 1203 13261.56363
## 1204 11052.15388
## 1205  9116.00218
## 1206  7452.36128
## 1207  6041.98863
## 1208  4858.88194
## 1209  3875.47498
## 1210  3065.01799
## 1211  2402.65978
## 1212  1865.89607
## 1213  1434.69511
## 1214  1091.45507
## 1215   820.87381
## 1216   609.77486
## 1217   446.91445
## 1218   322.78369
## 1219   229.41435
## 1220   160.19321
## 1221   109.68761
## 1227    75.48581
## 1228   112.63664
## 1229   164.46611
## 1230   235.51628
## 1231   331.38798
## 1232   458.91461
## 1233   626.35309
## 1234   843.59230
## 1235  1122.37888
## 1236  1476.55974
## 1237  1922.33969
## 1238  2478.55085
## 1239  3166.92754
## 1240  4012.37446
## 1241  5043.20496
## 1242  6291.30192
## 1243  7792.10112
## 1244  9584.16651
## 1245 11707.77698
## 1246 14200.86960
## 1247 17086.78821
## 1248 20330.66087
## 1249 23637.55430
## 1250 25472.01459
## 1251 23637.55430
## 1252 20330.66087
## 1253 17086.78821
## 1254 14200.86960
## 1255 11707.77698
## 1256  9584.16651
## 1257  7792.10112
## 1258  6291.30192
## 1259  5043.20496
## 1260  4012.37446
## 1261  3166.92754
## 1262  2478.55085
## 1263  1922.33969
## 1264  1476.55974
## 1265  1122.37888
## 1266   843.59230
## 1267   626.35309
## 1268   458.91461
## 1269   331.38798
## 1270   235.51628
## 1271   164.46611
## 1272   112.63664
## 1273    75.48581
## 1278    76.16466
## 1279   113.63669
## 1280   165.91523
## 1281   237.58609
## 1282   334.30749
## 1283   462.98808
## 1284   631.98373
## 1285   851.31393
## 1286  1132.89877
## 1287  1490.81750
## 1288  1941.58941
## 1289  2504.47825
## 1290  3201.82087
## 1291  4059.38113
## 1292  5106.73007
## 1293  6377.65311
## 1294  7910.58543
## 1295  9749.07620
## 1296 11942.28293
## 1297 14545.49653
## 1298 17620.69825
## 1299 21237.14939
## 1300 25472.01459
## 1301 30411.01987
## 1302 25472.01459
## 1303 21237.14939
## 1304 17620.69825
## 1305 14545.49653
## 1306 11942.28293
## 1307  9749.07620
## 1308  7910.58543
## 1309  6377.65311
## 1310  5106.73007
## 1311  4059.38113
## 1312  3201.82087
## 1313  2504.47825
## 1314  1941.58941
## 1315  1490.81750
## 1316  1132.89877
## 1317   851.31393
## 1318   631.98373
## 1319   462.98808
## 1320   334.30749
## 1321   237.58609
## 1322   165.91523
## 1323   113.63669
## 1324    76.16466
## 1329    75.48581
## 1330   112.63664
## 1331   164.46611
## 1332   235.51628
## 1333   331.38798
## 1334   458.91461
## 1335   626.35309
## 1336   843.59230
## 1337  1122.37888
## 1338  1476.55974
## 1339  1922.33969
## 1340  2478.55085
## 1341  3166.92754
## 1342  4012.37446
## 1343  5043.20496
## 1344  6291.30192
## 1345  7792.10112
## 1346  9584.16651
## 1347 11707.77698
## 1348 14200.86960
## 1349 17086.78821
## 1350 20330.66087
## 1351 23637.55430
## 1352 25472.01459
## 1353 23637.55430
## 1354 20330.66087
## 1355 17086.78821
## 1356 14200.86960
## 1357 11707.77698
## 1358  9584.16651
## 1359  7792.10112
## 1360  6291.30192
## 1361  5043.20496
## 1362  4012.37446
## 1363  3166.92754
## 1364  2478.55085
## 1365  1922.33969
## 1366  1476.55974
## 1367  1122.37888
## 1368   843.59230
## 1369   626.35309
## 1370   458.91461
## 1371   331.38798
## 1372   235.51628
## 1373   164.46611
## 1374   112.63664
## 1375    75.48581
## 1381   109.68761
## 1382   160.19321
## 1383   229.41435
## 1384   322.78369
## 1385   446.91445
## 1386   609.77486
## 1387   820.87381
## 1388  1091.45507
## 1389  1434.69511
## 1390  1865.89607
## 1391  2402.65978
## 1392  3065.01799
## 1393  3875.47498
## 1394  4858.88194
## 1395  6041.98863
## 1396  7452.36128
## 1397  9116.00218
## 1398 11052.15388
## 1399 13261.56363
## 1400 15698.46046
## 1401 18200.67996
## 1402 20330.66087
## 1403 21237.14939
## 1404 20330.66087
## 1405 18200.67996
## 1406 15698.46046
## 1407 13261.56363
## 1408 11052.15388
## 1409  9116.00218
## 1410  7452.36128
## 1411  6041.98863
## 1412  4858.88194
## 1413  3875.47498
## 1414  3065.01799
## 1415  2402.65978
## 1416  1865.89607
## 1417  1434.69511
## 1418  1091.45507
## 1419   820.87381
## 1420   609.77486
## 1421   446.91445
## 1422   322.78369
## 1423   229.41435
## 1424   160.19321
## 1425   109.68761
## 1432   104.93868
## 1433   153.31342
## 1434   219.59320
## 1435   308.94300
## 1436   427.62709
## 1437   583.15826
## 1438   784.44950
## 1439  1041.96164
## 1440  1367.83628
## 1441  1775.99730
## 1442  2282.19317
## 1443  2903.93441
## 1444  3660.24816
## 1445  4571.11397
## 1446  5656.33544
## 1447  6933.39242
## 1448  8413.40171
## 1449 10093.48652
## 1450 11942.28293
## 1451 13872.95942
## 1452 15698.46046
## 1453 17086.78821
## 1454 17620.69825
## 1455 17086.78821
## 1456 15698.46046
## 1457 13872.95942
## 1458 11942.28293
## 1459 10093.48652
## 1460  8413.40171
## 1461  6933.39242
## 1462  5656.33544
## 1463  4571.11397
## 1464  3660.24816
## 1465  2903.93441
## 1466  2282.19317
## 1467  1775.99730
## 1468  1367.83628
## 1469  1041.96164
## 1470   784.44950
## 1471   583.15826
## 1472   427.62709
## 1473   308.94300
## 1474   219.59320
## 1475   153.31342
## 1476   104.93868
## 1483    98.62431
## 1484   144.16751
## 1485   206.54363
## 1486   290.56775
## 1487   402.05068
## 1488   547.91762
## 1489   736.31930
## 1490   976.72535
## 1491  1279.98397
## 1492  1658.32327
## 1493  2125.25582
## 1494  2695.32522
## 1495  3383.59576
## 1496  4204.72336
## 1497  5171.33955
## 1498  6291.30192
## 1499  7563.08079
## 1500  8968.15900
## 1501 10459.03356
## 1502 11942.28293
## 1503 13261.56363
## 1504 14200.86960
## 1505 14545.49653
## 1506 14200.86960
## 1507 13261.56363
## 1508 11942.28293
## 1509 10459.03356
## 1510  8968.15900
## 1511  7563.08079
## 1512  6291.30192
## 1513  5171.33955
## 1514  4204.72336
## 1515  3383.59576
## 1516  2695.32522
## 1517  2125.25582
## 1518  1658.32327
## 1519  1279.98397
## 1520   976.72535
## 1521   736.31930
## 1522   547.91762
## 1523   402.05068
## 1524   290.56775
## 1525   206.54363
## 1526   144.16751
## 1527    98.62431
## 1534    91.04522
## 1535   133.19179
## 1536   190.89250
## 1537   268.55151
## 1538   371.45106
## 1539   505.83770
## 1540   678.99145
## 1541   899.26491
## 1542  1176.07226
## 1543  1519.79917
## 1544  1941.58941
## 1545  2452.94192
## 1546  3065.01799
## 1547  3787.50707
## 1548  4626.82617
## 1549  5583.33194
## 1550  6647.13199
## 1551  7792.10112
## 1552  8968.15900
## 1553 10093.48652
## 1554 11052.15388
## 1555 11707.77698
## 1556 11942.28293
## 1557 11707.77698
## 1558 11052.15388
## 1559 10093.48652
## 1560  8968.15900
## 1561  7792.10112
## 1562  6647.13199
## 1563  5583.33194
## 1564  4626.82617
## 1565  3787.50707
## 1566  3065.01799
## 1567  2452.94192
## 1568  1941.58941
## 1569  1519.79917
## 1570  1176.07226
## 1571   899.26491
## 1572   678.99145
## 1573   505.83770
## 1574   371.45106
## 1575   268.55151
## 1576   190.89250
## 1577   133.19179
## 1578    91.04522
## 1585    82.54485
## 1586   120.88343
## 1587   173.35197
## 1588   243.90533
## 1589   337.25311
## 1590   458.91461
## 1591   615.24920
## 1592   813.44707
## 1593  1061.45923
## 1594  1367.83628
## 1595  1741.43272
## 1596  2190.91554
## 1597  2723.99144
## 1598  3346.23666
## 1599  4059.38113
## 1600  4858.88194
## 1601  5730.66582
## 1602  6647.13199
## 1603  7563.08079
## 1604  8413.40171
## 1605  9116.00218
## 1606  9584.16651
## 1607  9749.07620
## 1608  9584.16651
## 1609  9116.00218
## 1610  8413.40171
## 1611  7563.08079
## 1612  6647.13199
## 1613  5730.66582
## 1614  4858.88194
## 1615  4059.38113
## 1616  3346.23666
## 1617  2723.99144
## 1618  2190.91554
## 1619  1741.43272
## 1620  1367.83628
## 1621  1061.45923
## 1622   813.44707
## 1623   615.24920
## 1624   458.91461
## 1625   337.25311
## 1626   243.90533
## 1627   173.35197
## 1628   120.88343
## 1629    82.54485
## 1637   107.76348
## 1638   154.66570
## 1639   217.67988
## 1640   300.92834
## 1641   409.19393
## 1642   547.91762
## 1643   723.15121
## 1644   941.44442
## 1645  1209.63829
## 1646  1534.52714
## 1647  1922.33969
## 1648  2377.97697
## 1649  2903.93441
## 1650  3498.83594
## 1651  4155.54056
## 1652  4858.88194
## 1653  5583.33194
## 1654  6291.30192
## 1655  6933.39242
## 1656  7452.36128
## 1657  7792.10112
## 1658  7910.58543
## 1659  7792.10112
## 1660  7452.36128
## 1661  6933.39242
## 1662  6291.30192
## 1663  5583.33194
## 1664  4858.88194
## 1665  4155.54056
## 1666  3498.83594
## 1667  2903.93441
## 1668  2377.97697
## 1669  1922.33969
## 1670  1534.52714
## 1671  1209.63829
## 1672   941.44442
## 1673   723.15121
## 1674   547.91762
## 1675   409.19393
## 1676   300.92834
## 1677   217.67988
## 1678   154.66570
## 1679   107.76348
## 1688    94.34134
## 1689   135.55775
## 1690   190.89250
## 1691   263.89150
## 1692   358.62471
## 1693   479.65885
## 1694   631.98373
## 1695   820.87381
## 1696  1051.66124
## 1697  1329.39105
## 1698  1658.32327
## 1699  2041.24400
## 1700  2478.55085
## 1701  2967.09804
## 1702  3498.83594
## 1703  4059.38113
## 1704  4626.82617
## 1705  5171.33955
## 1706  5656.33544
## 1707  6041.98863
## 1708  6291.30192
## 1709  6377.65311
## 1710  6291.30192
## 1711  6041.98863
## 1712  5656.33544
## 1713  5171.33955
## 1714  4626.82617
## 1715  4059.38113
## 1716  3498.83594
## 1717  2967.09804
## 1718  2478.55085
## 1719  2041.24400
## 1720  1658.32327
## 1721  1329.39105
## 1722  1051.66124
## 1723   820.87381
## 1724   631.98373
## 1725   479.65885
## 1726   358.62471
## 1727   263.89150
## 1728   190.89250
## 1729   135.55775
## 1730    94.34134
## 1739    81.08398
## 1740   116.68903
## 1741   164.46611
## 1742   227.41567
## 1743   308.94300
## 1744   412.81421
## 1745   543.06750
## 1746   703.86475
## 1747   899.26491
## 1748  1132.89877
## 1749  1407.52347
## 1750  1724.43858
## 1751  2082.75723
## 1752  2478.55085
## 1753  2903.93441
## 1754  3346.23666
## 1755  3787.50707
## 1756  4204.72336
## 1757  4571.11397
## 1758  4858.88194
## 1759  5043.20496
## 1760  5106.73007
## 1761  5043.20496
## 1762  4858.88194
## 1763  4571.11397
## 1764  4204.72336
## 1765  3787.50707
## 1766  3346.23666
## 1767  2903.93441
## 1768  2478.55085
## 1769  2082.75723
## 1770  1724.43858
## 1771  1407.52347
## 1772  1132.89877
## 1773   899.26491
## 1774   703.86475
## 1775   543.06750
## 1776   412.81421
## 1777   308.94300
## 1778   227.41567
## 1779   164.46611
## 1780   116.68903
## 1781    81.08398
## 1791    98.62431
## 1792   139.18409
## 1793   192.57167
## 1794   261.59204
## 1795   349.30169
## 1796   458.91461
## 1797   593.65595
## 1798   756.55059
## 1799   950.13362
## 1800  1176.07226
## 1801  1434.69511
## 1802  1724.43858
## 1803  2041.24400
## 1804  2377.97697
## 1805  2723.99144
## 1806  3065.01799
## 1807  3383.59576
## 1808  3660.24816
## 1809  3875.47498
## 1810  4012.37446
## 1811  4059.38113
## 1812  4012.37446
## 1813  3875.47498
## 1814  3660.24816
## 1815  3383.59576
## 1816  3065.01799
## 1817  2723.99144
## 1818  2377.97697
## 1819  2041.24400
## 1820  1724.43858
## 1821  1434.69511
## 1822  1176.07226
## 1823   950.13362
## 1824   756.55059
## 1825   593.65595
## 1826   458.91461
## 1827   349.30169
## 1828   261.59204
## 1829   192.57167
## 1830   139.18409
## 1831    98.62431
## 1842    81.81127
## 1843   115.66281
## 1844   160.19321
## 1845   217.67988
## 1846   290.56775
## 1847   381.37718
## 1848   492.56826
## 1849   626.35309
## 1850   784.44950
## 1851   967.77309
## 1852  1176.07226
## 1853  1407.52347
## 1854  1658.32327
## 1855  1922.33969
## 1856  2190.91554
## 1857  2452.94192
## 1858  2695.32522
## 1859  2903.93441
## 1860  3065.01799
## 1861  3166.92754
## 1862  3201.82087
## 1863  3166.92754
## 1864  3065.01799
## 1865  2903.93441
## 1866  2695.32522
## 1867  2452.94192
## 1868  2190.91554
## 1869  1922.33969
## 1870  1658.32327
## 1871  1407.52347
## 1872  1176.07226
## 1873   967.77309
## 1874   784.44950
## 1875   626.35309
## 1876   492.56826
## 1877   381.37718
## 1878   290.56775
## 1879   217.67988
## 1880   160.19321
## 1881   115.66281
## 1882    81.81127
## 1894    94.34134
## 1895   130.86626
## 1896   177.97107
## 1897   237.58609
## 1898   311.66225
## 1899   402.05068
## 1900   510.34273
## 1901   637.66756
## 1902   784.44950
## 1903   950.13362
## 1904  1132.89877
## 1905  1329.39105
## 1906  1534.52714
## 1907  1741.43272
## 1908  1941.58941
## 1909  2125.25582
## 1910  2282.19317
## 1911  2402.65978
## 1912  2478.55085
## 1913  2504.47825
## 1914  2478.55085
## 1915  2402.65978
## 1916  2282.19317
## 1917  2125.25582
## 1918  1941.58941
## 1919  1741.43272
## 1920  1534.52714
## 1921  1329.39105
## 1922  1132.89877
## 1923   950.13362
## 1924   784.44950
## 1925   637.66756
## 1926   510.34273
## 1927   402.05068
## 1928   311.66225
## 1929   237.58609
## 1930   177.97107
## 1931   130.86626
## 1932    94.34134
## 1945    75.48581
## 1946   104.93868
## 1947   142.90549
## 1948   190.89250
## 1949   250.39284
## 1950   322.78369
## 1951   409.19393
## 1952   510.34273
## 1953   626.35309
## 1954   756.55059
## 1955   899.26491
## 1956  1051.66124
## 1957  1209.63829
## 1958  1367.83628
## 1959  1519.79917
## 1960  1658.32327
## 1961  1775.99730
## 1962  1865.89607
## 1963  1922.33969
## 1964  1941.58941
## 1965  1922.33969
## 1966  1865.89607
## 1967  1775.99730
## 1968  1658.32327
## 1969  1519.79917
## 1970  1367.83628
## 1971  1209.63829
## 1972  1051.66124
## 1973   899.26491
## 1974   756.55059
## 1975   626.35309
## 1976   510.34273
## 1977   409.19393
## 1978   322.78369
## 1979   250.39284
## 1980   190.89250
## 1981   142.90549
## 1982   104.93868
## 1983    75.48581
## 1997    82.54485
## 1998   112.63664
## 1999   150.64365
## 2000   197.69761
## 2001   254.81363
## 2002   322.78369
## 2003   402.05068
## 2004   492.56826
## 2005   593.65595
## 2006   703.86475
## 2007   820.87381
## 2008   941.44442
## 2009  1061.45923
## 2010  1176.07226
## 2011  1279.98397
## 2012  1367.83628
## 2013  1434.69511
## 2014  1476.55974
## 2015  1490.81750
## 2016  1476.55974
## 2017  1434.69511
## 2018  1367.83628
## 2019  1279.98397
## 2020  1176.07226
## 2021  1061.45923
## 2022   941.44442
## 2023   820.87381
## 2024   703.86475
## 2025   593.65595
## 2026   492.56826
## 2027   402.05068
## 2028   322.78369
## 2029   254.81363
## 2030   197.69761
## 2031   150.64365
## 2032   112.63664
## 2033    82.54485
## 2049    87.08150
## 2050   116.68903
## 2051   153.31342
## 2052   197.69761
## 2053   250.39284
## 2054   311.66225
## 2055   381.37718
## 2056   458.91461
## 2057   543.06750
## 2058   631.98373
## 2059   723.15121
## 2060   813.44707
## 2061   899.26491
## 2062   976.72535
## 2063  1041.96164
## 2064  1091.45507
## 2065  1122.37888
## 2066  1132.89877
## 2067  1122.37888
## 2068  1091.45507
## 2069  1041.96164
## 2070   976.72535
## 2071   899.26491
## 2072   813.44707
## 2073   723.15121
## 2074   631.98373
## 2075   543.06750
## 2076   458.91461
## 2077   381.37718
## 2078   311.66225
## 2079   250.39284
## 2080   197.69761
## 2081   153.31342
## 2082   116.68903
## 2083    87.08150
## 2101    88.64654
## 2102   116.68903
## 2103   150.64365
## 2104   190.89250
## 2105   237.58609
## 2106   290.56775
## 2107   349.30169
## 2108   412.81421
## 2109   479.65885
## 2110   547.91762
## 2111   615.24920
## 2112   678.99145
## 2113   736.31930
## 2114   784.44950
## 2115   820.87381
## 2116   843.59230
## 2117   851.31393
## 2118   843.59230
## 2119   820.87381
## 2120   784.44950
## 2121   736.31930
## 2122   678.99145
## 2123   615.24920
## 2124   547.91762
## 2125   479.65885
## 2126   412.81421
## 2127   349.30169
## 2128   290.56775
## 2129   237.58609
## 2130   190.89250
## 2131   150.64365
## 2132   116.68903
## 2133    88.64654
## 2153    87.08150
## 2154   112.63664
## 2155   142.90549
## 2156   177.97107
## 2157   217.67988
## 2158   261.59204
## 2159   308.94300
## 2160   358.62471
## 2161   409.19393
## 2162   458.91461
## 2163   505.83770
## 2164   547.91762
## 2165   583.15826
## 2166   609.77486
## 2167   626.35309
## 2168   631.98373
## 2169   626.35309
## 2170   609.77486
## 2171   583.15826
## 2172   547.91762
## 2173   505.83770
## 2174   458.91461
## 2175   409.19393
## 2176   358.62471
## 2177   308.94300
## 2178   261.59204
## 2179   217.67988
## 2180   177.97107
## 2181   142.90549
## 2182   112.63664
## 2183    87.08150
## 2205    82.54485
## 2206   104.93868
## 2207   130.86626
## 2208   160.19321
## 2209   192.57167
## 2210   227.41567
## 2211   263.89150
## 2212   300.92834
## 2213   337.25311
## 2214   371.45106
## 2215   402.05068
## 2216   427.62709
## 2217   446.91445
## 2218   458.91461
## 2219   462.98808
## 2220   458.91461
## 2221   446.91445
## 2222   427.62709
## 2223   402.05068
## 2224   371.45106
## 2225   337.25311
## 2226   300.92834
## 2227   263.89150
## 2228   227.41567
## 2229   192.57167
## 2230   160.19321
## 2231   130.86626
## 2232   104.93868
## 2233    82.54485
## 2257    75.48581
## 2258    94.34134
## 2259   115.66281
## 2260   139.18409
## 2261   164.46611
## 2262   190.89250
## 2263   217.67988
## 2264   243.90533
## 2265   268.55151
## 2266   290.56775
## 2267   308.94300
## 2268   322.78369
## 2269   331.38798
## 2270   334.30749
## 2271   331.38798
## 2272   322.78369
## 2273   308.94300
## 2274   290.56775
## 2275   268.55151
## 2276   243.90533
## 2277   217.67988
## 2278   190.89250
## 2279   164.46611
## 2280   139.18409
## 2281   115.66281
## 2282    94.34134
## 2283    75.48581
## 2310    81.81127
## 2311    98.62431
## 2312   116.68903
## 2313   135.55775
## 2314   154.66570
## 2315   173.35197
## 2316   190.89250
## 2317   206.54363
## 2318   219.59320
## 2319   229.41435
## 2320   235.51628
## 2321   237.58609
## 2322   235.51628
## 2323   229.41435
## 2324   219.59320
## 2325   206.54363
## 2326   190.89250
## 2327   173.35197
## 2328   154.66570
## 2329   135.55775
## 2330   116.68903
## 2331    98.62431
## 2332    81.81127
## 2363    81.08398
## 2364    94.34134
## 2365   107.76348
## 2366   120.88343
## 2367   133.19179
## 2368   144.16751
## 2369   153.31342
## 2370   160.19321
## 2371   164.46611
## 2372   165.91523
## 2373   164.46611
## 2374   160.19321
## 2375   153.31342
## 2376   144.16751
## 2377   133.19179
## 2378   120.88343
## 2379   107.76348
## 2380    94.34134
## 2381    81.08398
## 2417    82.54485
## 2418    91.04522
## 2419    98.62431
## 2420   104.93868
## 2421   109.68761
## 2422   112.63664
## 2423   113.63669
## 2424   112.63664
## 2425   109.68761
## 2426   104.93868
## 2427    98.62431
## 2428    91.04522
## 2429    82.54485
## 2473    75.48581
## 2474    76.16466
## 2475    75.48581&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nrow(dfsc1$n)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(dfsc1$n)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4222601&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I created an x, y coordinate system with points that represented discrete area sizes. The original monocentric model has 1 square mile by 1 square mile squares, the m-Monocentric model has 0.5 square mile by 0.5 square mile squares, and both the amenity model and the rail distance model have 0.2 square mile by 0.2 square mile squares. The monocentric models’ results weren’t too interesting, so they didn’t need finely tuned points. The other models did have detailed information and empirically the 0.2 x 0.2 size squares housed at least 1 household, any smaller and their would-be fractional households. The light rail system ran right through the city center (point (0,0)) along the y axis (north- south). A horizontal line would produce similar results. Shifting the line horizontally might produce a slight variation, but probably not enough to go through the trouble of modeling.
Since each point represents a specific area, I can calculate the actual values for various variables rather than their rates. Then, I can simply sum up all the points to calculate the total values for these variables on the city basis. Thus, using these discrete points, I can fully characterize each modeled city numerically. I modeled all these systems and produced the various outputs in R.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#modfied parameters

#budget 
y &amp;lt;- 40000
#distance in the x axis
u &amp;lt;- c(0,0,0,0,0,1,1,1,1,1,-1,-1,-1,-1,-1,2,2,2,2,2,-2,-2,-2,-2,-2)
#distance in the y axis
v &amp;lt;- c(0,1,-1,2,-2,0,1,-1,2,-2,0,1,-1,2,-2,0,1,-1,2,-2,0,1,-1,2,-2)
#distance from center
x &amp;lt;- sqrt(u^2+v^2)

#transportation cost 50 cents a mile by 320 days
t &amp;lt;- 1000
#housing price per sqft vector
p &amp;lt;- c(0:25)
#housing consumption (sqft) by mile vector
q &amp;lt;- c(0:25)
#general good
g &amp;lt;- c(0:25)
#utility level
V &amp;lt;- 6000
#alpha for Cobb Douglas
al &amp;lt;- .5
#beta for development cobb-douglas
bt &amp;lt;- 4/3
#capital 
c0 &amp;lt;- 0

#amentiy
ad &amp;lt;- 0.16
ng &amp;lt;- 1
d &amp;lt;- 0

#gamma for amenity
gm &amp;lt;- 0.5

#z distance to amentiy
z &amp;lt;- sqrt((u-d)^2)

#land rent/acre
r &amp;lt;- c(0:25)
#Housing floor space / acre
s &amp;lt;- c(0:25)
#ag rent
ag &amp;lt;- 1000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#monocentric with modified V

u &amp;lt;- c(1:50)
v &amp;lt;- c(1:50)

#new u,v

i &amp;lt;- 0
j &amp;lt;- 0
ii &amp;lt;- 1

while(i &amp;lt; 20){
  
  j &amp;lt;- 0
  while(j &amp;lt; 20){
  u[ii] &amp;lt;- i/2 - 3
  v[ii] &amp;lt;- j/2 - 3
  j &amp;lt;- j+1
  ii &amp;lt;- ii+1
  }
  
  i &amp;lt;- i +1
  
  }


#finding x for various u,v
x &amp;lt;- sqrt(u^2+v^2)

#finding the price for various x
p &amp;lt;- (al^al*(1-al)^(1-al)*(y-t*x)/V)^(1/al)

#optimal q
q &amp;lt;- al*(y-t*x)/p

#optimal g
g &amp;lt;- (1-al)*(y-t*x)


#theta some funciton of beta
ph &amp;lt;- ((bt-1)^((bt-1)/bt))/bt

#optimal r

r &amp;lt;- (ph*p)^(bt/(bt-1))

r1 &amp;lt;- ((ph*al)^al * (1-al)^(1-al) * (y-t*x)/V)^(bt/(al*(bt-1)))

#optimal s
s &amp;lt;- (p/bt)^(1/(bt-1))

s1 &amp;lt;- (bt-1)^(-1/bt) * (r)^(1/bt)

#Utility Value

U &amp;lt;- q^al*g^(1-al)


#population n s(floorspaceperacre/ floorspace per household * (size of square (sqmi)) * acres/sqmi * fraction of housing in area)
n &amp;lt;- s/q * (.5*.5) * 640 * .25 

nn &amp;lt;- s/q



dfscm &amp;lt;- data.frame(u,v,x,p,g,q,s,r,U,n,nn)

#delete values where ag rent exceeds land rent
dfscm1 &amp;lt;- dfscm[(dfscm$r &amp;gt; ag),]

dfscm1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        u    v         x         p        g        q        s        r    U
## 45  -2.0 -1.0 2.2360680  9.903573 18881.97 1906.581 409.7883 1014.592 6000
## 46  -2.0 -0.5 2.0615528  9.995318 18969.22 1897.811 421.2827 1052.714 6000
## 47  -2.0  0.0 2.0000000 10.027778 19000.00 1894.737 425.4004 1066.455 6000
## 48  -2.0  0.5 2.0615528  9.995318 18969.22 1897.811 421.2827 1052.714 6000
## 49  -2.0  1.0 2.2360680  9.903573 18881.97 1906.581 409.7883 1014.592 6000
## 64  -1.5 -1.5 2.1213203  9.963850 18939.34 1900.805 417.3163 1039.519 6000
## 65  -1.5 -1.0 1.8027756 10.132139 19098.61 1884.954 438.8207 1111.548 6000
## 66  -1.5 -0.5 1.5811388 10.250062 19209.43 1874.079 454.3214 1164.206 6000
## 67  -1.5  0.0 1.5000000 10.293403 19250.00 1870.130 460.1090 1184.022 6000
## 68  -1.5  0.5 1.5811388 10.250062 19209.43 1874.079 454.3214 1164.206 6000
## 69  -1.5  1.0 1.8027756 10.132139 19098.61 1884.954 438.8207 1111.548 6000
## 70  -1.5  1.5 2.1213203  9.963850 18939.34 1900.805 417.3163 1039.519 6000
## 83  -1.0 -2.0 2.2360680  9.903573 18881.97 1906.581 409.7883 1014.592 6000
## 84  -1.0 -1.5 1.8027756 10.132139 19098.61 1884.954 438.8207 1111.548 6000
## 85  -1.0 -1.0 1.4142136 10.339326 19292.89 1865.972 466.2947 1205.293 6000
## 86  -1.0 -0.5 1.1180340 10.498662 19440.98 1851.758 488.1863 1281.326 6000
## 87  -1.0  0.0 1.0000000 10.562500 19500.00 1846.154 497.1460 1312.776 6000
## 88  -1.0  0.5 1.1180340 10.498662 19440.98 1851.758 488.1863 1281.326 6000
## 89  -1.0  1.0 1.4142136 10.339326 19292.89 1865.972 466.2947 1205.293 6000
## 90  -1.0  1.5 1.8027756 10.132139 19098.61 1884.954 438.8207 1111.548 6000
## 91  -1.0  2.0 2.2360680  9.903573 18881.97 1906.581 409.7883 1014.592 6000
## 103 -0.5 -2.0 2.0615528  9.995318 18969.22 1897.811 421.2827 1052.714 6000
## 104 -0.5 -1.5 1.5811388 10.250062 19209.43 1874.079 454.3214 1164.206 6000
## 105 -0.5 -1.0 1.1180340 10.498662 19440.98 1851.758 488.1863 1281.326 6000
## 106 -0.5 -0.5 0.7071068 10.721746 19646.45 1832.392 519.9725 1393.753 6000
## 107 -0.5  0.0 0.5000000 10.835069 19750.00 1822.785 536.6349 1453.619 6000
## 108 -0.5  0.5 0.7071068 10.721746 19646.45 1832.392 519.9725 1393.753 6000
## 109 -0.5  1.0 1.1180340 10.498662 19440.98 1851.758 488.1863 1281.326 6000
## 110 -0.5  1.5 1.5811388 10.250062 19209.43 1874.079 454.3214 1164.206 6000
## 111 -0.5  2.0 2.0615528  9.995318 18969.22 1897.811 421.2827 1052.714 6000
## 123  0.0 -2.0 2.0000000 10.027778 19000.00 1894.737 425.4004 1066.455 6000
## 124  0.0 -1.5 1.5000000 10.293403 19250.00 1870.130 460.1090 1184.022 6000
## 125  0.0 -1.0 1.0000000 10.562500 19500.00 1846.154 497.1460 1312.776 6000
## 126  0.0 -0.5 0.5000000 10.835069 19750.00 1822.785 536.6349 1453.619 6000
## 127  0.0  0.0 0.0000000 11.111111 20000.00 1800.000 578.7037 1607.510 6000
## 128  0.0  0.5 0.5000000 10.835069 19750.00 1822.785 536.6349 1453.619 6000
## 129  0.0  1.0 1.0000000 10.562500 19500.00 1846.154 497.1460 1312.776 6000
## 130  0.0  1.5 1.5000000 10.293403 19250.00 1870.130 460.1090 1184.022 6000
## 131  0.0  2.0 2.0000000 10.027778 19000.00 1894.737 425.4004 1066.455 6000
## 143  0.5 -2.0 2.0615528  9.995318 18969.22 1897.811 421.2827 1052.714 6000
## 144  0.5 -1.5 1.5811388 10.250062 19209.43 1874.079 454.3214 1164.206 6000
## 145  0.5 -1.0 1.1180340 10.498662 19440.98 1851.758 488.1863 1281.326 6000
## 146  0.5 -0.5 0.7071068 10.721746 19646.45 1832.392 519.9725 1393.753 6000
## 147  0.5  0.0 0.5000000 10.835069 19750.00 1822.785 536.6349 1453.619 6000
## 148  0.5  0.5 0.7071068 10.721746 19646.45 1832.392 519.9725 1393.753 6000
## 149  0.5  1.0 1.1180340 10.498662 19440.98 1851.758 488.1863 1281.326 6000
## 150  0.5  1.5 1.5811388 10.250062 19209.43 1874.079 454.3214 1164.206 6000
## 151  0.5  2.0 2.0615528  9.995318 18969.22 1897.811 421.2827 1052.714 6000
## 163  1.0 -2.0 2.2360680  9.903573 18881.97 1906.581 409.7883 1014.592 6000
## 164  1.0 -1.5 1.8027756 10.132139 19098.61 1884.954 438.8207 1111.548 6000
## 165  1.0 -1.0 1.4142136 10.339326 19292.89 1865.972 466.2947 1205.293 6000
## 166  1.0 -0.5 1.1180340 10.498662 19440.98 1851.758 488.1863 1281.326 6000
## 167  1.0  0.0 1.0000000 10.562500 19500.00 1846.154 497.1460 1312.776 6000
## 168  1.0  0.5 1.1180340 10.498662 19440.98 1851.758 488.1863 1281.326 6000
## 169  1.0  1.0 1.4142136 10.339326 19292.89 1865.972 466.2947 1205.293 6000
## 170  1.0  1.5 1.8027756 10.132139 19098.61 1884.954 438.8207 1111.548 6000
## 171  1.0  2.0 2.2360680  9.903573 18881.97 1906.581 409.7883 1014.592 6000
## 184  1.5 -1.5 2.1213203  9.963850 18939.34 1900.805 417.3163 1039.519 6000
## 185  1.5 -1.0 1.8027756 10.132139 19098.61 1884.954 438.8207 1111.548 6000
## 186  1.5 -0.5 1.5811388 10.250062 19209.43 1874.079 454.3214 1164.206 6000
## 187  1.5  0.0 1.5000000 10.293403 19250.00 1870.130 460.1090 1184.022 6000
## 188  1.5  0.5 1.5811388 10.250062 19209.43 1874.079 454.3214 1164.206 6000
## 189  1.5  1.0 1.8027756 10.132139 19098.61 1884.954 438.8207 1111.548 6000
## 190  1.5  1.5 2.1213203  9.963850 18939.34 1900.805 417.3163 1039.519 6000
## 205  2.0 -1.0 2.2360680  9.903573 18881.97 1906.581 409.7883 1014.592 6000
## 206  2.0 -0.5 2.0615528  9.995318 18969.22 1897.811 421.2827 1052.714 6000
## 207  2.0  0.0 2.0000000 10.027778 19000.00 1894.737 425.4004 1066.455 6000
## 208  2.0  0.5 2.0615528  9.995318 18969.22 1897.811 421.2827 1052.714 6000
## 209  2.0  1.0 2.2360680  9.903573 18881.97 1906.581 409.7883 1014.592 6000
##             n        nn
## 45   8.597343 0.2149336
## 46   8.879340 0.2219835
## 47   8.980675 0.2245169
## 48   8.879340 0.2219835
## 49   8.597343 0.2149336
## 64   8.781883 0.2195471
## 65   9.312075 0.2328019
## 66   9.696951 0.2424238
## 67   9.841219 0.2460305
## 68   9.696951 0.2424238
## 69   9.312075 0.2328019
## 70   8.781883 0.2195471
## 83   8.597343 0.2149336
## 84   9.312075 0.2328019
## 85   9.995748 0.2498937
## 86  10.545358 0.2636339
## 87  10.771497 0.2692874
## 88  10.545358 0.2636339
## 89   9.995748 0.2498937
## 90   9.312075 0.2328019
## 91   8.597343 0.2149336
## 103  8.879340 0.2219835
## 104  9.696951 0.2424238
## 105 10.545358 0.2636339
## 106 11.350680 0.2837670
## 107 11.776154 0.2944039
## 108 11.350680 0.2837670
## 109 10.545358 0.2636339
## 110  9.696951 0.2424238
## 111  8.879340 0.2219835
## 123  8.980675 0.2245169
## 124  9.841219 0.2460305
## 125 10.771497 0.2692874
## 126 11.776154 0.2944039
## 127 12.860082 0.3215021
## 128 11.776154 0.2944039
## 129 10.771497 0.2692874
## 130  9.841219 0.2460305
## 131  8.980675 0.2245169
## 143  8.879340 0.2219835
## 144  9.696951 0.2424238
## 145 10.545358 0.2636339
## 146 11.350680 0.2837670
## 147 11.776154 0.2944039
## 148 11.350680 0.2837670
## 149 10.545358 0.2636339
## 150  9.696951 0.2424238
## 151  8.879340 0.2219835
## 163  8.597343 0.2149336
## 164  9.312075 0.2328019
## 165  9.995748 0.2498937
## 166 10.545358 0.2636339
## 167 10.771497 0.2692874
## 168 10.545358 0.2636339
## 169  9.995748 0.2498937
## 170  9.312075 0.2328019
## 171  8.597343 0.2149336
## 184  8.781883 0.2195471
## 185  9.312075 0.2328019
## 186  9.696951 0.2424238
## 187  9.841219 0.2460305
## 188  9.696951 0.2424238
## 189  9.312075 0.2328019
## 190  8.781883 0.2195471
## 205  8.597343 0.2149336
## 206  8.879340 0.2219835
## 207  8.980675 0.2245169
## 208  8.879340 0.2219835
## 209  8.597343 0.2149336&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nrow(dfscm1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 69&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(dfscm1$n)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 675.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Amenitiy City Model


#new u,v

i &amp;lt;- 0
j &amp;lt;- 0
ii &amp;lt;- 1

while(i &amp;lt; 61){
  
  j &amp;lt;- 0
  while(j &amp;lt; 61){
  u[ii] &amp;lt;- i/5 - 6
  v[ii] &amp;lt;- j/5 - 6
  j &amp;lt;- j+1
  ii &amp;lt;- ii+1
  }
  
  i &amp;lt;- i +1
  
  }


#finding x for various u,v
x &amp;lt;- sqrt(u^2+v^2)

#finding distance to rail
z &amp;lt;- sqrt((u-d)^2)


#amentiy distribution
am &amp;lt;- 1 + ad*(exp(-ng*z))

#finding the price for various u,v
p &amp;lt;- (al^al*(1-al)^(1-al)*am^gm*(y-t*x)/V)^(1/al)


#optimal q
q &amp;lt;- al*(y-t*x)/p

#optimal g
g &amp;lt;- (1-al)*(y-t*x)

#optimal s
s &amp;lt;- (p/bt)^(1/(bt-1))

#optimal r
r &amp;lt;- p*s - s^(bt)

#population n s(floorspaceperacre/ floorspace per household * (size of square (sqmi)) * acres/sqmi * fraction of housing in area)
n &amp;lt;- s/q * (.2*.2) * 640 * .25 

nn &amp;lt;- s/q

dfuva &amp;lt;- data.frame(u,v,x,z,p,g,q,s,r,am,n,nn)
dfuva1 &amp;lt;- dfuva[(dfuva$r &amp;gt; ag),]
dfuva1[(dfuva1$v &amp;gt; 4),]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         u   v        x   z         p        g        q        s        r
## 1821 -0.2 4.2 4.204759 0.2 10.063511 17897.62 1778.467 429.9642 1081.737
## 1822 -0.2 4.4 4.404543 0.2  9.951489 17797.73 1788.449 415.7651 1034.370
## 1882  0.0 4.2 4.200000 0.0 10.324322 17900.00 1733.770 464.2677 1198.312
## 1883  0.0 4.4 4.400000 0.0 10.209289 17800.00 1743.510 448.9214 1145.792
## 1884  0.0 4.6 4.600000 0.0 10.094900 17700.00 1753.361 434.0001 1095.297
## 1885  0.0 4.8 4.800000 0.0  9.981156 17600.00 1763.323 419.4945 1046.760
## 1886  0.0 5.0 5.000000 0.0  9.868056 17500.00 1773.399 405.3951 1000.115
## 1943  0.2 4.2 4.204759 0.2 10.063511 17897.62 1778.467 429.9642 1081.737
## 1944  0.2 4.4 4.404543 0.2  9.951489 17797.73 1788.449 415.7651 1034.370
##            am        n        nn
## 1821 1.130997 1.547271 0.2417612
## 1822 1.130997 1.487824 0.2324725
## 1882 1.160000 1.713787 0.2677793
## 1883 1.160000 1.647881 0.2574813
## 1884 1.160000 1.584158 0.2475247
## 1885 1.160000 1.522560 0.2379000
## 1886 1.160000 1.463026 0.2285978
## 1943 1.130997 1.547271 0.2417612
## 1944 1.130997 1.487824 0.2324725&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nrow(dfuva1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 727&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(dfuva1$n)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1379.978&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Rail Model

#values for u,v,x, and z are the same as above



#convinence penalty for taking train
cf &amp;lt;- 1.1

#transportation distance rail traveled and travel to rail
zz &amp;lt;- z+abs(v)

#cost to travel by rail
tr &amp;lt;- 500

#rail and commute travel cost
rtc &amp;lt;- (tr*abs(v)+t*abs(u))

#optimal price per square foot


p &amp;lt;- (al^al*(1-al)^(1-al)*(y-rtc)/V)^(1/al)


#optimal q
q &amp;lt;- al*(y-(rtc))/p

#optimal g
g &amp;lt;- (1-al)*(rtc)

#optimal s
s &amp;lt;- (p/bt)^(1/(bt-1))

#optimal r
r &amp;lt;- p*s - s^(bt)

#population n s(floorspaceperacre/ floorspace per household * (size of square (sqmi)) * acres/sqmi * fraction of housing in area)
n &amp;lt;- s/q * (.2*.2) * 640 * .25 

nn &amp;lt;- s/q

#rail customers dataframe
dfr1 &amp;lt;- data.frame(u,v,x,z,zz,p,g,q,s,r,n,nn,rtc)

#removes all values for people more than 1.75 miles from the train
dfr1 &amp;lt;- dfr1[(dfr1$z &amp;lt;= 1.75),]
dfr1 &amp;lt;- dfr1[(dfr1$r &amp;gt; ag),]

#optimal price per square foot


p &amp;lt;- (al^al*(1-al)^(1-al)*(y-t*x)/V)^(1/al)


#optimal q
q &amp;lt;- al*(y-t*x)/p

#optimal g
g &amp;lt;- (1-al)*(y-t*x)

#optimal s
s &amp;lt;- (p/bt)^(1/(bt-1))

#optimal r
r &amp;lt;- p*s - s^(bt)

#population n s(floorspaceperacre/ floorspace (sqft) per household * (size of square (sqmi)) * acres/sqmi * fraction of housing in area)
n &amp;lt;- s/q * (.2*.2) * 640 * .25

nn &amp;lt;- s/q

rtc &amp;lt;- t*x

#non rail customers dataframe
dfr2 &amp;lt;- data.frame(u,v,x,z,zz,p,g,q,s,r,n,nn,rtc)


#removes all values within 1.75 of the train
dfr2 &amp;lt;- dfr2[(dfr2$z &amp;gt; 1.75),]
dfr2 &amp;lt;- dfr2[(dfr2$r &amp;gt; ag),]

dfuv &amp;lt;- rbind(dfr1,dfr2)


#getting rid of land rents less than land ag
dfuv1 &amp;lt;- dfuv[!(dfuv$r&amp;lt;ag),]

nrow(dfuv1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 577&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(dfuv1$n)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 899.1577&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#dfuv1[(dfuv1$u == 0),]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Creating All Plots

require(ggplot2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: ggplot2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;ggplot2&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(grid)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: grid&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(gridExtra)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: gridExtra&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(RColorBrewer)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: RColorBrewer&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(viridis)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: viridis&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;viridis&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: viridisLite&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#using s (housing area/acre)
p1&amp;lt;-ggplot(dfuv1, aes(x = u, y = v, color = s)) +
   geom_point(size = 1, shape = 19) +
  scale_color_viridis(option = &amp;#39;magma&amp;#39;, direction = -1) +
  lims(x=c(-3,3),y=c(-6,6)) +
  coord_fixed() +  
  theme_minimal() +
  geom_vline(xintercept = 0) + 
  geom_hline(yintercept = 0) +
  labs(title = &amp;#39;Housing Area/Acre: \n Rail Distance Model&amp;#39;)

#using q (housing sqft for area)
p2&amp;lt;-ggplot(dfuv1, aes(x = u, y = v, color = q)) +
   geom_point(size = 1, shape = 19) +
  scale_color_viridis(option = &amp;#39;inferno&amp;#39;) +
  #scale_color_gradientn(colors = rainbow(10)) +
  lims(x=c(-3,3),y=c(-6,6)) +
  coord_fixed() +  
  theme_minimal() +
  geom_vline(xintercept = 0) + 
  geom_hline(yintercept = 0) +
  labs(title = &amp;#39;Housing sqft / sqmi: \n Rail Distance Model&amp;#39;)


#using n transportation distance
p3&amp;lt;-ggplot(dfuv1, aes(x = u, y = v, color = n)) +
   geom_point(size = 1, shape = 19) +
  scale_color_viridis(direction = -1) +
  lims(x=c(-3,3),y=c(-6,6)) +
  coord_fixed() +  
  theme_minimal()+
  geom_vline(xintercept = 0) + 
  geom_hline(yintercept = 0) + 
  labs(title = &amp;#39;Population: \n Rail Distance Model&amp;#39;)

#using am transportation distance
p4&amp;lt;-ggplot(dfuva1, aes(x = u, y = v, color = am)) +
   geom_point(size = 1, shape = 17) +
  
  scale_color_gradientn(colors = rainbow(7)) +
  lims(x=c(-3,3),y=c(-6,6)) +
  coord_fixed() +  
  theme_minimal()+
  geom_vline(xintercept = 0) + 
  geom_hline(yintercept = 0) +
  labs(title = &amp;#39;Amenity Level: \n Amentity Model&amp;#39;)

#using population for am
p5&amp;lt;-ggplot(dfuva1, aes(x = u, y = v, color = n)) +
   geom_point(size = 1, shape = 17) +
  scale_color_viridis(direction = -1) +
   lims(x=c(-3,3),y=c(-6,6)) +
  coord_fixed() +  
  theme_minimal()+
  geom_vline(xintercept = 0) + 
  geom_hline(yintercept = 0) +
  labs(title = &amp;#39;Population: \n Amenity Model&amp;#39;)

#population for original 

p6&amp;lt;-ggplot(dfsc1, aes(x = u, y = v, color = n)) +
   geom_point(size = 1, shape = 11) +
  scale_color_gradientn(colors = rev(rainbow(10)))+
  lims(x=c(-25,25),y=c(-25,25)) +
  coord_fixed() +  
  theme_minimal()+
  geom_vline(xintercept = 0) + 
  geom_hline(yintercept = 0) +
  labs(title = &amp;#39;Population: \n Monocentric Model&amp;#39;)



p7&amp;lt;-ggplot(dfscm1, aes(x = u, y = v, color = n)) +
   geom_point(size = 2, shape = 7) +
  
  scale_color_viridis(direction = -1) +
  lims(x=c(-3,3),y=c(-6,6)) +
  coord_fixed() +  
  theme_minimal()+
  geom_vline(xintercept = 0) + 
  geom_hline(yintercept = 0) +
  labs(title = &amp;#39;Population: \n m-Monocentric Model&amp;#39;)



p8&amp;lt;-ggplot(dfuv1, aes(x = u, y = v, color = nn)) +
   geom_point(size = 1, shape = 19) +
  scale_color_viridis(direction = -1) +
  lims(x=c(-3,3),y=c(-6,6)) +
  coord_fixed() +  
  theme_minimal()+
  geom_vline(xintercept = 0) + 
  geom_hline(yintercept = 0) +
  labs(title = &amp;#39;House Density: \n Rail Distance Model&amp;#39;)

hd4&amp;lt;-ggplot(dfuv1, aes(x = u, y = v, color = nn)) +
   geom_point(size = 1, shape = 19) +
  scale_color_viridis(direction = -1) +
  lims(x=c(-3,3),y=c(-6,6)) +
  coord_fixed() +  
  theme_minimal()+
  geom_vline(xintercept = 0) + 
  geom_hline(yintercept = 0) +
  labs(title = &amp;#39;House Density: \n Rail Distance Model&amp;#39;)

hd3&amp;lt;-ggplot(dfuva1, aes(x = u, y = v, color = nn)) +
   geom_point(size = 1, shape = 17) +
  scale_color_viridis(direction = -1) +
  lims(x=c(-3,3),y=c(-6,6)) +
  coord_fixed() +  
  theme_minimal()+
  geom_vline(xintercept = 0) + 
  geom_hline(yintercept = 0) +
  labs(title = &amp;#39;House Density: \n Amenity Model&amp;#39;)

hd2&amp;lt;-ggplot(dfscm1, aes(x = u, y = v, color = nn)) +
   geom_point(size = 2, shape = 7) +
  scale_color_viridis(direction = -1) +
  lims(x=c(-3,3),y=c(-6,6)) +
  coord_fixed() +  
  theme_minimal()+
  geom_vline(xintercept = 0) + 
  geom_hline(yintercept = 0) +
  labs(title = &amp;#39;House Density: \n m-Monocentric Model&amp;#39;)


pr4&amp;lt;-ggplot(dfuv1, aes(x = u, y = v, color = p)) +
   geom_point(size = 1, shape = 19) +
  scale_color_viridis(option = &amp;#39;magma&amp;#39;, direction = -1) +
  lims(x=c(-3,3),y=c(-6,6)) +
  coord_fixed() +  
  theme_minimal() +
  geom_vline(xintercept = 0) + 
  geom_hline(yintercept = 0) +
  labs(title = &amp;#39;Housing Price: \n Rail Distance Model&amp;#39;)

pr3&amp;lt;-ggplot(dfuva1, aes(x = u, y = v, color = p)) +
   geom_point(size = 1, shape = 17) +
  scale_color_viridis(option = &amp;#39;magma&amp;#39;, direction = -1) +
  lims(x=c(-3,3),y=c(-6,6)) +
  coord_fixed() +  
  theme_minimal() +
  geom_vline(xintercept = 0) + 
  geom_hline(yintercept = 0) +
  labs(title = &amp;#39;House Price: \n Amenity Model&amp;#39;)

pr2&amp;lt;-ggplot(dfscm1, aes(x = u, y = v, color = p)) +
   geom_point(size = 2, shape = 7) +
  scale_color_viridis(option = &amp;#39;magma&amp;#39;, direction = -1) +
  lims(x=c(-3,3),y=c(-6,6)) +
  coord_fixed() +  
  theme_minimal() +
  geom_vline(xintercept = 0) + 
  geom_hline(yintercept = 0) +
  labs(title = &amp;#39;House Price: \n m-Monocentric Model&amp;#39;)


r4&amp;lt;-ggplot(dfuv1, aes(x = u, y = v, color = r)) +
   geom_point(size = 1, shape = 19) +
  scale_color_viridis(option = &amp;#39;magma&amp;#39;, direction = -1) +
  lims(x=c(-3,3),y=c(-6,6)) +
  coord_fixed() +  
  theme_minimal() +
  geom_vline(xintercept = 0) + 
  geom_hline(yintercept = 0) +
  labs(title = &amp;#39;Land Rent: \n Rail Distance Model&amp;#39;)

r3&amp;lt;-ggplot(dfuva1, aes(x = u, y = v, color = r)) +
   geom_point(size = 1, shape = 17) +
  scale_color_viridis(option = &amp;#39;magma&amp;#39;, direction = -1) +
  lims(x=c(-3,3),y=c(-6,6)) +
  coord_fixed() +  
  theme_minimal() +
  geom_vline(xintercept = 0) + 
  geom_hline(yintercept = 0) +
  labs(title = &amp;#39;Land Rent: \n Amenity Model&amp;#39;)

r2&amp;lt;-ggplot(dfscm1, aes(x = u, y = v, color = r)) +
   geom_point(size = 2, shape = 7) +
  scale_color_viridis(option = &amp;#39;magma&amp;#39;, direction = -1) +
  lims(x=c(-3,3),y=c(-6,6)) +
  coord_fixed() +  
  theme_minimal() +
  geom_vline(xintercept = 0) + 
  geom_hline(yintercept = 0) +
  labs(title = &amp;#39;Land Rent: \n m-Monocentric Model&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Displaying all graphs and Saving All Graphs




#Population Density Across Urban Areas
pop_den &amp;lt;- grid.arrange(p5,p3,p6,p7, ncol=2, nrow = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/Modeling_City_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Housing Density Across Urban Areas

house_den &amp;lt;- grid.arrange(hd4,hd3,hd2,ncol =3, nrow =1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/Modeling_City_files/figure-html/unnamed-chunk-9-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Housing Prices Across Urban Areas
price_grid &amp;lt;- grid.arrange(pr4,pr3,pr2, ncol =3, nrow =1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/Modeling_City_files/figure-html/unnamed-chunk-9-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Land Values across Urban Areas
lv_grid &amp;lt;- grid.arrange(r4,r3,r2,ncol =3, nrow =1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/Modeling_City_files/figure-html/unnamed-chunk-9-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#comparisons
comp_grid &amp;lt;- grid.arrange(p1,p2,p4,p7, ncol=2, nrow = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/Modeling_City_files/figure-html/unnamed-chunk-9-5.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggsave(filename = &amp;quot;pop_den.pdf&amp;quot;, pop_den)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Saving 7 x 5 in image&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggsave(filename = &amp;quot;house_den.pdf&amp;quot;, house_den)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Saving 7 x 5 in image&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggsave(filename = &amp;quot;price_grid.pdf&amp;quot;, price_grid)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Saving 7 x 5 in image&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggsave(filename = &amp;quot;lv_grid.pdf&amp;quot;, lv_grid)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Saving 7 x 5 in image&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggsave(filename = &amp;quot;comp_grid.pdf&amp;quot;, comp_grid)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Saving 7 x 5 in image&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(formattable)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;formattable&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Number of People who take rail vs. commute
rc &amp;lt;- nrow(dfr1)
cc &amp;lt;- nrow(dfr2)
rails &amp;lt;- c(0,0,.10,0)
rails[4] &amp;lt;- round(rc/(rc+cc),4)


#Transportation Expenditures

c_trans1 &amp;lt;- round(sum(dfsc1$x*1000),0)
c_trans2 &amp;lt;- round(sum(dfscm1$x*1000),0)
c_trans3 &amp;lt;- round(sum(dfuva1$x)*1000,0)
c_trans4 &amp;lt;- round(sum(dfuv1$rtc),0)

c_trans &amp;lt;- rbind(c_trans1,c_trans2,c_trans3,c_trans4)


#Transportation Energy Use and GHG Emissions 120.429 MBTU/ gal, cars average 27 mpg (EIA https://www.eia.gov/energyexplained/index.php?page=about_energy_units)
#light rail every 15 mins for 12.5 hours 50 times every day. About 1 cars going 30 mph. Goes 1125 miles a day. 
#64.642 MBTU/mile (http://www.rtd-fastracks.com/media/uploads/se/Energy_Tech_Report_0514_-_061814_vers.pdf)

e_trans1 &amp;lt;- sum(dfsc1$x*dfsc1$n*365*2*120.429/27)
e_trans2 &amp;lt;- sum(dfscm1$x*dfscm1$n*365*2*120.429/27)
e_trans3 &amp;lt;- sum(dfuva1$x*dfuva1$n*365*2*120.429/27)*.9 + 375*365*64.642
e_trans4 &amp;lt;- sum(dfr2$x*dfr2$n*365*2*120.429/27) + sum(dfr1$z*dfr1$n*365*2*120.429/27) + 375*365*64.642

e_trans &amp;lt;- rbind(e_trans1,e_trans2,e_trans3,e_trans4)

e_trans &amp;lt;- round(e_trans/1000,0)

# GHG of trans 8.887 kg CO2 / gallon

ghg_trans1 &amp;lt;- round(sum(dfsc1$x*dfsc1$n*365*2*8.887/(27*1000)),0)
ghg_trans2 &amp;lt;- round(sum(dfscm1$x*dfscm1$n*365*2*8.887/(27*1000)),0)
ghg_trans3 &amp;lt;- round((sum(dfuva1$x*dfuva1$n*365*2*8.887/(27*1000)))*.9 + 375*365*64.642/1000*((.85/3.41214/1000)/2204.6),0)
ghg_trans4 &amp;lt;- round(sum(dfr2$x*dfr2$n*365*2*8.887/(27*1000)) + sum(dfr1$z*dfr1$n*365*2*8.887/(27*1000)) + 375*365*64.642/1000*((.85/3.41214/1000)/2204.6),0)

tCO2_trans &amp;lt;- rbind(ghg_trans1,ghg_trans2,ghg_trans3,ghg_trans4)

#Residenital Energy Use and GHG Emissions 40 MBTU/sq ft (https://www.jchs.harvard.edu/blog/us-households-are-using-less-energy/)


e_res1 &amp;lt;- sum(dfsc1$q)*40 
e_res2 &amp;lt;- sum(dfscm1$q)*40 
e_res3 &amp;lt;- sum(dfuva1$q)*40 
e_res4 &amp;lt;- sum(dfuv1$q)*40 

e_res &amp;lt;- rbind(e_res1,e_res2,e_res3,e_res4)

e_res &amp;lt;- round(e_res/1000,0)

#GHG .85 lb CO2 / kwh https://data.austintexas.gov/Utilities-and-City-Services/Carbon-Intensity/hetr-8wqd
# 3.41214 MBTU/kwh 2204.6 metric tons per pound

tCO2e_res &amp;lt;- round(e_res*(.85/(3.41214/1000))/2204.6,0)

#Total energy and GHG
e_total &amp;lt;- e_res + e_trans

tCO2e_total &amp;lt;- tCO2e_res + tCO2_trans


#Total Land Area of the City

la1 &amp;lt;- nrow(dfsc1)*1
la2 &amp;lt;- nrow(dfscm1)*(.5*.5)
la3 &amp;lt;- nrow(dfuva1)*(.2*.2)
la4 &amp;lt;- nrow(dfuv1)*(.2*.2)

la &amp;lt;- rbind(la1,la2,la3,la4)


#Total Population


n1 &amp;lt;- round(sum(dfsc1$n),0)
n2 &amp;lt;- round(sum(dfscm1$n),0)
n3 &amp;lt;- round(sum(dfuva1$n),0)
n4 &amp;lt;- round(sum(dfuv1$n),0)

nt &amp;lt;- rbind(n1,n2,n3,n4)

#Utility
tU &amp;lt;- c(2700,6000,6000,6000)

s1 &amp;lt;- data.frame(rails, c_trans, e_trans, tCO2_trans, e_res, e_total, tCO2e_total, la, nt, tU)
rownames(s1) &amp;lt;- c(&amp;#39;Moncentric&amp;#39;, &amp;#39;Monocentric Modified&amp;#39;, &amp;#39;Amenity&amp;#39;,&amp;#39;Rail Distance&amp;#39;)
colnames(s1) &amp;lt;- c(&amp;#39;% rail travel&amp;#39;, &amp;#39;$_trans&amp;#39;, &amp;#39;MMBTU_trans&amp;#39;, &amp;#39;tCO2e_trans&amp;#39;, &amp;#39;MMBTU_res&amp;#39;, &amp;#39;MMBTU_total&amp;#39;, &amp;#39;tCO2e_total&amp;#39;, &amp;#39;City sqmi&amp;#39;, &amp;#39;Pop&amp;#39;, &amp;#39;Util&amp;#39; )


s2 &amp;lt;- s1[,2:8]/s1$Pop
colnames(s2) &amp;lt;- c(&amp;#39;$_trans/house&amp;#39;, &amp;#39;MMBTU_trans/house&amp;#39;, &amp;#39;tCO2e_trans/house&amp;#39;, &amp;#39;MMBTU_res/house&amp;#39;, &amp;#39;MMBTU_total/house&amp;#39;, &amp;#39;tCO2e_total&amp;#39;, &amp;#39;Acres/house&amp;#39; )
s2$`Acres/house` &amp;lt;- s2$`Acres/house`*640*.25
s2 &amp;lt;- round(s2,2)
s2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                      $_trans/house MMBTU_trans/house tCO2e_trans/house
## Moncentric                    6.07             25.71              1.90
## Monocentric Modified        159.06              4.88              0.36
## Amenity                    1133.73             12.26              0.43
## Rail Distance              1014.81             12.48              0.19
##                      MMBTU_res/house MMBTU_total/house tCO2e_total Acres/house
## Moncentric                      0.01             25.72        1.90        0.06
## Monocentric Modified            7.66             12.54        1.23        4.09
## Amenity                        37.40             49.66        4.66        3.37
## Rail Distance                  48.12             60.61        5.63        4.11&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;s1$`$_trans` &amp;lt;- prettyNum(s1$`$_trans`, big.mark = &amp;#39;,&amp;#39;)
s1$MMBTU_trans &amp;lt;- prettyNum(s1$MMBTU_trans, big.mark =&amp;#39;,&amp;#39;)
s1$MMBTU_res &amp;lt;- prettyNum(s1$MMBTU_res, big.mark =&amp;#39;,&amp;#39;)
s1$MMBTU_total &amp;lt;- prettyNum(s1$MMBTU_total, big.mark = &amp;#39;,&amp;#39;)
s1$`% rail travel` &amp;lt;- percent(s1$`% rail travel`, digits = 1)

s3 &amp;lt;- s1[,c(1,2,6,7,8,9,10)]

s3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                      % rail travel    $_trans MMBTU_total tCO2e_total City sqmi
## Moncentric                    0.0% 25,646,389 108,602,912     8015924   1669.00
## Monocentric Modified          0.0%    107,367       8,466         827     17.25
## Amenity                      10.0%  1,564,541      68,532        6428     29.08
## Rail Distance                88.6%    912,313      54,487        5064     23.08
##                          Pop Util
## Moncentric           4222601 2700
## Monocentric Modified     675 6000
## Amenity                 1380 6000
## Rail Distance            899 6000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Saving Files as pdfs

# pdf(&amp;quot;city_data.pdf&amp;quot;, height=2, width=8.5)
# grid.table(s3)
# dev.off()

# pdf(&amp;quot;per_capita_data.pdf&amp;quot;, height=2, width=13)
# grid.table(s2)
# dev.off()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Solving for q and g using non-linear solver

i &amp;lt;- 1

while(i &amp;lt;= 16){


fn &amp;lt;- function(j) {

    a &amp;lt;- j[1]^al *j[2]^(1-al)-V
    b &amp;lt;- y-t*x[i]-p[i]*j[1]-j[2]
    
    

    return(c(a,b))

}

result &amp;lt;- nleqslv(c(500,10000), fn)  
result$x[1] &amp;lt;- q[i]
result$x[2] &amp;lt;- g[i]

i &amp;lt;- i+1

}

data.frame(x,p,q,g)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##              x         p        q        g
## 1    8.4852814  6.897066 2284.647 15757.36
## 2    8.3450584  6.958579 2274.526 15827.47
## 3    8.2073138  7.019270 2264.672 15896.34
## 4    8.0721744  7.079070 2255.086 15963.91
## 5    7.9397733  7.137904 2245.773 16030.11
## 6    7.8102497  7.195695 2236.737 16094.88
## 7    7.6837491  7.252362 2227.981 16158.13
## 8    7.5604233  7.307820 2219.511 16219.79
## 9    7.4404301  7.361983 2211.331 16279.78
## 10   7.3239334  7.414759 2203.448 16338.03
## 11   7.2111026  7.466054 2195.865 16394.45
## 12   7.1021124  7.515771 2188.590 16448.94
## 13   6.9971423  7.563810 2181.629 16501.43
## 14   6.8963759  7.610069 2174.988 16551.81
## 15   6.8000000  7.654444 2168.675 16600.00
## 16   6.7082039  7.696831 2162.695 16645.90
## 17   6.6211781  7.737123 2157.056 16689.41
## 18   6.5391131  7.775215 2151.766 16730.44
## 19   6.4621978  7.811001 2146.831 16768.90
## 20   6.3906181  7.844379 2142.259 16804.69
## 21   6.3245553  7.875247 2138.056 16837.72
## 22   6.2641839  7.903509 2134.230 16867.91
## 23   6.2096699  7.929072 2130.787 16895.17
## 24   6.1611687  7.951851 2127.733 16919.42
## 25   6.1188234  7.971765 2125.074 16940.59
## 26   6.0827625  7.988743 2122.814 16958.62
## 27   6.0530984  8.002723 2120.959 16973.45
## 28   6.0299254  8.013653 2119.513 16985.04
## 29   6.0133186  8.021490 2118.477 16993.34
## 30   6.0033324  8.026204 2117.855 16998.33
## 31   6.0000000  8.027778 2117.647 17000.00
## 32   6.0033324  8.026204 2117.855 16998.33
## 33   6.0133186  8.021490 2118.477 16993.34
## 34   6.0299254  8.013653 2119.513 16985.04
## 35   6.0530984  8.002723 2120.959 16973.45
## 36   6.0827625  7.988743 2122.814 16958.62
## 37   6.1188234  7.971765 2125.074 16940.59
## 38   6.1611687  7.951851 2127.733 16919.42
## 39   6.2096699  7.929072 2130.787 16895.17
## 40   6.2641839  7.903509 2134.230 16867.91
## 41   6.3245553  7.875247 2138.056 16837.72
## 42   6.3906181  7.844379 2142.259 16804.69
## 43   6.4621978  7.811001 2146.831 16768.90
## 44   6.5391131  7.775215 2151.766 16730.44
## 45   6.6211781  7.737123 2157.056 16689.41
## 46   6.7082039  7.696831 2162.695 16645.90
## 47   6.8000000  7.654444 2168.675 16600.00
## 48   6.8963759  7.610069 2174.988 16551.81
## 49   6.9971423  7.563810 2181.629 16501.43
## 50   7.1021124  7.515771 2188.590 16448.94
## 51   7.2111026  7.466054 2195.865 16394.45
## 52   7.3239334  7.414759 2203.448 16338.03
## 53   7.4404301  7.361983 2211.331 16279.78
## 54   7.5604233  7.307820 2219.511 16219.79
## 55   7.6837491  7.252362 2227.981 16158.13
## 56   7.8102497  7.195695 2236.737 16094.88
## 57   7.9397733  7.137904 2245.773 16030.11
## 58   8.0721744  7.079070 2255.086 15963.91
## 59   8.2073138  7.019270 2264.672 15896.34
## 60   8.3450584  6.958579 2274.526 15827.47
## 61   8.4852814  6.897066 2284.647 15757.36
## 62   8.3450584  6.958579 2274.526 15827.47
## 63   8.2024387  7.021423 2264.325 15898.78
## 64   8.0622577  7.083468 2254.386 15968.87
## 65   7.9246451  7.144642 2244.714 16037.68
## 66   7.7897368  7.204868 2235.312 16105.13
## 67   7.6576759  7.264069 2226.185 16171.16
## 68   7.5286121  7.322160 2217.337 16235.69
## 69   7.4027022  7.379054 2208.772 16298.65
## 70   7.2801099  7.434661 2200.496 16359.95
## 71   7.1610055  7.488886 2192.515 16419.50
## 72   7.0455660  7.541630 2184.835 16477.22
## 73   6.9339743  7.592792 2177.462 16533.01
## 74   6.8264193  7.642267 2170.402 16586.79
## 75   6.7230945  7.689947 2163.663 16638.45
## 76   6.6241981  7.735723 2157.252 16687.90
## 77   6.5299311  7.779483 2151.176 16735.03
## 78   6.4404969  7.821113 2145.443 16779.75
## 79   6.3560994  7.860500 2140.061 16821.95
## 80   6.2769419  7.897532 2135.038 16861.53
## 81   6.2032250  7.932097 2130.381 16898.39
## 82   6.1351447  7.964086 2126.098 16932.43
## 83   6.0728906  7.993394 2122.197 16963.55
## 84   6.0166436  8.019920 2118.684 16991.68
## 85   5.9665736  8.043570 2115.567 17016.71
## 86   5.9228372  8.064257 2112.852 17038.58
## 87   5.8855756  8.081902 2110.544 17057.21
## 88   5.8549125  8.096438 2108.649 17072.54
## 89   5.8309519  8.107805 2107.170 17084.52
## 90   5.8137767  8.115957 2106.112 17093.11
## 91   5.8034473  8.120863 2105.475 17098.28
## 92   5.8000000  8.122500 2105.263 17100.00
## 93   5.8034473  8.120863 2105.475 17098.28
## 94   5.8137767  8.115957 2106.112 17093.11
## 95   5.8309519  8.107805 2107.170 17084.52
## 96   5.8549125  8.096438 2108.649 17072.54
## 97   5.8855756  8.081902 2110.544 17057.21
## 98   5.9228372  8.064257 2112.852 17038.58
## 99   5.9665736  8.043570 2115.567 17016.71
## 100  6.0166436  8.019920 2118.684 16991.68
## 101  6.0728906  7.993394 2122.197 16963.55
## 102  6.1351447  7.964086 2126.098 16932.43
## 103  6.2032250  7.932097 2130.381 16898.39
## 104  6.2769419  7.897532 2135.038 16861.53
## 105  6.3560994  7.860500 2140.061 16821.95
## 106  6.4404969  7.821113 2145.443 16779.75
## 107  6.5299311  7.779483 2151.176 16735.03
## 108  6.6241981  7.735723 2157.252 16687.90
## 109  6.7230945  7.689947 2163.663 16638.45
## 110  6.8264193  7.642267 2170.402 16586.79
## 111  6.9339743  7.592792 2177.462 16533.01
## 112  7.0455660  7.541630 2184.835 16477.22
## 113  7.1610055  7.488886 2192.515 16419.50
## 114  7.2801099  7.434661 2200.496 16359.95
## 115  7.4027022  7.379054 2208.772 16298.65
## 116  7.5286121  7.322160 2217.337 16235.69
## 117  7.6576759  7.264069 2226.185 16171.16
## 118  7.7897368  7.204868 2235.312 16105.13
## 119  7.9246451  7.144642 2244.714 16037.68
## 120  8.0622577  7.083468 2254.386 15968.87
## 121  8.2024387  7.021423 2264.325 15898.78
## 122  8.3450584  6.958579 2274.526 15827.47
## 123  8.2073138  7.019270 2264.672 15896.34
## 124  8.0622577  7.083468 2254.386 15968.87
## 125  7.9195959  7.146891 2244.361 16040.20
## 126  7.7794601  7.209467 2234.599 16110.27
## 127  7.6419893  7.271117 2225.106 16179.01
## 128  7.5073298  7.331761 2215.884 16246.34
## 129  7.3756356  7.391314 2206.940 16312.18
## 130  7.2470684  7.449684 2198.277 16376.47
## 131  7.1217975  7.506779 2189.901 16439.10
## 132  7.0000000  7.562500 2181.818 16500.00
## 133  6.8818602  7.616744 2174.035 16559.07
## 134  6.7675697  7.669406 2166.558 16616.22
## 135  6.6573268  7.720374 2159.395 16671.34
## 136  6.5513357  7.769536 2152.552 16724.33
## 137  6.4498062  7.816774 2146.038 16775.10
## 138  6.3529521  7.861971 2139.861 16823.52
## 139  6.2609903  7.905005 2134.028 16869.50
## 140  6.1741396  7.945756 2128.549 16912.93
## 141  6.0926185  7.984101 2123.431 16953.69
## 142  6.0166436  8.019920 2118.684 16991.68
## 143  5.9464275  8.053096 2114.316 17026.79
## 144  5.8821765  8.083513 2110.334 17058.91
## 145  5.8240879  8.111062 2106.747 17087.96
## 146  5.7723479  8.135640 2103.562 17113.83
## 147  5.7271284  8.157151 2100.787 17136.44
## 148  5.6885851  8.175508 2098.427 17155.71
## 149  5.6568542  8.190637 2096.488 17171.57
## 150  5.6320511  8.202472 2094.975 17183.97
## 151  5.6142675  8.210962 2093.892 17192.87
## 152  5.6035703  8.216072 2093.241 17198.21
## 153  5.6000000  8.217778 2093.023 17200.00
## 154  5.6035703  8.216072 2093.241 17198.21
## 155  5.6142675  8.210962 2093.892 17192.87
## 156  5.6320511  8.202472 2094.975 17183.97
## 157  5.6568542  8.190637 2096.488 17171.57
## 158  5.6885851  8.175508 2098.427 17155.71
## 159  5.7271284  8.157151 2100.787 17136.44
## 160  5.7723479  8.135640 2103.562 17113.83
## 161  5.8240879  8.111062 2106.747 17087.96
## 162  5.8821765  8.083513 2110.334 17058.91
## 163  5.9464275  8.053096 2114.316 17026.79
## 164  6.0166436  8.019920 2118.684 16991.68
## 165  6.0926185  7.984101 2123.431 16953.69
## 166  6.1741396  7.945756 2128.549 16912.93
## 167  6.2609903  7.905005 2134.028 16869.50
## 168  6.3529521  7.861971 2139.861 16823.52
## 169  6.4498062  7.816774 2146.038 16775.10
## 170  6.5513357  7.769536 2152.552 16724.33
## 171  6.6573268  7.720374 2159.395 16671.34
## 172  6.7675697  7.669406 2166.558 16616.22
## 173  6.8818602  7.616744 2174.035 16559.07
## 174  7.0000000  7.562500 2181.818 16500.00
## 175  7.1217975  7.506779 2189.901 16439.10
## 176  7.2470684  7.449684 2198.277 16376.47
## 177  7.3756356  7.391314 2206.940 16312.18
## 178  7.5073298  7.331761 2215.884 16246.34
## 179  7.6419893  7.271117 2225.106 16179.01
## 180  7.7794601  7.209467 2234.599 16110.27
## 181  7.9195959  7.146891 2244.361 16040.20
## 182  8.0622577  7.083468 2254.386 15968.87
## 183  8.2073138  7.019270 2264.672 15896.34
## 184  8.0721744  7.079070 2255.086 15963.91
## 185  7.9246451  7.144642 2244.714 16037.68
## 186  7.7794601  7.209467 2234.599 16110.27
## 187  7.6367532  7.273470 2224.746 16181.62
## 188  7.4966659  7.336574 2215.157 16251.67
## 189  7.3593478  7.398696 2205.838 16320.33
## 190  7.2249567  7.459746 2196.793 16387.52
## 191  7.0936591  7.519634 2188.028 16453.17
## 192  6.9656299  7.578261 2179.548 16517.19
## 193  6.8410526  7.635526 2171.360 16579.47
## 194  6.7201190  7.691323 2163.469 16639.94
## 195  6.6030296  7.745539 2155.884 16698.49
## 196  6.4899923  7.798060 2148.612 16755.00
## 197  6.3812225  7.848765 2141.660 16809.39
## 198  6.2769419  7.897532 2135.038 16861.53
## 199  6.1773781  7.944234 2128.753 16911.31
## 200  6.0827625  7.988743 2122.814 16958.62
## 201  5.9933296  8.030928 2117.232 17003.34
## 202  5.9093147  8.070659 2112.014 17045.34
## 203  5.8309519  8.107805 2107.170 17084.52
## 204  5.7584720  8.142238 2102.710 17120.76
## 205  5.6920998  8.173833 2098.642 17153.95
## 206  5.6320511  8.202472 2094.975 17183.97
## 207  5.5785303  8.228039 2091.718 17210.73
## 208  5.5317267  8.250430 2088.877 17234.14
## 209  5.4918121  8.269549 2086.461 17254.09
## 210  5.4589376  8.285312 2084.476 17270.53
## 211  5.4332311  8.297649 2082.925 17283.38
## 212  5.4147945  8.306503 2081.815 17292.60
## 213  5.4037024  8.311832 2081.148 17298.15
## 214  5.4000000  8.313611 2080.925 17300.00
## 215  5.4037024  8.311832 2081.148 17298.15
## 216  5.4147945  8.306503 2081.815 17292.60
## 217  5.4332311  8.297649 2082.925 17283.38
## 218  5.4589376  8.285312 2084.476 17270.53
## 219  5.4918121  8.269549 2086.461 17254.09
## 220  5.5317267  8.250430 2088.877 17234.14
## 221  5.5785303  8.228039 2091.718 17210.73
## 222  5.6320511  8.202472 2094.975 17183.97
## 223  5.6920998  8.173833 2098.642 17153.95
## 224  5.7584720  8.142238 2102.710 17120.76
## 225  5.8309519  8.107805 2107.170 17084.52
## 226  5.9093147  8.070659 2112.014 17045.34
## 227  5.9933296  8.030928 2117.232 17003.34
## 228  6.0827625  7.988743 2122.814 16958.62
## 229  6.1773781  7.944234 2128.753 16911.31
## 230  6.2769419  7.897532 2135.038 16861.53
## 231  6.3812225  7.848765 2141.660 16809.39
## 232  6.4899923  7.798060 2148.612 16755.00
## 233  6.6030296  7.745539 2155.884 16698.49
## 234  6.7201190  7.691323 2163.469 16639.94
## 235  6.8410526  7.635526 2171.360 16579.47
## 236  6.9656299  7.578261 2179.548 16517.19
## 237  7.0936591  7.519634 2188.028 16453.17
## 238  7.2249567  7.459746 2196.793 16387.52
## 239  7.3593478  7.398696 2205.838 16320.33
## 240  7.4966659  7.336574 2215.157 16251.67
## 241  7.6367532  7.273470 2224.746 16181.62
## 242  7.7794601  7.209467 2234.599 16110.27
## 243  7.9246451  7.144642 2244.714 16037.68
## 244  8.0721744  7.079070 2255.086 15963.91
## 245  7.9397733  7.137904 2245.773 16030.11
## 246  7.7897368  7.204868 2235.312 16105.13
## 247  7.6419893  7.271117 2225.106 16179.01
## 248  7.4966659  7.336574 2215.157 16251.67
## 249  7.3539105  7.401161 2205.471 16323.04
## 250  7.2138755  7.464791 2196.051 16393.06
## 251  7.0767224  7.527376 2186.903 16461.64
## 252  6.9426220  7.588821 2178.031 16528.69
## 253  6.8117545  7.649025 2169.443 16594.12
## 254  6.6843100  7.707883 2161.144 16657.85
## 255  6.5604878  7.765285 2153.141 16719.76
## 256  6.4404969  7.821113 2145.443 16779.75
## 257  6.3245553  7.875247 2138.056 16837.72
## 258  6.2128898  7.927561 2130.990 16893.56
## 259  6.1057350  7.977925 2124.253 16947.13
## 260  6.0033324  8.026204 2117.855 16998.33
## 261  5.9059292  8.072262 2111.804 17047.04
## 262  5.8137767  8.115957 2106.112 17093.11
## 263  5.7271284  8.157151 2100.787 17136.44
## 264  5.6462377  8.195701 2095.840 17176.88
## 265  5.5713553  8.231469 2091.282 17214.32
## 266  5.5027266  8.264319 2087.121 17248.64
## 267  5.4405882  8.294118 2083.369 17279.71
## 268  5.3851648  8.320742 2080.033 17307.42
## 269  5.3366656  8.344075 2077.123 17331.67
## 270  5.2952809  8.364011 2074.646 17352.36
## 271  5.2611786  8.380456 2072.609 17369.41
## 272  5.2345009  8.393333 2071.019 17382.75
## 273  5.2153619  8.402577 2069.879 17392.32
## 274  5.2038447  8.408142 2069.194 17398.08
## 275  5.2000000  8.410000 2068.966 17400.00
## 276  5.2038447  8.408142 2069.194 17398.08
## 277  5.2153619  8.402577 2069.879 17392.32
## 278  5.2345009  8.393333 2071.019 17382.75
## 279  5.2611786  8.380456 2072.609 17369.41
## 280  5.2952809  8.364011 2074.646 17352.36
## 281  5.3366656  8.344075 2077.123 17331.67
## 282  5.3851648  8.320742 2080.033 17307.42
## 283  5.4405882  8.294118 2083.369 17279.71
## 284  5.5027266  8.264319 2087.121 17248.64
## 285  5.5713553  8.231469 2091.282 17214.32
## 286  5.6462377  8.195701 2095.840 17176.88
## 287  5.7271284  8.157151 2100.787 17136.44
## 288  5.8137767  8.115957 2106.112 17093.11
## 289  5.9059292  8.072262 2111.804 17047.04
## 290  6.0033324  8.026204 2117.855 16998.33
## 291  6.1057350  7.977925 2124.253 16947.13
## 292  6.2128898  7.927561 2130.990 16893.56
## 293  6.3245553  7.875247 2138.056 16837.72
## 294  6.4404969  7.821113 2145.443 16779.75
## 295  6.5604878  7.765285 2153.141 16719.76
## 296  6.6843100  7.707883 2161.144 16657.85
## 297  6.8117545  7.649025 2169.443 16594.12
## 298  6.9426220  7.588821 2178.031 16528.69
## 299  7.0767224  7.527376 2186.903 16461.64
## 300  7.2138755  7.464791 2196.051 16393.06
## 301  7.3539105  7.401161 2205.471 16323.04
## 302  7.4966659  7.336574 2215.157 16251.67
## 303  7.6419893  7.271117 2225.106 16179.01
## 304  7.7897368  7.204868 2235.312 16105.13
## 305  7.9397733  7.137904 2245.773 16030.11
## 306  7.8102497  7.195695 2236.737 16094.88
## 307  7.6576759  7.264069 2226.185 16171.16
## 308  7.5073298  7.331761 2215.884 16246.34
## 309  7.3593478  7.398696 2205.838 16320.33
## 310  7.2138755  7.464791 2196.051 16393.06
## 311  7.0710678  7.529962 2186.527 16464.47
## 312  6.9310894  7.594117 2177.272 16534.46
## 313  6.7941151  7.657158 2168.290 16602.94
## 314  6.6603303  7.718983 2159.589 16669.83
## 315  6.5299311  7.779483 2151.176 16735.03
## 316  6.4031242  7.838542 2143.056 16798.44
## 317  6.2801274  7.896040 2135.239 16859.94
## 318  6.1611687  7.951851 2127.733 16919.42
## 319  6.0464866  8.005841 2120.546 16976.76
## 320  5.9363288  8.057873 2113.689 17031.84
## 321  5.8309519  8.107805 2107.170 17084.52
## 322  5.7306195  8.155489 2101.001 17134.69
## 323  5.6356011  8.200777 2095.192 17182.20
## 324  5.5461698  8.243517 2089.753 17226.92
## 325  5.4626001  8.283555 2084.697 17268.70
## 326  5.3851648  8.320742 2080.033 17307.42
## 327  5.3141321  8.354927 2075.773 17342.93
## 328  5.2497619  8.385966 2071.928 17375.12
## 329  5.1923020  8.413721 2068.508 17403.85
## 330  5.1419841  8.438064 2065.522 17429.01
## 331  5.0990195  8.458878 2062.979 17450.49
## 332  5.0635956  8.476058 2060.888 17468.20
## 333  5.0358713  8.489516 2059.253 17482.06
## 334  5.0159745  8.499181 2058.082 17492.01
## 335  5.0039984  8.505001 2057.378 17498.00
## 336  5.0000000  8.506944 2057.143 17500.00
## 337  5.0039984  8.505001 2057.378 17498.00
## 338  5.0159745  8.499181 2058.082 17492.01
## 339  5.0358713  8.489516 2059.253 17482.06
## 340  5.0635956  8.476058 2060.888 17468.20
## 341  5.0990195  8.458878 2062.979 17450.49
## 342  5.1419841  8.438064 2065.522 17429.01
## 343  5.1923020  8.413721 2068.508 17403.85
## 344  5.2497619  8.385966 2071.928 17375.12
## 345  5.3141321  8.354927 2075.773 17342.93
## 346  5.3851648  8.320742 2080.033 17307.42
## 347  5.4626001  8.283555 2084.697 17268.70
## 348  5.5461698  8.243517 2089.753 17226.92
## 349  5.6356011  8.200777 2095.192 17182.20
## 350  5.7306195  8.155489 2101.001 17134.69
## 351  5.8309519  8.107805 2107.170 17084.52
## 352  5.9363288  8.057873 2113.689 17031.84
## 353  6.0464866  8.005841 2120.546 16976.76
## 354  6.1611687  7.951851 2127.733 16919.42
## 355  6.2801274  7.896040 2135.239 16859.94
## 356  6.4031242  7.838542 2143.056 16798.44
## 357  6.5299311  7.779483 2151.176 16735.03
## 358  6.6603303  7.718983 2159.589 16669.83
## 359  6.7941151  7.657158 2168.290 16602.94
## 360  6.9310894  7.594117 2177.272 16534.46
## 361  7.0710678  7.529962 2186.527 16464.47
## 362  7.2138755  7.464791 2196.051 16393.06
## 363  7.3593478  7.398696 2205.838 16320.33
## 364  7.5073298  7.331761 2215.884 16246.34
## 365  7.6576759  7.264069 2226.185 16171.16
## 366  7.8102497  7.195695 2236.737 16094.88
## 367  7.6837491  7.252362 2227.981 16158.13
## 368  7.5286121  7.322160 2217.337 16235.69
## 369  7.3756356  7.391314 2206.940 16312.18
## 370  7.2249567  7.459746 2196.793 16387.52
## 371  7.0767224  7.527376 2186.903 16461.64
## 372  6.9310894  7.594117 2177.272 16534.46
## 373  6.7882251  7.659875 2167.906 16605.89
## 374  6.6483081  7.724551 2158.811 16675.85
## 375  6.5115282  7.788040 2149.994 16744.24
## 376  6.3780875  7.850229 2141.461 16810.96
## 377  6.2481997  7.911000 2133.220 16875.90
## 378  6.1220911  7.970227 2125.279 16938.95
## 379  6.0000000  8.027778 2117.647 17000.00
## 380  5.8821765  8.083513 2110.334 17058.91
## 381  5.7688820  8.137288 2103.349 17115.56
## 382  5.6603887  8.188951 2096.704 17169.81
## 383  5.5569776  8.238346 2090.409 17221.51
## 384  5.4589376  8.285312 2084.476 17270.53
## 385  5.3665631  8.329687 2078.916 17316.72
## 386  5.2801515  8.371305 2073.742 17359.92
## 387  5.2000000  8.410000 2068.966 17400.00
## 388  5.1264022  8.445610 2064.599 17436.80
## 389  5.0596443  8.477975 2060.654 17470.18
## 390  5.0000000  8.506944 2057.143 17500.00
## 391  4.9477268  8.532374 2054.075 17526.14
## 392  4.9030603  8.554133 2051.461 17548.47
## 393  4.8662100  8.572106 2049.309 17566.89
## 394  4.8373546  8.586192 2047.628 17581.32
## 395  4.8166378  8.596312 2046.422 17591.68
## 396  4.8041649  8.602408 2045.697 17597.92
## 397  4.8000000  8.604444 2045.455 17600.00
## 398  4.8041649  8.602408 2045.697 17597.92
## 399  4.8166378  8.596312 2046.422 17591.68
## 400  4.8373546  8.586192 2047.628 17581.32
## 401  4.8662100  8.572106 2049.309 17566.89
## 402  4.9030603  8.554133 2051.461 17548.47
## 403  4.9477268  8.532374 2054.075 17526.14
## 404  5.0000000  8.506944 2057.143 17500.00
## 405  5.0596443  8.477975 2060.654 17470.18
## 406  5.1264022  8.445610 2064.599 17436.80
## 407  5.2000000  8.410000 2068.966 17400.00
## 408  5.2801515  8.371305 2073.742 17359.92
## 409  5.3665631  8.329687 2078.916 17316.72
## 410  5.4589376  8.285312 2084.476 17270.53
## 411  5.5569776  8.238346 2090.409 17221.51
## 412  5.6603887  8.188951 2096.704 17169.81
## 413  5.7688820  8.137288 2103.349 17115.56
## 414  5.8821765  8.083513 2110.334 17058.91
## 415  6.0000000  8.027778 2117.647 17000.00
## 416  6.1220911  7.970227 2125.279 16938.95
## 417  6.2481997  7.911000 2133.220 16875.90
## 418  6.3780875  7.850229 2141.461 16810.96
## 419  6.5115282  7.788040 2149.994 16744.24
## 420  6.6483081  7.724551 2158.811 16675.85
## 421  6.7882251  7.659875 2167.906 16605.89
## 422  6.9310894  7.594117 2177.272 16534.46
## 423  7.0767224  7.527376 2186.903 16461.64
## 424  7.2249567  7.459746 2196.793 16387.52
## 425  7.3756356  7.391314 2206.940 16312.18
## 426  7.5286121  7.322160 2217.337 16235.69
## 427  7.6837491  7.252362 2227.981 16158.13
## 428  7.5604233  7.307820 2219.511 16219.79
## 429  7.4027022  7.379054 2208.772 16298.65
## 430  7.2470684  7.449684 2198.277 16376.47
## 431  7.0936591  7.519634 2188.028 16453.17
## 432  6.9426220  7.588821 2178.031 16528.69
## 433  6.7941151  7.657158 2168.290 16602.94
## 434  6.6483081  7.724551 2158.811 16675.85
## 435  6.5053824  7.790899 2149.599 16747.31
## 436  6.3655322  7.856093 2140.661 16817.23
## 437  6.2289646  7.920020 2132.005 16885.52
## 438  6.0959003  7.982555 2123.637 16952.05
## 439  5.9665736  8.043570 2115.567 17016.71
## 440  5.8412327  8.102926 2107.804 17079.38
## 441  5.7201399  8.160478 2100.359 17139.93
## 442  5.6035703  8.216072 2093.241 17198.21
## 443  5.4918121  8.269549 2086.461 17254.09
## 444  5.3851648  8.320742 2080.033 17307.42
## 445  5.2839379  8.369479 2073.968 17358.03
## 446  5.1884487  8.415584 2068.279 17405.78
## 447  5.0990195  8.458878 2062.979 17450.49
## 448  5.0159745  8.499181 2058.082 17492.01
## 449  4.9396356  8.536314 2053.601 17530.18
## 450  4.8703183  8.570101 2049.549 17564.84
## 451  4.8083261  8.600374 2045.938 17595.84
## 452  4.7539457  8.626975 2042.782 17623.03
## 453  4.7074409  8.649755 2040.090 17646.28
## 454  4.6690470  8.668585 2037.873 17665.48
## 455  4.6389654  8.683353 2036.140 17680.52
## 456  4.6173586  8.693967 2034.896 17691.32
## 457  4.6043458  8.700363 2034.148 17697.83
## 458  4.6000000  8.702500 2033.898 17700.00
## 459  4.6043458  8.700363 2034.148 17697.83
## 460  4.6173586  8.693967 2034.896 17691.32
## 461  4.6389654  8.683353 2036.140 17680.52
## 462  4.6690470  8.668585 2037.873 17665.48
## 463  4.7074409  8.649755 2040.090 17646.28
## 464  4.7539457  8.626975 2042.782 17623.03
## 465  4.8083261  8.600374 2045.938 17595.84
## 466  4.8703183  8.570101 2049.549 17564.84
## 467  4.9396356  8.536314 2053.601 17530.18
## 468  5.0159745  8.499181 2058.082 17492.01
## 469  5.0990195  8.458878 2062.979 17450.49
## 470  5.1884487  8.415584 2068.279 17405.78
## 471  5.2839379  8.369479 2073.968 17358.03
## 472  5.3851648  8.320742 2080.033 17307.42
## 473  5.4918121  8.269549 2086.461 17254.09
## 474  5.6035703  8.216072 2093.241 17198.21
## 475  5.7201399  8.160478 2100.359 17139.93
## 476  5.8412327  8.102926 2107.804 17079.38
## 477  5.9665736  8.043570 2115.567 17016.71
## 478  6.0959003  7.982555 2123.637 16952.05
## 479  6.2289646  7.920020 2132.005 16885.52
## 480  6.3655322  7.856093 2140.661 16817.23
## 481  6.5053824  7.790899 2149.599 16747.31
## 482  6.6483081  7.724551 2158.811 16675.85
## 483  6.7941151  7.657158 2168.290 16602.94
## 484  6.9426220  7.588821 2178.031 16528.69
## 485  7.0936591  7.519634 2188.028 16453.17
## 486  7.2470684  7.449684 2198.277 16376.47
## 487  7.4027022  7.379054 2208.772 16298.65
## 488  7.5604233  7.307820 2219.511 16219.79
## 489  7.4404301  7.361983 2211.331 16279.78
## 490  7.2801099  7.434661 2200.496 16359.95
## 491  7.1217975  7.506779 2189.901 16439.10
## 492  6.9656299  7.578261 2179.548 16517.19
## 493  6.8117545  7.649025 2169.443 16594.12
## 494  6.6603303  7.718983 2159.589 16669.83
## 495  6.5115282  7.788040 2149.994 16744.24
## 496  6.3655322  7.856093 2140.661 16817.23
## 497  6.2225397  7.923034 2131.599 16888.73
## 498  6.0827625  7.988743 2122.814 16958.62
## 499  5.9464275  8.053096 2114.316 17026.79
## 500  5.8137767  8.115957 2106.112 17093.11
## 501  5.6850682  8.177184 2098.212 17157.47
## 502  5.5605755  8.236625 2090.627 17219.71
## 503  5.4405882  8.294118 2083.369 17279.71
## 504  5.3254108  8.349494 2076.449 17337.29
## 505  5.2153619  8.402577 2069.879 17392.32
## 506  5.1107729  8.453182 2063.674 17444.61
## 507  5.0119856  8.501119 2057.848 17494.01
## 508  4.9193496  8.546195 2052.413 17540.33
## 509  4.8332184  8.588212 2047.387 17583.39
## 510  4.7539457  8.626975 2042.782 17623.03
## 511  4.6818800  8.662289 2038.614 17659.06
## 512  4.6173586  8.693967 2034.896 17691.32
## 513  4.5607017  8.721832 2031.643 17719.65
## 514  4.5122057  8.745719 2028.867 17743.90
## 515  4.4721360  8.765480 2026.578 17763.93
## 516  4.4407207  8.780989 2024.788 17779.64
## 517  4.4181444  8.792142 2023.503 17790.93
## 518  4.4045431  8.798865 2022.730 17797.73
## 519  4.4000000  8.801111 2022.472 17800.00
## 520  4.4045431  8.798865 2022.730 17797.73
## 521  4.4181444  8.792142 2023.503 17790.93
## 522  4.4407207  8.780989 2024.788 17779.64
## 523  4.4721360  8.765480 2026.578 17763.93
## 524  4.5122057  8.745719 2028.867 17743.90
## 525  4.5607017  8.721832 2031.643 17719.65
## 526  4.6173586  8.693967 2034.896 17691.32
## 527  4.6818800  8.662289 2038.614 17659.06
## 528  4.7539457  8.626975 2042.782 17623.03
## 529  4.8332184  8.588212 2047.387 17583.39
## 530  4.9193496  8.546195 2052.413 17540.33
## 531  5.0119856  8.501119 2057.848 17494.01
## 532  5.1107729  8.453182 2063.674 17444.61
## 533  5.2153619  8.402577 2069.879 17392.32
## 534  5.3254108  8.349494 2076.449 17337.29
## 535  5.4405882  8.294118 2083.369 17279.71
## 536  5.5605755  8.236625 2090.627 17219.71
## 537  5.6850682  8.177184 2098.212 17157.47
## 538  5.8137767  8.115957 2106.112 17093.11
## 539  5.9464275  8.053096 2114.316 17026.79
## 540  6.0827625  7.988743 2122.814 16958.62
## 541  6.2225397  7.923034 2131.599 16888.73
## 542  6.3655322  7.856093 2140.661 16817.23
## 543  6.5115282  7.788040 2149.994 16744.24
## 544  6.6603303  7.718983 2159.589 16669.83
## 545  6.8117545  7.649025 2169.443 16594.12
## 546  6.9656299  7.578261 2179.548 16517.19
## 547  7.1217975  7.506779 2189.901 16439.10
## 548  7.2801099  7.434661 2200.496 16359.95
## 549  7.4404301  7.361983 2211.331 16279.78
## 550  7.3239334  7.414759 2203.448 16338.03
## 551  7.1610055  7.488886 2192.515 16419.50
## 552  7.0000000  7.562500 2181.818 16500.00
## 553  6.8410526  7.635526 2171.360 16579.47
## 554  6.6843100  7.707883 2161.144 16657.85
## 555  6.5299311  7.779483 2151.176 16735.03
## 556  6.3780875  7.850229 2141.461 16810.96
## 557  6.2289646  7.920020 2132.005 16885.52
## 558  6.0827625  7.988743 2122.814 16958.62
## 559  5.9396970  8.056279 2113.898 17030.15
## 560  5.8000000  8.122500 2105.263 17100.00
## 561  5.6639209  8.187266 2096.920 17168.04
## 562  5.5317267  8.250430 2088.877 17234.14
## 563  5.4037024  8.311832 2081.148 17298.15
## 564  5.2801515  8.371305 2073.742 17359.92
## 565  5.1613952  8.428669 2066.673 17419.30
## 566  5.0477718  8.483738 2059.955 17476.11
## 567  4.9396356  8.536314 2053.601 17530.18
## 568  4.8373546  8.586192 2047.628 17581.32
## 569  4.7413078  8.633162 2042.050 17629.35
## 570  4.6518813  8.677010 2036.884 17674.06
## 571  4.5694639  8.717520 2032.145 17715.27
## 572  4.4944410  8.754477 2027.851 17752.78
## 573  4.4271887  8.787673 2024.018 17786.41
## 574  4.3680659  8.816908 2020.659 17815.97
## 575  4.3174066  8.841996 2017.791 17841.30
## 576  4.2755117  8.862771 2015.424 17862.24
## 577  4.2426407  8.879089 2013.572 17878.68
## 578  4.2190046  8.890831 2012.241 17890.50
## 579  4.2047592  8.897912 2011.441 17897.62
## 580  4.2000000  8.900278 2011.173 17900.00
## 581  4.2047592  8.897912 2011.441 17897.62
## 582  4.2190046  8.890831 2012.241 17890.50
## 583  4.2426407  8.879089 2013.572 17878.68
## 584  4.2755117  8.862771 2015.424 17862.24
## 585  4.3174066  8.841996 2017.791 17841.30
## 586  4.3680659  8.816908 2020.659 17815.97
## 587  4.4271887  8.787673 2024.018 17786.41
## 588  4.4944410  8.754477 2027.851 17752.78
## 589  4.5694639  8.717520 2032.145 17715.27
## 590  4.6518813  8.677010 2036.884 17674.06
## 591  4.7413078  8.633162 2042.050 17629.35
## 592  4.8373546  8.586192 2047.628 17581.32
## 593  4.9396356  8.536314 2053.601 17530.18
## 594  5.0477718  8.483738 2059.955 17476.11
## 595  5.1613952  8.428669 2066.673 17419.30
## 596  5.2801515  8.371305 2073.742 17359.92
## 597  5.4037024  8.311832 2081.148 17298.15
## 598  5.5317267  8.250430 2088.877 17234.14
## 599  5.6639209  8.187266 2096.920 17168.04
## 600  5.8000000  8.122500 2105.263 17100.00
## 601  5.9396970  8.056279 2113.898 17030.15
## 602  6.0827625  7.988743 2122.814 16958.62
## 603  6.2289646  7.920020 2132.005 16885.52
## 604  6.3780875  7.850229 2141.461 16810.96
## 605  6.5299311  7.779483 2151.176 16735.03
## 606  6.6843100  7.707883 2161.144 16657.85
## 607  6.8410526  7.635526 2171.360 16579.47
## 608  7.0000000  7.562500 2181.818 16500.00
## 609  7.1610055  7.488886 2192.515 16419.50
## 610  7.3239334  7.414759 2203.448 16338.03
## 611  7.2111026  7.466054 2195.865 16394.45
## 612  7.0455660  7.541630 2184.835 16477.22
## 613  6.8818602  7.616744 2174.035 16559.07
## 614  6.7201190  7.691323 2163.469 16639.94
## 615  6.5604878  7.765285 2153.141 16719.76
## 616  6.4031242  7.838542 2143.056 16798.44
## 617  6.2481997  7.911000 2133.220 16875.90
## 618  6.0959003  7.982555 2123.637 16952.05
## 619  5.9464275  8.053096 2114.316 17026.79
## 620  5.8000000  8.122500 2105.263 17100.00
## 621  5.6568542  8.190637 2096.488 17171.57
## 622  5.5172457  8.257364 2088.000 17241.38
## 623  5.3814496  8.322528 2079.810 17309.28
## 624  5.2497619  8.385966 2071.928 17375.12
## 625  5.1224994  8.447500 2064.368 17438.75
## 626  5.0000000  8.506944 2057.143 17500.00
## 627  4.8826222  8.564099 2050.267 17558.69
## 628  4.7707442  8.618753 2043.756 17614.63
## 629  4.6647615  8.670688 2037.626 17667.62
## 630  4.5650849  8.719675 2031.894 17717.46
## 631  4.4721360  8.765480 2026.578 17763.93
## 632  4.3863424  8.807865 2021.696 17806.83
## 633  4.3081318  8.846593 2017.266 17845.93
## 634  4.2379240  8.881431 2013.306 17881.04
## 635  4.1761226  8.912154 2009.833 17911.94
## 636  4.1231056  8.938552 2006.863 17938.45
## 637  4.0792156  8.960436 2004.411 17960.39
## 638  4.0447497  8.977639 2002.489 17977.63
## 639  4.0199502  8.990028 2001.109 17990.02
## 640  4.0049969  8.997502 2000.278 17997.50
## 641  4.0000000  9.000000 2000.000 18000.00
## 642  4.0049969  8.997502 2000.278 17997.50
## 643  4.0199502  8.990028 2001.109 17990.02
## 644  4.0447497  8.977639 2002.489 17977.63
## 645  4.0792156  8.960436 2004.411 17960.39
## 646  4.1231056  8.938552 2006.863 17938.45
## 647  4.1761226  8.912154 2009.833 17911.94
## 648  4.2379240  8.881431 2013.306 17881.04
## 649  4.3081318  8.846593 2017.266 17845.93
## 650  4.3863424  8.807865 2021.696 17806.83
## 651  4.4721360  8.765480 2026.578 17763.93
## 652  4.5650849  8.719675 2031.894 17717.46
## 653  4.6647615  8.670688 2037.626 17667.62
## 654  4.7707442  8.618753 2043.756 17614.63
## 655  4.8826222  8.564099 2050.267 17558.69
## 656  5.0000000  8.506944 2057.143 17500.00
## 657  5.1224994  8.447500 2064.368 17438.75
## 658  5.2497619  8.385966 2071.928 17375.12
## 659  5.3814496  8.322528 2079.810 17309.28
## 660  5.5172457  8.257364 2088.000 17241.38
## 661  5.6568542  8.190637 2096.488 17171.57
## 662  5.8000000  8.122500 2105.263 17100.00
## 663  5.9464275  8.053096 2114.316 17026.79
## 664  6.0959003  7.982555 2123.637 16952.05
## 665  6.2481997  7.911000 2133.220 16875.90
## 666  6.4031242  7.838542 2143.056 16798.44
## 667  6.5604878  7.765285 2153.141 16719.76
## 668  6.7201190  7.691323 2163.469 16639.94
## 669  6.8818602  7.616744 2174.035 16559.07
## 670  7.0455660  7.541630 2184.835 16477.22
## 671  7.2111026  7.466054 2195.865 16394.45
## 672  7.1021124  7.515771 2188.590 16448.94
## 673  6.9339743  7.592792 2177.462 16533.01
## 674  6.7675697  7.669406 2166.558 16616.22
## 675  6.6030296  7.745539 2155.884 16698.49
## 676  6.4404969  7.821113 2145.443 16779.75
## 677  6.2801274  7.896040 2135.239 16859.94
## 678  6.1220911  7.970227 2125.279 16938.95
## 679  5.9665736  8.043570 2115.567 17016.71
## 680  5.8137767  8.115957 2106.112 17093.11
## 681  5.6639209  8.187266 2096.920 17168.04
## 682  5.5172457  8.257364 2088.000 17241.38
## 683  5.3740115  8.326105 2079.363 17312.99
## 684  5.2345009  8.393333 2071.019 17382.75
## 685  5.0990195  8.458878 2062.979 17450.49
## 686  4.9678969  8.522557 2055.258 17516.05
## 687  4.8414874  8.584174 2047.868 17579.26
## 688  4.7201695  8.643517 2040.826 17639.92
## 689  4.6043458  8.700363 2034.148 17697.83
## 690  4.4944410  8.754477 2027.851 17752.78
## 691  4.3908997  8.805611 2021.955 17804.55
## 692  4.2941821  8.853510 2016.478 17852.91
## 693  4.2047592  8.897912 2011.441 17897.62
## 694  4.1231056  8.938552 2006.863 17938.45
## 695  4.0496913  8.975171 2002.764 17975.15
## 696  3.9849718  9.007516 1999.165 18007.51
## 697  3.9293765  9.035346 1996.084 18035.31
## 698  3.8832976  9.058446 1993.537 18058.35
## 699  3.8470768  9.076624 1991.540 18076.46
## 700  3.8209946  9.089725 1990.104 18089.50
## 701  3.8052595  9.097634 1989.239 18097.37
## 702  3.8000000  9.100278 1988.950 18100.00
## 703  3.8052595  9.097634 1989.239 18097.37
## 704  3.8209946  9.089725 1990.104 18089.50
## 705  3.8470768  9.076624 1991.540 18076.46
## 706  3.8832976  9.058446 1993.537 18058.35
## 707  3.9293765  9.035346 1996.084 18035.31
## 708  3.9849718  9.007516 1999.165 18007.51
## 709  4.0496913  8.975171 2002.764 17975.15
## 710  4.1231056  8.938552 2006.863 17938.45
## 711  4.2047592  8.897912 2011.441 17897.62
## 712  4.2941821  8.853510 2016.478 17852.91
## 713  4.3908997  8.805611 2021.955 17804.55
## 714  4.4944410  8.754477 2027.851 17752.78
## 715  4.6043458  8.700363 2034.148 17697.83
## 716  4.7201695  8.643517 2040.826 17639.92
## 717  4.8414874  8.584174 2047.868 17579.26
## 718  4.9678969  8.522557 2055.258 17516.05
## 719  5.0990195  8.458878 2062.979 17450.49
## 720  5.2345009  8.393333 2071.019 17382.75
## 721  5.3740115  8.326105 2079.363 17312.99
## 722  5.5172457  8.257364 2088.000 17241.38
## 723  5.6639209  8.187266 2096.920 17168.04
## 724  5.8137767  8.115957 2106.112 17093.11
## 725  5.9665736  8.043570 2115.567 17016.71
## 726  6.1220911  7.970227 2125.279 16938.95
## 727  6.2801274  7.896040 2135.239 16859.94
## 728  6.4404969  7.821113 2145.443 16779.75
## 729  6.6030296  7.745539 2155.884 16698.49
## 730  6.7675697  7.669406 2166.558 16616.22
## 731  6.9339743  7.592792 2177.462 16533.01
## 732  7.1021124  7.515771 2188.590 16448.94
## 733  6.9971423  7.563810 2181.629 16501.43
## 734  6.8264193  7.642267 2170.402 16586.79
## 735  6.6573268  7.720374 2159.395 16671.34
## 736  6.4899923  7.798060 2148.612 16755.00
## 737  6.3245553  7.875247 2138.056 16837.72
## 738  6.1611687  7.951851 2127.733 16919.42
## 739  6.0000000  8.027778 2117.647 17000.00
## 740  5.8412327  8.102926 2107.804 17079.38
## 741  5.6850682  8.177184 2098.212 17157.47
## 742  5.5317267  8.250430 2088.877 17234.14
## 743  5.3814496  8.322528 2079.810 17309.28
## 744  5.2345009  8.393333 2071.019 17382.75
## 745  5.0911688  8.462684 2062.515 17454.42
## 746  4.9517674  8.530407 2054.312 17524.12
## 747  4.8166378  8.596312 2046.422 17591.68
## 748  4.6861498  8.660195 2038.860 17656.93
## 749  4.5607017  8.721832 2031.643 17719.65
## 750  4.4407207  8.780989 2024.788 17779.64
## 751  4.3266615  8.837410 2018.314 17836.67
## 752  4.2190046  8.890831 2012.241 17890.50
## 753  4.1182521  8.940971 2006.591 17940.87
## 754  4.0249224  8.987543 2001.386 17987.54
## 755  3.9395431  9.030254 1996.647 18030.23
## 756  3.8626416  9.068810 1992.398 18068.68
## 757  3.7947332  9.102926 1988.661 18102.63
## 758  3.7363083  9.132329 1985.457 18131.85
## 759  3.6878178  9.156768 1982.806 18156.09
## 760  3.6496575  9.176024 1980.724 18175.17
## 761  3.6221541  9.189914 1979.227 18188.92
## 762  3.6055513  9.198305 1978.324 18197.22
## 763  3.6000000  9.201111 1978.022 18200.00
## 764  3.6055513  9.198305 1978.324 18197.22
## 765  3.6221541  9.189914 1979.227 18188.92
## 766  3.6496575  9.176024 1980.724 18175.17
## 767  3.6878178  9.156768 1982.806 18156.09
## 768  3.7363083  9.132329 1985.457 18131.85
## 769  3.7947332  9.102926 1988.661 18102.63
## 770  3.8626416  9.068810 1992.398 18068.68
## 771  3.9395431  9.030254 1996.647 18030.23
## 772  4.0249224  8.987543 2001.386 17987.54
## 773  4.1182521  8.940971 2006.591 17940.87
## 774  4.2190046  8.890831 2012.241 17890.50
## 775  4.3266615  8.837410 2018.314 17836.67
## 776  4.4407207  8.780989 2024.788 17779.64
## 777  4.5607017  8.721832 2031.643 17719.65
## 778  4.6861498  8.660195 2038.860 17656.93
## 779  4.8166378  8.596312 2046.422 17591.68
## 780  4.9517674  8.530407 2054.312 17524.12
## 781  5.0911688  8.462684 2062.515 17454.42
## 782  5.2345009  8.393333 2071.019 17382.75
## 783  5.3814496  8.322528 2079.810 17309.28
## 784  5.5317267  8.250430 2088.877 17234.14
## 785  5.6850682  8.177184 2098.212 17157.47
## 786  5.8412327  8.102926 2107.804 17079.38
## 787  6.0000000  8.027778 2117.647 17000.00
## 788  6.1611687  7.951851 2127.733 16919.42
## 789  6.3245553  7.875247 2138.056 16837.72
## 790  6.4899923  7.798060 2148.612 16755.00
## 791  6.6573268  7.720374 2159.395 16671.34
## 792  6.8264193  7.642267 2170.402 16586.79
## 793  6.9971423  7.563810 2181.629 16501.43
## 794  6.8963759  7.610069 2174.988 16551.81
## 795  6.7230945  7.689947 2163.663 16638.45
## 796  6.5513357  7.769536 2152.552 16724.33
## 797  6.3812225  7.848765 2141.660 16809.39
## 798  6.2128898  7.927561 2130.990 16893.56
## 799  6.0464866  8.005841 2120.546 16976.76
## 800  5.8821765  8.083513 2110.334 17058.91
## 801  5.7201399  8.160478 2100.359 17139.93
## 802  5.5605755  8.236625 2090.627 17219.71
## 803  5.4037024  8.311832 2081.148 17298.15
## 804  5.2497619  8.385966 2071.928 17375.12
## 805  5.0990195  8.458878 2062.979 17450.49
## 806  4.9517674  8.530407 2054.312 17524.12
## 807  4.8083261  8.600374 2045.938 17595.84
## 808  4.6690470  8.668585 2037.873 17665.48
## 809  4.5343136  8.734826 2030.131 17732.84
## 810  4.4045431  8.798865 2022.730 17797.73
## 811  4.2801869  8.860452 2015.688 17859.91
## 812  4.1617304  8.919316 2009.026 17919.13
## 813  4.0496913  8.975171 2002.764 17975.15
## 814  3.9446166  9.027713 1996.928 18027.69
## 815  3.8470768  9.076624 1991.540 18076.46
## 816  3.7576588  9.121578 1986.627 18121.17
## 817  3.6769553  9.162247 1982.213 18161.52
## 818  3.6055513  9.198305 1978.324 18197.22
## 819  3.5440090  9.229439 1974.984 18228.00
## 820  3.4928498  9.255361 1972.216 18253.58
## 821  3.4525353  9.275814 1970.041 18273.73
## 822  3.4234486  9.290584 1968.474 18288.28
## 823  3.4058773  9.299513 1967.529 18297.06
## 824  3.4000000  9.302500 1967.213 18300.00
## 825  3.4058773  9.299513 1967.529 18297.06
## 826  3.4234486  9.290584 1968.474 18288.28
## 827  3.4525353  9.275814 1970.041 18273.73
## 828  3.4928498  9.255361 1972.216 18253.58
## 829  3.5440090  9.229439 1974.984 18228.00
## 830  3.6055513  9.198305 1978.324 18197.22
## 831  3.6769553  9.162247 1982.213 18161.52
## 832  3.7576588  9.121578 1986.627 18121.17
## 833  3.8470768  9.076624 1991.540 18076.46
## 834  3.9446166  9.027713 1996.928 18027.69
## 835  4.0496913  8.975171 2002.764 17975.15
## 836  4.1617304  8.919316 2009.026 17919.13
## 837  4.2801869  8.860452 2015.688 17859.91
## 838  4.4045431  8.798865 2022.730 17797.73
## 839  4.5343136  8.734826 2030.131 17732.84
## 840  4.6690470  8.668585 2037.873 17665.48
## 841  4.8083261  8.600374 2045.938 17595.84
## 842  4.9517674  8.530407 2054.312 17524.12
## 843  5.0990195  8.458878 2062.979 17450.49
## 844  5.2497619  8.385966 2071.928 17375.12
## 845  5.4037024  8.311832 2081.148 17298.15
## 846  5.5605755  8.236625 2090.627 17219.71
## 847  5.7201399  8.160478 2100.359 17139.93
## 848  5.8821765  8.083513 2110.334 17058.91
## 849  6.0464866  8.005841 2120.546 16976.76
## 850  6.2128898  7.927561 2130.990 16893.56
## 851  6.3812225  7.848765 2141.660 16809.39
## 852  6.5513357  7.769536 2152.552 16724.33
## 853  6.7230945  7.689947 2163.663 16638.45
## 854  6.8963759  7.610069 2174.988 16551.81
## 855  6.8000000  7.654444 2168.675 16600.00
## 856  6.6241981  7.735723 2157.252 16687.90
## 857  6.4498062  7.816774 2146.038 16775.10
## 858  6.2769419  7.897532 2135.038 16861.53
## 859  6.1057350  7.977925 2124.253 16947.13
## 860  5.9363288  8.057873 2113.689 17031.84
## 861  5.7688820  8.137288 2103.349 17115.56
## 862  5.6035703  8.216072 2093.241 17198.21
## 863  5.4405882  8.294118 2083.369 17279.71
## 864  5.2801515  8.371305 2073.742 17359.92
## 865  5.1224994  8.447500 2064.368 17438.75
## 866  4.9678969  8.522557 2055.258 17516.05
## 867  4.8166378  8.596312 2046.422 17591.68
## 868  4.6690470  8.668585 2037.873 17665.48
## 869  4.5254834  8.739176 2029.626 17737.26
## 870  4.3863424  8.807865 2021.696 17806.83
## 871  4.2520583  8.874412 2014.102 17873.97
## 872  4.1231056  8.938552 2006.863 17938.45
## 873  4.0000000  9.000000 2000.000 18000.00
## 874  3.8832976  9.058446 1993.537 18058.35
## 875  3.7735925  9.113560 1987.500 18113.20
## 876  3.6715120  9.164993 1981.916 18164.24
## 877  3.5777088  9.212384 1976.811 18211.15
## 878  3.4928498  9.255361 1972.216 18253.58
## 879  3.4176015  9.293555 1968.160 18291.20
## 880  3.3526109  9.326605 1964.669 18323.69
## 881  3.2984845  9.354175 1961.772 18350.76
## 882  3.2557641  9.375964 1959.491 18372.12
## 883  3.2249031  9.391721 1957.847 18387.55
## 884  3.2062439  9.401253 1956.854 18396.88
## 885  3.2000000  9.404444 1956.522 18400.00
## 886  3.2062439  9.401253 1956.854 18396.88
## 887  3.2249031  9.391721 1957.847 18387.55
## 888  3.2557641  9.375964 1959.491 18372.12
## 889  3.2984845  9.354175 1961.772 18350.76
## 890  3.3526109  9.326605 1964.669 18323.69
## 891  3.4176015  9.293555 1968.160 18291.20
## 892  3.4928498  9.255361 1972.216 18253.58
## 893  3.5777088  9.212384 1976.811 18211.15
## 894  3.6715120  9.164993 1981.916 18164.24
## 895  3.7735925  9.113560 1987.500 18113.20
## 896  3.8832976  9.058446 1993.537 18058.35
## 897  4.0000000  9.000000 2000.000 18000.00
## 898  4.1231056  8.938552 2006.863 17938.45
## 899  4.2520583  8.874412 2014.102 17873.97
## 900  4.3863424  8.807865 2021.696 17806.83
## 901  4.5254834  8.739176 2029.626 17737.26
## 902  4.6690470  8.668585 2037.873 17665.48
## 903  4.8166378  8.596312 2046.422 17591.68
## 904  4.9678969  8.522557 2055.258 17516.05
## 905  5.1224994  8.447500 2064.368 17438.75
## 906  5.2801515  8.371305 2073.742 17359.92
## 907  5.4405882  8.294118 2083.369 17279.71
## 908  5.6035703  8.216072 2093.241 17198.21
## 909  5.7688820  8.137288 2103.349 17115.56
## 910  5.9363288  8.057873 2113.689 17031.84
## 911  6.1057350  7.977925 2124.253 16947.13
## 912  6.2769419  7.897532 2135.038 16861.53
## 913  6.4498062  7.816774 2146.038 16775.10
## 914  6.6241981  7.735723 2157.252 16687.90
## 915  6.8000000  7.654444 2168.675 16600.00
## 916  6.7082039  7.696831 2162.695 16645.90
## 917  6.5299311  7.779483 2151.176 16735.03
## 918  6.3529521  7.861971 2139.861 16823.52
## 919  6.1773781  7.944234 2128.753 16911.31
## 920  6.0033324  8.026204 2117.855 16998.33
## 921  5.8309519  8.107805 2107.170 17084.52
## 922  5.6603887  8.188951 2096.704 17169.81
## 923  5.4918121  8.269549 2086.461 17254.09
## 924  5.3254108  8.349494 2076.449 17337.29
## 925  5.1613952  8.428669 2066.673 17419.30
## 926  5.0000000  8.506944 2057.143 17500.00
## 927  4.8414874  8.584174 2047.868 17579.26
## 928  4.6861498  8.660195 2038.860 17656.93
## 929  4.5343136  8.734826 2030.131 17732.84
## 930  4.3863424  8.807865 2021.696 17806.83
## 931  4.2426407  8.879089 2013.572 17878.68
## 932  4.1036569  8.948246 2005.775 17948.17
## 933  3.9698866  9.015063 1998.328 18015.06
## 934  3.8418745  9.079236 1991.254 18079.06
## 935  3.7202150  9.140436 1984.576 18139.89
## 936  3.6055513  9.198305 1978.324 18197.22
## 937  3.4985711  9.252460 1972.526 18250.71
## 938  3.4000000  9.302500 1967.213 18300.00
## 939  3.3105891  9.348006 1962.419 18344.71
## 940  3.2310989  9.388556 1958.177 18384.45
## 941  3.1622777  9.423735 1954.518 18418.86
## 942  3.1048349  9.453147 1951.475 18447.58
## 943  3.0594117  9.476438 1949.076 18470.29
## 944  3.0265492  9.493306 1947.343 18486.73
## 945  3.0066593  9.503523 1946.296 18496.67
## 946  3.0000000  9.506944 1945.946 18500.00
## 947  3.0066593  9.503523 1946.296 18496.67
## 948  3.0265492  9.493306 1947.343 18486.73
## 949  3.0594117  9.476438 1949.076 18470.29
## 950  3.1048349  9.453147 1951.475 18447.58
## 951  3.1622777  9.423735 1954.518 18418.86
## 952  3.2310989  9.388556 1958.177 18384.45
## 953  3.3105891  9.348006 1962.419 18344.71
## 954  3.4000000  9.302500 1967.213 18300.00
## 955  3.4985711  9.252460 1972.526 18250.71
## 956  3.6055513  9.198305 1978.324 18197.22
## 957  3.7202150  9.140436 1984.576 18139.89
## 958  3.8418745  9.079236 1991.254 18079.06
## 959  3.9698866  9.015063 1998.328 18015.06
## 960  4.1036569  8.948246 2005.775 17948.17
## 961  4.2426407  8.879089 2013.572 17878.68
## 962  4.3863424  8.807865 2021.696 17806.83
## 963  4.5343136  8.734826 2030.131 17732.84
## 964  4.6861498  8.660195 2038.860 17656.93
## 965  4.8414874  8.584174 2047.868 17579.26
## 966  5.0000000  8.506944 2057.143 17500.00
## 967  5.1613952  8.428669 2066.673 17419.30
## 968  5.3254108  8.349494 2076.449 17337.29
## 969  5.4918121  8.269549 2086.461 17254.09
## 970  5.6603887  8.188951 2096.704 17169.81
## 971  5.8309519  8.107805 2107.170 17084.52
## 972  6.0033324  8.026204 2117.855 16998.33
## 973  6.1773781  7.944234 2128.753 16911.31
## 974  6.3529521  7.861971 2139.861 16823.52
## 975  6.5299311  7.779483 2151.176 16735.03
## 976  6.7082039  7.696831 2162.695 16645.90
## 977  6.6211781  7.737123 2157.056 16689.41
## 978  6.4404969  7.821113 2145.443 16779.75
## 979  6.2609903  7.905005 2134.028 16869.50
## 980  6.0827625  7.988743 2122.814 16958.62
## 981  5.9059292  8.072262 2111.804 17047.04
## 982  5.7306195  8.155489 2101.001 17134.69
## 983  5.5569776  8.238346 2090.409 17221.51
## 984  5.3851648  8.320742 2080.033 17307.42
## 985  5.2153619  8.402577 2069.879 17392.32
## 986  5.0477718  8.483738 2059.955 17476.11
## 987  4.8826222  8.564099 2050.267 17558.69
## 988  4.7201695  8.643517 2040.826 17639.92
## 989  4.5607017  8.721832 2031.643 17719.65
## 990  4.4045431  8.798865 2022.730 17797.73
## 991  4.2520583  8.874412 2014.102 17873.97
## 992  4.1036569  8.948246 2005.775 17948.17
## 993  3.9597980  9.020112 1997.769 18020.10
## 994  3.8209946  9.089725 1990.104 18089.50
## 995  3.6878178  9.156768 1982.806 18156.09
## 996  3.5608988  9.220890 1975.899 18219.55
## 997  3.4409301  9.281705 1969.416 18279.53
## 998  3.3286634  9.338798 1963.386 18335.67
## 999  3.2249031  9.391721 1957.847 18387.55
## 1000 3.1304952  9.440003 1952.833 18434.75
## 1001 3.0463092  9.483162 1948.385 18476.85
## 1002 2.9732137  9.520715 1944.538 18513.39
## 1003 2.9120440  9.552198 1941.331 18543.98
## 1004 2.8635642  9.577187 1938.797 18568.22
## 1005 2.8284271  9.595318 1936.964 18585.79
## 1006 2.8071338  9.606315 1935.855 18596.43
## 1007 2.8000000  9.610000 1935.484 18600.00
## 1008 2.8071338  9.606315 1935.855 18596.43
## 1009 2.8284271  9.595318 1936.964 18585.79
## 1010 2.8635642  9.577187 1938.797 18568.22
## 1011 2.9120440  9.552198 1941.331 18543.98
## 1012 2.9732137  9.520715 1944.538 18513.39
## 1013 3.0463092  9.483162 1948.385 18476.85
## 1014 3.1304952  9.440003 1952.833 18434.75
## 1015 3.2249031  9.391721 1957.847 18387.55
## 1016 3.3286634  9.338798 1963.386 18335.67
## 1017 3.4409301  9.281705 1969.416 18279.53
## 1018 3.5608988  9.220890 1975.899 18219.55
## 1019 3.6878178  9.156768 1982.806 18156.09
## 1020 3.8209946  9.089725 1990.104 18089.50
## 1021 3.9597980  9.020112 1997.769 18020.10
## 1022 4.1036569  8.948246 2005.775 17948.17
## 1023 4.2520583  8.874412 2014.102 17873.97
## 1024 4.4045431  8.798865 2022.730 17797.73
## 1025 4.5607017  8.721832 2031.643 17719.65
## 1026 4.7201695  8.643517 2040.826 17639.92
## 1027 4.8826222  8.564099 2050.267 17558.69
## 1028 5.0477718  8.483738 2059.955 17476.11
## 1029 5.2153619  8.402577 2069.879 17392.32
## 1030 5.3851648  8.320742 2080.033 17307.42
## 1031 5.5569776  8.238346 2090.409 17221.51
## 1032 5.7306195  8.155489 2101.001 17134.69
## 1033 5.9059292  8.072262 2111.804 17047.04
## 1034 6.0827625  7.988743 2122.814 16958.62
## 1035 6.2609903  7.905005 2134.028 16869.50
## 1036 6.4404969  7.821113 2145.443 16779.75
## 1037 6.6211781  7.737123 2157.056 16689.41
## 1038 6.5391131  7.775215 2151.766 16730.44
## 1039 6.3560994  7.860500 2140.061 16821.95
## 1040 6.1741396  7.945756 2128.549 16912.93
## 1041 5.9933296  8.030928 2117.232 17003.34
## 1042 5.8137767  8.115957 2106.112 17093.11
## 1043 5.6356011  8.200777 2095.192 17182.20
## 1044 5.4589376  8.285312 2084.476 17270.53
## 1045 5.2839379  8.369479 2073.968 17358.03
## 1046 5.1107729  8.453182 2063.674 17444.61
## 1047 4.9396356  8.536314 2053.601 17530.18
## 1048 4.7707442  8.618753 2043.756 17614.63
## 1049 4.6043458  8.700363 2034.148 17697.83
## 1050 4.4407207  8.780989 2024.788 17779.64
## 1051 4.2801869  8.860452 2015.688 17859.91
## 1052 4.1231056  8.938552 2006.863 17938.45
## 1053 3.9698866  9.015063 1998.328 18015.06
## 1054 3.8209946  9.089725 1990.104 18089.50
## 1055 3.6769553  9.162247 1982.213 18161.52
## 1056 3.5383612  9.232299 1974.678 18230.82
## 1057 3.4058773  9.299513 1967.529 18297.06
## 1058 3.2802439  9.363476 1960.797 18359.88
## 1059 3.1622777  9.423735 1954.518 18418.86
## 1060 3.0528675  9.479796 1948.730 18473.57
## 1061 2.9529646  9.531131 1943.475 18523.52
## 1062 2.8635642  9.577187 1938.797 18568.22
## 1063 2.7856777  9.617401 1934.739 18607.16
## 1064 2.7202941  9.651225 1931.346 18639.85
## 1065 2.6683328  9.678148 1928.658 18665.83
## 1066 2.6305893  9.697728 1926.710 18684.71
## 1067 2.6076810  9.709622 1925.529 18696.16
## 1068 2.6000000  9.713611 1925.134 18700.00
## 1069 2.6076810  9.709622 1925.529 18696.16
## 1070 2.6305893  9.697728 1926.710 18684.71
## 1071 2.6683328  9.678148 1928.658 18665.83
## 1072 2.7202941  9.651225 1931.346 18639.85
## 1073 2.7856777  9.617401 1934.739 18607.16
## 1074 2.8635642  9.577187 1938.797 18568.22
## 1075 2.9529646  9.531131 1943.475 18523.52
## 1076 3.0528675  9.479796 1948.730 18473.57
## 1077 3.1622777  9.423735 1954.518 18418.86
## 1078 3.2802439  9.363476 1960.797 18359.88
## 1079 3.4058773  9.299513 1967.529 18297.06
## 1080 3.5383612  9.232299 1974.678 18230.82
## 1081 3.6769553  9.162247 1982.213 18161.52
## 1082 3.8209946  9.089725 1990.104 18089.50
## 1083 3.9698866  9.015063 1998.328 18015.06
## 1084 4.1231056  8.938552 2006.863 17938.45
## 1085 4.2801869  8.860452 2015.688 17859.91
## 1086 4.4407207  8.780989 2024.788 17779.64
## 1087 4.6043458  8.700363 2034.148 17697.83
## 1088 4.7707442  8.618753 2043.756 17614.63
## 1089 4.9396356  8.536314 2053.601 17530.18
## 1090 5.1107729  8.453182 2063.674 17444.61
## 1091 5.2839379  8.369479 2073.968 17358.03
## 1092 5.4589376  8.285312 2084.476 17270.53
## 1093 5.6356011  8.200777 2095.192 17182.20
## 1094 5.8137767  8.115957 2106.112 17093.11
## 1095 5.9933296  8.030928 2117.232 17003.34
## 1096 6.1741396  7.945756 2128.549 16912.93
## 1097 6.3560994  7.860500 2140.061 16821.95
## 1098 6.5391131  7.775215 2151.766 16730.44
## 1099 6.4621978  7.811001 2146.831 16768.90
## 1100 6.2769419  7.897532 2135.038 16861.53
## 1101 6.0926185  7.984101 2123.431 16953.69
## 1102 5.9093147  8.070659 2112.014 17045.34
## 1103 5.7271284  8.157151 2100.787 17136.44
## 1104 5.5461698  8.243517 2089.753 17226.92
## 1105 5.3665631  8.329687 2078.916 17316.72
## 1106 5.1884487  8.415584 2068.279 17405.78
## 1107 5.0119856  8.501119 2057.848 17494.01
## 1108 4.8373546  8.586192 2047.628 17581.32
## 1109 4.6647615  8.670688 2037.626 17667.62
## 1110 4.4944410  8.754477 2027.851 17752.78
## 1111 4.3266615  8.837410 2018.314 17836.67
## 1112 4.1617304  8.919316 2009.026 17919.13
## 1113 4.0000000  9.000000 2000.000 18000.00
## 1114 3.8418745  9.079236 1991.254 18079.06
## 1115 3.6878178  9.156768 1982.806 18156.09
## 1116 3.5383612  9.232299 1974.678 18230.82
## 1117 3.3941125  9.305493 1966.897 18302.94
## 1118 3.2557641  9.375964 1959.491 18372.12
## 1119 3.1240999  9.443278 1952.495 18437.95
## 1120 3.0000000  9.506944 1945.946 18500.00
## 1121 2.8844410  9.566422 1939.887 18557.78
## 1122 2.7784888  9.621117 1934.365 18610.76
## 1123 2.6832816  9.670399 1929.430 18658.36
## 1124 2.6000000  9.713611 1925.134 18700.00
## 1125 2.5298221  9.750099 1921.528 18735.09
## 1126 2.4738634  9.779243 1918.663 18763.07
## 1127 2.4331050  9.800497 1916.581 18783.45
## 1128 2.4083189  9.813434 1915.317 18795.84
## 1129 2.4000000  9.817778 1914.894 18800.00
## 1130 2.4083189  9.813434 1915.317 18795.84
## 1131 2.4331050  9.800497 1916.581 18783.45
## 1132 2.4738634  9.779243 1918.663 18763.07
## 1133 2.5298221  9.750099 1921.528 18735.09
## 1134 2.6000000  9.713611 1925.134 18700.00
## 1135 2.6832816  9.670399 1929.430 18658.36
## 1136 2.7784888  9.621117 1934.365 18610.76
## 1137 2.8844410  9.566422 1939.887 18557.78
## 1138 3.0000000  9.506944 1945.946 18500.00
## 1139 3.1240999  9.443278 1952.495 18437.95
## 1140 3.2557641  9.375964 1959.491 18372.12
## 1141 3.3941125  9.305493 1966.897 18302.94
## 1142 3.5383612  9.232299 1974.678 18230.82
## 1143 3.6878178  9.156768 1982.806 18156.09
## 1144 3.8418745  9.079236 1991.254 18079.06
## 1145 4.0000000  9.000000 2000.000 18000.00
## 1146 4.1617304  8.919316 2009.026 17919.13
## 1147 4.3266615  8.837410 2018.314 17836.67
## 1148 4.4944410  8.754477 2027.851 17752.78
## 1149 4.6647615  8.670688 2037.626 17667.62
## 1150 4.8373546  8.586192 2047.628 17581.32
## 1151 5.0119856  8.501119 2057.848 17494.01
## 1152 5.1884487  8.415584 2068.279 17405.78
## 1153 5.3665631  8.329687 2078.916 17316.72
## 1154 5.5461698  8.243517 2089.753 17226.92
## 1155 5.7271284  8.157151 2100.787 17136.44
## 1156 5.9093147  8.070659 2112.014 17045.34
## 1157 6.0926185  7.984101 2123.431 16953.69
## 1158 6.2769419  7.897532 2135.038 16861.53
## 1159 6.4621978  7.811001 2146.831 16768.90
## 1160 6.3906181  7.844379 2142.259 16804.69
## 1161 6.2032250  7.932097 2130.381 16898.39
## 1162 6.0166436  8.019920 2118.684 16991.68
## 1163 5.8309519  8.107805 2107.170 17084.52
## 1164 5.6462377  8.195701 2095.840 17176.88
## 1165 5.4626001  8.283555 2084.697 17268.70
## 1166 5.2801515  8.371305 2073.742 17359.92
## 1167 5.0990195  8.458878 2062.979 17450.49
## 1168 4.9193496  8.546195 2052.413 17540.33
## 1169 4.7413078  8.633162 2042.050 17629.35
## 1170 4.5650849  8.719675 2031.894 17717.46
## 1171 4.3908997  8.805611 2021.955 17804.55
## 1172 4.2190046  8.890831 2012.241 17890.50
## 1173 4.0496913  8.975171 2002.764 17975.15
## 1174 3.8832976  9.058446 1993.537 18058.35
## 1175 3.7202150  9.140436 1984.576 18139.89
## 1176 3.5608988  9.220890 1975.899 18219.55
## 1177 3.4058773  9.299513 1967.529 18297.06
## 1178 3.2557641  9.375964 1959.491 18372.12
## 1179 3.1112698  9.449850 1951.816 18444.37
## 1180 2.9732137  9.520715 1944.538 18513.39
## 1181 2.8425341  9.588037 1937.699 18578.73
## 1182 2.7202941  9.651225 1931.346 18639.85
## 1183 2.6076810  9.709622 1925.529 18696.16
## 1184 2.5059928  9.762504 1920.307 18747.00
## 1185 2.4166092  9.809106 1915.740 18791.70
## 1186 2.3409400  9.848644 1911.891 18829.53
## 1187 2.2803509  9.880361 1908.819 18859.82
## 1188 2.2360680  9.903573 1906.581 18881.97
## 1189 2.2090722  9.917738 1905.219 18895.46
## 1190 2.2000000  9.922500 1904.762 18900.00
## 1191 2.2090722  9.917738 1905.219 18895.46
## 1192 2.2360680  9.903573 1906.581 18881.97
## 1193 2.2803509  9.880361 1908.819 18859.82
## 1194 2.3409400  9.848644 1911.891 18829.53
## 1195 2.4166092  9.809106 1915.740 18791.70
## 1196 2.5059928  9.762504 1920.307 18747.00
## 1197 2.6076810  9.709622 1925.529 18696.16
## 1198 2.7202941  9.651225 1931.346 18639.85
## 1199 2.8425341  9.588037 1937.699 18578.73
## 1200 2.9732137  9.520715 1944.538 18513.39
## 1201 3.1112698  9.449850 1951.816 18444.37
## 1202 3.2557641  9.375964 1959.491 18372.12
## 1203 3.4058773  9.299513 1967.529 18297.06
## 1204 3.5608988  9.220890 1975.899 18219.55
## 1205 3.7202150  9.140436 1984.576 18139.89
## 1206 3.8832976  9.058446 1993.537 18058.35
## 1207 4.0496913  8.975171 2002.764 17975.15
## 1208 4.2190046  8.890831 2012.241 17890.50
## 1209 4.3908997  8.805611 2021.955 17804.55
## 1210 4.5650849  8.719675 2031.894 17717.46
## 1211 4.7413078  8.633162 2042.050 17629.35
## 1212 4.9193496  8.546195 2052.413 17540.33
## 1213 5.0990195  8.458878 2062.979 17450.49
## 1214 5.2801515  8.371305 2073.742 17359.92
## 1215 5.4626001  8.283555 2084.697 17268.70
## 1216 5.6462377  8.195701 2095.840 17176.88
## 1217 5.8309519  8.107805 2107.170 17084.52
## 1218 6.0166436  8.019920 2118.684 16991.68
## 1219 6.2032250  7.932097 2130.381 16898.39
## 1220 6.3906181  7.844379 2142.259 16804.69
## 1221 6.3245553  7.875247 2138.056 16837.72
## 1222 6.1351447  7.964086 2126.098 16932.43
## 1223 5.9464275  8.053096 2114.316 17026.79
## 1224 5.7584720  8.142238 2102.710 17120.76
## 1225 5.5713553  8.231469 2091.282 17214.32
## 1226 5.3851648  8.320742 2080.033 17307.42
## 1227 5.2000000  8.410000 2068.966 17400.00
## 1228 5.0159745  8.499181 2058.082 17492.01
## 1229 4.8332184  8.588212 2047.387 17583.39
## 1230 4.6518813  8.677010 2036.884 17674.06
## 1231 4.4721360  8.765480 2026.578 17763.93
## 1232 4.2941821  8.853510 2016.478 17852.91
## 1233 4.1182521  8.940971 2006.591 17940.87
## 1234 3.9446166  9.027713 1996.928 18027.69
## 1235 3.7735925  9.113560 1987.500 18113.20
## 1236 3.6055513  9.198305 1978.324 18197.22
## 1237 3.4409301  9.281705 1969.416 18279.53
## 1238 3.2802439  9.363476 1960.797 18359.88
## 1239 3.1240999  9.443278 1952.495 18437.95
## 1240 2.9732137  9.520715 1944.538 18513.39
## 1241 2.8284271  9.595318 1936.964 18585.79
## 1242 2.6907248  9.666542 1929.815 18654.64
## 1243 2.5612497  9.733750 1923.141 18719.38
## 1244 2.4413111  9.796216 1917.000 18779.34
## 1245 2.3323808  9.853122 1911.456 18833.81
## 1246 2.2360680  9.903573 1906.581 18881.97
## 1247 2.1540659  9.946630 1902.450 18922.97
## 1248 2.0880613  9.981355 1899.138 18955.97
## 1249 2.0396078 10.006885 1896.714 18980.20
## 1250 2.0099751 10.022514 1895.234 18995.01
## 1251 2.0000000 10.027778 1894.737 19000.00
## 1252 2.0099751 10.022514 1895.234 18995.01
## 1253 2.0396078 10.006885 1896.714 18980.20
## 1254 2.0880613  9.981355 1899.138 18955.97
## 1255 2.1540659  9.946630 1902.450 18922.97
## 1256 2.2360680  9.903573 1906.581 18881.97
## 1257 2.3323808  9.853122 1911.456 18833.81
## 1258 2.4413111  9.796216 1917.000 18779.34
## 1259 2.5612497  9.733750 1923.141 18719.38
## 1260 2.6907248  9.666542 1929.815 18654.64
## 1261 2.8284271  9.595318 1936.964 18585.79
## 1262 2.9732137  9.520715 1944.538 18513.39
## 1263 3.1240999  9.443278 1952.495 18437.95
## 1264 3.2802439  9.363476 1960.797 18359.88
## 1265 3.4409301  9.281705 1969.416 18279.53
## 1266 3.6055513  9.198305 1978.324 18197.22
## 1267 3.7735925  9.113560 1987.500 18113.20
## 1268 3.9446166  9.027713 1996.928 18027.69
## 1269 4.1182521  8.940971 2006.591 17940.87
## 1270 4.2941821  8.853510 2016.478 17852.91
## 1271 4.4721360  8.765480 2026.578 17763.93
## 1272 4.6518813  8.677010 2036.884 17674.06
## 1273 4.8332184  8.588212 2047.387 17583.39
## 1274 5.0159745  8.499181 2058.082 17492.01
## 1275 5.2000000  8.410000 2068.966 17400.00
## 1276 5.3851648  8.320742 2080.033 17307.42
## 1277 5.5713553  8.231469 2091.282 17214.32
## 1278 5.7584720  8.142238 2102.710 17120.76
## 1279 5.9464275  8.053096 2114.316 17026.79
## 1280 6.1351447  7.964086 2126.098 16932.43
## 1281 6.3245553  7.875247 2138.056 16837.72
## 1282 6.2641839  7.903509 2134.230 16867.91
## 1283 6.0728906  7.993394 2122.197 16963.55
## 1284 5.8821765  8.083513 2110.334 17058.91
## 1285 5.6920998  8.173833 2098.642 17153.95
## 1286 5.5027266  8.264319 2087.121 17248.64
## 1287 5.3141321  8.354927 2075.773 17342.93
## 1288 5.1264022  8.445610 2064.599 17436.80
## 1289 4.9396356  8.536314 2053.601 17530.18
## 1290 4.7539457  8.626975 2042.782 17623.03
## 1291 4.5694639  8.717520 2032.145 17715.27
## 1292 4.3863424  8.807865 2021.696 17806.83
## 1293 4.2047592  8.897912 2011.441 17897.62
## 1294 4.0249224  8.987543 2001.386 17987.54
## 1295 3.8470768  9.076624 1991.540 18076.46
## 1296 3.6715120  9.164993 1981.916 18164.24
## 1297 3.4985711  9.252460 1972.526 18250.71
## 1298 3.3286634  9.338798 1963.386 18335.67
## 1299 3.1622777  9.423735 1954.518 18418.86
## 1300 3.0000000  9.506944 1945.946 18500.00
## 1301 2.8425341  9.588037 1937.699 18578.73
## 1302 2.6907248  9.666542 1929.815 18654.64
## 1303 2.5455844  9.741898 1922.337 18727.21
## 1304 2.4083189  9.813434 1915.317 18795.84
## 1305 2.2803509  9.880361 1908.819 18859.82
## 1306 2.1633308  9.941761 1902.916 18918.33
## 1307 2.0591260  9.996597 1897.690 18970.44
## 1308 1.9697716 10.043738 1893.231 19015.11
## 1309 1.8973666 10.082019 1889.633 19051.32
## 1310 1.8439089 10.110328 1886.986 19078.05
## 1311 1.8110770 10.127735 1885.363 19094.46
## 1312 1.8000000 10.133611 1884.817 19100.00
## 1313 1.8110770 10.127735 1885.363 19094.46
## 1314 1.8439089 10.110328 1886.986 19078.05
## 1315 1.8973666 10.082019 1889.633 19051.32
## 1316 1.9697716 10.043738 1893.231 19015.11
## 1317 2.0591260  9.996597 1897.690 18970.44
## 1318 2.1633308  9.941761 1902.916 18918.33
## 1319 2.2803509  9.880361 1908.819 18859.82
## 1320 2.4083189  9.813434 1915.317 18795.84
## 1321 2.5455844  9.741898 1922.337 18727.21
## 1322 2.6907248  9.666542 1929.815 18654.64
## 1323 2.8425341  9.588037 1937.699 18578.73
## 1324 3.0000000  9.506944 1945.946 18500.00
## 1325 3.1622777  9.423735 1954.518 18418.86
## 1326 3.3286634  9.338798 1963.386 18335.67
## 1327 3.4985711  9.252460 1972.526 18250.71
## 1328 3.6715120  9.164993 1981.916 18164.24
## 1329 3.8470768  9.076624 1991.540 18076.46
## 1330 4.0249224  8.987543 2001.386 17987.54
## 1331 4.2047592  8.897912 2011.441 17897.62
## 1332 4.3863424  8.807865 2021.696 17806.83
## 1333 4.5694639  8.717520 2032.145 17715.27
## 1334 4.7539457  8.626975 2042.782 17623.03
## 1335 4.9396356  8.536314 2053.601 17530.18
## 1336 5.1264022  8.445610 2064.599 17436.80
## 1337 5.3141321  8.354927 2075.773 17342.93
## 1338 5.5027266  8.264319 2087.121 17248.64
## 1339 5.6920998  8.173833 2098.642 17153.95
## 1340 5.8821765  8.083513 2110.334 17058.91
## 1341 6.0728906  7.993394 2122.197 16963.55
## 1342 6.2641839  7.903509 2134.230 16867.91
## 1343 6.2096699  7.929072 2130.787 16895.17
## 1344 6.0166436  8.019920 2118.684 16991.68
## 1345 5.8240879  8.111062 2106.747 17087.96
## 1346 5.6320511  8.202472 2094.975 17183.97
## 1347 5.4405882  8.294118 2083.369 17279.71
## 1348 5.2497619  8.385966 2071.928 17375.12
## 1349 5.0596443  8.477975 2060.654 17470.18
## 1350 4.8703183  8.570101 2049.549 17564.84
## 1351 4.6818800  8.662289 2038.614 17659.06
## 1352 4.4944410  8.754477 2027.851 17752.78
## 1353 4.3081318  8.846593 2017.266 17845.93
## 1354 4.1231056  8.938552 2006.863 17938.45
## 1355 3.9395431  9.030254 1996.647 18030.23
## 1356 3.7576588  9.121578 1986.627 18121.17
## 1357 3.5777088  9.212384 1976.811 18211.15
## 1358 3.4000000  9.302500 1967.213 18300.00
## 1359 3.2249031  9.391721 1957.847 18387.55
## 1360 3.0528675  9.479796 1948.730 18473.57
## 1361 2.8844410  9.566422 1939.887 18557.78
## 1362 2.7202941  9.651225 1931.346 18639.85
## 1363 2.5612497  9.733750 1923.141 18719.38
## 1364 2.4083189  9.813434 1915.317 18795.84
## 1365 2.2627417  9.889588 1907.929 18868.63
## 1366 2.1260292  9.961373 1901.042 18936.99
## 1367 2.0000000 10.027778 1894.737 19000.00
## 1368 1.8867962 10.087613 1889.109 19056.60
## 1369 1.7888544 10.139525 1884.267 19105.57
## 1370 1.7088007 10.182055 1880.328 19145.60
## 1371 1.6492423 10.213754 1877.407 19175.38
## 1372 1.6124515 10.233360 1875.608 19193.77
## 1373 1.6000000 10.240000 1875.000 19200.00
## 1374 1.6124515 10.233360 1875.608 19193.77
## 1375 1.6492423 10.213754 1877.407 19175.38
## 1376 1.7088007 10.182055 1880.328 19145.60
## 1377 1.7888544 10.139525 1884.267 19105.57
## 1378 1.8867962 10.087613 1889.109 19056.60
## 1379 2.0000000 10.027778 1894.737 19000.00
## 1380 2.1260292  9.961373 1901.042 18936.99
## 1381 2.2627417  9.889588 1907.929 18868.63
## 1382 2.4083189  9.813434 1915.317 18795.84
## 1383 2.5612497  9.733750 1923.141 18719.38
## 1384 2.7202941  9.651225 1931.346 18639.85
## 1385 2.8844410  9.566422 1939.887 18557.78
## 1386 3.0528675  9.479796 1948.730 18473.57
## 1387 3.2249031  9.391721 1957.847 18387.55
## 1388 3.4000000  9.302500 1967.213 18300.00
## 1389 3.5777088  9.212384 1976.811 18211.15
## 1390 3.7576588  9.121578 1986.627 18121.17
## 1391 3.9395431  9.030254 1996.647 18030.23
## 1392 4.1231056  8.938552 2006.863 17938.45
## 1393 4.3081318  8.846593 2017.266 17845.93
## 1394 4.4944410  8.754477 2027.851 17752.78
## 1395 4.6818800  8.662289 2038.614 17659.06
## 1396 4.8703183  8.570101 2049.549 17564.84
## 1397 5.0596443  8.477975 2060.654 17470.18
## 1398 5.2497619  8.385966 2071.928 17375.12
## 1399 5.4405882  8.294118 2083.369 17279.71
## 1400 5.6320511  8.202472 2094.975 17183.97
## 1401 5.8240879  8.111062 2106.747 17087.96
## 1402 6.0166436  8.019920 2118.684 16991.68
## 1403 6.2096699  7.929072 2130.787 16895.17
## 1404 6.1611687  7.951851 2127.733 16919.42
## 1405 5.9665736  8.043570 2115.567 17016.71
## 1406 5.7723479  8.135640 2103.562 17113.83
## 1407 5.5785303  8.228039 2091.718 17210.73
## 1408 5.3851648  8.320742 2080.033 17307.42
## 1409 5.1923020  8.413721 2068.508 17403.85
## 1410 5.0000000  8.506944 2057.143 17500.00
## 1411 4.8083261  8.600374 2045.938 17595.84
## 1412 4.6173586  8.693967 2034.896 17691.32
## 1413 4.4271887  8.787673 2024.018 17786.41
## 1414 4.2379240  8.881431 2013.306 17881.04
## 1415 4.0496913  8.975171 2002.764 17975.15
## 1416 3.8626416  9.068810 1992.398 18068.68
## 1417 3.6769553  9.162247 1982.213 18161.52
## 1418 3.4928498  9.255361 1972.216 18253.58
## 1419 3.3105891  9.348006 1962.419 18344.71
## 1420 3.1304952  9.440003 1952.833 18434.75
## 1421 2.9529646  9.531131 1943.475 18523.52
## 1422 2.7784888  9.621117 1934.365 18610.76
## 1423 2.6076810  9.709622 1925.529 18696.16
## 1424 2.4413111  9.796216 1917.000 18779.34
## 1425 2.2803509  9.880361 1908.819 18859.82
## 1426 2.1260292  9.961373 1901.042 18936.99
## 1427 1.9798990 10.038389 1893.735 19010.05
## 1428 1.8439089 10.110328 1886.986 19078.05
## 1429 1.7204651 10.175853 1880.901 19139.77
## 1430 1.6124515 10.233360 1875.608 19193.77
## 1431 1.5231546 10.281025 1871.255 19238.42
## 1432 1.4560220 10.316932 1867.996 19271.99
## 1433 1.4142136 10.339326 1865.972 19292.89
## 1434 1.4000000 10.346944 1865.285 19300.00
## 1435 1.4142136 10.339326 1865.972 19292.89
## 1436 1.4560220 10.316932 1867.996 19271.99
## 1437 1.5231546 10.281025 1871.255 19238.42
## 1438 1.6124515 10.233360 1875.608 19193.77
## 1439 1.7204651 10.175853 1880.901 19139.77
## 1440 1.8439089 10.110328 1886.986 19078.05
## 1441 1.9798990 10.038389 1893.735 19010.05
## 1442 2.1260292  9.961373 1901.042 18936.99
## 1443 2.2803509  9.880361 1908.819 18859.82
## 1444 2.4413111  9.796216 1917.000 18779.34
## 1445 2.6076810  9.709622 1925.529 18696.16
## 1446 2.7784888  9.621117 1934.365 18610.76
## 1447 2.9529646  9.531131 1943.475 18523.52
## 1448 3.1304952  9.440003 1952.833 18434.75
## 1449 3.3105891  9.348006 1962.419 18344.71
## 1450 3.4928498  9.255361 1972.216 18253.58
## 1451 3.6769553  9.162247 1982.213 18161.52
## 1452 3.8626416  9.068810 1992.398 18068.68
## 1453 4.0496913  8.975171 2002.764 17975.15
## 1454 4.2379240  8.881431 2013.306 17881.04
## 1455 4.4271887  8.787673 2024.018 17786.41
## 1456 4.6173586  8.693967 2034.896 17691.32
## 1457 4.8083261  8.600374 2045.938 17595.84
## 1458 5.0000000  8.506944 2057.143 17500.00
## 1459 5.1923020  8.413721 2068.508 17403.85
## 1460 5.3851648  8.320742 2080.033 17307.42
## 1461 5.5785303  8.228039 2091.718 17210.73
## 1462 5.7723479  8.135640 2103.562 17113.83
## 1463 5.9665736  8.043570 2115.567 17016.71
## 1464 6.1611687  7.951851 2127.733 16919.42
## 1465 6.1188234  7.971765 2125.074 16940.59
## 1466 5.9228372  8.064257 2112.852 17038.58
## 1467 5.7271284  8.157151 2100.787 17136.44
## 1468 5.5317267  8.250430 2088.877 17234.14
## 1469 5.3366656  8.344075 2077.123 17331.67
## 1470 5.1419841  8.438064 2065.522 17429.01
## 1471 4.9477268  8.532374 2054.075 17526.14
## 1472 4.7539457  8.626975 2042.782 17623.03
## 1473 4.5607017  8.721832 2031.643 17719.65
## 1474 4.3680659  8.816908 2020.659 17815.97
## 1475 4.1761226  8.912154 2009.833 17911.94
## 1476 3.9849718  9.007516 1999.165 18007.51
## 1477 3.7947332  9.102926 1988.661 18102.63
## 1478 3.6055513  9.198305 1978.324 18197.22
## 1479 3.4176015  9.293555 1968.160 18291.20
## 1480 3.2310989  9.388556 1958.177 18384.45
## 1481 3.0463092  9.483162 1948.385 18476.85
## 1482 2.8635642  9.577187 1938.797 18568.22
## 1483 2.6832816  9.670399 1929.430 18658.36
## 1484 2.5059928  9.762504 1920.307 18747.00
## 1485 2.3323808  9.853122 1911.456 18833.81
## 1486 2.1633308  9.941761 1902.916 18918.33
## 1487 2.0000000 10.027778 1894.737 19000.00
## 1488 1.8439089 10.110328 1886.986 19078.05
## 1489 1.6970563 10.188302 1879.751 19151.47
## 1490 1.5620499 10.260250 1873.149 19218.98
## 1491 1.4422205 10.324322 1867.327 19278.89
## 1492 1.3416408 10.378255 1862.469 19329.18
## 1493 1.2649111 10.419494 1858.780 19367.54
## 1494 1.2165525 10.445526 1856.462 19391.72
## 1495 1.2000000 10.454444 1855.670 19400.00
## 1496 1.2165525 10.445526 1856.462 19391.72
## 1497 1.2649111 10.419494 1858.780 19367.54
## 1498 1.3416408 10.378255 1862.469 19329.18
## 1499 1.4422205 10.324322 1867.327 19278.89
## 1500 1.5620499 10.260250 1873.149 19218.98
## 1501 1.6970563 10.188302 1879.751 19151.47
## 1502 1.8439089 10.110328 1886.986 19078.05
## 1503 2.0000000 10.027778 1894.737 19000.00
## 1504 2.1633308  9.941761 1902.916 18918.33
## 1505 2.3323808  9.853122 1911.456 18833.81
## 1506 2.5059928  9.762504 1920.307 18747.00
## 1507 2.6832816  9.670399 1929.430 18658.36
## 1508 2.8635642  9.577187 1938.797 18568.22
## 1509 3.0463092  9.483162 1948.385 18476.85
## 1510 3.2310989  9.388556 1958.177 18384.45
## 1511 3.4176015  9.293555 1968.160 18291.20
## 1512 3.6055513  9.198305 1978.324 18197.22
## 1513 3.7947332  9.102926 1988.661 18102.63
## 1514 3.9849718  9.007516 1999.165 18007.51
## 1515 4.1761226  8.912154 2009.833 17911.94
## 1516 4.3680659  8.816908 2020.659 17815.97
## 1517 4.5607017  8.721832 2031.643 17719.65
## 1518 4.7539457  8.626975 2042.782 17623.03
## 1519 4.9477268  8.532374 2054.075 17526.14
## 1520 5.1419841  8.438064 2065.522 17429.01
## 1521 5.3366656  8.344075 2077.123 17331.67
## 1522 5.5317267  8.250430 2088.877 17234.14
## 1523 5.7271284  8.157151 2100.787 17136.44
## 1524 5.9228372  8.064257 2112.852 17038.58
## 1525 6.1188234  7.971765 2125.074 16940.59
## 1526 6.0827625  7.988743 2122.814 16958.62
## 1527 5.8855756  8.081902 2110.544 17057.21
## 1528 5.6885851  8.175508 2098.427 17155.71
## 1529 5.4918121  8.269549 2086.461 17254.09
## 1530 5.2952809  8.364011 2074.646 17352.36
## 1531 5.0990195  8.458878 2062.979 17450.49
## 1532 4.9030603  8.554133 2051.461 17548.47
## 1533 4.7074409  8.649755 2040.090 17646.28
## 1534 4.5122057  8.745719 2028.867 17743.90
## 1535 4.3174066  8.841996 2017.791 17841.30
## 1536 4.1231056  8.938552 2006.863 17938.45
## 1537 3.9293765  9.035346 1996.084 18035.31
## 1538 3.7363083  9.132329 1985.457 18131.85
## 1539 3.5440090  9.229439 1974.984 18228.00
## 1540 3.3526109  9.326605 1964.669 18323.69
## 1541 3.1622777  9.423735 1954.518 18418.86
## 1542 2.9732137  9.520715 1944.538 18513.39
## 1543 2.7856777  9.617401 1934.739 18607.16
## 1544 2.6000000  9.713611 1925.134 18700.00
## 1545 2.4166092  9.809106 1915.740 18791.70
## 1546 2.2360680  9.903573 1906.581 18881.97
## 1547 2.0591260  9.996597 1897.690 18970.44
## 1548 1.8867962 10.087613 1889.109 19056.60
## 1549 1.7204651 10.175853 1880.901 19139.77
## 1550 1.5620499 10.260250 1873.149 19218.98
## 1551 1.4142136 10.339326 1865.972 19292.89
## 1552 1.2806248 10.411042 1859.534 19359.69
## 1553 1.1661904 10.472672 1854.055 19416.90
## 1554 1.0770330 10.520815 1849.808 19461.48
## 1555 1.0198039 10.551776 1847.092 19490.10
## 1556 1.0000000 10.562500 1846.154 19500.00
## 1557 1.0198039 10.551776 1847.092 19490.10
## 1558 1.0770330 10.520815 1849.808 19461.48
## 1559 1.1661904 10.472672 1854.055 19416.90
## 1560 1.2806248 10.411042 1859.534 19359.69
## 1561 1.4142136 10.339326 1865.972 19292.89
## 1562 1.5620499 10.260250 1873.149 19218.98
## 1563 1.7204651 10.175853 1880.901 19139.77
## 1564 1.8867962 10.087613 1889.109 19056.60
## 1565 2.0591260  9.996597 1897.690 18970.44
## 1566 2.2360680  9.903573 1906.581 18881.97
## 1567 2.4166092  9.809106 1915.740 18791.70
## 1568 2.6000000  9.713611 1925.134 18700.00
## 1569 2.7856777  9.617401 1934.739 18607.16
## 1570 2.9732137  9.520715 1944.538 18513.39
## 1571 3.1622777  9.423735 1954.518 18418.86
## 1572 3.3526109  9.326605 1964.669 18323.69
## 1573 3.5440090  9.229439 1974.984 18228.00
## 1574 3.7363083  9.132329 1985.457 18131.85
## 1575 3.9293765  9.035346 1996.084 18035.31
## 1576 4.1231056  8.938552 2006.863 17938.45
## 1577 4.3174066  8.841996 2017.791 17841.30
## 1578 4.5122057  8.745719 2028.867 17743.90
## 1579 4.7074409  8.649755 2040.090 17646.28
## 1580 4.9030603  8.554133 2051.461 17548.47
## 1581 5.0990195  8.458878 2062.979 17450.49
## 1582 5.2952809  8.364011 2074.646 17352.36
## 1583 5.4918121  8.269549 2086.461 17254.09
## 1584 5.6885851  8.175508 2098.427 17155.71
## 1585 5.8855756  8.081902 2110.544 17057.21
## 1586 6.0827625  7.988743 2122.814 16958.62
## 1587 6.0530984  8.002723 2120.959 16973.45
## 1588 5.8549125  8.096438 2108.649 17072.54
## 1589 5.6568542  8.190637 2096.488 17171.57
## 1590 5.4589376  8.285312 2084.476 17270.53
## 1591 5.2611786  8.380456 2072.609 17369.41
## 1592 5.0635956  8.476058 2060.888 17468.20
## 1593 4.8662100  8.572106 2049.309 17566.89
## 1594 4.6690470  8.668585 2037.873 17665.48
## 1595 4.4721360  8.765480 2026.578 17763.93
## 1596 4.2755117  8.862771 2015.424 17862.24
## 1597 4.0792156  8.960436 2004.411 17960.39
## 1598 3.8832976  9.058446 1993.537 18058.35
## 1599 3.6878178  9.156768 1982.806 18156.09
## 1600 3.4928498  9.255361 1972.216 18253.58
## 1601 3.2984845  9.354175 1961.772 18350.76
## 1602 3.1048349  9.453147 1951.475 18447.58
## 1603 2.9120440  9.552198 1941.331 18543.98
## 1604 2.7202941  9.651225 1931.346 18639.85
## 1605 2.5298221  9.750099 1921.528 18735.09
## 1606 2.3409400  9.848644 1911.891 18829.53
## 1607 2.1540659  9.946630 1902.450 18922.97
## 1608 1.9697716 10.043738 1893.231 19015.11
## 1609 1.7888544 10.139525 1884.267 19105.57
## 1610 1.6124515 10.233360 1875.608 19193.77
## 1611 1.4422205 10.324322 1867.327 19278.89
## 1612 1.2806248 10.411042 1859.534 19359.69
## 1613 1.1313708 10.491461 1852.394 19434.31
## 1614 1.0000000 10.562500 1846.154 19500.00
## 1615 0.8944272 10.619763 1841.170 19552.79
## 1616 0.8246211 10.657710 1837.889 19587.69
## 1617 0.8000000 10.671111 1836.735 19600.00
## 1618 0.8246211 10.657710 1837.889 19587.69
## 1619 0.8944272 10.619763 1841.170 19552.79
## 1620 1.0000000 10.562500 1846.154 19500.00
## 1621 1.1313708 10.491461 1852.394 19434.31
## 1622 1.2806248 10.411042 1859.534 19359.69
## 1623 1.4422205 10.324322 1867.327 19278.89
## 1624 1.6124515 10.233360 1875.608 19193.77
## 1625 1.7888544 10.139525 1884.267 19105.57
## 1626 1.9697716 10.043738 1893.231 19015.11
## 1627 2.1540659  9.946630 1902.450 18922.97
## 1628 2.3409400  9.848644 1911.891 18829.53
## 1629 2.5298221  9.750099 1921.528 18735.09
## 1630 2.7202941  9.651225 1931.346 18639.85
## 1631 2.9120440  9.552198 1941.331 18543.98
## 1632 3.1048349  9.453147 1951.475 18447.58
## 1633 3.2984845  9.354175 1961.772 18350.76
## 1634 3.4928498  9.255361 1972.216 18253.58
## 1635 3.6878178  9.156768 1982.806 18156.09
## 1636 3.8832976  9.058446 1993.537 18058.35
## 1637 4.0792156  8.960436 2004.411 17960.39
## 1638 4.2755117  8.862771 2015.424 17862.24
## 1639 4.4721360  8.765480 2026.578 17763.93
## 1640 4.6690470  8.668585 2037.873 17665.48
## 1641 4.8662100  8.572106 2049.309 17566.89
## 1642 5.0635956  8.476058 2060.888 17468.20
## 1643 5.2611786  8.380456 2072.609 17369.41
## 1644 5.4589376  8.285312 2084.476 17270.53
## 1645 5.6568542  8.190637 2096.488 17171.57
## 1646 5.8549125  8.096438 2108.649 17072.54
## 1647 6.0530984  8.002723 2120.959 16973.45
## 1648 6.0299254  8.013653 2119.513 16985.04
## 1649 5.8309519  8.107805 2107.170 17084.52
## 1650 5.6320511  8.202472 2094.975 17183.97
## 1651 5.4332311  8.297649 2082.925 17283.38
## 1652 5.2345009  8.393333 2071.019 17382.75
## 1653 5.0358713  8.489516 2059.253 17482.06
## 1654 4.8373546  8.586192 2047.628 17581.32
## 1655 4.6389654  8.683353 2036.140 17680.52
## 1656 4.4407207  8.780989 2024.788 17779.64
## 1657 4.2426407  8.879089 2013.572 17878.68
## 1658 4.0447497  8.977639 2002.489 17977.63
## 1659 3.8470768  9.076624 1991.540 18076.46
## 1660 3.6496575  9.176024 1980.724 18175.17
## 1661 3.4525353  9.275814 1970.041 18273.73
## 1662 3.2557641  9.375964 1959.491 18372.12
## 1663 3.0594117  9.476438 1949.076 18470.29
## 1664 2.8635642  9.577187 1938.797 18568.22
## 1665 2.6683328  9.678148 1928.658 18665.83
## 1666 2.4738634  9.779243 1918.663 18763.07
## 1667 2.2803509  9.880361 1908.819 18859.82
## 1668 2.0880613  9.981355 1899.138 18955.97
## 1669 1.8973666 10.082019 1889.633 19051.32
## 1670 1.7088007 10.182055 1880.328 19145.60
## 1671 1.5231546 10.281025 1871.255 19238.42
## 1672 1.3416408 10.378255 1862.469 19329.18
## 1673 1.1661904 10.472672 1854.055 19416.90
## 1674 1.0000000 10.562500 1846.154 19500.00
## 1675 0.8485281 10.644707 1839.011 19575.74
## 1676 0.7211103 10.714105 1833.046 19639.44
## 1677 0.6324555 10.762525 1828.918 19683.77
## 1678 0.6000000 10.780278 1827.411 19700.00
## 1679 0.6324555 10.762525 1828.918 19683.77
## 1680 0.7211103 10.714105 1833.046 19639.44
## 1681 0.8485281 10.644707 1839.011 19575.74
## 1682 1.0000000 10.562500 1846.154 19500.00
## 1683 1.1661904 10.472672 1854.055 19416.90
## 1684 1.3416408 10.378255 1862.469 19329.18
## 1685 1.5231546 10.281025 1871.255 19238.42
## 1686 1.7088007 10.182055 1880.328 19145.60
## 1687 1.8973666 10.082019 1889.633 19051.32
## 1688 2.0880613  9.981355 1899.138 18955.97
## 1689 2.2803509  9.880361 1908.819 18859.82
## 1690 2.4738634  9.779243 1918.663 18763.07
## 1691 2.6683328  9.678148 1928.658 18665.83
## 1692 2.8635642  9.577187 1938.797 18568.22
## 1693 3.0594117  9.476438 1949.076 18470.29
## 1694 3.2557641  9.375964 1959.491 18372.12
## 1695 3.4525353  9.275814 1970.041 18273.73
## 1696 3.6496575  9.176024 1980.724 18175.17
## 1697 3.8470768  9.076624 1991.540 18076.46
## 1698 4.0447497  8.977639 2002.489 17977.63
## 1699 4.2426407  8.879089 2013.572 17878.68
## 1700 4.4407207  8.780989 2024.788 17779.64
## 1701 4.6389654  8.683353 2036.140 17680.52
## 1702 4.8373546  8.586192 2047.628 17581.32
## 1703 5.0358713  8.489516 2059.253 17482.06
## 1704 5.2345009  8.393333 2071.019 17382.75
## 1705 5.4332311  8.297649 2082.925 17283.38
## 1706 5.6320511  8.202472 2094.975 17183.97
## 1707 5.8309519  8.107805 2107.170 17084.52
## 1708 6.0299254  8.013653 2119.513 16985.04
## 1709 6.0133186  8.021490 2118.477 16993.34
## 1710 5.8137767  8.115957 2106.112 17093.11
## 1711 5.6142675  8.210962 2093.892 17192.87
## 1712 5.4147945  8.306503 2081.815 17292.60
## 1713 5.2153619  8.402577 2069.879 17392.32
## 1714 5.0159745  8.499181 2058.082 17492.01
## 1715 4.8166378  8.596312 2046.422 17591.68
## 1716 4.6173586  8.693967 2034.896 17691.32
## 1717 4.4181444  8.792142 2023.503 17790.93
## 1718 4.2190046  8.890831 2012.241 17890.50
## 1719 4.0199502  8.990028 2001.109 17990.02
## 1720 3.8209946  9.089725 1990.104 18089.50
## 1721 3.6221541  9.189914 1979.227 18188.92
## 1722 3.4234486  9.290584 1968.474 18288.28
## 1723 3.2249031  9.391721 1957.847 18387.55
## 1724 3.0265492  9.493306 1947.343 18486.73
## 1725 2.8284271  9.595318 1936.964 18585.79
## 1726 2.6305893  9.697728 1926.710 18684.71
## 1727 2.4331050  9.800497 1916.581 18783.45
## 1728 2.2360680  9.903573 1906.581 18881.97
## 1729 2.0396078 10.006885 1896.714 18980.20
## 1730 1.8439089 10.110328 1886.986 19078.05
## 1731 1.6492423 10.213754 1877.407 19175.38
## 1732 1.4560220 10.316932 1867.996 19271.99
## 1733 1.2649111 10.419494 1858.780 19367.54
## 1734 1.0770330 10.520815 1849.808 19461.48
## 1735 0.8944272 10.619763 1841.170 19552.79
## 1736 0.7211103 10.714105 1833.046 19639.44
## 1737 0.5656854 10.799064 1825.821 19717.16
## 1738 0.4472136 10.864048 1820.352 19776.39
## 1739 0.4000000 10.890000 1818.182 19800.00
## 1740 0.4472136 10.864048 1820.352 19776.39
## 1741 0.5656854 10.799064 1825.821 19717.16
## 1742 0.7211103 10.714105 1833.046 19639.44
## 1743 0.8944272 10.619763 1841.170 19552.79
## 1744 1.0770330 10.520815 1849.808 19461.48
## 1745 1.2649111 10.419494 1858.780 19367.54
## 1746 1.4560220 10.316932 1867.996 19271.99
## 1747 1.6492423 10.213754 1877.407 19175.38
## 1748 1.8439089 10.110328 1886.986 19078.05
## 1749 2.0396078 10.006885 1896.714 18980.20
## 1750 2.2360680  9.903573 1906.581 18881.97
## 1751 2.4331050  9.800497 1916.581 18783.45
## 1752 2.6305893  9.697728 1926.710 18684.71
## 1753 2.8284271  9.595318 1936.964 18585.79
## 1754 3.0265492  9.493306 1947.343 18486.73
## 1755 3.2249031  9.391721 1957.847 18387.55
## 1756 3.4234486  9.290584 1968.474 18288.28
## 1757 3.6221541  9.189914 1979.227 18188.92
## 1758 3.8209946  9.089725 1990.104 18089.50
## 1759 4.0199502  8.990028 2001.109 17990.02
## 1760 4.2190046  8.890831 2012.241 17890.50
## 1761 4.4181444  8.792142 2023.503 17790.93
## 1762 4.6173586  8.693967 2034.896 17691.32
## 1763 4.8166378  8.596312 2046.422 17591.68
## 1764 5.0159745  8.499181 2058.082 17492.01
## 1765 5.2153619  8.402577 2069.879 17392.32
## 1766 5.4147945  8.306503 2081.815 17292.60
## 1767 5.6142675  8.210962 2093.892 17192.87
## 1768 5.8137767  8.115957 2106.112 17093.11
## 1769 6.0133186  8.021490 2118.477 16993.34
## 1770 6.0033324  8.026204 2117.855 16998.33
## 1771 5.8034473  8.120863 2105.475 17098.28
## 1772 5.6035703  8.216072 2093.241 17198.21
## 1773 5.4037024  8.311832 2081.148 17298.15
## 1774 5.2038447  8.408142 2069.194 17398.08
## 1775 5.0039984  8.505001 2057.378 17498.00
## 1776 4.8041649  8.602408 2045.697 17597.92
## 1777 4.6043458  8.700363 2034.148 17697.83
## 1778 4.4045431  8.798865 2022.730 17797.73
## 1779 4.2047592  8.897912 2011.441 17897.62
## 1780 4.0049969  8.997502 2000.278 17997.50
## 1781 3.8052595  9.097634 1989.239 18097.37
## 1782 3.6055513  9.198305 1978.324 18197.22
## 1783 3.4058773  9.299513 1967.529 18297.06
## 1784 3.2062439  9.401253 1956.854 18396.88
## 1785 3.0066593  9.503523 1946.296 18496.67
## 1786 2.8071338  9.606315 1935.855 18596.43
## 1787 2.6076810  9.709622 1925.529 18696.16
## 1788 2.4083189  9.813434 1915.317 18795.84
## 1789 2.2090722  9.917738 1905.219 18895.46
## 1790 2.0099751 10.022514 1895.234 18995.01
## 1791 1.8110770 10.127735 1885.363 19094.46
## 1792 1.6124515 10.233360 1875.608 19193.77
## 1793 1.4142136 10.339326 1865.972 19292.89
## 1794 1.2165525 10.445526 1856.462 19391.72
## 1795 1.0198039 10.551776 1847.092 19490.10
## 1796 0.8246211 10.657710 1837.889 19587.69
## 1797 0.6324555 10.762525 1828.918 19683.77
## 1798 0.4472136 10.864048 1820.352 19776.39
## 1799 0.2828427 10.954532 1812.819 19858.58
## 1800 0.2000000 11.000278 1809.045 19900.00
## 1801 0.2828427 10.954532 1812.819 19858.58
## 1802 0.4472136 10.864048 1820.352 19776.39
## 1803 0.6324555 10.762525 1828.918 19683.77
## 1804 0.8246211 10.657710 1837.889 19587.69
## 1805 1.0198039 10.551776 1847.092 19490.10
## 1806 1.2165525 10.445526 1856.462 19391.72
## 1807 1.4142136 10.339326 1865.972 19292.89
## 1808 1.6124515 10.233360 1875.608 19193.77
## 1809 1.8110770 10.127735 1885.363 19094.46
## 1810 2.0099751 10.022514 1895.234 18995.01
## 1811 2.2090722  9.917738 1905.219 18895.46
## 1812 2.4083189  9.813434 1915.317 18795.84
## 1813 2.6076810  9.709622 1925.529 18696.16
## 1814 2.8071338  9.606315 1935.855 18596.43
## 1815 3.0066593  9.503523 1946.296 18496.67
## 1816 3.2062439  9.401253 1956.854 18396.88
## 1817 3.4058773  9.299513 1967.529 18297.06
## 1818 3.6055513  9.198305 1978.324 18197.22
## 1819 3.8052595  9.097634 1989.239 18097.37
## 1820 4.0049969  8.997502 2000.278 17997.50
## 1821 4.2047592  8.897912 2011.441 17897.62
## 1822 4.4045431  8.798865 2022.730 17797.73
## 1823 4.6043458  8.700363 2034.148 17697.83
## 1824 4.8041649  8.602408 2045.697 17597.92
## 1825 5.0039984  8.505001 2057.378 17498.00
## 1826 5.2038447  8.408142 2069.194 17398.08
## 1827 5.4037024  8.311832 2081.148 17298.15
## 1828 5.6035703  8.216072 2093.241 17198.21
## 1829 5.8034473  8.120863 2105.475 17098.28
## 1830 6.0033324  8.026204 2117.855 16998.33
## 1831 6.0000000  8.027778 2117.647 17000.00
## 1832 5.8000000  8.122500 2105.263 17100.00
## 1833 5.6000000  8.217778 2093.023 17200.00
## 1834 5.4000000  8.313611 2080.925 17300.00
## 1835 5.2000000  8.410000 2068.966 17400.00
## 1836 5.0000000  8.506944 2057.143 17500.00
## 1837 4.8000000  8.604444 2045.455 17600.00
## 1838 4.6000000  8.702500 2033.898 17700.00
## 1839 4.4000000  8.801111 2022.472 17800.00
## 1840 4.2000000  8.900278 2011.173 17900.00
## 1841 4.0000000  9.000000 2000.000 18000.00
## 1842 3.8000000  9.100278 1988.950 18100.00
## 1843 3.6000000  9.201111 1978.022 18200.00
## 1844 3.4000000  9.302500 1967.213 18300.00
## 1845 3.2000000  9.404444 1956.522 18400.00
## 1846 3.0000000  9.506944 1945.946 18500.00
## 1847 2.8000000  9.610000 1935.484 18600.00
## 1848 2.6000000  9.713611 1925.134 18700.00
## 1849 2.4000000  9.817778 1914.894 18800.00
## 1850 2.2000000  9.922500 1904.762 18900.00
## 1851 2.0000000 10.027778 1894.737 19000.00
## 1852 1.8000000 10.133611 1884.817 19100.00
## 1853 1.6000000 10.240000 1875.000 19200.00
## 1854 1.4000000 10.346944 1865.285 19300.00
## 1855 1.2000000 10.454444 1855.670 19400.00
## 1856 1.0000000 10.562500 1846.154 19500.00
## 1857 0.8000000 10.671111 1836.735 19600.00
## 1858 0.6000000 10.780278 1827.411 19700.00
## 1859 0.4000000 10.890000 1818.182 19800.00
## 1860 0.2000000 11.000278 1809.045 19900.00
## 1861 0.0000000 11.111111 1800.000 20000.00
## 1862 0.2000000 11.000278 1809.045 19900.00
## 1863 0.4000000 10.890000 1818.182 19800.00
## 1864 0.6000000 10.780278 1827.411 19700.00
## 1865 0.8000000 10.671111 1836.735 19600.00
## 1866 1.0000000 10.562500 1846.154 19500.00
## 1867 1.2000000 10.454444 1855.670 19400.00
## 1868 1.4000000 10.346944 1865.285 19300.00
## 1869 1.6000000 10.240000 1875.000 19200.00
## 1870 1.8000000 10.133611 1884.817 19100.00
## 1871 2.0000000 10.027778 1894.737 19000.00
## 1872 2.2000000  9.922500 1904.762 18900.00
## 1873 2.4000000  9.817778 1914.894 18800.00
## 1874 2.6000000  9.713611 1925.134 18700.00
## 1875 2.8000000  9.610000 1935.484 18600.00
## 1876 3.0000000  9.506944 1945.946 18500.00
## 1877 3.2000000  9.404444 1956.522 18400.00
## 1878 3.4000000  9.302500 1967.213 18300.00
## 1879 3.6000000  9.201111 1978.022 18200.00
## 1880 3.8000000  9.100278 1988.950 18100.00
## 1881 4.0000000  9.000000 2000.000 18000.00
## 1882 4.2000000  8.900278 2011.173 17900.00
## 1883 4.4000000  8.801111 2022.472 17800.00
## 1884 4.6000000  8.702500 2033.898 17700.00
## 1885 4.8000000  8.604444 2045.455 17600.00
## 1886 5.0000000  8.506944 2057.143 17500.00
## 1887 5.2000000  8.410000 2068.966 17400.00
## 1888 5.4000000  8.313611 2080.925 17300.00
## 1889 5.6000000  8.217778 2093.023 17200.00
## 1890 5.8000000  8.122500 2105.263 17100.00
## 1891 6.0000000  8.027778 2117.647 17000.00
## 1892 6.0033324  8.026204 2117.855 16998.33
## 1893 5.8034473  8.120863 2105.475 17098.28
## 1894 5.6035703  8.216072 2093.241 17198.21
## 1895 5.4037024  8.311832 2081.148 17298.15
## 1896 5.2038447  8.408142 2069.194 17398.08
## 1897 5.0039984  8.505001 2057.378 17498.00
## 1898 4.8041649  8.602408 2045.697 17597.92
## 1899 4.6043458  8.700363 2034.148 17697.83
## 1900 4.4045431  8.798865 2022.730 17797.73
## 1901 4.2047592  8.897912 2011.441 17897.62
## 1902 4.0049969  8.997502 2000.278 17997.50
## 1903 3.8052595  9.097634 1989.239 18097.37
## 1904 3.6055513  9.198305 1978.324 18197.22
## 1905 3.4058773  9.299513 1967.529 18297.06
## 1906 3.2062439  9.401253 1956.854 18396.88
## 1907 3.0066593  9.503523 1946.296 18496.67
## 1908 2.8071338  9.606315 1935.855 18596.43
## 1909 2.6076810  9.709622 1925.529 18696.16
## 1910 2.4083189  9.813434 1915.317 18795.84
## 1911 2.2090722  9.917738 1905.219 18895.46
## 1912 2.0099751 10.022514 1895.234 18995.01
## 1913 1.8110770 10.127735 1885.363 19094.46
## 1914 1.6124515 10.233360 1875.608 19193.77
## 1915 1.4142136 10.339326 1865.972 19292.89
## 1916 1.2165525 10.445526 1856.462 19391.72
## 1917 1.0198039 10.551776 1847.092 19490.10
## 1918 0.8246211 10.657710 1837.889 19587.69
## 1919 0.6324555 10.762525 1828.918 19683.77
## 1920 0.4472136 10.864048 1820.352 19776.39
## 1921 0.2828427 10.954532 1812.819 19858.58
## 1922 0.2000000 11.000278 1809.045 19900.00
## 1923 0.2828427 10.954532 1812.819 19858.58
## 1924 0.4472136 10.864048 1820.352 19776.39
## 1925 0.6324555 10.762525 1828.918 19683.77
## 1926 0.8246211 10.657710 1837.889 19587.69
## 1927 1.0198039 10.551776 1847.092 19490.10
## 1928 1.2165525 10.445526 1856.462 19391.72
## 1929 1.4142136 10.339326 1865.972 19292.89
## 1930 1.6124515 10.233360 1875.608 19193.77
## 1931 1.8110770 10.127735 1885.363 19094.46
## 1932 2.0099751 10.022514 1895.234 18995.01
## 1933 2.2090722  9.917738 1905.219 18895.46
## 1934 2.4083189  9.813434 1915.317 18795.84
## 1935 2.6076810  9.709622 1925.529 18696.16
## 1936 2.8071338  9.606315 1935.855 18596.43
## 1937 3.0066593  9.503523 1946.296 18496.67
## 1938 3.2062439  9.401253 1956.854 18396.88
## 1939 3.4058773  9.299513 1967.529 18297.06
## 1940 3.6055513  9.198305 1978.324 18197.22
## 1941 3.8052595  9.097634 1989.239 18097.37
## 1942 4.0049969  8.997502 2000.278 17997.50
## 1943 4.2047592  8.897912 2011.441 17897.62
## 1944 4.4045431  8.798865 2022.730 17797.73
## 1945 4.6043458  8.700363 2034.148 17697.83
## 1946 4.8041649  8.602408 2045.697 17597.92
## 1947 5.0039984  8.505001 2057.378 17498.00
## 1948 5.2038447  8.408142 2069.194 17398.08
## 1949 5.4037024  8.311832 2081.148 17298.15
## 1950 5.6035703  8.216072 2093.241 17198.21
## 1951 5.8034473  8.120863 2105.475 17098.28
## 1952 6.0033324  8.026204 2117.855 16998.33
## 1953 6.0133186  8.021490 2118.477 16993.34
## 1954 5.8137767  8.115957 2106.112 17093.11
## 1955 5.6142675  8.210962 2093.892 17192.87
## 1956 5.4147945  8.306503 2081.815 17292.60
## 1957 5.2153619  8.402577 2069.879 17392.32
## 1958 5.0159745  8.499181 2058.082 17492.01
## 1959 4.8166378  8.596312 2046.422 17591.68
## 1960 4.6173586  8.693967 2034.896 17691.32
## 1961 4.4181444  8.792142 2023.503 17790.93
## 1962 4.2190046  8.890831 2012.241 17890.50
## 1963 4.0199502  8.990028 2001.109 17990.02
## 1964 3.8209946  9.089725 1990.104 18089.50
## 1965 3.6221541  9.189914 1979.227 18188.92
## 1966 3.4234486  9.290584 1968.474 18288.28
## 1967 3.2249031  9.391721 1957.847 18387.55
## 1968 3.0265492  9.493306 1947.343 18486.73
## 1969 2.8284271  9.595318 1936.964 18585.79
## 1970 2.6305893  9.697728 1926.710 18684.71
## 1971 2.4331050  9.800497 1916.581 18783.45
## 1972 2.2360680  9.903573 1906.581 18881.97
## 1973 2.0396078 10.006885 1896.714 18980.20
## 1974 1.8439089 10.110328 1886.986 19078.05
## 1975 1.6492423 10.213754 1877.407 19175.38
## 1976 1.4560220 10.316932 1867.996 19271.99
## 1977 1.2649111 10.419494 1858.780 19367.54
## 1978 1.0770330 10.520815 1849.808 19461.48
## 1979 0.8944272 10.619763 1841.170 19552.79
## 1980 0.7211103 10.714105 1833.046 19639.44
## 1981 0.5656854 10.799064 1825.821 19717.16
## 1982 0.4472136 10.864048 1820.352 19776.39
## 1983 0.4000000 10.890000 1818.182 19800.00
## 1984 0.4472136 10.864048 1820.352 19776.39
## 1985 0.5656854 10.799064 1825.821 19717.16
## 1986 0.7211103 10.714105 1833.046 19639.44
## 1987 0.8944272 10.619763 1841.170 19552.79
## 1988 1.0770330 10.520815 1849.808 19461.48
## 1989 1.2649111 10.419494 1858.780 19367.54
## 1990 1.4560220 10.316932 1867.996 19271.99
## 1991 1.6492423 10.213754 1877.407 19175.38
## 1992 1.8439089 10.110328 1886.986 19078.05
## 1993 2.0396078 10.006885 1896.714 18980.20
## 1994 2.2360680  9.903573 1906.581 18881.97
## 1995 2.4331050  9.800497 1916.581 18783.45
## 1996 2.6305893  9.697728 1926.710 18684.71
## 1997 2.8284271  9.595318 1936.964 18585.79
## 1998 3.0265492  9.493306 1947.343 18486.73
## 1999 3.2249031  9.391721 1957.847 18387.55
## 2000 3.4234486  9.290584 1968.474 18288.28
## 2001 3.6221541  9.189914 1979.227 18188.92
## 2002 3.8209946  9.089725 1990.104 18089.50
## 2003 4.0199502  8.990028 2001.109 17990.02
## 2004 4.2190046  8.890831 2012.241 17890.50
## 2005 4.4181444  8.792142 2023.503 17790.93
## 2006 4.6173586  8.693967 2034.896 17691.32
## 2007 4.8166378  8.596312 2046.422 17591.68
## 2008 5.0159745  8.499181 2058.082 17492.01
## 2009 5.2153619  8.402577 2069.879 17392.32
## 2010 5.4147945  8.306503 2081.815 17292.60
## 2011 5.6142675  8.210962 2093.892 17192.87
## 2012 5.8137767  8.115957 2106.112 17093.11
## 2013 6.0133186  8.021490 2118.477 16993.34
## 2014 6.0299254  8.013653 2119.513 16985.04
## 2015 5.8309519  8.107805 2107.170 17084.52
## 2016 5.6320511  8.202472 2094.975 17183.97
## 2017 5.4332311  8.297649 2082.925 17283.38
## 2018 5.2345009  8.393333 2071.019 17382.75
## 2019 5.0358713  8.489516 2059.253 17482.06
## 2020 4.8373546  8.586192 2047.628 17581.32
## 2021 4.6389654  8.683353 2036.140 17680.52
## 2022 4.4407207  8.780989 2024.788 17779.64
## 2023 4.2426407  8.879089 2013.572 17878.68
## 2024 4.0447497  8.977639 2002.489 17977.63
## 2025 3.8470768  9.076624 1991.540 18076.46
## 2026 3.6496575  9.176024 1980.724 18175.17
## 2027 3.4525353  9.275814 1970.041 18273.73
## 2028 3.2557641  9.375964 1959.491 18372.12
## 2029 3.0594117  9.476438 1949.076 18470.29
## 2030 2.8635642  9.577187 1938.797 18568.22
## 2031 2.6683328  9.678148 1928.658 18665.83
## 2032 2.4738634  9.779243 1918.663 18763.07
## 2033 2.2803509  9.880361 1908.819 18859.82
## 2034 2.0880613  9.981355 1899.138 18955.97
## 2035 1.8973666 10.082019 1889.633 19051.32
## 2036 1.7088007 10.182055 1880.328 19145.60
## 2037 1.5231546 10.281025 1871.255 19238.42
## 2038 1.3416408 10.378255 1862.469 19329.18
## 2039 1.1661904 10.472672 1854.055 19416.90
## 2040 1.0000000 10.562500 1846.154 19500.00
## 2041 0.8485281 10.644707 1839.011 19575.74
## 2042 0.7211103 10.714105 1833.046 19639.44
## 2043 0.6324555 10.762525 1828.918 19683.77
## 2044 0.6000000 10.780278 1827.411 19700.00
## 2045 0.6324555 10.762525 1828.918 19683.77
## 2046 0.7211103 10.714105 1833.046 19639.44
## 2047 0.8485281 10.644707 1839.011 19575.74
## 2048 1.0000000 10.562500 1846.154 19500.00
## 2049 1.1661904 10.472672 1854.055 19416.90
## 2050 1.3416408 10.378255 1862.469 19329.18
## 2051 1.5231546 10.281025 1871.255 19238.42
## 2052 1.7088007 10.182055 1880.328 19145.60
## 2053 1.8973666 10.082019 1889.633 19051.32
## 2054 2.0880613  9.981355 1899.138 18955.97
## 2055 2.2803509  9.880361 1908.819 18859.82
## 2056 2.4738634  9.779243 1918.663 18763.07
## 2057 2.6683328  9.678148 1928.658 18665.83
## 2058 2.8635642  9.577187 1938.797 18568.22
## 2059 3.0594117  9.476438 1949.076 18470.29
## 2060 3.2557641  9.375964 1959.491 18372.12
## 2061 3.4525353  9.275814 1970.041 18273.73
## 2062 3.6496575  9.176024 1980.724 18175.17
## 2063 3.8470768  9.076624 1991.540 18076.46
## 2064 4.0447497  8.977639 2002.489 17977.63
## 2065 4.2426407  8.879089 2013.572 17878.68
## 2066 4.4407207  8.780989 2024.788 17779.64
## 2067 4.6389654  8.683353 2036.140 17680.52
## 2068 4.8373546  8.586192 2047.628 17581.32
## 2069 5.0358713  8.489516 2059.253 17482.06
## 2070 5.2345009  8.393333 2071.019 17382.75
## 2071 5.4332311  8.297649 2082.925 17283.38
## 2072 5.6320511  8.202472 2094.975 17183.97
## 2073 5.8309519  8.107805 2107.170 17084.52
## 2074 6.0299254  8.013653 2119.513 16985.04
## 2075 6.0530984  8.002723 2120.959 16973.45
## 2076 5.8549125  8.096438 2108.649 17072.54
## 2077 5.6568542  8.190637 2096.488 17171.57
## 2078 5.4589376  8.285312 2084.476 17270.53
## 2079 5.2611786  8.380456 2072.609 17369.41
## 2080 5.0635956  8.476058 2060.888 17468.20
## 2081 4.8662100  8.572106 2049.309 17566.89
## 2082 4.6690470  8.668585 2037.873 17665.48
## 2083 4.4721360  8.765480 2026.578 17763.93
## 2084 4.2755117  8.862771 2015.424 17862.24
## 2085 4.0792156  8.960436 2004.411 17960.39
## 2086 3.8832976  9.058446 1993.537 18058.35
## 2087 3.6878178  9.156768 1982.806 18156.09
## 2088 3.4928498  9.255361 1972.216 18253.58
## 2089 3.2984845  9.354175 1961.772 18350.76
## 2090 3.1048349  9.453147 1951.475 18447.58
## 2091 2.9120440  9.552198 1941.331 18543.98
## 2092 2.7202941  9.651225 1931.346 18639.85
## 2093 2.5298221  9.750099 1921.528 18735.09
## 2094 2.3409400  9.848644 1911.891 18829.53
## 2095 2.1540659  9.946630 1902.450 18922.97
## 2096 1.9697716 10.043738 1893.231 19015.11
## 2097 1.7888544 10.139525 1884.267 19105.57
## 2098 1.6124515 10.233360 1875.608 19193.77
## 2099 1.4422205 10.324322 1867.327 19278.89
## 2100 1.2806248 10.411042 1859.534 19359.69
## 2101 1.1313708 10.491461 1852.394 19434.31
## 2102 1.0000000 10.562500 1846.154 19500.00
## 2103 0.8944272 10.619763 1841.170 19552.79
## 2104 0.8246211 10.657710 1837.889 19587.69
## 2105 0.8000000 10.671111 1836.735 19600.00
## 2106 0.8246211 10.657710 1837.889 19587.69
## 2107 0.8944272 10.619763 1841.170 19552.79
## 2108 1.0000000 10.562500 1846.154 19500.00
## 2109 1.1313708 10.491461 1852.394 19434.31
## 2110 1.2806248 10.411042 1859.534 19359.69
## 2111 1.4422205 10.324322 1867.327 19278.89
## 2112 1.6124515 10.233360 1875.608 19193.77
## 2113 1.7888544 10.139525 1884.267 19105.57
## 2114 1.9697716 10.043738 1893.231 19015.11
## 2115 2.1540659  9.946630 1902.450 18922.97
## 2116 2.3409400  9.848644 1911.891 18829.53
## 2117 2.5298221  9.750099 1921.528 18735.09
## 2118 2.7202941  9.651225 1931.346 18639.85
## 2119 2.9120440  9.552198 1941.331 18543.98
## 2120 3.1048349  9.453147 1951.475 18447.58
## 2121 3.2984845  9.354175 1961.772 18350.76
## 2122 3.4928498  9.255361 1972.216 18253.58
## 2123 3.6878178  9.156768 1982.806 18156.09
## 2124 3.8832976  9.058446 1993.537 18058.35
## 2125 4.0792156  8.960436 2004.411 17960.39
## 2126 4.2755117  8.862771 2015.424 17862.24
## 2127 4.4721360  8.765480 2026.578 17763.93
## 2128 4.6690470  8.668585 2037.873 17665.48
## 2129 4.8662100  8.572106 2049.309 17566.89
## 2130 5.0635956  8.476058 2060.888 17468.20
## 2131 5.2611786  8.380456 2072.609 17369.41
## 2132 5.4589376  8.285312 2084.476 17270.53
## 2133 5.6568542  8.190637 2096.488 17171.57
## 2134 5.8549125  8.096438 2108.649 17072.54
## 2135 6.0530984  8.002723 2120.959 16973.45
## 2136 6.0827625  7.988743 2122.814 16958.62
## 2137 5.8855756  8.081902 2110.544 17057.21
## 2138 5.6885851  8.175508 2098.427 17155.71
## 2139 5.4918121  8.269549 2086.461 17254.09
## 2140 5.2952809  8.364011 2074.646 17352.36
## 2141 5.0990195  8.458878 2062.979 17450.49
## 2142 4.9030603  8.554133 2051.461 17548.47
## 2143 4.7074409  8.649755 2040.090 17646.28
## 2144 4.5122057  8.745719 2028.867 17743.90
## 2145 4.3174066  8.841996 2017.791 17841.30
## 2146 4.1231056  8.938552 2006.863 17938.45
## 2147 3.9293765  9.035346 1996.084 18035.31
## 2148 3.7363083  9.132329 1985.457 18131.85
## 2149 3.5440090  9.229439 1974.984 18228.00
## 2150 3.3526109  9.326605 1964.669 18323.69
## 2151 3.1622777  9.423735 1954.518 18418.86
## 2152 2.9732137  9.520715 1944.538 18513.39
## 2153 2.7856777  9.617401 1934.739 18607.16
## 2154 2.6000000  9.713611 1925.134 18700.00
## 2155 2.4166092  9.809106 1915.740 18791.70
## 2156 2.2360680  9.903573 1906.581 18881.97
## 2157 2.0591260  9.996597 1897.690 18970.44
## 2158 1.8867962 10.087613 1889.109 19056.60
## 2159 1.7204651 10.175853 1880.901 19139.77
## 2160 1.5620499 10.260250 1873.149 19218.98
## 2161 1.4142136 10.339326 1865.972 19292.89
## 2162 1.2806248 10.411042 1859.534 19359.69
## 2163 1.1661904 10.472672 1854.055 19416.90
## 2164 1.0770330 10.520815 1849.808 19461.48
## 2165 1.0198039 10.551776 1847.092 19490.10
## 2166 1.0000000 10.562500 1846.154 19500.00
## 2167 1.0198039 10.551776 1847.092 19490.10
## 2168 1.0770330 10.520815 1849.808 19461.48
## 2169 1.1661904 10.472672 1854.055 19416.90
## 2170 1.2806248 10.411042 1859.534 19359.69
## 2171 1.4142136 10.339326 1865.972 19292.89
## 2172 1.5620499 10.260250 1873.149 19218.98
## 2173 1.7204651 10.175853 1880.901 19139.77
## 2174 1.8867962 10.087613 1889.109 19056.60
## 2175 2.0591260  9.996597 1897.690 18970.44
## 2176 2.2360680  9.903573 1906.581 18881.97
## 2177 2.4166092  9.809106 1915.740 18791.70
## 2178 2.6000000  9.713611 1925.134 18700.00
## 2179 2.7856777  9.617401 1934.739 18607.16
## 2180 2.9732137  9.520715 1944.538 18513.39
## 2181 3.1622777  9.423735 1954.518 18418.86
## 2182 3.3526109  9.326605 1964.669 18323.69
## 2183 3.5440090  9.229439 1974.984 18228.00
## 2184 3.7363083  9.132329 1985.457 18131.85
## 2185 3.9293765  9.035346 1996.084 18035.31
## 2186 4.1231056  8.938552 2006.863 17938.45
## 2187 4.3174066  8.841996 2017.791 17841.30
## 2188 4.5122057  8.745719 2028.867 17743.90
## 2189 4.7074409  8.649755 2040.090 17646.28
## 2190 4.9030603  8.554133 2051.461 17548.47
## 2191 5.0990195  8.458878 2062.979 17450.49
## 2192 5.2952809  8.364011 2074.646 17352.36
## 2193 5.4918121  8.269549 2086.461 17254.09
## 2194 5.6885851  8.175508 2098.427 17155.71
## 2195 5.8855756  8.081902 2110.544 17057.21
## 2196 6.0827625  7.988743 2122.814 16958.62
## 2197 6.1188234  7.971765 2125.074 16940.59
## 2198 5.9228372  8.064257 2112.852 17038.58
## 2199 5.7271284  8.157151 2100.787 17136.44
## 2200 5.5317267  8.250430 2088.877 17234.14
## 2201 5.3366656  8.344075 2077.123 17331.67
## 2202 5.1419841  8.438064 2065.522 17429.01
## 2203 4.9477268  8.532374 2054.075 17526.14
## 2204 4.7539457  8.626975 2042.782 17623.03
## 2205 4.5607017  8.721832 2031.643 17719.65
## 2206 4.3680659  8.816908 2020.659 17815.97
## 2207 4.1761226  8.912154 2009.833 17911.94
## 2208 3.9849718  9.007516 1999.165 18007.51
## 2209 3.7947332  9.102926 1988.661 18102.63
## 2210 3.6055513  9.198305 1978.324 18197.22
## 2211 3.4176015  9.293555 1968.160 18291.20
## 2212 3.2310989  9.388556 1958.177 18384.45
## 2213 3.0463092  9.483162 1948.385 18476.85
## 2214 2.8635642  9.577187 1938.797 18568.22
## 2215 2.6832816  9.670399 1929.430 18658.36
## 2216 2.5059928  9.762504 1920.307 18747.00
## 2217 2.3323808  9.853122 1911.456 18833.81
## 2218 2.1633308  9.941761 1902.916 18918.33
## 2219 2.0000000 10.027778 1894.737 19000.00
## 2220 1.8439089 10.110328 1886.986 19078.05
## 2221 1.6970563 10.188302 1879.751 19151.47
## 2222 1.5620499 10.260250 1873.149 19218.98
## 2223 1.4422205 10.324322 1867.327 19278.89
## 2224 1.3416408 10.378255 1862.469 19329.18
## 2225 1.2649111 10.419494 1858.780 19367.54
## 2226 1.2165525 10.445526 1856.462 19391.72
## 2227 1.2000000 10.454444 1855.670 19400.00
## 2228 1.2165525 10.445526 1856.462 19391.72
## 2229 1.2649111 10.419494 1858.780 19367.54
## 2230 1.3416408 10.378255 1862.469 19329.18
## 2231 1.4422205 10.324322 1867.327 19278.89
## 2232 1.5620499 10.260250 1873.149 19218.98
## 2233 1.6970563 10.188302 1879.751 19151.47
## 2234 1.8439089 10.110328 1886.986 19078.05
## 2235 2.0000000 10.027778 1894.737 19000.00
## 2236 2.1633308  9.941761 1902.916 18918.33
## 2237 2.3323808  9.853122 1911.456 18833.81
## 2238 2.5059928  9.762504 1920.307 18747.00
## 2239 2.6832816  9.670399 1929.430 18658.36
## 2240 2.8635642  9.577187 1938.797 18568.22
## 2241 3.0463092  9.483162 1948.385 18476.85
## 2242 3.2310989  9.388556 1958.177 18384.45
## 2243 3.4176015  9.293555 1968.160 18291.20
## 2244 3.6055513  9.198305 1978.324 18197.22
## 2245 3.7947332  9.102926 1988.661 18102.63
## 2246 3.9849718  9.007516 1999.165 18007.51
## 2247 4.1761226  8.912154 2009.833 17911.94
## 2248 4.3680659  8.816908 2020.659 17815.97
## 2249 4.5607017  8.721832 2031.643 17719.65
## 2250 4.7539457  8.626975 2042.782 17623.03
## 2251 4.9477268  8.532374 2054.075 17526.14
## 2252 5.1419841  8.438064 2065.522 17429.01
## 2253 5.3366656  8.344075 2077.123 17331.67
## 2254 5.5317267  8.250430 2088.877 17234.14
## 2255 5.7271284  8.157151 2100.787 17136.44
## 2256 5.9228372  8.064257 2112.852 17038.58
## 2257 6.1188234  7.971765 2125.074 16940.59
## 2258 6.1611687  7.951851 2127.733 16919.42
## 2259 5.9665736  8.043570 2115.567 17016.71
## 2260 5.7723479  8.135640 2103.562 17113.83
## 2261 5.5785303  8.228039 2091.718 17210.73
## 2262 5.3851648  8.320742 2080.033 17307.42
## 2263 5.1923020  8.413721 2068.508 17403.85
## 2264 5.0000000  8.506944 2057.143 17500.00
## 2265 4.8083261  8.600374 2045.938 17595.84
## 2266 4.6173586  8.693967 2034.896 17691.32
## 2267 4.4271887  8.787673 2024.018 17786.41
## 2268 4.2379240  8.881431 2013.306 17881.04
## 2269 4.0496913  8.975171 2002.764 17975.15
## 2270 3.8626416  9.068810 1992.398 18068.68
## 2271 3.6769553  9.162247 1982.213 18161.52
## 2272 3.4928498  9.255361 1972.216 18253.58
## 2273 3.3105891  9.348006 1962.419 18344.71
## 2274 3.1304952  9.440003 1952.833 18434.75
## 2275 2.9529646  9.531131 1943.475 18523.52
## 2276 2.7784888  9.621117 1934.365 18610.76
## 2277 2.6076810  9.709622 1925.529 18696.16
## 2278 2.4413111  9.796216 1917.000 18779.34
## 2279 2.2803509  9.880361 1908.819 18859.82
## 2280 2.1260292  9.961373 1901.042 18936.99
## 2281 1.9798990 10.038389 1893.735 19010.05
## 2282 1.8439089 10.110328 1886.986 19078.05
## 2283 1.7204651 10.175853 1880.901 19139.77
## 2284 1.6124515 10.233360 1875.608 19193.77
## 2285 1.5231546 10.281025 1871.255 19238.42
## 2286 1.4560220 10.316932 1867.996 19271.99
## 2287 1.4142136 10.339326 1865.972 19292.89
## 2288 1.4000000 10.346944 1865.285 19300.00
## 2289 1.4142136 10.339326 1865.972 19292.89
## 2290 1.4560220 10.316932 1867.996 19271.99
## 2291 1.5231546 10.281025 1871.255 19238.42
## 2292 1.6124515 10.233360 1875.608 19193.77
## 2293 1.7204651 10.175853 1880.901 19139.77
## 2294 1.8439089 10.110328 1886.986 19078.05
## 2295 1.9798990 10.038389 1893.735 19010.05
## 2296 2.1260292  9.961373 1901.042 18936.99
## 2297 2.2803509  9.880361 1908.819 18859.82
## 2298 2.4413111  9.796216 1917.000 18779.34
## 2299 2.6076810  9.709622 1925.529 18696.16
## 2300 2.7784888  9.621117 1934.365 18610.76
## 2301 2.9529646  9.531131 1943.475 18523.52
## 2302 3.1304952  9.440003 1952.833 18434.75
## 2303 3.3105891  9.348006 1962.419 18344.71
## 2304 3.4928498  9.255361 1972.216 18253.58
## 2305 3.6769553  9.162247 1982.213 18161.52
## 2306 3.8626416  9.068810 1992.398 18068.68
## 2307 4.0496913  8.975171 2002.764 17975.15
## 2308 4.2379240  8.881431 2013.306 17881.04
## 2309 4.4271887  8.787673 2024.018 17786.41
## 2310 4.6173586  8.693967 2034.896 17691.32
## 2311 4.8083261  8.600374 2045.938 17595.84
## 2312 5.0000000  8.506944 2057.143 17500.00
## 2313 5.1923020  8.413721 2068.508 17403.85
## 2314 5.3851648  8.320742 2080.033 17307.42
## 2315 5.5785303  8.228039 2091.718 17210.73
## 2316 5.7723479  8.135640 2103.562 17113.83
## 2317 5.9665736  8.043570 2115.567 17016.71
## 2318 6.1611687  7.951851 2127.733 16919.42
## 2319 6.2096699  7.929072 2130.787 16895.17
## 2320 6.0166436  8.019920 2118.684 16991.68
## 2321 5.8240879  8.111062 2106.747 17087.96
## 2322 5.6320511  8.202472 2094.975 17183.97
## 2323 5.4405882  8.294118 2083.369 17279.71
## 2324 5.2497619  8.385966 2071.928 17375.12
## 2325 5.0596443  8.477975 2060.654 17470.18
## 2326 4.8703183  8.570101 2049.549 17564.84
## 2327 4.6818800  8.662289 2038.614 17659.06
## 2328 4.4944410  8.754477 2027.851 17752.78
## 2329 4.3081318  8.846593 2017.266 17845.93
## 2330 4.1231056  8.938552 2006.863 17938.45
## 2331 3.9395431  9.030254 1996.647 18030.23
## 2332 3.7576588  9.121578 1986.627 18121.17
## 2333 3.5777088  9.212384 1976.811 18211.15
## 2334 3.4000000  9.302500 1967.213 18300.00
## 2335 3.2249031  9.391721 1957.847 18387.55
## 2336 3.0528675  9.479796 1948.730 18473.57
## 2337 2.8844410  9.566422 1939.887 18557.78
## 2338 2.7202941  9.651225 1931.346 18639.85
## 2339 2.5612497  9.733750 1923.141 18719.38
## 2340 2.4083189  9.813434 1915.317 18795.84
## 2341 2.2627417  9.889588 1907.929 18868.63
## 2342 2.1260292  9.961373 1901.042 18936.99
## 2343 2.0000000 10.027778 1894.737 19000.00
## 2344 1.8867962 10.087613 1889.109 19056.60
## 2345 1.7888544 10.139525 1884.267 19105.57
## 2346 1.7088007 10.182055 1880.328 19145.60
## 2347 1.6492423 10.213754 1877.407 19175.38
## 2348 1.6124515 10.233360 1875.608 19193.77
## 2349 1.6000000 10.240000 1875.000 19200.00
## 2350 1.6124515 10.233360 1875.608 19193.77
## 2351 1.6492423 10.213754 1877.407 19175.38
## 2352 1.7088007 10.182055 1880.328 19145.60
## 2353 1.7888544 10.139525 1884.267 19105.57
## 2354 1.8867962 10.087613 1889.109 19056.60
## 2355 2.0000000 10.027778 1894.737 19000.00
## 2356 2.1260292  9.961373 1901.042 18936.99
## 2357 2.2627417  9.889588 1907.929 18868.63
## 2358 2.4083189  9.813434 1915.317 18795.84
## 2359 2.5612497  9.733750 1923.141 18719.38
## 2360 2.7202941  9.651225 1931.346 18639.85
## 2361 2.8844410  9.566422 1939.887 18557.78
## 2362 3.0528675  9.479796 1948.730 18473.57
## 2363 3.2249031  9.391721 1957.847 18387.55
## 2364 3.4000000  9.302500 1967.213 18300.00
## 2365 3.5777088  9.212384 1976.811 18211.15
## 2366 3.7576588  9.121578 1986.627 18121.17
## 2367 3.9395431  9.030254 1996.647 18030.23
## 2368 4.1231056  8.938552 2006.863 17938.45
## 2369 4.3081318  8.846593 2017.266 17845.93
## 2370 4.4944410  8.754477 2027.851 17752.78
## 2371 4.6818800  8.662289 2038.614 17659.06
## 2372 4.8703183  8.570101 2049.549 17564.84
## 2373 5.0596443  8.477975 2060.654 17470.18
## 2374 5.2497619  8.385966 2071.928 17375.12
## 2375 5.4405882  8.294118 2083.369 17279.71
## 2376 5.6320511  8.202472 2094.975 17183.97
## 2377 5.8240879  8.111062 2106.747 17087.96
## 2378 6.0166436  8.019920 2118.684 16991.68
## 2379 6.2096699  7.929072 2130.787 16895.17
## 2380 6.2641839  7.903509 2134.230 16867.91
## 2381 6.0728906  7.993394 2122.197 16963.55
## 2382 5.8821765  8.083513 2110.334 17058.91
## 2383 5.6920998  8.173833 2098.642 17153.95
## 2384 5.5027266  8.264319 2087.121 17248.64
## 2385 5.3141321  8.354927 2075.773 17342.93
## 2386 5.1264022  8.445610 2064.599 17436.80
## 2387 4.9396356  8.536314 2053.601 17530.18
## 2388 4.7539457  8.626975 2042.782 17623.03
## 2389 4.5694639  8.717520 2032.145 17715.27
## 2390 4.3863424  8.807865 2021.696 17806.83
## 2391 4.2047592  8.897912 2011.441 17897.62
## 2392 4.0249224  8.987543 2001.386 17987.54
## 2393 3.8470768  9.076624 1991.540 18076.46
## 2394 3.6715120  9.164993 1981.916 18164.24
## 2395 3.4985711  9.252460 1972.526 18250.71
## 2396 3.3286634  9.338798 1963.386 18335.67
## 2397 3.1622777  9.423735 1954.518 18418.86
## 2398 3.0000000  9.506944 1945.946 18500.00
## 2399 2.8425341  9.588037 1937.699 18578.73
## 2400 2.6907248  9.666542 1929.815 18654.64
## 2401 2.5455844  9.741898 1922.337 18727.21
## 2402 2.4083189  9.813434 1915.317 18795.84
## 2403 2.2803509  9.880361 1908.819 18859.82
## 2404 2.1633308  9.941761 1902.916 18918.33
## 2405 2.0591260  9.996597 1897.690 18970.44
## 2406 1.9697716 10.043738 1893.231 19015.11
## 2407 1.8973666 10.082019 1889.633 19051.32
## 2408 1.8439089 10.110328 1886.986 19078.05
## 2409 1.8110770 10.127735 1885.363 19094.46
## 2410 1.8000000 10.133611 1884.817 19100.00
## 2411 1.8110770 10.127735 1885.363 19094.46
## 2412 1.8439089 10.110328 1886.986 19078.05
## 2413 1.8973666 10.082019 1889.633 19051.32
## 2414 1.9697716 10.043738 1893.231 19015.11
## 2415 2.0591260  9.996597 1897.690 18970.44
## 2416 2.1633308  9.941761 1902.916 18918.33
## 2417 2.2803509  9.880361 1908.819 18859.82
## 2418 2.4083189  9.813434 1915.317 18795.84
## 2419 2.5455844  9.741898 1922.337 18727.21
## 2420 2.6907248  9.666542 1929.815 18654.64
## 2421 2.8425341  9.588037 1937.699 18578.73
## 2422 3.0000000  9.506944 1945.946 18500.00
## 2423 3.1622777  9.423735 1954.518 18418.86
## 2424 3.3286634  9.338798 1963.386 18335.67
## 2425 3.4985711  9.252460 1972.526 18250.71
## 2426 3.6715120  9.164993 1981.916 18164.24
## 2427 3.8470768  9.076624 1991.540 18076.46
## 2428 4.0249224  8.987543 2001.386 17987.54
## 2429 4.2047592  8.897912 2011.441 17897.62
## 2430 4.3863424  8.807865 2021.696 17806.83
## 2431 4.5694639  8.717520 2032.145 17715.27
## 2432 4.7539457  8.626975 2042.782 17623.03
## 2433 4.9396356  8.536314 2053.601 17530.18
## 2434 5.1264022  8.445610 2064.599 17436.80
## 2435 5.3141321  8.354927 2075.773 17342.93
## 2436 5.5027266  8.264319 2087.121 17248.64
## 2437 5.6920998  8.173833 2098.642 17153.95
## 2438 5.8821765  8.083513 2110.334 17058.91
## 2439 6.0728906  7.993394 2122.197 16963.55
## 2440 6.2641839  7.903509 2134.230 16867.91
## 2441 6.3245553  7.875247 2138.056 16837.72
## 2442 6.1351447  7.964086 2126.098 16932.43
## 2443 5.9464275  8.053096 2114.316 17026.79
## 2444 5.7584720  8.142238 2102.710 17120.76
## 2445 5.5713553  8.231469 2091.282 17214.32
## 2446 5.3851648  8.320742 2080.033 17307.42
## 2447 5.2000000  8.410000 2068.966 17400.00
## 2448 5.0159745  8.499181 2058.082 17492.01
## 2449 4.8332184  8.588212 2047.387 17583.39
## 2450 4.6518813  8.677010 2036.884 17674.06
## 2451 4.4721360  8.765480 2026.578 17763.93
## 2452 4.2941821  8.853510 2016.478 17852.91
## 2453 4.1182521  8.940971 2006.591 17940.87
## 2454 3.9446166  9.027713 1996.928 18027.69
## 2455 3.7735925  9.113560 1987.500 18113.20
## 2456 3.6055513  9.198305 1978.324 18197.22
## 2457 3.4409301  9.281705 1969.416 18279.53
## 2458 3.2802439  9.363476 1960.797 18359.88
## 2459 3.1240999  9.443278 1952.495 18437.95
## 2460 2.9732137  9.520715 1944.538 18513.39
## 2461 2.8284271  9.595318 1936.964 18585.79
## 2462 2.6907248  9.666542 1929.815 18654.64
## 2463 2.5612497  9.733750 1923.141 18719.38
## 2464 2.4413111  9.796216 1917.000 18779.34
## 2465 2.3323808  9.853122 1911.456 18833.81
## 2466 2.2360680  9.903573 1906.581 18881.97
## 2467 2.1540659  9.946630 1902.450 18922.97
## 2468 2.0880613  9.981355 1899.138 18955.97
## 2469 2.0396078 10.006885 1896.714 18980.20
## 2470 2.0099751 10.022514 1895.234 18995.01
## 2471 2.0000000 10.027778 1894.737 19000.00
## 2472 2.0099751 10.022514 1895.234 18995.01
## 2473 2.0396078 10.006885 1896.714 18980.20
## 2474 2.0880613  9.981355 1899.138 18955.97
## 2475 2.1540659  9.946630 1902.450 18922.97
## 2476 2.2360680  9.903573 1906.581 18881.97
## 2477 2.3323808  9.853122 1911.456 18833.81
## 2478 2.4413111  9.796216 1917.000 18779.34
## 2479 2.5612497  9.733750 1923.141 18719.38
## 2480 2.6907248  9.666542 1929.815 18654.64
## 2481 2.8284271  9.595318 1936.964 18585.79
## 2482 2.9732137  9.520715 1944.538 18513.39
## 2483 3.1240999  9.443278 1952.495 18437.95
## 2484 3.2802439  9.363476 1960.797 18359.88
## 2485 3.4409301  9.281705 1969.416 18279.53
## 2486 3.6055513  9.198305 1978.324 18197.22
## 2487 3.7735925  9.113560 1987.500 18113.20
## 2488 3.9446166  9.027713 1996.928 18027.69
## 2489 4.1182521  8.940971 2006.591 17940.87
## 2490 4.2941821  8.853510 2016.478 17852.91
## 2491 4.4721360  8.765480 2026.578 17763.93
## 2492 4.6518813  8.677010 2036.884 17674.06
## 2493 4.8332184  8.588212 2047.387 17583.39
## 2494 5.0159745  8.499181 2058.082 17492.01
## 2495 5.2000000  8.410000 2068.966 17400.00
## 2496 5.3851648  8.320742 2080.033 17307.42
## 2497 5.5713553  8.231469 2091.282 17214.32
## 2498 5.7584720  8.142238 2102.710 17120.76
## 2499 5.9464275  8.053096 2114.316 17026.79
## 2500 6.1351447  7.964086 2126.098 16932.43
## 2501 6.3245553  7.875247 2138.056 16837.72
## 2502 6.3906181  7.844379 2142.259 16804.69
## 2503 6.2032250  7.932097 2130.381 16898.39
## 2504 6.0166436  8.019920 2118.684 16991.68
## 2505 5.8309519  8.107805 2107.170 17084.52
## 2506 5.6462377  8.195701 2095.840 17176.88
## 2507 5.4626001  8.283555 2084.697 17268.70
## 2508 5.2801515  8.371305 2073.742 17359.92
## 2509 5.0990195  8.458878 2062.979 17450.49
## 2510 4.9193496  8.546195 2052.413 17540.33
## 2511 4.7413078  8.633162 2042.050 17629.35
## 2512 4.5650849  8.719675 2031.894 17717.46
## 2513 4.3908997  8.805611 2021.955 17804.55
## 2514 4.2190046  8.890831 2012.241 17890.50
## 2515 4.0496913  8.975171 2002.764 17975.15
## 2516 3.8832976  9.058446 1993.537 18058.35
## 2517 3.7202150  9.140436 1984.576 18139.89
## 2518 3.5608988  9.220890 1975.899 18219.55
## 2519 3.4058773  9.299513 1967.529 18297.06
## 2520 3.2557641  9.375964 1959.491 18372.12
## 2521 3.1112698  9.449850 1951.816 18444.37
## 2522 2.9732137  9.520715 1944.538 18513.39
## 2523 2.8425341  9.588037 1937.699 18578.73
## 2524 2.7202941  9.651225 1931.346 18639.85
## 2525 2.6076810  9.709622 1925.529 18696.16
## 2526 2.5059928  9.762504 1920.307 18747.00
## 2527 2.4166092  9.809106 1915.740 18791.70
## 2528 2.3409400  9.848644 1911.891 18829.53
## 2529 2.2803509  9.880361 1908.819 18859.82
## 2530 2.2360680  9.903573 1906.581 18881.97
## 2531 2.2090722  9.917738 1905.219 18895.46
## 2532 2.2000000  9.922500 1904.762 18900.00
## 2533 2.2090722  9.917738 1905.219 18895.46
## 2534 2.2360680  9.903573 1906.581 18881.97
## 2535 2.2803509  9.880361 1908.819 18859.82
## 2536 2.3409400  9.848644 1911.891 18829.53
## 2537 2.4166092  9.809106 1915.740 18791.70
## 2538 2.5059928  9.762504 1920.307 18747.00
## 2539 2.6076810  9.709622 1925.529 18696.16
## 2540 2.7202941  9.651225 1931.346 18639.85
## 2541 2.8425341  9.588037 1937.699 18578.73
## 2542 2.9732137  9.520715 1944.538 18513.39
## 2543 3.1112698  9.449850 1951.816 18444.37
## 2544 3.2557641  9.375964 1959.491 18372.12
## 2545 3.4058773  9.299513 1967.529 18297.06
## 2546 3.5608988  9.220890 1975.899 18219.55
## 2547 3.7202150  9.140436 1984.576 18139.89
## 2548 3.8832976  9.058446 1993.537 18058.35
## 2549 4.0496913  8.975171 2002.764 17975.15
## 2550 4.2190046  8.890831 2012.241 17890.50
## 2551 4.3908997  8.805611 2021.955 17804.55
## 2552 4.5650849  8.719675 2031.894 17717.46
## 2553 4.7413078  8.633162 2042.050 17629.35
## 2554 4.9193496  8.546195 2052.413 17540.33
## 2555 5.0990195  8.458878 2062.979 17450.49
## 2556 5.2801515  8.371305 2073.742 17359.92
## 2557 5.4626001  8.283555 2084.697 17268.70
## 2558 5.6462377  8.195701 2095.840 17176.88
## 2559 5.8309519  8.107805 2107.170 17084.52
## 2560 6.0166436  8.019920 2118.684 16991.68
## 2561 6.2032250  7.932097 2130.381 16898.39
## 2562 6.3906181  7.844379 2142.259 16804.69
## 2563 6.4621978  7.811001 2146.831 16768.90
## 2564 6.2769419  7.897532 2135.038 16861.53
## 2565 6.0926185  7.984101 2123.431 16953.69
## 2566 5.9093147  8.070659 2112.014 17045.34
## 2567 5.7271284  8.157151 2100.787 17136.44
## 2568 5.5461698  8.243517 2089.753 17226.92
## 2569 5.3665631  8.329687 2078.916 17316.72
## 2570 5.1884487  8.415584 2068.279 17405.78
## 2571 5.0119856  8.501119 2057.848 17494.01
## 2572 4.8373546  8.586192 2047.628 17581.32
## 2573 4.6647615  8.670688 2037.626 17667.62
## 2574 4.4944410  8.754477 2027.851 17752.78
## 2575 4.3266615  8.837410 2018.314 17836.67
## 2576 4.1617304  8.919316 2009.026 17919.13
## 2577 4.0000000  9.000000 2000.000 18000.00
## 2578 3.8418745  9.079236 1991.254 18079.06
## 2579 3.6878178  9.156768 1982.806 18156.09
## 2580 3.5383612  9.232299 1974.678 18230.82
## 2581 3.3941125  9.305493 1966.897 18302.94
## 2582 3.2557641  9.375964 1959.491 18372.12
## 2583 3.1240999  9.443278 1952.495 18437.95
## 2584 3.0000000  9.506944 1945.946 18500.00
## 2585 2.8844410  9.566422 1939.887 18557.78
## 2586 2.7784888  9.621117 1934.365 18610.76
## 2587 2.6832816  9.670399 1929.430 18658.36
## 2588 2.6000000  9.713611 1925.134 18700.00
## 2589 2.5298221  9.750099 1921.528 18735.09
## 2590 2.4738634  9.779243 1918.663 18763.07
## 2591 2.4331050  9.800497 1916.581 18783.45
## 2592 2.4083189  9.813434 1915.317 18795.84
## 2593 2.4000000  9.817778 1914.894 18800.00
## 2594 2.4083189  9.813434 1915.317 18795.84
## 2595 2.4331050  9.800497 1916.581 18783.45
## 2596 2.4738634  9.779243 1918.663 18763.07
## 2597 2.5298221  9.750099 1921.528 18735.09
## 2598 2.6000000  9.713611 1925.134 18700.00
## 2599 2.6832816  9.670399 1929.430 18658.36
## 2600 2.7784888  9.621117 1934.365 18610.76
## 2601 2.8844410  9.566422 1939.887 18557.78
## 2602 3.0000000  9.506944 1945.946 18500.00
## 2603 3.1240999  9.443278 1952.495 18437.95
## 2604 3.2557641  9.375964 1959.491 18372.12
## 2605 3.3941125  9.305493 1966.897 18302.94
## 2606 3.5383612  9.232299 1974.678 18230.82
## 2607 3.6878178  9.156768 1982.806 18156.09
## 2608 3.8418745  9.079236 1991.254 18079.06
## 2609 4.0000000  9.000000 2000.000 18000.00
## 2610 4.1617304  8.919316 2009.026 17919.13
## 2611 4.3266615  8.837410 2018.314 17836.67
## 2612 4.4944410  8.754477 2027.851 17752.78
## 2613 4.6647615  8.670688 2037.626 17667.62
## 2614 4.8373546  8.586192 2047.628 17581.32
## 2615 5.0119856  8.501119 2057.848 17494.01
## 2616 5.1884487  8.415584 2068.279 17405.78
## 2617 5.3665631  8.329687 2078.916 17316.72
## 2618 5.5461698  8.243517 2089.753 17226.92
## 2619 5.7271284  8.157151 2100.787 17136.44
## 2620 5.9093147  8.070659 2112.014 17045.34
## 2621 6.0926185  7.984101 2123.431 16953.69
## 2622 6.2769419  7.897532 2135.038 16861.53
## 2623 6.4621978  7.811001 2146.831 16768.90
## 2624 6.5391131  7.775215 2151.766 16730.44
## 2625 6.3560994  7.860500 2140.061 16821.95
## 2626 6.1741396  7.945756 2128.549 16912.93
## 2627 5.9933296  8.030928 2117.232 17003.34
## 2628 5.8137767  8.115957 2106.112 17093.11
## 2629 5.6356011  8.200777 2095.192 17182.20
## 2630 5.4589376  8.285312 2084.476 17270.53
## 2631 5.2839379  8.369479 2073.968 17358.03
## 2632 5.1107729  8.453182 2063.674 17444.61
## 2633 4.9396356  8.536314 2053.601 17530.18
## 2634 4.7707442  8.618753 2043.756 17614.63
## 2635 4.6043458  8.700363 2034.148 17697.83
## 2636 4.4407207  8.780989 2024.788 17779.64
## 2637 4.2801869  8.860452 2015.688 17859.91
## 2638 4.1231056  8.938552 2006.863 17938.45
## 2639 3.9698866  9.015063 1998.328 18015.06
## 2640 3.8209946  9.089725 1990.104 18089.50
## 2641 3.6769553  9.162247 1982.213 18161.52
## 2642 3.5383612  9.232299 1974.678 18230.82
## 2643 3.4058773  9.299513 1967.529 18297.06
## 2644 3.2802439  9.363476 1960.797 18359.88
## 2645 3.1622777  9.423735 1954.518 18418.86
## 2646 3.0528675  9.479796 1948.730 18473.57
## 2647 2.9529646  9.531131 1943.475 18523.52
## 2648 2.8635642  9.577187 1938.797 18568.22
## 2649 2.7856777  9.617401 1934.739 18607.16
## 2650 2.7202941  9.651225 1931.346 18639.85
## 2651 2.6683328  9.678148 1928.658 18665.83
## 2652 2.6305893  9.697728 1926.710 18684.71
## 2653 2.6076810  9.709622 1925.529 18696.16
## 2654 2.6000000  9.713611 1925.134 18700.00
## 2655 2.6076810  9.709622 1925.529 18696.16
## 2656 2.6305893  9.697728 1926.710 18684.71
## 2657 2.6683328  9.678148 1928.658 18665.83
## 2658 2.7202941  9.651225 1931.346 18639.85
## 2659 2.7856777  9.617401 1934.739 18607.16
## 2660 2.8635642  9.577187 1938.797 18568.22
## 2661 2.9529646  9.531131 1943.475 18523.52
## 2662 3.0528675  9.479796 1948.730 18473.57
## 2663 3.1622777  9.423735 1954.518 18418.86
## 2664 3.2802439  9.363476 1960.797 18359.88
## 2665 3.4058773  9.299513 1967.529 18297.06
## 2666 3.5383612  9.232299 1974.678 18230.82
## 2667 3.6769553  9.162247 1982.213 18161.52
## 2668 3.8209946  9.089725 1990.104 18089.50
## 2669 3.9698866  9.015063 1998.328 18015.06
## 2670 4.1231056  8.938552 2006.863 17938.45
## 2671 4.2801869  8.860452 2015.688 17859.91
## 2672 4.4407207  8.780989 2024.788 17779.64
## 2673 4.6043458  8.700363 2034.148 17697.83
## 2674 4.7707442  8.618753 2043.756 17614.63
## 2675 4.9396356  8.536314 2053.601 17530.18
## 2676 5.1107729  8.453182 2063.674 17444.61
## 2677 5.2839379  8.369479 2073.968 17358.03
## 2678 5.4589376  8.285312 2084.476 17270.53
## 2679 5.6356011  8.200777 2095.192 17182.20
## 2680 5.8137767  8.115957 2106.112 17093.11
## 2681 5.9933296  8.030928 2117.232 17003.34
## 2682 6.1741396  7.945756 2128.549 16912.93
## 2683 6.3560994  7.860500 2140.061 16821.95
## 2684 6.5391131  7.775215 2151.766 16730.44
## 2685 6.6211781  7.737123 2157.056 16689.41
## 2686 6.4404969  7.821113 2145.443 16779.75
## 2687 6.2609903  7.905005 2134.028 16869.50
## 2688 6.0827625  7.988743 2122.814 16958.62
## 2689 5.9059292  8.072262 2111.804 17047.04
## 2690 5.7306195  8.155489 2101.001 17134.69
## 2691 5.5569776  8.238346 2090.409 17221.51
## 2692 5.3851648  8.320742 2080.033 17307.42
## 2693 5.2153619  8.402577 2069.879 17392.32
## 2694 5.0477718  8.483738 2059.955 17476.11
## 2695 4.8826222  8.564099 2050.267 17558.69
## 2696 4.7201695  8.643517 2040.826 17639.92
## 2697 4.5607017  8.721832 2031.643 17719.65
## 2698 4.4045431  8.798865 2022.730 17797.73
## 2699 4.2520583  8.874412 2014.102 17873.97
## 2700 4.1036569  8.948246 2005.775 17948.17
## 2701 3.9597980  9.020112 1997.769 18020.10
## 2702 3.8209946  9.089725 1990.104 18089.50
## 2703 3.6878178  9.156768 1982.806 18156.09
## 2704 3.5608988  9.220890 1975.899 18219.55
## 2705 3.4409301  9.281705 1969.416 18279.53
## 2706 3.3286634  9.338798 1963.386 18335.67
## 2707 3.2249031  9.391721 1957.847 18387.55
## 2708 3.1304952  9.440003 1952.833 18434.75
## 2709 3.0463092  9.483162 1948.385 18476.85
## 2710 2.9732137  9.520715 1944.538 18513.39
## 2711 2.9120440  9.552198 1941.331 18543.98
## 2712 2.8635642  9.577187 1938.797 18568.22
## 2713 2.8284271  9.595318 1936.964 18585.79
## 2714 2.8071338  9.606315 1935.855 18596.43
## 2715 2.8000000  9.610000 1935.484 18600.00
## 2716 2.8071338  9.606315 1935.855 18596.43
## 2717 2.8284271  9.595318 1936.964 18585.79
## 2718 2.8635642  9.577187 1938.797 18568.22
## 2719 2.9120440  9.552198 1941.331 18543.98
## 2720 2.9732137  9.520715 1944.538 18513.39
## 2721 3.0463092  9.483162 1948.385 18476.85
## 2722 3.1304952  9.440003 1952.833 18434.75
## 2723 3.2249031  9.391721 1957.847 18387.55
## 2724 3.3286634  9.338798 1963.386 18335.67
## 2725 3.4409301  9.281705 1969.416 18279.53
## 2726 3.5608988  9.220890 1975.899 18219.55
## 2727 3.6878178  9.156768 1982.806 18156.09
## 2728 3.8209946  9.089725 1990.104 18089.50
## 2729 3.9597980  9.020112 1997.769 18020.10
## 2730 4.1036569  8.948246 2005.775 17948.17
## 2731 4.2520583  8.874412 2014.102 17873.97
## 2732 4.4045431  8.798865 2022.730 17797.73
## 2733 4.5607017  8.721832 2031.643 17719.65
## 2734 4.7201695  8.643517 2040.826 17639.92
## 2735 4.8826222  8.564099 2050.267 17558.69
## 2736 5.0477718  8.483738 2059.955 17476.11
## 2737 5.2153619  8.402577 2069.879 17392.32
## 2738 5.3851648  8.320742 2080.033 17307.42
## 2739 5.5569776  8.238346 2090.409 17221.51
## 2740 5.7306195  8.155489 2101.001 17134.69
## 2741 5.9059292  8.072262 2111.804 17047.04
## 2742 6.0827625  7.988743 2122.814 16958.62
## 2743 6.2609903  7.905005 2134.028 16869.50
## 2744 6.4404969  7.821113 2145.443 16779.75
## 2745 6.6211781  7.737123 2157.056 16689.41
## 2746 6.7082039  7.696831 2162.695 16645.90
## 2747 6.5299311  7.779483 2151.176 16735.03
## 2748 6.3529521  7.861971 2139.861 16823.52
## 2749 6.1773781  7.944234 2128.753 16911.31
## 2750 6.0033324  8.026204 2117.855 16998.33
## 2751 5.8309519  8.107805 2107.170 17084.52
## 2752 5.6603887  8.188951 2096.704 17169.81
## 2753 5.4918121  8.269549 2086.461 17254.09
## 2754 5.3254108  8.349494 2076.449 17337.29
## 2755 5.1613952  8.428669 2066.673 17419.30
## 2756 5.0000000  8.506944 2057.143 17500.00
## 2757 4.8414874  8.584174 2047.868 17579.26
## 2758 4.6861498  8.660195 2038.860 17656.93
## 2759 4.5343136  8.734826 2030.131 17732.84
## 2760 4.3863424  8.807865 2021.696 17806.83
## 2761 4.2426407  8.879089 2013.572 17878.68
## 2762 4.1036569  8.948246 2005.775 17948.17
## 2763 3.9698866  9.015063 1998.328 18015.06
## 2764 3.8418745  9.079236 1991.254 18079.06
## 2765 3.7202150  9.140436 1984.576 18139.89
## 2766 3.6055513  9.198305 1978.324 18197.22
## 2767 3.4985711  9.252460 1972.526 18250.71
## 2768 3.4000000  9.302500 1967.213 18300.00
## 2769 3.3105891  9.348006 1962.419 18344.71
## 2770 3.2310989  9.388556 1958.177 18384.45
## 2771 3.1622777  9.423735 1954.518 18418.86
## 2772 3.1048349  9.453147 1951.475 18447.58
## 2773 3.0594117  9.476438 1949.076 18470.29
## 2774 3.0265492  9.493306 1947.343 18486.73
## 2775 3.0066593  9.503523 1946.296 18496.67
## 2776 3.0000000  9.506944 1945.946 18500.00
## 2777 3.0066593  9.503523 1946.296 18496.67
## 2778 3.0265492  9.493306 1947.343 18486.73
## 2779 3.0594117  9.476438 1949.076 18470.29
## 2780 3.1048349  9.453147 1951.475 18447.58
## 2781 3.1622777  9.423735 1954.518 18418.86
## 2782 3.2310989  9.388556 1958.177 18384.45
## 2783 3.3105891  9.348006 1962.419 18344.71
## 2784 3.4000000  9.302500 1967.213 18300.00
## 2785 3.4985711  9.252460 1972.526 18250.71
## 2786 3.6055513  9.198305 1978.324 18197.22
## 2787 3.7202150  9.140436 1984.576 18139.89
## 2788 3.8418745  9.079236 1991.254 18079.06
## 2789 3.9698866  9.015063 1998.328 18015.06
## 2790 4.1036569  8.948246 2005.775 17948.17
## 2791 4.2426407  8.879089 2013.572 17878.68
## 2792 4.3863424  8.807865 2021.696 17806.83
## 2793 4.5343136  8.734826 2030.131 17732.84
## 2794 4.6861498  8.660195 2038.860 17656.93
## 2795 4.8414874  8.584174 2047.868 17579.26
## 2796 5.0000000  8.506944 2057.143 17500.00
## 2797 5.1613952  8.428669 2066.673 17419.30
## 2798 5.3254108  8.349494 2076.449 17337.29
## 2799 5.4918121  8.269549 2086.461 17254.09
## 2800 5.6603887  8.188951 2096.704 17169.81
## 2801 5.8309519  8.107805 2107.170 17084.52
## 2802 6.0033324  8.026204 2117.855 16998.33
## 2803 6.1773781  7.944234 2128.753 16911.31
## 2804 6.3529521  7.861971 2139.861 16823.52
## 2805 6.5299311  7.779483 2151.176 16735.03
## 2806 6.7082039  7.696831 2162.695 16645.90
## 2807 6.8000000  7.654444 2168.675 16600.00
## 2808 6.6241981  7.735723 2157.252 16687.90
## 2809 6.4498062  7.816774 2146.038 16775.10
## 2810 6.2769419  7.897532 2135.038 16861.53
## 2811 6.1057350  7.977925 2124.253 16947.13
## 2812 5.9363288  8.057873 2113.689 17031.84
## 2813 5.7688820  8.137288 2103.349 17115.56
## 2814 5.6035703  8.216072 2093.241 17198.21
## 2815 5.4405882  8.294118 2083.369 17279.71
## 2816 5.2801515  8.371305 2073.742 17359.92
## 2817 5.1224994  8.447500 2064.368 17438.75
## 2818 4.9678969  8.522557 2055.258 17516.05
## 2819 4.8166378  8.596312 2046.422 17591.68
## 2820 4.6690470  8.668585 2037.873 17665.48
## 2821 4.5254834  8.739176 2029.626 17737.26
## 2822 4.3863424  8.807865 2021.696 17806.83
## 2823 4.2520583  8.874412 2014.102 17873.97
## 2824 4.1231056  8.938552 2006.863 17938.45
## 2825 4.0000000  9.000000 2000.000 18000.00
## 2826 3.8832976  9.058446 1993.537 18058.35
## 2827 3.7735925  9.113560 1987.500 18113.20
## 2828 3.6715120  9.164993 1981.916 18164.24
## 2829 3.5777088  9.212384 1976.811 18211.15
## 2830 3.4928498  9.255361 1972.216 18253.58
## 2831 3.4176015  9.293555 1968.160 18291.20
## 2832 3.3526109  9.326605 1964.669 18323.69
## 2833 3.2984845  9.354175 1961.772 18350.76
## 2834 3.2557641  9.375964 1959.491 18372.12
## 2835 3.2249031  9.391721 1957.847 18387.55
## 2836 3.2062439  9.401253 1956.854 18396.88
## 2837 3.2000000  9.404444 1956.522 18400.00
## 2838 3.2062439  9.401253 1956.854 18396.88
## 2839 3.2249031  9.391721 1957.847 18387.55
## 2840 3.2557641  9.375964 1959.491 18372.12
## 2841 3.2984845  9.354175 1961.772 18350.76
## 2842 3.3526109  9.326605 1964.669 18323.69
## 2843 3.4176015  9.293555 1968.160 18291.20
## 2844 3.4928498  9.255361 1972.216 18253.58
## 2845 3.5777088  9.212384 1976.811 18211.15
## 2846 3.6715120  9.164993 1981.916 18164.24
## 2847 3.7735925  9.113560 1987.500 18113.20
## 2848 3.8832976  9.058446 1993.537 18058.35
## 2849 4.0000000  9.000000 2000.000 18000.00
## 2850 4.1231056  8.938552 2006.863 17938.45
## 2851 4.2520583  8.874412 2014.102 17873.97
## 2852 4.3863424  8.807865 2021.696 17806.83
## 2853 4.5254834  8.739176 2029.626 17737.26
## 2854 4.6690470  8.668585 2037.873 17665.48
## 2855 4.8166378  8.596312 2046.422 17591.68
## 2856 4.9678969  8.522557 2055.258 17516.05
## 2857 5.1224994  8.447500 2064.368 17438.75
## 2858 5.2801515  8.371305 2073.742 17359.92
## 2859 5.4405882  8.294118 2083.369 17279.71
## 2860 5.6035703  8.216072 2093.241 17198.21
## 2861 5.7688820  8.137288 2103.349 17115.56
## 2862 5.9363288  8.057873 2113.689 17031.84
## 2863 6.1057350  7.977925 2124.253 16947.13
## 2864 6.2769419  7.897532 2135.038 16861.53
## 2865 6.4498062  7.816774 2146.038 16775.10
## 2866 6.6241981  7.735723 2157.252 16687.90
## 2867 6.8000000  7.654444 2168.675 16600.00
## 2868 6.8963759  7.610069 2174.988 16551.81
## 2869 6.7230945  7.689947 2163.663 16638.45
## 2870 6.5513357  7.769536 2152.552 16724.33
## 2871 6.3812225  7.848765 2141.660 16809.39
## 2872 6.2128898  7.927561 2130.990 16893.56
## 2873 6.0464866  8.005841 2120.546 16976.76
## 2874 5.8821765  8.083513 2110.334 17058.91
## 2875 5.7201399  8.160478 2100.359 17139.93
## 2876 5.5605755  8.236625 2090.627 17219.71
## 2877 5.4037024  8.311832 2081.148 17298.15
## 2878 5.2497619  8.385966 2071.928 17375.12
## 2879 5.0990195  8.458878 2062.979 17450.49
## 2880 4.9517674  8.530407 2054.312 17524.12
## 2881 4.8083261  8.600374 2045.938 17595.84
## 2882 4.6690470  8.668585 2037.873 17665.48
## 2883 4.5343136  8.734826 2030.131 17732.84
## 2884 4.4045431  8.798865 2022.730 17797.73
## 2885 4.2801869  8.860452 2015.688 17859.91
## 2886 4.1617304  8.919316 2009.026 17919.13
## 2887 4.0496913  8.975171 2002.764 17975.15
## 2888 3.9446166  9.027713 1996.928 18027.69
## 2889 3.8470768  9.076624 1991.540 18076.46
## 2890 3.7576588  9.121578 1986.627 18121.17
## 2891 3.6769553  9.162247 1982.213 18161.52
## 2892 3.6055513  9.198305 1978.324 18197.22
## 2893 3.5440090  9.229439 1974.984 18228.00
## 2894 3.4928498  9.255361 1972.216 18253.58
## 2895 3.4525353  9.275814 1970.041 18273.73
## 2896 3.4234486  9.290584 1968.474 18288.28
## 2897 3.4058773  9.299513 1967.529 18297.06
## 2898 3.4000000  9.302500 1967.213 18300.00
## 2899 3.4058773  9.299513 1967.529 18297.06
## 2900 3.4234486  9.290584 1968.474 18288.28
## 2901 3.4525353  9.275814 1970.041 18273.73
## 2902 3.4928498  9.255361 1972.216 18253.58
## 2903 3.5440090  9.229439 1974.984 18228.00
## 2904 3.6055513  9.198305 1978.324 18197.22
## 2905 3.6769553  9.162247 1982.213 18161.52
## 2906 3.7576588  9.121578 1986.627 18121.17
## 2907 3.8470768  9.076624 1991.540 18076.46
## 2908 3.9446166  9.027713 1996.928 18027.69
## 2909 4.0496913  8.975171 2002.764 17975.15
## 2910 4.1617304  8.919316 2009.026 17919.13
## 2911 4.2801869  8.860452 2015.688 17859.91
## 2912 4.4045431  8.798865 2022.730 17797.73
## 2913 4.5343136  8.734826 2030.131 17732.84
## 2914 4.6690470  8.668585 2037.873 17665.48
## 2915 4.8083261  8.600374 2045.938 17595.84
## 2916 4.9517674  8.530407 2054.312 17524.12
## 2917 5.0990195  8.458878 2062.979 17450.49
## 2918 5.2497619  8.385966 2071.928 17375.12
## 2919 5.4037024  8.311832 2081.148 17298.15
## 2920 5.5605755  8.236625 2090.627 17219.71
## 2921 5.7201399  8.160478 2100.359 17139.93
## 2922 5.8821765  8.083513 2110.334 17058.91
## 2923 6.0464866  8.005841 2120.546 16976.76
## 2924 6.2128898  7.927561 2130.990 16893.56
## 2925 6.3812225  7.848765 2141.660 16809.39
## 2926 6.5513357  7.769536 2152.552 16724.33
## 2927 6.7230945  7.689947 2163.663 16638.45
## 2928 6.8963759  7.610069 2174.988 16551.81
## 2929 6.9971423  7.563810 2181.629 16501.43
## 2930 6.8264193  7.642267 2170.402 16586.79
## 2931 6.6573268  7.720374 2159.395 16671.34
## 2932 6.4899923  7.798060 2148.612 16755.00
## 2933 6.3245553  7.875247 2138.056 16837.72
## 2934 6.1611687  7.951851 2127.733 16919.42
## 2935 6.0000000  8.027778 2117.647 17000.00
## 2936 5.8412327  8.102926 2107.804 17079.38
## 2937 5.6850682  8.177184 2098.212 17157.47
## 2938 5.5317267  8.250430 2088.877 17234.14
## 2939 5.3814496  8.322528 2079.810 17309.28
## 2940 5.2345009  8.393333 2071.019 17382.75
## 2941 5.0911688  8.462684 2062.515 17454.42
## 2942 4.9517674  8.530407 2054.312 17524.12
## 2943 4.8166378  8.596312 2046.422 17591.68
## 2944 4.6861498  8.660195 2038.860 17656.93
## 2945 4.5607017  8.721832 2031.643 17719.65
## 2946 4.4407207  8.780989 2024.788 17779.64
## 2947 4.3266615  8.837410 2018.314 17836.67
## 2948 4.2190046  8.890831 2012.241 17890.50
## 2949 4.1182521  8.940971 2006.591 17940.87
## 2950 4.0249224  8.987543 2001.386 17987.54
## 2951 3.9395431  9.030254 1996.647 18030.23
## 2952 3.8626416  9.068810 1992.398 18068.68
## 2953 3.7947332  9.102926 1988.661 18102.63
## 2954 3.7363083  9.132329 1985.457 18131.85
## 2955 3.6878178  9.156768 1982.806 18156.09
## 2956 3.6496575  9.176024 1980.724 18175.17
## 2957 3.6221541  9.189914 1979.227 18188.92
## 2958 3.6055513  9.198305 1978.324 18197.22
## 2959 3.6000000  9.201111 1978.022 18200.00
## 2960 3.6055513  9.198305 1978.324 18197.22
## 2961 3.6221541  9.189914 1979.227 18188.92
## 2962 3.6496575  9.176024 1980.724 18175.17
## 2963 3.6878178  9.156768 1982.806 18156.09
## 2964 3.7363083  9.132329 1985.457 18131.85
## 2965 3.7947332  9.102926 1988.661 18102.63
## 2966 3.8626416  9.068810 1992.398 18068.68
## 2967 3.9395431  9.030254 1996.647 18030.23
## 2968 4.0249224  8.987543 2001.386 17987.54
## 2969 4.1182521  8.940971 2006.591 17940.87
## 2970 4.2190046  8.890831 2012.241 17890.50
## 2971 4.3266615  8.837410 2018.314 17836.67
## 2972 4.4407207  8.780989 2024.788 17779.64
## 2973 4.5607017  8.721832 2031.643 17719.65
## 2974 4.6861498  8.660195 2038.860 17656.93
## 2975 4.8166378  8.596312 2046.422 17591.68
## 2976 4.9517674  8.530407 2054.312 17524.12
## 2977 5.0911688  8.462684 2062.515 17454.42
## 2978 5.2345009  8.393333 2071.019 17382.75
## 2979 5.3814496  8.322528 2079.810 17309.28
## 2980 5.5317267  8.250430 2088.877 17234.14
## 2981 5.6850682  8.177184 2098.212 17157.47
## 2982 5.8412327  8.102926 2107.804 17079.38
## 2983 6.0000000  8.027778 2117.647 17000.00
## 2984 6.1611687  7.951851 2127.733 16919.42
## 2985 6.3245553  7.875247 2138.056 16837.72
## 2986 6.4899923  7.798060 2148.612 16755.00
## 2987 6.6573268  7.720374 2159.395 16671.34
## 2988 6.8264193  7.642267 2170.402 16586.79
## 2989 6.9971423  7.563810 2181.629 16501.43
## 2990 7.1021124  7.515771 2188.590 16448.94
## 2991 6.9339743  7.592792 2177.462 16533.01
## 2992 6.7675697  7.669406 2166.558 16616.22
## 2993 6.6030296  7.745539 2155.884 16698.49
## 2994 6.4404969  7.821113 2145.443 16779.75
## 2995 6.2801274  7.896040 2135.239 16859.94
## 2996 6.1220911  7.970227 2125.279 16938.95
## 2997 5.9665736  8.043570 2115.567 17016.71
## 2998 5.8137767  8.115957 2106.112 17093.11
## 2999 5.6639209  8.187266 2096.920 17168.04
## 3000 5.5172457  8.257364 2088.000 17241.38
## 3001 5.3740115  8.326105 2079.363 17312.99
## 3002 5.2345009  8.393333 2071.019 17382.75
## 3003 5.0990195  8.458878 2062.979 17450.49
## 3004 4.9678969  8.522557 2055.258 17516.05
## 3005 4.8414874  8.584174 2047.868 17579.26
## 3006 4.7201695  8.643517 2040.826 17639.92
## 3007 4.6043458  8.700363 2034.148 17697.83
## 3008 4.4944410  8.754477 2027.851 17752.78
## 3009 4.3908997  8.805611 2021.955 17804.55
## 3010 4.2941821  8.853510 2016.478 17852.91
## 3011 4.2047592  8.897912 2011.441 17897.62
## 3012 4.1231056  8.938552 2006.863 17938.45
## 3013 4.0496913  8.975171 2002.764 17975.15
## 3014 3.9849718  9.007516 1999.165 18007.51
## 3015 3.9293765  9.035346 1996.084 18035.31
## 3016 3.8832976  9.058446 1993.537 18058.35
## 3017 3.8470768  9.076624 1991.540 18076.46
## 3018 3.8209946  9.089725 1990.104 18089.50
## 3019 3.8052595  9.097634 1989.239 18097.37
## 3020 3.8000000  9.100278 1988.950 18100.00
## 3021 3.8052595  9.097634 1989.239 18097.37
## 3022 3.8209946  9.089725 1990.104 18089.50
## 3023 3.8470768  9.076624 1991.540 18076.46
## 3024 3.8832976  9.058446 1993.537 18058.35
## 3025 3.9293765  9.035346 1996.084 18035.31
## 3026 3.9849718  9.007516 1999.165 18007.51
## 3027 4.0496913  8.975171 2002.764 17975.15
## 3028 4.1231056  8.938552 2006.863 17938.45
## 3029 4.2047592  8.897912 2011.441 17897.62
## 3030 4.2941821  8.853510 2016.478 17852.91
## 3031 4.3908997  8.805611 2021.955 17804.55
## 3032 4.4944410  8.754477 2027.851 17752.78
## 3033 4.6043458  8.700363 2034.148 17697.83
## 3034 4.7201695  8.643517 2040.826 17639.92
## 3035 4.8414874  8.584174 2047.868 17579.26
## 3036 4.9678969  8.522557 2055.258 17516.05
## 3037 5.0990195  8.458878 2062.979 17450.49
## 3038 5.2345009  8.393333 2071.019 17382.75
## 3039 5.3740115  8.326105 2079.363 17312.99
## 3040 5.5172457  8.257364 2088.000 17241.38
## 3041 5.6639209  8.187266 2096.920 17168.04
## 3042 5.8137767  8.115957 2106.112 17093.11
## 3043 5.9665736  8.043570 2115.567 17016.71
## 3044 6.1220911  7.970227 2125.279 16938.95
## 3045 6.2801274  7.896040 2135.239 16859.94
## 3046 6.4404969  7.821113 2145.443 16779.75
## 3047 6.6030296  7.745539 2155.884 16698.49
## 3048 6.7675697  7.669406 2166.558 16616.22
## 3049 6.9339743  7.592792 2177.462 16533.01
## 3050 7.1021124  7.515771 2188.590 16448.94
## 3051 7.2111026  7.466054 2195.865 16394.45
## 3052 7.0455660  7.541630 2184.835 16477.22
## 3053 6.8818602  7.616744 2174.035 16559.07
## 3054 6.7201190  7.691323 2163.469 16639.94
## 3055 6.5604878  7.765285 2153.141 16719.76
## 3056 6.4031242  7.838542 2143.056 16798.44
## 3057 6.2481997  7.911000 2133.220 16875.90
## 3058 6.0959003  7.982555 2123.637 16952.05
## 3059 5.9464275  8.053096 2114.316 17026.79
## 3060 5.8000000  8.122500 2105.263 17100.00
## 3061 5.6568542  8.190637 2096.488 17171.57
## 3062 5.5172457  8.257364 2088.000 17241.38
## 3063 5.3814496  8.322528 2079.810 17309.28
## 3064 5.2497619  8.385966 2071.928 17375.12
## 3065 5.1224994  8.447500 2064.368 17438.75
## 3066 5.0000000  8.506944 2057.143 17500.00
## 3067 4.8826222  8.564099 2050.267 17558.69
## 3068 4.7707442  8.618753 2043.756 17614.63
## 3069 4.6647615  8.670688 2037.626 17667.62
## 3070 4.5650849  8.719675 2031.894 17717.46
## 3071 4.4721360  8.765480 2026.578 17763.93
## 3072 4.3863424  8.807865 2021.696 17806.83
## 3073 4.3081318  8.846593 2017.266 17845.93
## 3074 4.2379240  8.881431 2013.306 17881.04
## 3075 4.1761226  8.912154 2009.833 17911.94
## 3076 4.1231056  8.938552 2006.863 17938.45
## 3077 4.0792156  8.960436 2004.411 17960.39
## 3078 4.0447497  8.977639 2002.489 17977.63
## 3079 4.0199502  8.990028 2001.109 17990.02
## 3080 4.0049969  8.997502 2000.278 17997.50
## 3081 4.0000000  9.000000 2000.000 18000.00
## 3082 4.0049969  8.997502 2000.278 17997.50
## 3083 4.0199502  8.990028 2001.109 17990.02
## 3084 4.0447497  8.977639 2002.489 17977.63
## 3085 4.0792156  8.960436 2004.411 17960.39
## 3086 4.1231056  8.938552 2006.863 17938.45
## 3087 4.1761226  8.912154 2009.833 17911.94
## 3088 4.2379240  8.881431 2013.306 17881.04
## 3089 4.3081318  8.846593 2017.266 17845.93
## 3090 4.3863424  8.807865 2021.696 17806.83
## 3091 4.4721360  8.765480 2026.578 17763.93
## 3092 4.5650849  8.719675 2031.894 17717.46
## 3093 4.6647615  8.670688 2037.626 17667.62
## 3094 4.7707442  8.618753 2043.756 17614.63
## 3095 4.8826222  8.564099 2050.267 17558.69
## 3096 5.0000000  8.506944 2057.143 17500.00
## 3097 5.1224994  8.447500 2064.368 17438.75
## 3098 5.2497619  8.385966 2071.928 17375.12
## 3099 5.3814496  8.322528 2079.810 17309.28
## 3100 5.5172457  8.257364 2088.000 17241.38
## 3101 5.6568542  8.190637 2096.488 17171.57
## 3102 5.8000000  8.122500 2105.263 17100.00
## 3103 5.9464275  8.053096 2114.316 17026.79
## 3104 6.0959003  7.982555 2123.637 16952.05
## 3105 6.2481997  7.911000 2133.220 16875.90
## 3106 6.4031242  7.838542 2143.056 16798.44
## 3107 6.5604878  7.765285 2153.141 16719.76
## 3108 6.7201190  7.691323 2163.469 16639.94
## 3109 6.8818602  7.616744 2174.035 16559.07
## 3110 7.0455660  7.541630 2184.835 16477.22
## 3111 7.2111026  7.466054 2195.865 16394.45
## 3112 7.3239334  7.414759 2203.448 16338.03
## 3113 7.1610055  7.488886 2192.515 16419.50
## 3114 7.0000000  7.562500 2181.818 16500.00
## 3115 6.8410526  7.635526 2171.360 16579.47
## 3116 6.6843100  7.707883 2161.144 16657.85
## 3117 6.5299311  7.779483 2151.176 16735.03
## 3118 6.3780875  7.850229 2141.461 16810.96
## 3119 6.2289646  7.920020 2132.005 16885.52
## 3120 6.0827625  7.988743 2122.814 16958.62
## 3121 5.9396970  8.056279 2113.898 17030.15
## 3122 5.8000000  8.122500 2105.263 17100.00
## 3123 5.6639209  8.187266 2096.920 17168.04
## 3124 5.5317267  8.250430 2088.877 17234.14
## 3125 5.4037024  8.311832 2081.148 17298.15
## 3126 5.2801515  8.371305 2073.742 17359.92
## 3127 5.1613952  8.428669 2066.673 17419.30
## 3128 5.0477718  8.483738 2059.955 17476.11
## 3129 4.9396356  8.536314 2053.601 17530.18
## 3130 4.8373546  8.586192 2047.628 17581.32
## 3131 4.7413078  8.633162 2042.050 17629.35
## 3132 4.6518813  8.677010 2036.884 17674.06
## 3133 4.5694639  8.717520 2032.145 17715.27
## 3134 4.4944410  8.754477 2027.851 17752.78
## 3135 4.4271887  8.787673 2024.018 17786.41
## 3136 4.3680659  8.816908 2020.659 17815.97
## 3137 4.3174066  8.841996 2017.791 17841.30
## 3138 4.2755117  8.862771 2015.424 17862.24
## 3139 4.2426407  8.879089 2013.572 17878.68
## 3140 4.2190046  8.890831 2012.241 17890.50
## 3141 4.2047592  8.897912 2011.441 17897.62
## 3142 4.2000000  8.900278 2011.173 17900.00
## 3143 4.2047592  8.897912 2011.441 17897.62
## 3144 4.2190046  8.890831 2012.241 17890.50
## 3145 4.2426407  8.879089 2013.572 17878.68
## 3146 4.2755117  8.862771 2015.424 17862.24
## 3147 4.3174066  8.841996 2017.791 17841.30
## 3148 4.3680659  8.816908 2020.659 17815.97
## 3149 4.4271887  8.787673 2024.018 17786.41
## 3150 4.4944410  8.754477 2027.851 17752.78
## 3151 4.5694639  8.717520 2032.145 17715.27
## 3152 4.6518813  8.677010 2036.884 17674.06
## 3153 4.7413078  8.633162 2042.050 17629.35
## 3154 4.8373546  8.586192 2047.628 17581.32
## 3155 4.9396356  8.536314 2053.601 17530.18
## 3156 5.0477718  8.483738 2059.955 17476.11
## 3157 5.1613952  8.428669 2066.673 17419.30
## 3158 5.2801515  8.371305 2073.742 17359.92
## 3159 5.4037024  8.311832 2081.148 17298.15
## 3160 5.5317267  8.250430 2088.877 17234.14
## 3161 5.6639209  8.187266 2096.920 17168.04
## 3162 5.8000000  8.122500 2105.263 17100.00
## 3163 5.9396970  8.056279 2113.898 17030.15
## 3164 6.0827625  7.988743 2122.814 16958.62
## 3165 6.2289646  7.920020 2132.005 16885.52
## 3166 6.3780875  7.850229 2141.461 16810.96
## 3167 6.5299311  7.779483 2151.176 16735.03
## 3168 6.6843100  7.707883 2161.144 16657.85
## 3169 6.8410526  7.635526 2171.360 16579.47
## 3170 7.0000000  7.562500 2181.818 16500.00
## 3171 7.1610055  7.488886 2192.515 16419.50
## 3172 7.3239334  7.414759 2203.448 16338.03
## 3173 7.4404301  7.361983 2211.331 16279.78
## 3174 7.2801099  7.434661 2200.496 16359.95
## 3175 7.1217975  7.506779 2189.901 16439.10
## 3176 6.9656299  7.578261 2179.548 16517.19
## 3177 6.8117545  7.649025 2169.443 16594.12
## 3178 6.6603303  7.718983 2159.589 16669.83
## 3179 6.5115282  7.788040 2149.994 16744.24
## 3180 6.3655322  7.856093 2140.661 16817.23
## 3181 6.2225397  7.923034 2131.599 16888.73
## 3182 6.0827625  7.988743 2122.814 16958.62
## 3183 5.9464275  8.053096 2114.316 17026.79
## 3184 5.8137767  8.115957 2106.112 17093.11
## 3185 5.6850682  8.177184 2098.212 17157.47
## 3186 5.5605755  8.236625 2090.627 17219.71
## 3187 5.4405882  8.294118 2083.369 17279.71
## 3188 5.3254108  8.349494 2076.449 17337.29
## 3189 5.2153619  8.402577 2069.879 17392.32
## 3190 5.1107729  8.453182 2063.674 17444.61
## 3191 5.0119856  8.501119 2057.848 17494.01
## 3192 4.9193496  8.546195 2052.413 17540.33
## 3193 4.8332184  8.588212 2047.387 17583.39
## 3194 4.7539457  8.626975 2042.782 17623.03
## 3195 4.6818800  8.662289 2038.614 17659.06
## 3196 4.6173586  8.693967 2034.896 17691.32
## 3197 4.5607017  8.721832 2031.643 17719.65
## 3198 4.5122057  8.745719 2028.867 17743.90
## 3199 4.4721360  8.765480 2026.578 17763.93
## 3200 4.4407207  8.780989 2024.788 17779.64
## 3201 4.4181444  8.792142 2023.503 17790.93
## 3202 4.4045431  8.798865 2022.730 17797.73
## 3203 4.4000000  8.801111 2022.472 17800.00
## 3204 4.4045431  8.798865 2022.730 17797.73
## 3205 4.4181444  8.792142 2023.503 17790.93
## 3206 4.4407207  8.780989 2024.788 17779.64
## 3207 4.4721360  8.765480 2026.578 17763.93
## 3208 4.5122057  8.745719 2028.867 17743.90
## 3209 4.5607017  8.721832 2031.643 17719.65
## 3210 4.6173586  8.693967 2034.896 17691.32
## 3211 4.6818800  8.662289 2038.614 17659.06
## 3212 4.7539457  8.626975 2042.782 17623.03
## 3213 4.8332184  8.588212 2047.387 17583.39
## 3214 4.9193496  8.546195 2052.413 17540.33
## 3215 5.0119856  8.501119 2057.848 17494.01
## 3216 5.1107729  8.453182 2063.674 17444.61
## 3217 5.2153619  8.402577 2069.879 17392.32
## 3218 5.3254108  8.349494 2076.449 17337.29
## 3219 5.4405882  8.294118 2083.369 17279.71
## 3220 5.5605755  8.236625 2090.627 17219.71
## 3221 5.6850682  8.177184 2098.212 17157.47
## 3222 5.8137767  8.115957 2106.112 17093.11
## 3223 5.9464275  8.053096 2114.316 17026.79
## 3224 6.0827625  7.988743 2122.814 16958.62
## 3225 6.2225397  7.923034 2131.599 16888.73
## 3226 6.3655322  7.856093 2140.661 16817.23
## 3227 6.5115282  7.788040 2149.994 16744.24
## 3228 6.6603303  7.718983 2159.589 16669.83
## 3229 6.8117545  7.649025 2169.443 16594.12
## 3230 6.9656299  7.578261 2179.548 16517.19
## 3231 7.1217975  7.506779 2189.901 16439.10
## 3232 7.2801099  7.434661 2200.496 16359.95
## 3233 7.4404301  7.361983 2211.331 16279.78
## 3234 7.5604233  7.307820 2219.511 16219.79
## 3235 7.4027022  7.379054 2208.772 16298.65
## 3236 7.2470684  7.449684 2198.277 16376.47
## 3237 7.0936591  7.519634 2188.028 16453.17
## 3238 6.9426220  7.588821 2178.031 16528.69
## 3239 6.7941151  7.657158 2168.290 16602.94
## 3240 6.6483081  7.724551 2158.811 16675.85
## 3241 6.5053824  7.790899 2149.599 16747.31
## 3242 6.3655322  7.856093 2140.661 16817.23
## 3243 6.2289646  7.920020 2132.005 16885.52
## 3244 6.0959003  7.982555 2123.637 16952.05
## 3245 5.9665736  8.043570 2115.567 17016.71
## 3246 5.8412327  8.102926 2107.804 17079.38
## 3247 5.7201399  8.160478 2100.359 17139.93
## 3248 5.6035703  8.216072 2093.241 17198.21
## 3249 5.4918121  8.269549 2086.461 17254.09
## 3250 5.3851648  8.320742 2080.033 17307.42
## 3251 5.2839379  8.369479 2073.968 17358.03
## 3252 5.1884487  8.415584 2068.279 17405.78
## 3253 5.0990195  8.458878 2062.979 17450.49
## 3254 5.0159745  8.499181 2058.082 17492.01
## 3255 4.9396356  8.536314 2053.601 17530.18
## 3256 4.8703183  8.570101 2049.549 17564.84
## 3257 4.8083261  8.600374 2045.938 17595.84
## 3258 4.7539457  8.626975 2042.782 17623.03
## 3259 4.7074409  8.649755 2040.090 17646.28
## 3260 4.6690470  8.668585 2037.873 17665.48
## 3261 4.6389654  8.683353 2036.140 17680.52
## 3262 4.6173586  8.693967 2034.896 17691.32
## 3263 4.6043458  8.700363 2034.148 17697.83
## 3264 4.6000000  8.702500 2033.898 17700.00
## 3265 4.6043458  8.700363 2034.148 17697.83
## 3266 4.6173586  8.693967 2034.896 17691.32
## 3267 4.6389654  8.683353 2036.140 17680.52
## 3268 4.6690470  8.668585 2037.873 17665.48
## 3269 4.7074409  8.649755 2040.090 17646.28
## 3270 4.7539457  8.626975 2042.782 17623.03
## 3271 4.8083261  8.600374 2045.938 17595.84
## 3272 4.8703183  8.570101 2049.549 17564.84
## 3273 4.9396356  8.536314 2053.601 17530.18
## 3274 5.0159745  8.499181 2058.082 17492.01
## 3275 5.0990195  8.458878 2062.979 17450.49
## 3276 5.1884487  8.415584 2068.279 17405.78
## 3277 5.2839379  8.369479 2073.968 17358.03
## 3278 5.3851648  8.320742 2080.033 17307.42
## 3279 5.4918121  8.269549 2086.461 17254.09
## 3280 5.6035703  8.216072 2093.241 17198.21
## 3281 5.7201399  8.160478 2100.359 17139.93
## 3282 5.8412327  8.102926 2107.804 17079.38
## 3283 5.9665736  8.043570 2115.567 17016.71
## 3284 6.0959003  7.982555 2123.637 16952.05
## 3285 6.2289646  7.920020 2132.005 16885.52
## 3286 6.3655322  7.856093 2140.661 16817.23
## 3287 6.5053824  7.790899 2149.599 16747.31
## 3288 6.6483081  7.724551 2158.811 16675.85
## 3289 6.7941151  7.657158 2168.290 16602.94
## 3290 6.9426220  7.588821 2178.031 16528.69
## 3291 7.0936591  7.519634 2188.028 16453.17
## 3292 7.2470684  7.449684 2198.277 16376.47
## 3293 7.4027022  7.379054 2208.772 16298.65
## 3294 7.5604233  7.307820 2219.511 16219.79
## 3295 7.6837491  7.252362 2227.981 16158.13
## 3296 7.5286121  7.322160 2217.337 16235.69
## 3297 7.3756356  7.391314 2206.940 16312.18
## 3298 7.2249567  7.459746 2196.793 16387.52
## 3299 7.0767224  7.527376 2186.903 16461.64
## 3300 6.9310894  7.594117 2177.272 16534.46
## 3301 6.7882251  7.659875 2167.906 16605.89
## 3302 6.6483081  7.724551 2158.811 16675.85
## 3303 6.5115282  7.788040 2149.994 16744.24
## 3304 6.3780875  7.850229 2141.461 16810.96
## 3305 6.2481997  7.911000 2133.220 16875.90
## 3306 6.1220911  7.970227 2125.279 16938.95
## 3307 6.0000000  8.027778 2117.647 17000.00
## 3308 5.8821765  8.083513 2110.334 17058.91
## 3309 5.7688820  8.137288 2103.349 17115.56
## 3310 5.6603887  8.188951 2096.704 17169.81
## 3311 5.5569776  8.238346 2090.409 17221.51
## 3312 5.4589376  8.285312 2084.476 17270.53
## 3313 5.3665631  8.329687 2078.916 17316.72
## 3314 5.2801515  8.371305 2073.742 17359.92
## 3315 5.2000000  8.410000 2068.966 17400.00
## 3316 5.1264022  8.445610 2064.599 17436.80
## 3317 5.0596443  8.477975 2060.654 17470.18
## 3318 5.0000000  8.506944 2057.143 17500.00
## 3319 4.9477268  8.532374 2054.075 17526.14
## 3320 4.9030603  8.554133 2051.461 17548.47
## 3321 4.8662100  8.572106 2049.309 17566.89
## 3322 4.8373546  8.586192 2047.628 17581.32
## 3323 4.8166378  8.596312 2046.422 17591.68
## 3324 4.8041649  8.602408 2045.697 17597.92
## 3325 4.8000000  8.604444 2045.455 17600.00
## 3326 4.8041649  8.602408 2045.697 17597.92
## 3327 4.8166378  8.596312 2046.422 17591.68
## 3328 4.8373546  8.586192 2047.628 17581.32
## 3329 4.8662100  8.572106 2049.309 17566.89
## 3330 4.9030603  8.554133 2051.461 17548.47
## 3331 4.9477268  8.532374 2054.075 17526.14
## 3332 5.0000000  8.506944 2057.143 17500.00
## 3333 5.0596443  8.477975 2060.654 17470.18
## 3334 5.1264022  8.445610 2064.599 17436.80
## 3335 5.2000000  8.410000 2068.966 17400.00
## 3336 5.2801515  8.371305 2073.742 17359.92
## 3337 5.3665631  8.329687 2078.916 17316.72
## 3338 5.4589376  8.285312 2084.476 17270.53
## 3339 5.5569776  8.238346 2090.409 17221.51
## 3340 5.6603887  8.188951 2096.704 17169.81
## 3341 5.7688820  8.137288 2103.349 17115.56
## 3342 5.8821765  8.083513 2110.334 17058.91
## 3343 6.0000000  8.027778 2117.647 17000.00
## 3344 6.1220911  7.970227 2125.279 16938.95
## 3345 6.2481997  7.911000 2133.220 16875.90
## 3346 6.3780875  7.850229 2141.461 16810.96
## 3347 6.5115282  7.788040 2149.994 16744.24
## 3348 6.6483081  7.724551 2158.811 16675.85
## 3349 6.7882251  7.659875 2167.906 16605.89
## 3350 6.9310894  7.594117 2177.272 16534.46
## 3351 7.0767224  7.527376 2186.903 16461.64
## 3352 7.2249567  7.459746 2196.793 16387.52
## 3353 7.3756356  7.391314 2206.940 16312.18
## 3354 7.5286121  7.322160 2217.337 16235.69
## 3355 7.6837491  7.252362 2227.981 16158.13
## 3356 7.8102497  7.195695 2236.737 16094.88
## 3357 7.6576759  7.264069 2226.185 16171.16
## 3358 7.5073298  7.331761 2215.884 16246.34
## 3359 7.3593478  7.398696 2205.838 16320.33
## 3360 7.2138755  7.464791 2196.051 16393.06
## 3361 7.0710678  7.529962 2186.527 16464.47
## 3362 6.9310894  7.594117 2177.272 16534.46
## 3363 6.7941151  7.657158 2168.290 16602.94
## 3364 6.6603303  7.718983 2159.589 16669.83
## 3365 6.5299311  7.779483 2151.176 16735.03
## 3366 6.4031242  7.838542 2143.056 16798.44
## 3367 6.2801274  7.896040 2135.239 16859.94
## 3368 6.1611687  7.951851 2127.733 16919.42
## 3369 6.0464866  8.005841 2120.546 16976.76
## 3370 5.9363288  8.057873 2113.689 17031.84
## 3371 5.8309519  8.107805 2107.170 17084.52
## 3372 5.7306195  8.155489 2101.001 17134.69
## 3373 5.6356011  8.200777 2095.192 17182.20
## 3374 5.5461698  8.243517 2089.753 17226.92
## 3375 5.4626001  8.283555 2084.697 17268.70
## 3376 5.3851648  8.320742 2080.033 17307.42
## 3377 5.3141321  8.354927 2075.773 17342.93
## 3378 5.2497619  8.385966 2071.928 17375.12
## 3379 5.1923020  8.413721 2068.508 17403.85
## 3380 5.1419841  8.438064 2065.522 17429.01
## 3381 5.0990195  8.458878 2062.979 17450.49
## 3382 5.0635956  8.476058 2060.888 17468.20
## 3383 5.0358713  8.489516 2059.253 17482.06
## 3384 5.0159745  8.499181 2058.082 17492.01
## 3385 5.0039984  8.505001 2057.378 17498.00
## 3386 5.0000000  8.506944 2057.143 17500.00
## 3387 5.0039984  8.505001 2057.378 17498.00
## 3388 5.0159745  8.499181 2058.082 17492.01
## 3389 5.0358713  8.489516 2059.253 17482.06
## 3390 5.0635956  8.476058 2060.888 17468.20
## 3391 5.0990195  8.458878 2062.979 17450.49
## 3392 5.1419841  8.438064 2065.522 17429.01
## 3393 5.1923020  8.413721 2068.508 17403.85
## 3394 5.2497619  8.385966 2071.928 17375.12
## 3395 5.3141321  8.354927 2075.773 17342.93
## 3396 5.3851648  8.320742 2080.033 17307.42
## 3397 5.4626001  8.283555 2084.697 17268.70
## 3398 5.5461698  8.243517 2089.753 17226.92
## 3399 5.6356011  8.200777 2095.192 17182.20
## 3400 5.7306195  8.155489 2101.001 17134.69
## 3401 5.8309519  8.107805 2107.170 17084.52
## 3402 5.9363288  8.057873 2113.689 17031.84
## 3403 6.0464866  8.005841 2120.546 16976.76
## 3404 6.1611687  7.951851 2127.733 16919.42
## 3405 6.2801274  7.896040 2135.239 16859.94
## 3406 6.4031242  7.838542 2143.056 16798.44
## 3407 6.5299311  7.779483 2151.176 16735.03
## 3408 6.6603303  7.718983 2159.589 16669.83
## 3409 6.7941151  7.657158 2168.290 16602.94
## 3410 6.9310894  7.594117 2177.272 16534.46
## 3411 7.0710678  7.529962 2186.527 16464.47
## 3412 7.2138755  7.464791 2196.051 16393.06
## 3413 7.3593478  7.398696 2205.838 16320.33
## 3414 7.5073298  7.331761 2215.884 16246.34
## 3415 7.6576759  7.264069 2226.185 16171.16
## 3416 7.8102497  7.195695 2236.737 16094.88
## 3417 7.9397733  7.137904 2245.773 16030.11
## 3418 7.7897368  7.204868 2235.312 16105.13
## 3419 7.6419893  7.271117 2225.106 16179.01
## 3420 7.4966659  7.336574 2215.157 16251.67
## 3421 7.3539105  7.401161 2205.471 16323.04
## 3422 7.2138755  7.464791 2196.051 16393.06
## 3423 7.0767224  7.527376 2186.903 16461.64
## 3424 6.9426220  7.588821 2178.031 16528.69
## 3425 6.8117545  7.649025 2169.443 16594.12
## 3426 6.6843100  7.707883 2161.144 16657.85
## 3427 6.5604878  7.765285 2153.141 16719.76
## 3428 6.4404969  7.821113 2145.443 16779.75
## 3429 6.3245553  7.875247 2138.056 16837.72
## 3430 6.2128898  7.927561 2130.990 16893.56
## 3431 6.1057350  7.977925 2124.253 16947.13
## 3432 6.0033324  8.026204 2117.855 16998.33
## 3433 5.9059292  8.072262 2111.804 17047.04
## 3434 5.8137767  8.115957 2106.112 17093.11
## 3435 5.7271284  8.157151 2100.787 17136.44
## 3436 5.6462377  8.195701 2095.840 17176.88
## 3437 5.5713553  8.231469 2091.282 17214.32
## 3438 5.5027266  8.264319 2087.121 17248.64
## 3439 5.4405882  8.294118 2083.369 17279.71
## 3440 5.3851648  8.320742 2080.033 17307.42
## 3441 5.3366656  8.344075 2077.123 17331.67
## 3442 5.2952809  8.364011 2074.646 17352.36
## 3443 5.2611786  8.380456 2072.609 17369.41
## 3444 5.2345009  8.393333 2071.019 17382.75
## 3445 5.2153619  8.402577 2069.879 17392.32
## 3446 5.2038447  8.408142 2069.194 17398.08
## 3447 5.2000000  8.410000 2068.966 17400.00
## 3448 5.2038447  8.408142 2069.194 17398.08
## 3449 5.2153619  8.402577 2069.879 17392.32
## 3450 5.2345009  8.393333 2071.019 17382.75
## 3451 5.2611786  8.380456 2072.609 17369.41
## 3452 5.2952809  8.364011 2074.646 17352.36
## 3453 5.3366656  8.344075 2077.123 17331.67
## 3454 5.3851648  8.320742 2080.033 17307.42
## 3455 5.4405882  8.294118 2083.369 17279.71
## 3456 5.5027266  8.264319 2087.121 17248.64
## 3457 5.5713553  8.231469 2091.282 17214.32
## 3458 5.6462377  8.195701 2095.840 17176.88
## 3459 5.7271284  8.157151 2100.787 17136.44
## 3460 5.8137767  8.115957 2106.112 17093.11
## 3461 5.9059292  8.072262 2111.804 17047.04
## 3462 6.0033324  8.026204 2117.855 16998.33
## 3463 6.1057350  7.977925 2124.253 16947.13
## 3464 6.2128898  7.927561 2130.990 16893.56
## 3465 6.3245553  7.875247 2138.056 16837.72
## 3466 6.4404969  7.821113 2145.443 16779.75
## 3467 6.5604878  7.765285 2153.141 16719.76
## 3468 6.6843100  7.707883 2161.144 16657.85
## 3469 6.8117545  7.649025 2169.443 16594.12
## 3470 6.9426220  7.588821 2178.031 16528.69
## 3471 7.0767224  7.527376 2186.903 16461.64
## 3472 7.2138755  7.464791 2196.051 16393.06
## 3473 7.3539105  7.401161 2205.471 16323.04
## 3474 7.4966659  7.336574 2215.157 16251.67
## 3475 7.6419893  7.271117 2225.106 16179.01
## 3476 7.7897368  7.204868 2235.312 16105.13
## 3477 7.9397733  7.137904 2245.773 16030.11
## 3478 8.0721744  7.079070 2255.086 15963.91
## 3479 7.9246451  7.144642 2244.714 16037.68
## 3480 7.7794601  7.209467 2234.599 16110.27
## 3481 7.6367532  7.273470 2224.746 16181.62
## 3482 7.4966659  7.336574 2215.157 16251.67
## 3483 7.3593478  7.398696 2205.838 16320.33
## 3484 7.2249567  7.459746 2196.793 16387.52
## 3485 7.0936591  7.519634 2188.028 16453.17
## 3486 6.9656299  7.578261 2179.548 16517.19
## 3487 6.8410526  7.635526 2171.360 16579.47
## 3488 6.7201190  7.691323 2163.469 16639.94
## 3489 6.6030296  7.745539 2155.884 16698.49
## 3490 6.4899923  7.798060 2148.612 16755.00
## 3491 6.3812225  7.848765 2141.660 16809.39
## 3492 6.2769419  7.897532 2135.038 16861.53
## 3493 6.1773781  7.944234 2128.753 16911.31
## 3494 6.0827625  7.988743 2122.814 16958.62
## 3495 5.9933296  8.030928 2117.232 17003.34
## 3496 5.9093147  8.070659 2112.014 17045.34
## 3497 5.8309519  8.107805 2107.170 17084.52
## 3498 5.7584720  8.142238 2102.710 17120.76
## 3499 5.6920998  8.173833 2098.642 17153.95
## 3500 5.6320511  8.202472 2094.975 17183.97
## 3501 5.5785303  8.228039 2091.718 17210.73
## 3502 5.5317267  8.250430 2088.877 17234.14
## 3503 5.4918121  8.269549 2086.461 17254.09
## 3504 5.4589376  8.285312 2084.476 17270.53
## 3505 5.4332311  8.297649 2082.925 17283.38
## 3506 5.4147945  8.306503 2081.815 17292.60
## 3507 5.4037024  8.311832 2081.148 17298.15
## 3508 5.4000000  8.313611 2080.925 17300.00
## 3509 5.4037024  8.311832 2081.148 17298.15
## 3510 5.4147945  8.306503 2081.815 17292.60
## 3511 5.4332311  8.297649 2082.925 17283.38
## 3512 5.4589376  8.285312 2084.476 17270.53
## 3513 5.4918121  8.269549 2086.461 17254.09
## 3514 5.5317267  8.250430 2088.877 17234.14
## 3515 5.5785303  8.228039 2091.718 17210.73
## 3516 5.6320511  8.202472 2094.975 17183.97
## 3517 5.6920998  8.173833 2098.642 17153.95
## 3518 5.7584720  8.142238 2102.710 17120.76
## 3519 5.8309519  8.107805 2107.170 17084.52
## 3520 5.9093147  8.070659 2112.014 17045.34
## 3521 5.9933296  8.030928 2117.232 17003.34
## 3522 6.0827625  7.988743 2122.814 16958.62
## 3523 6.1773781  7.944234 2128.753 16911.31
## 3524 6.2769419  7.897532 2135.038 16861.53
## 3525 6.3812225  7.848765 2141.660 16809.39
## 3526 6.4899923  7.798060 2148.612 16755.00
## 3527 6.6030296  7.745539 2155.884 16698.49
## 3528 6.7201190  7.691323 2163.469 16639.94
## 3529 6.8410526  7.635526 2171.360 16579.47
## 3530 6.9656299  7.578261 2179.548 16517.19
## 3531 7.0936591  7.519634 2188.028 16453.17
## 3532 7.2249567  7.459746 2196.793 16387.52
## 3533 7.3593478  7.398696 2205.838 16320.33
## 3534 7.4966659  7.336574 2215.157 16251.67
## 3535 7.6367532  7.273470 2224.746 16181.62
## 3536 7.7794601  7.209467 2234.599 16110.27
## 3537 7.9246451  7.144642 2244.714 16037.68
## 3538 8.0721744  7.079070 2255.086 15963.91
## 3539 8.2073138  7.019270 2264.672 15896.34
## 3540 8.0622577  7.083468 2254.386 15968.87
## 3541 7.9195959  7.146891 2244.361 16040.20
## 3542 7.7794601  7.209467 2234.599 16110.27
## 3543 7.6419893  7.271117 2225.106 16179.01
## 3544 7.5073298  7.331761 2215.884 16246.34
## 3545 7.3756356  7.391314 2206.940 16312.18
## 3546 7.2470684  7.449684 2198.277 16376.47
## 3547 7.1217975  7.506779 2189.901 16439.10
## 3548 7.0000000  7.562500 2181.818 16500.00
## 3549 6.8818602  7.616744 2174.035 16559.07
## 3550 6.7675697  7.669406 2166.558 16616.22
## 3551 6.6573268  7.720374 2159.395 16671.34
## 3552 6.5513357  7.769536 2152.552 16724.33
## 3553 6.4498062  7.816774 2146.038 16775.10
## 3554 6.3529521  7.861971 2139.861 16823.52
## 3555 6.2609903  7.905005 2134.028 16869.50
## 3556 6.1741396  7.945756 2128.549 16912.93
## 3557 6.0926185  7.984101 2123.431 16953.69
## 3558 6.0166436  8.019920 2118.684 16991.68
## 3559 5.9464275  8.053096 2114.316 17026.79
## 3560 5.8821765  8.083513 2110.334 17058.91
## 3561 5.8240879  8.111062 2106.747 17087.96
## 3562 5.7723479  8.135640 2103.562 17113.83
## 3563 5.7271284  8.157151 2100.787 17136.44
## 3564 5.6885851  8.175508 2098.427 17155.71
## 3565 5.6568542  8.190637 2096.488 17171.57
## 3566 5.6320511  8.202472 2094.975 17183.97
## 3567 5.6142675  8.210962 2093.892 17192.87
## 3568 5.6035703  8.216072 2093.241 17198.21
## 3569 5.6000000  8.217778 2093.023 17200.00
## 3570 5.6035703  8.216072 2093.241 17198.21
## 3571 5.6142675  8.210962 2093.892 17192.87
## 3572 5.6320511  8.202472 2094.975 17183.97
## 3573 5.6568542  8.190637 2096.488 17171.57
## 3574 5.6885851  8.175508 2098.427 17155.71
## 3575 5.7271284  8.157151 2100.787 17136.44
## 3576 5.7723479  8.135640 2103.562 17113.83
## 3577 5.8240879  8.111062 2106.747 17087.96
## 3578 5.8821765  8.083513 2110.334 17058.91
## 3579 5.9464275  8.053096 2114.316 17026.79
## 3580 6.0166436  8.019920 2118.684 16991.68
## 3581 6.0926185  7.984101 2123.431 16953.69
## 3582 6.1741396  7.945756 2128.549 16912.93
## 3583 6.2609903  7.905005 2134.028 16869.50
## 3584 6.3529521  7.861971 2139.861 16823.52
## 3585 6.4498062  7.816774 2146.038 16775.10
## 3586 6.5513357  7.769536 2152.552 16724.33
## 3587 6.6573268  7.720374 2159.395 16671.34
## 3588 6.7675697  7.669406 2166.558 16616.22
## 3589 6.8818602  7.616744 2174.035 16559.07
## 3590 7.0000000  7.562500 2181.818 16500.00
## 3591 7.1217975  7.506779 2189.901 16439.10
## 3592 7.2470684  7.449684 2198.277 16376.47
## 3593 7.3756356  7.391314 2206.940 16312.18
## 3594 7.5073298  7.331761 2215.884 16246.34
## 3595 7.6419893  7.271117 2225.106 16179.01
## 3596 7.7794601  7.209467 2234.599 16110.27
## 3597 7.9195959  7.146891 2244.361 16040.20
## 3598 8.0622577  7.083468 2254.386 15968.87
## 3599 8.2073138  7.019270 2264.672 15896.34
## 3600 8.3450584  6.958579 2274.526 15827.47
## 3601 8.2024387  7.021423 2264.325 15898.78
## 3602 8.0622577  7.083468 2254.386 15968.87
## 3603 7.9246451  7.144642 2244.714 16037.68
## 3604 7.7897368  7.204868 2235.312 16105.13
## 3605 7.6576759  7.264069 2226.185 16171.16
## 3606 7.5286121  7.322160 2217.337 16235.69
## 3607 7.4027022  7.379054 2208.772 16298.65
## 3608 7.2801099  7.434661 2200.496 16359.95
## 3609 7.1610055  7.488886 2192.515 16419.50
## 3610 7.0455660  7.541630 2184.835 16477.22
## 3611 6.9339743  7.592792 2177.462 16533.01
## 3612 6.8264193  7.642267 2170.402 16586.79
## 3613 6.7230945  7.689947 2163.663 16638.45
## 3614 6.6241981  7.735723 2157.252 16687.90
## 3615 6.5299311  7.779483 2151.176 16735.03
## 3616 6.4404969  7.821113 2145.443 16779.75
## 3617 6.3560994  7.860500 2140.061 16821.95
## 3618 6.2769419  7.897532 2135.038 16861.53
## 3619 6.2032250  7.932097 2130.381 16898.39
## 3620 6.1351447  7.964086 2126.098 16932.43
## 3621 6.0728906  7.993394 2122.197 16963.55
## 3622 6.0166436  8.019920 2118.684 16991.68
## 3623 5.9665736  8.043570 2115.567 17016.71
## 3624 5.9228372  8.064257 2112.852 17038.58
## 3625 5.8855756  8.081902 2110.544 17057.21
## 3626 5.8549125  8.096438 2108.649 17072.54
## 3627 5.8309519  8.107805 2107.170 17084.52
## 3628 5.8137767  8.115957 2106.112 17093.11
## 3629 5.8034473  8.120863 2105.475 17098.28
## 3630 5.8000000  8.122500 2105.263 17100.00
## 3631 5.8034473  8.120863 2105.475 17098.28
## 3632 5.8137767  8.115957 2106.112 17093.11
## 3633 5.8309519  8.107805 2107.170 17084.52
## 3634 5.8549125  8.096438 2108.649 17072.54
## 3635 5.8855756  8.081902 2110.544 17057.21
## 3636 5.9228372  8.064257 2112.852 17038.58
## 3637 5.9665736  8.043570 2115.567 17016.71
## 3638 6.0166436  8.019920 2118.684 16991.68
## 3639 6.0728906  7.993394 2122.197 16963.55
## 3640 6.1351447  7.964086 2126.098 16932.43
## 3641 6.2032250  7.932097 2130.381 16898.39
## 3642 6.2769419  7.897532 2135.038 16861.53
## 3643 6.3560994  7.860500 2140.061 16821.95
## 3644 6.4404969  7.821113 2145.443 16779.75
## 3645 6.5299311  7.779483 2151.176 16735.03
## 3646 6.6241981  7.735723 2157.252 16687.90
## 3647 6.7230945  7.689947 2163.663 16638.45
## 3648 6.8264193  7.642267 2170.402 16586.79
## 3649 6.9339743  7.592792 2177.462 16533.01
## 3650 7.0455660  7.541630 2184.835 16477.22
## 3651 7.1610055  7.488886 2192.515 16419.50
## 3652 7.2801099  7.434661 2200.496 16359.95
## 3653 7.4027022  7.379054 2208.772 16298.65
## 3654 7.5286121  7.322160 2217.337 16235.69
## 3655 7.6576759  7.264069 2226.185 16171.16
## 3656 7.7897368  7.204868 2235.312 16105.13
## 3657 7.9246451  7.144642 2244.714 16037.68
## 3658 8.0622577  7.083468 2254.386 15968.87
## 3659 8.2024387  7.021423 2264.325 15898.78
## 3660 8.3450584  6.958579 2274.526 15827.47
## 3661 8.4852814  6.897066 2284.647 15757.36
## 3662 8.3450584  6.958579 2274.526 15827.47
## 3663 8.2073138  7.019270 2264.672 15896.34
## 3664 8.0721744  7.079070 2255.086 15963.91
## 3665 7.9397733  7.137904 2245.773 16030.11
## 3666 7.8102497  7.195695 2236.737 16094.88
## 3667 7.6837491  7.252362 2227.981 16158.13
## 3668 7.5604233  7.307820 2219.511 16219.79
## 3669 7.4404301  7.361983 2211.331 16279.78
## 3670 7.3239334  7.414759 2203.448 16338.03
## 3671 7.2111026  7.466054 2195.865 16394.45
## 3672 7.1021124  7.515771 2188.590 16448.94
## 3673 6.9971423  7.563810 2181.629 16501.43
## 3674 6.8963759  7.610069 2174.988 16551.81
## 3675 6.8000000  7.654444 2168.675 16600.00
## 3676 6.7082039  7.696831 2162.695 16645.90
## 3677 6.6211781  7.737123 2157.056 16689.41
## 3678 6.5391131  7.775215 2151.766 16730.44
## 3679 6.4621978  7.811001 2146.831 16768.90
## 3680 6.3906181  7.844379 2142.259 16804.69
## 3681 6.3245553  7.875247 2138.056 16837.72
## 3682 6.2641839  7.903509 2134.230 16867.91
## 3683 6.2096699  7.929072 2130.787 16895.17
## 3684 6.1611687  7.951851 2127.733 16919.42
## 3685 6.1188234  7.971765 2125.074 16940.59
## 3686 6.0827625  7.988743 2122.814 16958.62
## 3687 6.0530984  8.002723 2120.959 16973.45
## 3688 6.0299254  8.013653 2119.513 16985.04
## 3689 6.0133186  8.021490 2118.477 16993.34
## 3690 6.0033324  8.026204 2117.855 16998.33
## 3691 6.0000000  8.027778 2117.647 17000.00
## 3692 6.0033324  8.026204 2117.855 16998.33
## 3693 6.0133186  8.021490 2118.477 16993.34
## 3694 6.0299254  8.013653 2119.513 16985.04
## 3695 6.0530984  8.002723 2120.959 16973.45
## 3696 6.0827625  7.988743 2122.814 16958.62
## 3697 6.1188234  7.971765 2125.074 16940.59
## 3698 6.1611687  7.951851 2127.733 16919.42
## 3699 6.2096699  7.929072 2130.787 16895.17
## 3700 6.2641839  7.903509 2134.230 16867.91
## 3701 6.3245553  7.875247 2138.056 16837.72
## 3702 6.3906181  7.844379 2142.259 16804.69
## 3703 6.4621978  7.811001 2146.831 16768.90
## 3704 6.5391131  7.775215 2151.766 16730.44
## 3705 6.6211781  7.737123 2157.056 16689.41
## 3706 6.7082039  7.696831 2162.695 16645.90
## 3707 6.8000000  7.654444 2168.675 16600.00
## 3708 6.8963759  7.610069 2174.988 16551.81
## 3709 6.9971423  7.563810 2181.629 16501.43
## 3710 7.1021124  7.515771 2188.590 16448.94
## 3711 7.2111026  7.466054 2195.865 16394.45
## 3712 7.3239334  7.414759 2203.448 16338.03
## 3713 7.4404301  7.361983 2211.331 16279.78
## 3714 7.5604233  7.307820 2219.511 16219.79
## 3715 7.6837491  7.252362 2227.981 16158.13
## 3716 7.8102497  7.195695 2236.737 16094.88
## 3717 7.9397733  7.137904 2245.773 16030.11
## 3718 8.0721744  7.079070 2255.086 15963.91
## 3719 8.2073138  7.019270 2264.672 15896.34
## 3720 8.3450584  6.958579 2274.526 15827.47
## 3721 8.4852814  6.897066 2284.647 15757.36&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add a new chunk by clicking the &lt;em&gt;Insert Chunk&lt;/em&gt; button on the toolbar or by pressing &lt;em&gt;Ctrl+Alt+I&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the &lt;em&gt;Preview&lt;/em&gt; button or press &lt;em&gt;Ctrl+Shift+K&lt;/em&gt; to preview the HTML file).&lt;/p&gt;
&lt;p&gt;The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike &lt;em&gt;Knit&lt;/em&gt;, &lt;em&gt;Preview&lt;/em&gt; does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Austin Land Use</title>
      <link>/post/class_projects/austin-land-use/</link>
      <pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate>
      <guid>/post/class_projects/austin-land-use/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I compiled the land use of Austin by zoning and land use data. Furthermore, number of parking spaces and the square footage of those parking spaces by land use (single family homes, apartments and commercial buildings). Furthermore, I compared that square footage with the square footage actually in the buildings and the land area of the city of Austin. And then I used the building data I compiled to determine how much rooftop space Austin has and how much solar that could hold. I then compared those results to similar studies. I also wanted to find income correlations and land changing results as well, but finding property tax information hard to compile. As for how things might change land use, turns out Austin has pretty strict zoning and the only thing that would change that is to redo the codes.&lt;/p&gt;
&lt;p&gt;The code and final report are available on Github:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/yamierick/Engineer_Living/tree/master/Austin_LandUse&#34; class=&#34;uri&#34;&gt;https://github.com/yamierick/Engineer_Living/tree/master/Austin_LandUse&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Key Image&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;Austin-Land-Use.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Land Use vs. Zoning&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As a percentage of total land area, parking doesn’t take up that much space (less than 5%). However, of the building square footage parking is 40% of the created space which is shocking. That means that anytime someone wants to build anything almost 40% of the usable space is solely to store cars.&lt;/p&gt;
&lt;p&gt;Other things that pop out when looking at Austin’s land use map is the enormous amount of land used for single family housing which have large lots. In fact, single family zoning area is almost 7 times as large as multi family zoning even though multifamily housing houses more people. Another major thing that pops out are the immense amount of park lands Austin has. In fact there is more land used for parks and nature than there is for single family homes. As Austin becomes more dense easing the single family zoning and allowing more multi family buildings to be constructed in those areas will dramatically ease housing costs and it can be done without eating into any parkland.&lt;/p&gt;
&lt;p&gt;However, one of the advantages of having so much single family housing it means there is a ton of potential for rooftop solar with the housing roof space accounting for a whooping ¾ of the 4 GW of rooftop solar potential in Austin.&lt;/p&gt;
&lt;p&gt;All in all, if I was writing Austin’s codes, I would reduce the size of the single family lots, encourage more multifamily lots, eliminate parking requirements entirely (let the market decide how much parking to build), encourage all homeowners to put solar on their rooftops, and then upgrade the grid to spread all of that solar energy across the city.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
