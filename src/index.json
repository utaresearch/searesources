[{"authors":["admin"],"categories":null,"content":"Erick Jones is a Ph.D. candidate in Operations Research and Industrial Engineering. He received a B.S. in Chemical Engineering with a minor in Petroleum Engineering from Texas A\u0026amp;M University. As an undergraduate, Erick researched growth mechanisms of single-walled carbon nanotubes. From there, he went to Houston and spent several years working in the design, manufacturing, oil and gas, and HVAC industries. During this time, he traveled around the world and witnessed how basic infrastructure like electricity, HVAC systems, clean water, internet, and banking where lacking and dramatically affected quality of life for the majority of the world’s population. These experiences motivated Erick to pursue research that can enhance quality of life by improving access to sustainable resources, particularly where a lack of physical infrastructure or economic resources presents a major obstacle.\nIn his research, Erick develops multi-systems optimization models to analyze how energy systems, water resources, supply chains, urban space, and transportation networks operate in concert to influence economic and environmental well-being. He has worked with the Texas Energy Poverty Research Institute, Los Alamos National Labs, the Energy Institute, and the Houston Health and Human Services. Erick also participates in education and outreach activities like the Planet Texas 2050 initiative and Science in Residence, which encourages K-12 students to think about climate change and other STEM issues.\nErick wants to create or participate in a lab that explores how multiple physical and social infrastructure systems can be designed and operated in concert. This lab would need equipment that could collect data from these systems such as advanced meters and IoT sensors, equipment that could receive and transmit this information such as 5G, and equipment to simulate these systems like conveyor systems and distributed energy and water technologies. Labs like the Pecan Street Labs in Austin, the RAID Labs at the University of Texas at Arlington, and the ARIES Labs at NREL provide guidance and inspiration for this lab.\nThe lab would need people with an understanding of modern data collection with cutting edge technologies, modeling techniques, and operations theory. Erick plans to provide instruction in systems modeling, systems engineering, and data collection, analysis, and visualization. Furthermore, he is able to provide a theoretical background on optimization and simulation techniques, supply chains and logistics, and production and inventory control.\n","date":1599955200,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1599955200,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/author/erick-jones/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/erick-jones/","section":"authors","summary":"Erick Jones is a Ph.D. candidate in Operations Research and Industrial Engineering. He received a B.S. in Chemical Engineering with a minor in Petroleum Engineering from Texas A\u0026amp;M University. As an undergraduate, Erick researched growth mechanisms of single-walled carbon nanotubes.","tags":null,"title":"Erick Jones","type":"authors"},{"authors":null,"categories":null,"content":"Flexibility This feature can be used for publishing content such as:\n Online courses Project or software documentation Tutorials  The courses folder may be renamed. For example, we can rename it to docs for software/project documentation or tutorials for creating an online course.\nDelete tutorials To remove these pages, delete the courses folder and see below to delete the associated menu link.\nUpdate site menu After renaming or deleting the courses folder, you may wish to update any [[main]] menu links to it by editing your menu configuration at config/_default/menus.toml.\nFor example, if you delete this folder, you can remove the following from your menu configuration:\n[[main]] name = \u0026quot;Courses\u0026quot; url = \u0026quot;courses/\u0026quot; weight = 50  Or, if you are creating a software documentation site, you can rename the courses folder to docs and update the associated Courses menu configuration to:\n[[main]] name = \u0026quot;Docs\u0026quot; url = \u0026quot;docs/\u0026quot; weight = 50  Update the docs menu If you use the docs layout, note that the name of the menu in the front matter should be in the form [menu.X] where X is the folder name. Hence, if you rename the courses/example/ folder, you should also rename the menu definitions in the front matter of files within courses/example/ from [menu.example] to [menu.\u0026lt;NewFolderName\u0026gt;].\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"59c3ce8e202293146a8a934d37a4070b","permalink":"/courses/example/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/example/","section":"courses","summary":"Learn how to use Academic's docs layout for publishing online courses, software documentation, and tutorials.","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 2 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"74533bae41439377bd30f645c4677a27","permalink":"/courses/example/example1/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/example/example1/","section":"courses","summary":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"Example Page 1","type":"docs"},{"authors":null,"categories":null,"content":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 4 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"1c2b5a11257c768c90d5050637d77d6a","permalink":"/courses/example/example2/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/example/example2/","section":"courses","summary":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"Example Page 2","type":"docs"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"/talk/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example/","section":"talk","summary":"An example talk using Academic's Markdown slides feature.","tags":[],"title":"Example Talk","type":"talk"},{"authors":null,"categories":null,"content":"Community solar represents a promising deployment strategy for solar in Texas that, if scaled, has the potential to create significant local economic and environmental benefits. In Galveston today, 40% of households make less than $35,000, and 57% of residents rent. Community solar can bring affordable clean energy to Galveston residents and provide a vehicle for local jobs and economic development.\nThe Texas Energy Poverty Research Institute (TEPRI), with the generous support of the Cynthia and George Mitchell Foundation and in coordination with Vision Galveston, is conducting a pre-development seeks to bring an innovative community solar concept to Galveston. Preliminary analysis has identified 31 MW of solar potential, which could supply energy to over 3,600 low-income households on the island.\nTEPRI has identified several potential community solar host sites on Galveston Island based on aerial analysis, prioritizing buildings with large rooftops and/or large parking lots owned by a single entity. Additionally, we took into consideration entities that have expressed interest in sustainability or clean energy, including through the Vision Galveston Plan. We seek to begin exploratory conversations with potential site hosts to gauge interest and feasibility of hosting a local community solar installation.\n","date":1600300800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1600300800,"objectID":"af27affb8c7b4cbb27c9bc8e65669d3d","permalink":"/project/community-solar-in-the-competitive-market/","publishdate":"2020-09-17T00:00:00Z","relpermalink":"/project/community-solar-in-the-competitive-market/","section":"project","summary":"Looking for ways to integrate Community Solar for Low-Income Households in the Competitive Market","tags":null,"title":"Community Solar for Low-Income Households in the Competitive Market","type":"project"},{"authors":["Erick Jones","Benjamin Leibowicz"],"categories":null,"content":"Abstract:\nDistributed water and energy technologies have the potential to reduce reliance on centralized infrastructures, household utility bills, and carbon footprints. Current adoption levels remain low because of issues such as long payback periods, limited consumer awareness, capital constraints, and resource intermittency challenges. In this study, we assess the ability of two system design concepts to improve the economics of distributed water and energy technologies, and ultimately encourage their broader adoption: (1) co-optimizing water and energy technology investments and operations, and (2) investing in community-scale rather than home-scale systems. We explore the benefits of these approaches by formulating a mixed-integer linear program for optimal system design and dispatch. Our case study applies this model to a neighborhood in Austin, Texas. Results show that distributed electricity and water production increase, and total cost decreases, when resources and demands are pooled at larger community scales. These community-scale systems make a wider range of technologies economically viable and enable greater asset utilization due to systems integration. The cost and carbon emissions reduction benefits of co-optimizing distributed water and energy investments are significant, especially at higher aggregation levels. While distributed water production alone tends to increase carbon emissions, complementing it with appropriate distributed electricity generation technologies can yield simultaneous economic and environmental benefits.\n","date":1599955200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1599955200,"objectID":"9befba719b4f728d0efea08f69b89c78","permalink":"/publication/co-optimization-and-community-maximizing-the-benefits-of-distributed-electricity-and-water-technologies/","publishdate":"2019-08-17T00:00:00Z","relpermalink":"/publication/co-optimization-and-community-maximizing-the-benefits-of-distributed-electricity-and-water-technologies/","section":"publication","summary":"How co-optimzing distributed water and energy technologies at the community scale can bring about cost savings that wouldn't exist without their mutual benefits.","tags":null,"title":"Co-optimization and community, Maximizing the benefits of Distributed Electricity and Water Technologies","type":"publication"},{"authors":["Erick Jones","Gohar Azeem","Erick Jones","Felicia Jefferson"],"categories":null,"content":"Abstract:\nThe Coronavirus disease 2019 (COVID-19) pandemic has impacted the global community like no other pandemic in history. The COVID-19 has progressed rapidly throughout United States. Vulnerable communities including the African American and other social communities have been particularly affected by the virus. As medicines are being developed as a possible cure and preventive medicines, the challenge is how to get these important medicines to the communities that are most at risk, especially in the under-represented minority (URM) community. This study aimed to create a supply chain that prioritizes geographic sections that house vulnerable communities to prevent and minimize the impacts of COVID-19. We collaborated with the Houston Department of Health and Human Services to capture the data needed to model a community that has these challenges. We created a supply chain model for the city of Houston that prioritizes geographic sections in the city that house vulnerable communities. We defined the “COVID-19 Community Health Index” (C-19 CHI) which we used to parameterize the supply chain mixed integer program (MIP). The outcome of this study helped us in prioritizing those communities that need the medicinals the most. This information can be used in our healthcare supply chain model to ensure timely delivery of medicines and supplies to COVID-19 patients that are the most vulnerable and hence the overall impact of COVID-19 can be minimized.\nKeywords: COVID-19; Community Health Index; COVID; Community Mapping; Healthcare Supply Chain; Supply Chain Modeling; Underserved communities\n","date":1599436800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1599436800,"objectID":"fb4d31321ed268db12f7cfca6b0de62c","permalink":"/publication/impacting-at-risk-communities-using-ai-to-optimize-the-covid-19-pandemic-therapeutics-supply-chain/","publishdate":"2020-09-07T00:00:00Z","relpermalink":"/publication/impacting-at-risk-communities-using-ai-to-optimize-the-covid-19-pandemic-therapeutics-supply-chain/","section":"publication","summary":"Creates a COVID-19 supply chain for the city of Houston","tags":["Source Themes"],"title":"Impacting at Risk Communities using AI to optimize the COVID-19 Pandemic Therapeutics Supply Chain","type":"publication"},{"authors":["Dana Harmon","Erick Jones","Emery Wolfe","Jacquie Moss"],"categories":null,"content":"Abstract:\nDistributed Energy Resources (DERs) can offer financial, environmental, and resiliency benefits to our society. Vulnerable communities, for whom these benefits can be most impactful, often face barriers to access, including awareness, financial limitations, and housing conditions.\nThe Texas Energy Poverty Research Institute (TEPRI) leads the Pathways for DERs to Reduce Energy Burdens initiative to develop a roadmap for cost-efficient, inclusive, and effective pathways for rooftop solar and energy efficiency deployment in residential buildings located in low-income census tracks — with the goal of reducing the energy burden of residents. This analysis and stakeholder engagement initiative is initially focused on Harris County (Houston), Texas, (with 600,000 low-income households, 65% of whom are people of color) with the intent of expanding to other Texas regions.\nThe project involves a synthesis and analysis of existing literature and data, that includes both publicly available and proprietary datasets, to develop a clear understanding of the Energy Affordability Gap (EAG) and the energy efficiency and rooftop solar potential of the existing affordable housing stock. This project also involves stakeholder meetings in Houston with local community organizations, researchers, energy providers, and local leadership to identify barriers and co-develop solutions specific to Harris County, opportunities to leverage funding sources, and alignment with the City of Houston Climate Action Plan.\nThe most immediate action to reduce the EAG is to target energy efficiency measures in single family homes in geographical areas with high concentrations of low-income households. Furthermore, we encourage the development of community relationships to improve the implementation of weatherization programs among low-income communities.\n","date":1597276800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597276800,"objectID":"e6bac16ef86c86273ad7311590449e29","permalink":"/publication/pathways-for-reducing-energy-burdens-in-harris-county/","publishdate":"2020-08-17T00:00:00Z","relpermalink":"/publication/pathways-for-reducing-energy-burdens-in-harris-county/","section":"publication","summary":"How energy efficiency and solar can reduce the energy burdens of low income communities.","tags":null,"title":"Pathways for Reducing Energy Burdens in Harris County","type":"publication"},{"authors":null,"categories":null,"content":"EAGER: AI-Enabled Optimization of the COVID-19 Therapeutics Supply Chain to Support Community Public Health\nNSF Award Number 2028612\nThis EAGER award supports fundamental research in technology-enabled supply chain design to effectively deliver therapeutics to at risk populations in an urban setting. The research has three primary objectives: 1) investigate the Automated Data Capture and Artificial Intelligence needed to automate the COVID-19 Healthcare Supply Chain; 2) model the COVID-19 Supply Chain from manufacture to home delivery that addresses the needs of at risk populations and communities; and 3) identify the readiness and the societal cost benefit of this model for use when medicine and supplies become ready for the COVID-19 outbreak Available data from HDHHS on location of vulnerable individuals and their social determinants of health will be integrated in an optimization-driven AI engine to target, map and assist health departments to prioritize their limited resources for response planning and to adapt their tactics to the needs of neighborhoods and communities.\nhttps://www.uta.edu/news/news-releases/2020/05/05/coronavirus-supply-chain\nhttps://www.nsf.gov/awardsearch/showAward?AWD_ID=2028612\nPublications:\nJones, E. C., Azeem, Gohar, Jones, Erick C., and Jefferson, F., “Impacting at Risk Communities using AI to optimize the COVID-19 Pandemic Therapeutics Supply Chain”, International Supply Chain Technology Journal (ISCTJ), Vol. 6, No. 9 September 2020. DOI: http://doi.org/10.20545/isctj.v06.i09.02\n","date":1595116800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1595116800,"objectID":"10b58d2ceb3e5c03c2eb2f094a2cfb78","permalink":"/project/covid-19-houston/","publishdate":"2020-07-19T00:00:00Z","relpermalink":"/project/covid-19-houston/","section":"project","summary":"This EAGER award supports fundamental research in technology-enabled supply chain design to effectively deliver therapeutics to at risk populations in an urban setting.","tags":null,"title":"EAGER AI-Enabled Optimization of the COVID-19 Therapeutics Supply Chain to Support Community Public Health","type":"project"},{"authors":null,"categories":null,"content":"I participated in the University of Texas Grand Challange Planet Texas 2050 and the Science in Residence program. Through this experience I developed various lesson plans for K-12 students.\nPlanet Texas 2050 is an eight-year sprint to find solutions that will make our communities more resilient and better prepared. To do that, we’re bringing together architects, archaeologists, city planners, public health experts, geologists, engineers, computer scientists, artists — and more.\nhttps://bridgingbarriers.utexas.edu/planet-texas-2050/\nThe University of Texas at Austin Scientist in Residence (SciRes) Program is an innovative partnership between graduate students and K-12 science teachers to bring current and innovative research to the classroom. As role models, the graduate students engage K-12 students in the excitement of scientific discovery.\nhttps://www.esi.utexas.edu/outreach/scires/\nAs part of Planet Texas 2050 involvement with the Science in Residence program, I created various activities and lesson plans related to the core tenants of Planet Texas 2050. These activities are available at the website below.\nhttps://www.esi.utexas.edu/outreach/k12-resources/pt2050_lessonplans/\nI also created quite a few games for this physics class using basic economics concepts. The lessons plans on the GitHub page are really just a giant list of activities.\nThe best activities were the light trading competition (where students had to buy and sell industries associated with the light spectrum i.e. cell phones, TV, etc.), the city building game, flotilla, and the simple card based economics game.\nThe flotilla game uses my monocentric model in R and adjusts inputs based on what the different groups invest in. It is available in Github and this online R notebook. It clearly illustrates how carbon taxes, traffic, parks, etc. affect a cities growth and carbon footprint.\nThe card based supply and demand game I got from CMU and it elegantly introduces students to the ideas they need to play most of my games.\nCheck out the games and lesson plans via the GitHub Link below.\nhttps://github.com/yamierick/Engineer_Living/tree/master/Learning_Activities\n","date":1595116800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1595116800,"objectID":"cd1c4a8660c99fa8988224299852f569","permalink":"/project/ptscires/","publishdate":"2020-07-19T00:00:00Z","relpermalink":"/project/ptscires/","section":"project","summary":"A program to introduce K-12 to the joys of science","tags":null,"title":"Science in Residence and Planet Texas","type":"project"},{"authors":null,"categories":null,"content":"The primary goal of this project is to help develop the SimCCS optimization framework. SimCCS is used to develop fossil-related infrastructure through dedicated pipelines. To date SimCCS has been principally applied to CO2 capture and storage (CCS) infrastructure, though the software’s pipeline routing could be applied to any pipeline product including oil and natural gas. This is closely aligned with Office of Fossil Energy’s mission to help the United States meet its continually growing need for secure, reasonably priced and environmentally sound fossil energy supplies.\nThe key objective is to enhance the SimCCS framework through a combination of one or more of software development/coding, graphical user interface (GUI) enhancement, case study development and data collection and visualization, user testing, and conceptual model development. We wish to investigate the 45Q credits and as such need to modify the SimCCS 2.0 framework to optimize different time periods. Adding temporal variation to SimCCS will raise unforeseen challenges but allow us to investigate new challenging problems.\nAny chosen Fellow would be working alongside a dynamic team based in Los Alamos National Labs with a wide range of backgrounds including computer science, geosciences (e.g., geography, geology), and petroleum engineering.\nhttps://www.lanl.gov/discover/news-stories-archive/2019/August/0821-co2-software.php https://simccs.org/\n","date":1595116800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1595116800,"objectID":"ce5ff52b6efa2ce7c3fbb543f271bb92","permalink":"/project/simccs/","publishdate":"2020-07-19T00:00:00Z","relpermalink":"/project/simccs/","section":"project","summary":"Updating SimCCS to vary with time and investigate thr 45Q credits","tags":null,"title":"SimCCS 2.0 Temporal Modfications and 45Q Credits","type":"project"},{"authors":[],"categories":["Systems Modeling"],"content":"\r\rWe designed a spinning top that is novel, aesthetically pleasing, durable, spins well, and whose unique fan assembly can only be made using SLS. Our design incorporates a modular top system that allows for interchangeable designs to be attached to the universal base. We designed two UT-themed attachable tops, one that is a replica of the UT model tower and the other that is a replica of the UT seal. The universal base has wind turbine blades in its center so that air can be blown through it to keep it spinning even with a large top installed. The end result, a unique spinning UT tower and a spinning UT seal both powered by air and that can only be fabricated using SLS.\rAccording to our research, the market for tops ranges from cheap toys with cool designs to expensive over $300 collectors items made of polished metals. The data from our survey suggested customers desired an aesthetically pleasing top that was novel and spun well over all other criteria. And our review of the design specifications of other tops gave us parameters for which to judge our own top.\rUsing the market, customer, and design specification information we came up with numerous designs eventually narrowing down our choices to five designs. Then we took our top two designs, the UT tower and an air-powered top, and combined the concepts behind them. With the concept decided upon, we started the design process and iterated through it multiple times until we reached our final design.\rTo ensure our final design would meet specifications we ran it through various tests. Since the performance of the top heavily depends on its aerodynamics, we prioritized aerodynamic testing. We performed 2-D analysis on each of the blades to determine minimum angle requirements based on inlet air speed and target RPM and then modified the blades accordingly. In future iterations, the blade design could benefit from 3-D analysis and simulation, but for this project we believed 2-D analysis was sufficient.\rLastly, we calculated the cost to build our top to ensure it was competitive with other high end tops. Our entire top system which includes both the universal base and the two attachable designs only required a build volume of 1024 cm3 (80mm x 80 mm x 160 mm); this is only 1/50th of the build chamber. This volume requires 0.512 kg of Nylon -12 powder which would cost about $11 (50% virgin powder). Depending on the operating cost, the top would cost between $20 and $30, well below the cost of higher end tops and closer to lower end ones.\nThe code and final report are available on Github:\nhttps://github.com/yamierick/Engineer_Living/tree/master/SLS%20Project\nKey Image\nPotential Designs\n\r","date":1584748800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1600726834,"objectID":"5d306e173d1d38e4126c51f8f7d2ee73","permalink":"/post/class_projects/slsdesign/","publishdate":"2020-03-21T00:00:00Z","relpermalink":"/post/class_projects/slsdesign/","section":"post","summary":"We designed a spinning top that is novel, aesthetically pleasing, durable, spins well, and whose unique fan assembly can only be made using SLS. Our design incorporates a modular top system that allows for interchangeable designs to be attached to the universal base.","tags":["additive manufacturing","SLS","CAD"],"title":"A Selective Laser Sintering Creation - Wind Powered Tops","type":"post"},{"authors":[],"categories":["Machine Learning"],"content":"\r\rWe investigated how different Natural Language Processing (NLP) techniques could be used to perform sentiment analysis on real user generated text data from the Sentiment140 dataset [1]. First we investigated an LSTM model before deciding on using the self-attention network code from [2] because of the possible speed and accuracy advantages. Our contributions included investigating how the training batch size and dropout rate affected the accuracy of the model and validating an existing model by reproducing it and using it with a different dataset. After tuning the model with a smaller version of the dataset we trained it on 160,000 tweets. When we tested our model on the test dataset, we achieved an accuracy around 80%.\nThe code and final report are available on Github:\nhttps://github.com/yamierick/sentiment-analysis\nKey Image\nComparison of test accuracy by dropout rat\n\r","date":1584748800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1600726834,"objectID":"baa176eff7c3db833ecb68e5f248e338","permalink":"/post/class_projects/sentimentanalysis/","publishdate":"2020-03-21T00:00:00Z","relpermalink":"/post/class_projects/sentimentanalysis/","section":"post","summary":"We investigated how different Natural Language Processing (NLP) techniques could be used to perform sentiment analysis on real user generated text data from the Sentiment140 dataset [1]. First we investigated an LSTM model before deciding on using the self-attention network code from [2] because of the possible speed and accuracy advantages.","tags":["Machine Learning"],"title":"Natural Language Processing - Sentiment Analysis","type":"post"},{"authors":["Erick Jones"],"categories":null,"content":"Abstract:\nDistributed energy resources (DERs) have the potential to lower energy costs and increase energy resilience. However, they complicate the current energy system and can negatively affect a utility’s cost and reliability. Existing frameworks for modeling DER integration are complicated and lack clear insights. One approach to simplify the DER integration problem would be to use a decomposition technique. Decomposition techniques simplify models, make them easier to solve and provide clear and useful insights. Decomposing DER integration into a model with disjoint utility and community problems creates a clear, efficient, and decipherable model. In this study, I use a decomposition framework to investigate the benefits of DERs and their effects on utilities. My results show that DERs lower the overall cost of electricity, lower utility demand which forces utilities to raise prices, and that communities overcome intermittency by using the utility as backup power.\nKeywords: Distributed, Energy Systems, Optimization, Decomposition\n","date":1581552000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581552000,"objectID":"362b6ca603e4330493487cd376891eb7","permalink":"/publication/illustrating-the-utility-of-distributed-energy-resources-with-decomposition-techniques/","publishdate":"2020-08-31T00:00:00Z","relpermalink":"/publication/illustrating-the-utility-of-distributed-energy-resources-with-decomposition-techniques/","section":"publication","summary":"How distributed energy resources affect the grid solved with decomposition techniques.","tags":null,"title":"Decomposing Systems  Illustrating the Utility of Distributed Energy Resources with Decomposition Techniques","type":"publication"},{"authors":null,"categories":["ORIE Techniques"],"content":"\r\rThis post explores how to use various decomposition techniques to solve LPs and MIPs.\rI have written these using Gurobi as a solver and as the mathematical formulation software.\rThis is a reproducible example if you have R Studio just make sure you have installed the correct packages.\nlibrary(gurobi)\r## Warning: package \u0026#39;gurobi\u0026#39; was built under R version 4.0.2\rlibrary(tictoc)\rlibrary(Matrix)\rlibrary(ggplot2)\r## Warning: package \u0026#39;ggplot2\u0026#39; was built under R version 4.0.2\r#Using homogenous equations to generate extreme points for (optimality) and extreme rays for (feasiblity)\r#max 2x1 + x2 + 13x3 + 7y1 + 5y2\r#s.t. 9x1+4x2+14x3+35y1+24y2 \u0026lt;= 80; -x1-2x2+3x3-3y1+4y2 \u0026lt;= 10\r#x \u0026gt;=0, y\u0026gt;= 0, x is int\r#RMP\r#max z + 2x1 + x2 + 13x3\r# z \u0026gt;= + (80-9x1-4x2-14x3)*u1 + (10+x1+2x2-3x3)*u2 u == 0 initial guess\ru \u0026lt;- c(0,0)\rRMP \u0026lt;- list()\rRMP$A \u0026lt;- matrix(c(1,(u[1]*9-u[2]),(u[1]*4-2*u[2]),(14*u[1]+3*u[2])), nrow=1, byrow=T)\rRMP$obj \u0026lt;- c(1,2,1,13)\rRMP$modelsense \u0026lt;- \u0026#39;max\u0026#39;\rRMP$rhs \u0026lt;- c((80*u[1]+10*u[2]))\rRMP$sense \u0026lt;- c(\u0026#39;\u0026lt;\u0026#39;)\rRMP$vtype \u0026lt;- c(\u0026#39;C\u0026#39;,\u0026#39;I\u0026#39;,\u0026#39;I\u0026#39;,\u0026#39;I\u0026#39;)\rresult \u0026lt;- gurobi(RMP)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 1 rows, 4 columns and 1 nonzeros\r## Model fingerprint: 0x2e4b9afd\r## Variable types: 1 continuous, 3 integer (0 binary)\r## Coefficient statistics:\r## Matrix range [1e+00, 1e+00]\r## Objective range [1e+00, 1e+01]\r## Bounds range [0e+00, 0e+00]\r## RHS range [0e+00, 0e+00]\r## Found heuristic solution: objective 1.600000e+31\r## Presolve time: 0.00s\r## ## Explored 0 nodes (0 simplex iterations) in 0.00 seconds\r## Thread count was 1 (of 8 available processors)\r## ## Solution count 1: 1.6e+31 ## No other solutions better than 0\r## ## Model is unbounded\r## Warning: some integer variables take values larger than the maximum\r## supported value (2000000000)\r## Best objective 1.600000000000e+31, best bound -, gap -\rUB \u0026lt;- result$objval\rprint(paste(\u0026#39;RMP Objective Value and New Upper bound:\u0026#39;, result$objval))\r## [1] \u0026quot;RMP Objective Value and New Upper bound: 1.6e+31\u0026quot;\rprint(paste(\u0026#39;Value of z:\u0026#39;, result$x[1]))\r## [1] \u0026quot;Value of z: 0\u0026quot;\rx \u0026lt;- result$x[-1]\rprint(paste(\u0026#39;Value of x:\u0026#39;, t(as.matrix(x))))\r## [1] \u0026quot;Value of x: 1e+30\u0026quot; \u0026quot;Value of x: 1e+30\u0026quot; \u0026quot;Value of x: 1e+30\u0026quot;\rif(result$status == \u0026quot;INF_OR_UNBD\u0026quot; | result$status == \u0026quot;UNBOUNDED\u0026quot;){\rUB \u0026lt;- 999999\rx \u0026lt;- c(0,0,0)\r}\rrm(result)\r#Primal Subproblem\r# 2x1 + x2 + 13x3 + max 7y1 + 5y2\r#s.t. 35y1+24y2 \u0026lt;= 80-(9x1+4x2+14x3); -3y1+4y2 \u0026lt;= 10-(-x1-2x2+3x3)\rLB \u0026lt;- -999999\rLB_list \u0026lt;- LB\rUB_list \u0026lt;- UB\rx_list \u0026lt;- x\ru_list \u0026lt;- u\ry \u0026lt;- c(0,0)\ry_list \u0026lt;- y\r#Keeps adding Benders Cuts to Problem\rwhile(LB != UB){\r#Dual Subproblem\r#min (80-(9x1+4x2+14x3))u1 + (10-(-x1-2x2+3x3))u2\r#s.t. 35u1 -3u2 \u0026gt;= 7; 24u1+4u2 \u0026gt;= 5\rDSB \u0026lt;- list()\rDSB$A \u0026lt;- matrix(c(35,-3,24,4), nrow=2, byrow=T)\rDSB$obj \u0026lt;- c((80-9*x[1]-4*x[2]-14*x[3]),(10+x[1]+2*x[2]-3*x[3]))\rDSB$modelsense \u0026lt;- \u0026#39;min\u0026#39;\rDSB$rhs \u0026lt;- c(7,5)\rDSB$sense \u0026lt;- c(\u0026#39;\u0026gt;\u0026#39;, \u0026#39;\u0026gt;\u0026#39;)\rresult \u0026lt;- gurobi(DSB)\rLB \u0026lt;- result$objval + 2 * x[1] + x[2] + 13*x[3]\rprint(paste(\u0026#39;DSB Objective Value and New Lower bound:\u0026#39;, LB))\ru \u0026lt;- result$x\ry \u0026lt;- result$pi\rprint(paste(\u0026#39;Value of u:\u0026#39;, u))\rprint(paste(\u0026#39;Value of y:\u0026#39;, y))\r#add new constraint\r#z \u0026gt;= u[1]*(3-y1) + u[2]*(4-3y1)\r#z + (u[1]*y1) + u[2]*3y1 \u0026gt;= u[1]*3+u[2]*4\rB \u0026lt;- matrix(c(1,(u[1]*9-u[2]),(u[1]*4-2*u[2]),(14*u[1]+3*u[2])), nrow=1, byrow=T)\rb \u0026lt;- u[1]*80+u[2]*10\rif(result$status == \u0026quot;INF_OR_UNBD\u0026quot; | result$status == \u0026#39;UNBOUNDED\u0026#39;){\rDSB$A \u0026lt;- rbind(DSB$A,c(1,1))\rDSB$rhs \u0026lt;- c(0,0,1)\rDSB$sense \u0026lt;- c(DSB$sense, \u0026#39;=\u0026#39;)\rresult \u0026lt;- gurobi(DSB)\ru \u0026lt;- result$x\rLB \u0026lt;- LB_list[length(LB_list)]\rB \u0026lt;- matrix(c(0,(u[1]*9-u[2]),(u[1]*4-2*u[2]),(14*u[1]+3*u[2])), nrow=1, byrow=T)\rb \u0026lt;- u[1]*80+u[2]*10\r}\ru_list \u0026lt;- rbind(u_list,u)\ry_list \u0026lt;- rbind(y_list,y)\rLB_list \u0026lt;- c(LB_list, LB)\rrm(result)\rRMP$A \u0026lt;- rbind(RMP$A, B)\rRMP$rhs \u0026lt;- c(RMP$rhs,b)\rRMP$sense \u0026lt;- c(RMP$sense, \u0026#39;\u0026lt;\u0026#39;)\rresult \u0026lt;- gurobi(RMP)\rUB \u0026lt;- result$objval\rprint(paste(\u0026#39;RMP Objective Value and New Upper bound:\u0026#39;, result$objval))\rprint(paste(\u0026#39;Value of z:\u0026#39;, result$x[1]))\rx \u0026lt;- result$x[-1]\rprint(paste(\u0026#39;Value of x:\u0026#39;, t(as.matrix(x))))\rif(result$status == \u0026quot;INF_OR_UNBD\u0026quot;){\rUB \u0026lt;- 999999\rx \u0026lt;- c(0,0,0)\r}\rUB_list \u0026lt;- c(UB_list, UB)\rx_list \u0026lt;- rbind(x_list,x)\rrm(result)\r}\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 2 rows, 2 columns and 4 nonzeros\r## Model fingerprint: 0xfecd2aa1\r## Coefficient statistics:\r## Matrix range [3e+00, 4e+01]\r## Objective range [1e+01, 8e+01]\r## Bounds range [0e+00, 0e+00]\r## RHS range [5e+00, 7e+00]\r## Presolve time: 0.00s\r## Presolved: 2 rows, 2 columns, 4 nonzeros\r## ## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 0.0000000e+00 1.500000e+00 0.000000e+00 0s\r## 2 1.6556604e+01 0.000000e+00 0.000000e+00 0s\r## ## Solved in 2 iterations and 0.00 seconds\r## Optimal objective 1.655660377e+01\r## [1] \u0026quot;DSB Objective Value and New Lower bound: 16.5566037735849\u0026quot;\r## [1] \u0026quot;Value of u: 0.202830188679245\u0026quot; \u0026quot;Value of u: 0.0330188679245282\u0026quot;\r## [1] \u0026quot;Value of y: 0.377358490566038\u0026quot; \u0026quot;Value of y: 2.78301886792453\u0026quot; ## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 2 rows, 4 columns and 5 nonzeros\r## Model fingerprint: 0xc19f21b7\r## Variable types: 1 continuous, 3 integer (0 binary)\r## Coefficient statistics:\r## Matrix range [7e-01, 3e+00]\r## Objective range [1e+00, 1e+01]\r## Bounds range [0e+00, 0e+00]\r## RHS range [2e+01, 2e+01]\r## Found heuristic solution: objective 18.0000000\r## Presolve removed 1 rows and 1 columns\r## Presolve time: 0.00s\r## Presolved: 1 rows, 3 columns, 3 nonzeros\r## Variable types: 0 continuous, 3 integer (0 binary)\r## ## Root relaxation: objective 6.750000e+01, 1 iterations, 0.00 seconds\r## ## Nodes | Current Node | Objective Bounds | Work\r## Expl Unexpl | Obj Depth IntInf | Incumbent BestBd Gap | It/Node Time\r## ## 0 0 67.50000 0 1 18.00000 67.50000 275% - 0s\r## H 0 0 67.0000000 67.50000 0.75% - 0s\r## 0 0 67.50000 0 1 67.00000 67.50000 0.75% - 0s\r## ## Explored 1 nodes (1 simplex iterations) in 0.00 seconds\r## Thread count was 8 (of 8 available processors)\r## ## Solution count 2: 67 18 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 6.700000000000e+01, best bound 6.700000000000e+01, gap 0.0000%\r## [1] \u0026quot;RMP Objective Value and New Upper bound: 67\u0026quot;\r## [1] \u0026quot;Value of z: 0\u0026quot;\r## [1] \u0026quot;Value of x: 0\u0026quot; \u0026quot;Value of x: 2\u0026quot; \u0026quot;Value of x: 5\u0026quot;\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 2 rows, 2 columns and 4 nonzeros\r## Model fingerprint: 0xe467fd43\r## Coefficient statistics:\r## Matrix range [3e+00, 4e+01]\r## Objective range [1e+00, 2e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [5e+00, 7e+00]\r## Presolve removed 2 rows and 2 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 -8.2857143e+29 0.000000e+00 1.657143e+00 0s\r## Extra 2 simplex iterations after uncrush\r## ## Solved in 2 iterations and 0.00 seconds\r## Unbounded model\r## [1] \u0026quot;DSB Objective Value and New Lower bound: \u0026quot;\r## [1] \u0026quot;Value of u: \u0026quot;\r## [1] \u0026quot;Value of y: \u0026quot;\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 3 rows, 2 columns and 6 nonzeros\r## Model fingerprint: 0x9e81c4c8\r## Coefficient statistics:\r## Matrix range [1e+00, 4e+01]\r## Objective range [1e+00, 2e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [1e+00, 1e+00]\r## Presolve removed 3 rows and 2 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 -7.6315789e-01 0.000000e+00 0.000000e+00 0s\r## ## Solved in 0 iterations and 0.00 seconds\r## Optimal objective -7.631578947e-01\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 3 rows, 4 columns and 8 nonzeros\r## Model fingerprint: 0x49b3021e\r## Variable types: 1 continuous, 3 integer (0 binary)\r## Coefficient statistics:\r## Matrix range [2e-01, 4e+00]\r## Objective range [1e+00, 1e+01]\r## Bounds range [0e+00, 0e+00]\r## RHS range [2e+01, 2e+01]\r## Found heuristic solution: objective 18.0000000\r## Presolve removed 1 rows and 1 columns\r## Presolve time: 0.00s\r## Presolved: 2 rows, 3 columns, 6 nonzeros\r## Variable types: 0 continuous, 3 integer (0 binary)\r## ## Root relaxation: objective 6.750000e+01, 1 iterations, 0.00 seconds\r## ## Nodes | Current Node | Objective Bounds | Work\r## Expl Unexpl | Obj Depth IntInf | Incumbent BestBd Gap | It/Node Time\r## ## 0 0 67.50000 0 1 18.00000 67.50000 275% - 0s\r## H 0 0 58.0000000 67.50000 16.4% - 0s\r## ## Cutting planes:\r## Gomory: 1\r## MIR: 1\r## ## Explored 1 nodes (1 simplex iterations) in 0.00 seconds\r## Thread count was 8 (of 8 available processors)\r## ## Solution count 2: 58 18 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 5.800000000000e+01, best bound 5.800000000000e+01, gap 0.0000%\r## [1] \u0026quot;RMP Objective Value and New Upper bound: 58\u0026quot;\r## [1] \u0026quot;Value of z: 0\u0026quot;\r## [1] \u0026quot;Value of x: 1\u0026quot; \u0026quot;Value of x: 4\u0026quot; \u0026quot;Value of x: 4\u0026quot;\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 2 rows, 2 columns and 4 nonzeros\r## Model fingerprint: 0xb674b004\r## Coefficient statistics:\r## Matrix range [3e+00, 4e+01]\r## Objective range [1e+00, 7e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [5e+00, 7e+00]\r## Presolve time: 0.00s\r## ## Solved in 0 iterations and 0.00 seconds\r## Infeasible or unbounded model\r## [1] \u0026quot;DSB Objective Value and New Lower bound: \u0026quot;\r## [1] \u0026quot;Value of u: \u0026quot;\r## [1] \u0026quot;Value of y: \u0026quot;\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 3 rows, 2 columns and 6 nonzeros\r## Model fingerprint: 0x56bfae6b\r## Coefficient statistics:\r## Matrix range [1e+00, 4e+01]\r## Objective range [1e+00, 7e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [1e+00, 1e+00]\r## Presolve removed 3 rows and 2 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 -1.0000000e+00 0.000000e+00 0.000000e+00 0s\r## ## Solved in 0 iterations and 0.00 seconds\r## Optimal objective -1.000000000e+00\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 4 rows, 4 columns and 11 nonzeros\r## Model fingerprint: 0x671586c2\r## Variable types: 1 continuous, 3 integer (0 binary)\r## Coefficient statistics:\r## Matrix range [2e-01, 1e+01]\r## Objective range [1e+00, 1e+01]\r## Bounds range [0e+00, 0e+00]\r## RHS range [2e+01, 8e+01]\r## Found heuristic solution: objective 18.0000000\r## Presolve removed 1 rows and 1 columns\r## Presolve time: 0.00s\r## Presolved: 3 rows, 3 columns, 9 nonzeros\r## Variable types: 0 continuous, 3 integer (0 binary)\r## ## Root relaxation: objective 6.750000e+01, 1 iterations, 0.00 seconds\r## ## Nodes | Current Node | Objective Bounds | Work\r## Expl Unexpl | Obj Depth IntInf | Incumbent BestBd Gap | It/Node Time\r## ## 0 0 67.50000 0 1 18.00000 67.50000 275% - 0s\r## H 0 0 57.0000000 67.50000 18.4% - 0s\r## H 0 0 58.0000000 67.50000 16.4% - 0s\r## ## Cutting planes:\r## Gomory: 1\r## MIR: 1\r## ## Explored 1 nodes (1 simplex iterations) in 0.00 seconds\r## Thread count was 8 (of 8 available processors)\r## ## Solution count 3: 58 57 18 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 5.800000000000e+01, best bound 5.800000000000e+01, gap 0.0000%\r## [1] \u0026quot;RMP Objective Value and New Upper bound: 58\u0026quot;\r## [1] \u0026quot;Value of z: 0\u0026quot;\r## [1] \u0026quot;Value of x: 0\u0026quot; \u0026quot;Value of x: 6\u0026quot; \u0026quot;Value of x: 4\u0026quot;\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 2 rows, 2 columns and 4 nonzeros\r## Model fingerprint: 0x5530e933\r## Coefficient statistics:\r## Matrix range [3e+00, 4e+01]\r## Objective range [1e+01, 1e+01]\r## Bounds range [0e+00, 0e+00]\r## RHS range [5e+00, 7e+00]\r## Presolve removed 2 rows and 2 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 0.0000000e+00 0.000000e+00 0.000000e+00 0s\r## ## Solved in 0 iterations and 0.00 seconds\r## Optimal objective 0.000000000e+00\r## [1] \u0026quot;DSB Objective Value and New Lower bound: 58\u0026quot;\r## [1] \u0026quot;Value of u: 0.208333333333333\u0026quot; \u0026quot;Value of u: 0\u0026quot; ## [1] \u0026quot;Value of y: 0\u0026quot; \u0026quot;Value of y: 0\u0026quot;\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 5 rows, 4 columns and 15 nonzeros\r## Model fingerprint: 0xd390add2\r## Variable types: 1 continuous, 3 integer (0 binary)\r## Coefficient statistics:\r## Matrix range [2e-01, 1e+01]\r## Objective range [1e+00, 1e+01]\r## Bounds range [0e+00, 0e+00]\r## RHS range [2e+01, 8e+01]\r## Found heuristic solution: objective 18.0000000\r## Presolve removed 2 rows and 1 columns\r## Presolve time: 0.00s\r## Presolved: 3 rows, 3 columns, 9 nonzeros\r## Variable types: 0 continuous, 3 integer (0 binary)\r## ## Root relaxation: objective 6.750000e+01, 1 iterations, 0.00 seconds\r## ## Nodes | Current Node | Objective Bounds | Work\r## Expl Unexpl | Obj Depth IntInf | Incumbent BestBd Gap | It/Node Time\r## ## 0 0 67.50000 0 1 18.00000 67.50000 275% - 0s\r## H 0 0 57.0000000 67.50000 18.4% - 0s\r## H 0 0 58.0000000 67.50000 16.4% - 0s\r## ## Cutting planes:\r## Gomory: 1\r## MIR: 1\r## ## Explored 1 nodes (1 simplex iterations) in 0.00 seconds\r## Thread count was 8 (of 8 available processors)\r## ## Solution count 3: 58 57 18 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 5.800000000000e+01, best bound 5.800000000000e+01, gap 0.0000%\r## [1] \u0026quot;RMP Objective Value and New Upper bound: 58\u0026quot;\r## [1] \u0026quot;Value of z: 0\u0026quot;\r## [1] \u0026quot;Value of x: 0\u0026quot; \u0026quot;Value of x: 6\u0026quot; \u0026quot;Value of x: 4\u0026quot;\rLB_list\r## [1] -999999.0000 16.5566 16.5566 16.5566 58.0000\rUB_list\r## [1] 999999 67 58 58 58\ru_list\r## [,1] [,2]\r## u_list 0.00000000 0.00000000\r## u 0.20283019 0.03301887\r## u 0.07894737 0.92105263\r## u 1.00000000 0.00000000\r## u 0.20833333 0.00000000\ry_list\r## [,1] [,2]\r## y_list 0.0000000 0.000000\r## y 0.3773585 2.783019\r## y 0.0000000 0.000000\rx_list\r## [,1] [,2] [,3]\r## x_list 0 0 0\r## x 0 2 5\r## x 1 4 4\r## x 0 6 4\r## x 0 6 4\rrm(b,B,DSB,LB,LB_list,RMP,u,u_list,UB,UB_list,x,x_list,y,y_list)\r#Column Generation Algorithm\r#Cutting Stock Problem\r#minimize number of rods used (x). Satisfy demand for 44 81 cm pieces, 3 70 cm pieces, and 48 68 cm pieces\r#min x1 + x2 + x3\r#s.t. x1 \u0026gt;= 44; x2 \u0026gt;=3; x3 \u0026gt;= 48\r#x \u0026gt;=0,\rLMP \u0026lt;- list()\rLMP$A \u0026lt;- matrix(c(1,0,0,\r0,1,0,\r0,0,1), nrow=3, byrow=T)\rLMP$obj \u0026lt;- c(1,1,1)\rLMP$modelsense \u0026lt;- \u0026#39;min\u0026#39;\rLMP$rhs \u0026lt;- c(44,3,48)\rLMP$sense \u0026lt;- c(\u0026#39;\u0026gt;\u0026#39;)\rresult \u0026lt;- gurobi(LMP)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 3 rows, 3 columns and 3 nonzeros\r## Model fingerprint: 0xcd2bfab3\r## Coefficient statistics:\r## Matrix range [1e+00, 1e+00]\r## Objective range [1e+00, 1e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [3e+00, 5e+01]\r## Presolve removed 3 rows and 3 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 9.5000000e+01 0.000000e+00 0.000000e+00 0s\r## ## Solved in 0 iterations and 0.00 seconds\r## Optimal objective 9.500000000e+01\rk \u0026lt;- -1\rwhile(k \u0026lt; 0){\rKSP \u0026lt;- list()\rKSP$A \u0026lt;- matrix(c(81,70,68), nrow=1, byrow=T)\rKSP$obj \u0026lt;- result$pi\rKSP$modelsense \u0026lt;- \u0026#39;max\u0026#39;\rKSP$rhs \u0026lt;- c(218)\rKSP$sense \u0026lt;- c(\u0026#39;\u0026lt;\u0026#39;)\rKSP$vtype \u0026lt;- c(\u0026#39;I\u0026#39;,\u0026#39;I\u0026#39;,\u0026#39;I\u0026#39;)\rresult \u0026lt;- gurobi(KSP)\rk \u0026lt;- 1 - sum(result$x*KSP$obj)\rB \u0026lt;- as.matrix(result$x)\rLMP$A \u0026lt;- cbind(LMP$A,B)\rLMP$obj \u0026lt;- c(LMP$obj,1)\rresult \u0026lt;- gurobi(LMP)\rprint(paste(\u0026#39;LMP Objective Value\u0026#39;, result$objval))\rprint(paste(\u0026#39;Sum of Reduced Cost:\u0026#39;, k))\rprint(LMP$A)\rprint(t(as.matrix(result$x)))\r}\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 1 rows, 3 columns and 3 nonzeros\r## Model fingerprint: 0x72f1e20f\r## Variable types: 0 continuous, 3 integer (0 binary)\r## Coefficient statistics:\r## Matrix range [7e+01, 8e+01]\r## Objective range [1e+00, 1e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [2e+02, 2e+02]\r## Found heuristic solution: objective 2.0000000\r## Presolve removed 1 rows and 3 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## ## Explored 0 nodes (0 simplex iterations) in 0.00 seconds\r## Thread count was 1 (of 8 available processors)\r## ## Solution count 2: 3 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 3 rows, 4 columns and 4 nonzeros\r## Model fingerprint: 0x4bac7a68\r## Coefficient statistics:\r## Matrix range [1e+00, 3e+00]\r## Objective range [1e+00, 1e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [3e+00, 5e+01]\r## Presolve removed 3 rows and 4 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 6.3000000e+01 0.000000e+00 0.000000e+00 0s\r## ## Solved in 0 iterations and 0.00 seconds\r## Optimal objective 6.300000000e+01\r## [1] \u0026quot;LMP Objective Value 63\u0026quot;\r## [1] \u0026quot;Sum of Reduced Cost: -2\u0026quot;\r## [,1] [,2] [,3] [,4]\r## [1,] 1 0 0 0\r## [2,] 0 1 0 0\r## [3,] 0 0 1 3\r## [,1] [,2] [,3] [,4]\r## [1,] 44 3 0 16\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 1 rows, 3 columns and 3 nonzeros\r## Model fingerprint: 0x5e04c92d\r## Variable types: 0 continuous, 3 integer (0 binary)\r## Coefficient statistics:\r## Matrix range [7e+01, 8e+01]\r## Objective range [3e-01, 1e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [2e+02, 2e+02]\r## Found heuristic solution: objective 2.0000000\r## Presolve removed 1 rows and 3 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## ## Explored 0 nodes (0 simplex iterations) in 0.00 seconds\r## Thread count was 1 (of 8 available processors)\r## ## Solution count 2: 3 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 3 rows, 5 columns and 5 nonzeros\r## Model fingerprint: 0x46707112\r## Coefficient statistics:\r## Matrix range [1e+00, 3e+00]\r## Objective range [1e+00, 1e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [3e+00, 5e+01]\r## Presolve removed 3 rows and 5 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 6.1000000e+01 0.000000e+00 0.000000e+00 0s\r## ## Solved in 0 iterations and 0.00 seconds\r## Optimal objective 6.100000000e+01\r## [1] \u0026quot;LMP Objective Value 61\u0026quot;\r## [1] \u0026quot;Sum of Reduced Cost: -2\u0026quot;\r## [,1] [,2] [,3] [,4] [,5]\r## [1,] 1 0 0 0 0\r## [2,] 0 1 0 0 3\r## [3,] 0 0 1 3 0\r## [,1] [,2] [,3] [,4] [,5]\r## [1,] 44 0 0 16 1\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 1 rows, 3 columns and 3 nonzeros\r## Model fingerprint: 0x76f224a3\r## Variable types: 0 continuous, 3 integer (0 binary)\r## Coefficient statistics:\r## Matrix range [7e+01, 8e+01]\r## Objective range [3e-01, 1e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [2e+02, 2e+02]\r## Found heuristic solution: objective 2.0000000\r## Presolve removed 1 rows and 3 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## ## Explored 0 nodes (0 simplex iterations) in 0.00 seconds\r## Thread count was 1 (of 8 available processors)\r## ## Solution count 1: 2 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 3 rows, 6 columns and 6 nonzeros\r## Model fingerprint: 0x461ec1df\r## Coefficient statistics:\r## Matrix range [1e+00, 3e+00]\r## Objective range [1e+00, 1e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [3e+00, 5e+01]\r## Presolve removed 3 rows and 6 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 3.9000000e+01 0.000000e+00 0.000000e+00 0s\r## ## Solved in 0 iterations and 0.00 seconds\r## Optimal objective 3.900000000e+01\r## [1] \u0026quot;LMP Objective Value 39\u0026quot;\r## [1] \u0026quot;Sum of Reduced Cost: -1\u0026quot;\r## [,1] [,2] [,3] [,4] [,5] [,6]\r## [1,] 1 0 0 0 0 2\r## [2,] 0 1 0 0 3 0\r## [3,] 0 0 1 3 0 0\r## [,1] [,2] [,3] [,4] [,5] [,6]\r## [1,] 0 0 0 16 1 22\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 1 rows, 3 columns and 3 nonzeros\r## Model fingerprint: 0x282e1563\r## Variable types: 0 continuous, 3 integer (0 binary)\r## Coefficient statistics:\r## Matrix range [7e+01, 8e+01]\r## Objective range [3e-01, 5e-01]\r## Bounds range [0e+00, 0e+00]\r## RHS range [2e+02, 2e+02]\r## Found heuristic solution: objective 1.0000000\r## Presolve removed 1 rows and 3 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## ## Explored 0 nodes (0 simplex iterations) in 0.00 seconds\r## Thread count was 1 (of 8 available processors)\r## ## Solution count 2: 1.16667 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 1.166666666667e+00, best bound 1.166666666667e+00, gap 0.0000%\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 3 rows, 7 columns and 8 nonzeros\r## Model fingerprint: 0xaf053821\r## Coefficient statistics:\r## Matrix range [1e+00, 3e+00]\r## Objective range [1e+00, 1e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [3e+00, 5e+01]\r## Presolve removed 1 rows and 4 columns\r## Presolve time: 0.00s\r## Presolved: 2 rows, 3 columns, 4 nonzeros\r## ## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 1.0000000e+00 3.400000e+01 0.000000e+00 0s\r## 2 3.5000000e+01 0.000000e+00 0.000000e+00 0s\r## ## Solved in 2 iterations and 0.00 seconds\r## Optimal objective 3.500000000e+01\r## [1] \u0026quot;LMP Objective Value 35\u0026quot;\r## [1] \u0026quot;Sum of Reduced Cost: -0.166666666666667\u0026quot;\r## [,1] [,2] [,3] [,4] [,5] [,6] [,7]\r## [1,] 1 0 0 0 0 2 1\r## [2,] 0 1 0 0 3 0 0\r## [3,] 0 0 1 3 0 0 2\r## [,1] [,2] [,3] [,4] [,5] [,6] [,7]\r## [1,] 0 0 0 0 1 10 24\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 1 rows, 3 columns and 3 nonzeros\r## Model fingerprint: 0x4b9369e0\r## Variable types: 0 continuous, 3 integer (0 binary)\r## Coefficient statistics:\r## Matrix range [7e+01, 8e+01]\r## Objective range [3e-01, 5e-01]\r## Bounds range [0e+00, 0e+00]\r## RHS range [2e+02, 2e+02]\r## Found heuristic solution: objective 1.0000000\r## Presolve removed 1 rows and 3 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## ## Explored 0 nodes (0 simplex iterations) in 0.00 seconds\r## Thread count was 1 (of 8 available processors)\r## ## Solution count 1: 1 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 3 rows, 8 columns and 9 nonzeros\r## Model fingerprint: 0xebe33484\r## Coefficient statistics:\r## Matrix range [1e+00, 3e+00]\r## Objective range [1e+00, 1e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [3e+00, 5e+01]\r## Presolve removed 1 rows and 5 columns\r## Presolve time: 0.00s\r## Presolved: 2 rows, 3 columns, 4 nonzeros\r## ## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 1.0000000e+00 3.400000e+01 0.000000e+00 0s\r## 2 3.5000000e+01 0.000000e+00 0.000000e+00 0s\r## ## Solved in 2 iterations and 0.00 seconds\r## Optimal objective 3.500000000e+01\r## [1] \u0026quot;LMP Objective Value 35\u0026quot;\r## [1] \u0026quot;Sum of Reduced Cost: 0\u0026quot;\r## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\r## [1,] 1 0 0 0 0 2 1 2\r## [2,] 0 1 0 0 3 0 0 0\r## [3,] 0 0 1 3 0 0 2 0\r## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\r## [1,] 0 0 0 0 1 10 24 0\rLMP$vtype \u0026lt;- rep(\u0026#39;I\u0026#39;, ncol(LMP$A))\rresult \u0026lt;- gurobi(LMP)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 3 rows, 8 columns and 9 nonzeros\r## Model fingerprint: 0xe1a5582b\r## Variable types: 0 continuous, 8 integer (0 binary)\r## Coefficient statistics:\r## Matrix range [1e+00, 3e+00]\r## Objective range [1e+00, 1e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [3e+00, 5e+01]\r## Found heuristic solution: objective 35.0000000\r## Presolve removed 1 rows and 5 columns\r## Presolve time: 0.00s\r## Presolved: 2 rows, 3 columns, 4 nonzeros\r## Variable types: 0 continuous, 3 integer (0 binary)\r## ## Root relaxation: cutoff, 0 iterations, 0.00 seconds\r## ## Explored 0 nodes (0 simplex iterations) in 0.00 seconds\r## Thread count was 8 (of 8 available processors)\r## ## Solution count 1: 35 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 3.500000000000e+01, best bound 3.500000000000e+01, gap 0.0000%\rprint(paste(\u0026#39;Integer Objective Value\u0026#39;, result$objval))\r## [1] \u0026quot;Integer Objective Value 35\u0026quot;\rLMP$A\r## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\r## [1,] 1 0 0 0 0 2 1 2\r## [2,] 0 1 0 0 3 0 0 0\r## [3,] 0 0 1 3 0 0 2 0\rt(as.matrix(result$x))\r## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\r## [1,] 0 0 0 0 1 0 24 10\rrm(B,k,KSP,LMP,result)\rAdd a new chunk by clicking the Insert Chunk button on the toolbar or by pressing Ctrl+Alt+I.\nWhen you save the notebook, an HTML file containing the code and output will be saved alongside it (click the Preview button or press Ctrl+Shift+K to preview the HTML file).\nThe preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike Knit, Preview does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.\n","date":1578614400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578614400,"objectID":"3e1ba4d1e7644b419ab0521aa5167da0","permalink":"/post/orie/decompo_algs/","publishdate":"2020-01-10T00:00:00Z","relpermalink":"/post/orie/decompo_algs/","section":"post","summary":"This post explores how to use various decomposition techniques to solve LPs and MIPs.\rI have written these using Gurobi as a solver and as the mathematical formulation software.","tags":["R Markdown","Benders","Column Generation","Decomposition","LP","MIP","Algorithms"],"title":"Decompositions Algorithms Broken Down and Explained","type":"post"},{"authors":null,"categories":["ORIE Techniques"],"content":"\r\rThis post explores how to use Benders Decomposition to solve LPs and MIPs.\rI have written these using Gurobi as a solver and as the mathematical formulation software.\rThis is a reproducible example if you have R Studio just make sure you have installed the correct packages.\nlibrary(gurobi)\r## Warning: package \u0026#39;gurobi\u0026#39; was built under R version 4.0.2\rlibrary(lpSolveAPI)\rlibrary(tictoc)\rlibrary(Matrix)\rlibrary(ggplot2)\r## Warning: package \u0026#39;ggplot2\u0026#39; was built under R version 4.0.2\r#library(matlib)\r#library(MASS)\r#min 2x1 + 3x2 + 2y1\r#s.t. x1+2x2+y1 \u0026gt;= 3; 2x1 - x2 + 3y1 \u0026gt;= 4\r#x \u0026gt;=0, y\u0026gt;= 0, y is int\r#RMP\r#min z\r# z \u0026gt;= 2y1 + (3 - 1y1)*u1 + (4-3y1)*u2 u == 0 initial guess\ru \u0026lt;- c(0,0)\rRMP \u0026lt;- list()\rRMP$A \u0026lt;- matrix(c(1,(u[1]+3*u[2])), nrow=1, byrow=T)\rRMP$obj \u0026lt;- c(1,2)\rRMP$modelsense \u0026lt;- \u0026#39;min\u0026#39;\rRMP$rhs \u0026lt;- c((3*u[1]+4*u[2]))\rRMP$sense \u0026lt;- c(\u0026#39;\u0026gt;\u0026#39;)\rRMP$vtype \u0026lt;- c(\u0026#39;I\u0026#39;,\u0026#39;I\u0026#39;)\rresult \u0026lt;- gurobi(RMP)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 1 rows, 2 columns and 1 nonzeros\r## Model fingerprint: 0x4deba5e6\r## Variable types: 0 continuous, 2 integer (0 binary)\r## Coefficient statistics:\r## Matrix range [1e+00, 1e+00]\r## Objective range [1e+00, 2e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [0e+00, 0e+00]\r## Found heuristic solution: objective 0.0000000\r## ## Explored 0 nodes (0 simplex iterations) in 0.00 seconds\r## Thread count was 1 (of 8 available processors)\r## ## Solution count 1: 0 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%\rLB \u0026lt;- result$objval\rprint(paste(\u0026#39;RMP Objective Value and New Lower bound:\u0026#39;, result$objval))\r## [1] \u0026quot;RMP Objective Value and New Lower bound: 0\u0026quot;\rprint(paste(\u0026#39;Value of z:\u0026#39;, result$x[1]))\r## [1] \u0026quot;Value of z: 0\u0026quot;\ry_hat \u0026lt;- result$x[-1]\rprint(paste(\u0026#39;Value of y:\u0026#39;, y_hat))\r## [1] \u0026quot;Value of y: 0\u0026quot;\rUB \u0026lt;- 9999999\r#Primal Subproblem\r#min 2y1_^ + min 2x1+3x2\r#s.t. x1+2x2 \u0026gt;= 3 - y1_^; 2x1 - x2 \u0026gt;= 4 - 3y1_^\r#Keeps adding Benders Cuts to Problem\r#while(LB != UB){\r#Dual Subproblem\r#max (3-y1_^)u1 + (4-3y1_^)u2\r#s.t. u1+2u2 \u0026lt;= 2; 2u1-u2 \u0026lt;= 3\rDSB \u0026lt;- list()\rDSB$A \u0026lt;- matrix(c(1,2,2,-1), nrow=2, byrow=T)\rDSB$obj \u0026lt;- c((3-y_hat),(4-3*y_hat))\rDSB$modelsense \u0026lt;- \u0026#39;max\u0026#39;\rDSB$rhs \u0026lt;- c(2,3)\rDSB$sense \u0026lt;- c(\u0026#39;\u0026lt;\u0026#39;, \u0026#39;\u0026lt;\u0026#39;)\rresult \u0026lt;- gurobi(DSB)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 2 rows, 2 columns and 4 nonzeros\r## Model fingerprint: 0x43e8db6d\r## Coefficient statistics:\r## Matrix range [1e+00, 2e+00]\r## Objective range [3e+00, 4e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [2e+00, 3e+00]\r## Presolve removed 2 rows and 2 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 5.6000000e+00 0.000000e+00 0.000000e+00 0s\r## ## Solved in 0 iterations and 0.01 seconds\r## Optimal objective 5.600000000e+00\rUB \u0026lt;- result$objval + 2 * sum(y_hat)\rprint(paste(\u0026#39;DSB Objective Value and New Upper bound:\u0026#39;, UB))\r## [1] \u0026quot;DSB Objective Value and New Upper bound: 5.6\u0026quot;\ru \u0026lt;- result$x\rprint(paste(\u0026#39;Value of u:\u0026#39;, u))\r## [1] \u0026quot;Value of u: 1.6\u0026quot; \u0026quot;Value of u: 0.2\u0026quot;\r#add new constraint\r#z \u0026gt;= u[1]*(3-y1) + u[2]*(4-3y1)\r#z + (u[1]*y1) + u[2]*3y1 \u0026gt;= u[1]*3+u[2]*4\rB \u0026lt;- matrix(c(1,(u[1]+3*u[2])), nrow =1)\rb \u0026lt;- u[1]*3+u[2]*4\rRMP$A \u0026lt;- rbind(RMP$A, B)\rRMP$rhs \u0026lt;- c(RMP$rhs,b)\rRMP$sense \u0026lt;- c(RMP$sense, \u0026#39;\u0026gt;\u0026#39;)\rresult \u0026lt;- gurobi(RMP)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 2 rows, 2 columns and 3 nonzeros\r## Model fingerprint: 0x515bf67f\r## Variable types: 0 continuous, 2 integer (0 binary)\r## Coefficient statistics:\r## Matrix range [1e+00, 2e+00]\r## Objective range [1e+00, 2e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [6e+00, 6e+00]\r## Found heuristic solution: objective 6.0000000\r## Presolve removed 2 rows and 2 columns\r## Presolve time: 0.01s\r## Presolve: All rows and columns removed\r## ## Explored 0 nodes (0 simplex iterations) in 0.01 seconds\r## Thread count was 1 (of 8 available processors)\r## ## Solution count 1: 6 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 6.000000000000e+00, best bound 6.000000000000e+00, gap 0.0000%\rLB \u0026lt;- result$objval\rprint(paste(\u0026#39;RMP Objective Value and New Lower bound:\u0026#39;, result$objval))\r## [1] \u0026quot;RMP Objective Value and New Lower bound: 6\u0026quot;\rprint(paste(\u0026#39;Value of z:\u0026#39;, result$x[1]))\r## [1] \u0026quot;Value of z: 6\u0026quot;\ry_hat \u0026lt;- result$x[-1]\rprint(paste(\u0026#39;Value of y:\u0026#39;, y_hat))\r## [1] \u0026quot;Value of y: 0\u0026quot;\r#}\rrm(result, LB, UB, y_hat, B, RMP, DSB)\r#Using homogenous equations to generate extreme points for (optimality) and extreme rays for (feasiblity)\r#max 2x1 + x2 + 13x3 + 7y1 + 5y2\r#s.t. 9x1+4x2+14x3+35y1+24y2 \u0026lt;= 80; -x1-2x2+3x3-3y1+4y2 \u0026lt;= 10\r#x \u0026gt;=0, y\u0026gt;= 0, x is int\r#RMP\r#max z + 2x1 + x2 + 13x3\r# z \u0026gt;= + (80-9x1-4x2-14x3)*u1 + (10+x1+2x2-3x3)*u2 u == 0 initial guess\ru \u0026lt;- c(0,0)\rRMP \u0026lt;- list()\rRMP$A \u0026lt;- matrix(c(1,(u[1]*9-u[2]),(u[1]*4-2*u[2]),(14*u[1]+3*u[2])), nrow=1, byrow=T)\rRMP$obj \u0026lt;- c(1,2,1,13)\rRMP$modelsense \u0026lt;- \u0026#39;max\u0026#39;\rRMP$rhs \u0026lt;- c((80*u[1]+10*u[2]))\rRMP$sense \u0026lt;- c(\u0026#39;\u0026lt;\u0026#39;)\rRMP$vtype \u0026lt;- c(\u0026#39;C\u0026#39;,\u0026#39;I\u0026#39;,\u0026#39;I\u0026#39;,\u0026#39;I\u0026#39;)\rresult \u0026lt;- gurobi(RMP)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 1 rows, 4 columns and 1 nonzeros\r## Model fingerprint: 0x2e4b9afd\r## Variable types: 1 continuous, 3 integer (0 binary)\r## Coefficient statistics:\r## Matrix range [1e+00, 1e+00]\r## Objective range [1e+00, 1e+01]\r## Bounds range [0e+00, 0e+00]\r## RHS range [0e+00, 0e+00]\r## Found heuristic solution: objective 1.600000e+31\r## Presolve time: 0.00s\r## ## Explored 0 nodes (0 simplex iterations) in 0.00 seconds\r## Thread count was 1 (of 8 available processors)\r## ## Solution count 1: 1.6e+31 ## No other solutions better than 0\r## ## Model is unbounded\r## Warning: some integer variables take values larger than the maximum\r## supported value (2000000000)\r## Best objective 1.600000000000e+31, best bound -, gap -\rUB \u0026lt;- result$objval\rprint(paste(\u0026#39;RMP Objective Value and New Upper bound:\u0026#39;, result$objval))\r## [1] \u0026quot;RMP Objective Value and New Upper bound: 1.6e+31\u0026quot;\rprint(paste(\u0026#39;Value of z:\u0026#39;, result$x[1]))\r## [1] \u0026quot;Value of z: 0\u0026quot;\rx \u0026lt;- result$x[-1]\rprint(paste(\u0026#39;Value of x:\u0026#39;, x))\r## [1] \u0026quot;Value of x: 1e+30\u0026quot; \u0026quot;Value of x: 1e+30\u0026quot; \u0026quot;Value of x: 1e+30\u0026quot;\rif(result$status == \u0026quot;INF_OR_UNBD\u0026quot; | result$status == \u0026quot;UNBOUNDED\u0026quot;){\rUB \u0026lt;- 999999\rx \u0026lt;- c(0,0,0)\r}\rrm(result)\r#Primal Subproblem\r# 2x1 + x2 + 13x3 + max 7y1 + 5y2\r#s.t. 35y1+24y2 \u0026lt;= 80-(9x1+4x2+14x3); -3y1+4y2 \u0026lt;= 10-(-x1-2x2+3x3)\rLB \u0026lt;- -999999\rLB_list \u0026lt;- LB\rUB_list \u0026lt;- UB\rx_list \u0026lt;- x\ru_list \u0026lt;- u\r#Keeps adding Benders Cuts to Problem\rwhile(LB != UB){\r#Dual Subproblem\r#min (80-(9x1+4x2+14x3))u1 + (10-(-x1-2x2+3x3))u2\r#s.t. 35u1 -3u2 \u0026gt;= 7; 24u1+4u2 \u0026gt;= 5\rDSB \u0026lt;- list()\rDSB$A \u0026lt;- matrix(c(35,-3,24,4), nrow=2, byrow=T)\rDSB$obj \u0026lt;- c((80-9*x[1]-4*x[2]-14*x[3]),(10+x[1]+2*x[2]-3*x[3]))\rDSB$modelsense \u0026lt;- \u0026#39;min\u0026#39;\rDSB$rhs \u0026lt;- c(7,5)\rDSB$sense \u0026lt;- c(\u0026#39;\u0026gt;\u0026#39;, \u0026#39;\u0026gt;\u0026#39;)\rresult \u0026lt;- gurobi(DSB)\rLB \u0026lt;- result$objval + 2 * x[1] + x[2] + 13*x[3]\rprint(paste(\u0026#39;DSB Objective Value and New Lower bound:\u0026#39;, LB))\ru \u0026lt;- result$x\rprint(paste(\u0026#39;Value of u:\u0026#39;, u))\r#add new constraint\r#z \u0026gt;= u[1]*(3-y1) + u[2]*(4-3y1)\r#z + (u[1]*y1) + u[2]*3y1 \u0026gt;= u[1]*3+u[2]*4\rB \u0026lt;- matrix(c(1,(u[1]*9-u[2]),(u[1]*4-2*u[2]),(14*u[1]+3*u[2])), nrow=1, byrow=T)\rb \u0026lt;- u[1]*80+u[2]*10\rif(result$status == \u0026quot;INF_OR_UNBD\u0026quot; | result$status == \u0026#39;UNBOUNDED\u0026#39;){\rDSB$A \u0026lt;- rbind(DSB$A,c(1,1))\rDSB$rhs \u0026lt;- c(0,0,1)\rDSB$sense \u0026lt;- c(DSB$sense, \u0026#39;=\u0026#39;)\rresult \u0026lt;- gurobi(DSB)\ru \u0026lt;- result$x\rLB \u0026lt;- LB_list[length(LB_list)]\rB \u0026lt;- matrix(c(0,(u[1]*9-u[2]),(u[1]*4-2*u[2]),(14*u[1]+3*u[2])), nrow=1, byrow=T)\rb \u0026lt;- u[1]*80+u[2]*10\r}\ru_list \u0026lt;- rbind(u_list,u)\rLB_list \u0026lt;- c(LB_list, LB)\rrm(result)\rRMP$A \u0026lt;- rbind(RMP$A, B)\rRMP$rhs \u0026lt;- c(RMP$rhs,b)\rRMP$sense \u0026lt;- c(RMP$sense, \u0026#39;\u0026lt;\u0026#39;)\rresult \u0026lt;- gurobi(RMP)\rUB \u0026lt;- result$objval\rprint(paste(\u0026#39;RMP Objective Value and New Upper bound:\u0026#39;, result$objval))\rprint(paste(\u0026#39;Value of z:\u0026#39;, result$x[1]))\rx \u0026lt;- result$x[-1]\rprint(paste(\u0026#39;Value of x:\u0026#39;, x))\rif(result$status == \u0026quot;INF_OR_UNBD\u0026quot;){\rUB \u0026lt;- 999999\rx \u0026lt;- c(0,0,0)\r}\rUB_list \u0026lt;- c(UB_list, UB)\rx_list \u0026lt;- rbind(x_list,x)\rrm(result)\r}\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 2 rows, 2 columns and 4 nonzeros\r## Model fingerprint: 0xfecd2aa1\r## Coefficient statistics:\r## Matrix range [3e+00, 4e+01]\r## Objective range [1e+01, 8e+01]\r## Bounds range [0e+00, 0e+00]\r## RHS range [5e+00, 7e+00]\r## Presolve time: 0.00s\r## Presolved: 2 rows, 2 columns, 4 nonzeros\r## ## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 0.0000000e+00 1.500000e+00 0.000000e+00 0s\r## 2 1.6556604e+01 0.000000e+00 0.000000e+00 0s\r## ## Solved in 2 iterations and 0.00 seconds\r## Optimal objective 1.655660377e+01\r## [1] \u0026quot;DSB Objective Value and New Lower bound: 16.5566037735849\u0026quot;\r## [1] \u0026quot;Value of u: 0.202830188679245\u0026quot; \u0026quot;Value of u: 0.0330188679245282\u0026quot;\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 2 rows, 4 columns and 5 nonzeros\r## Model fingerprint: 0xc19f21b7\r## Variable types: 1 continuous, 3 integer (0 binary)\r## Coefficient statistics:\r## Matrix range [7e-01, 3e+00]\r## Objective range [1e+00, 1e+01]\r## Bounds range [0e+00, 0e+00]\r## RHS range [2e+01, 2e+01]\r## Found heuristic solution: objective 18.0000000\r## Presolve removed 1 rows and 1 columns\r## Presolve time: 0.00s\r## Presolved: 1 rows, 3 columns, 3 nonzeros\r## Variable types: 0 continuous, 3 integer (0 binary)\r## ## Root relaxation: objective 6.750000e+01, 1 iterations, 0.00 seconds\r## ## Nodes | Current Node | Objective Bounds | Work\r## Expl Unexpl | Obj Depth IntInf | Incumbent BestBd Gap | It/Node Time\r## ## 0 0 67.50000 0 1 18.00000 67.50000 275% - 0s\r## H 0 0 67.0000000 67.50000 0.75% - 0s\r## 0 0 67.50000 0 1 67.00000 67.50000 0.75% - 0s\r## ## Explored 1 nodes (1 simplex iterations) in 0.01 seconds\r## Thread count was 8 (of 8 available processors)\r## ## Solution count 2: 67 18 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 6.700000000000e+01, best bound 6.700000000000e+01, gap 0.0000%\r## [1] \u0026quot;RMP Objective Value and New Upper bound: 67\u0026quot;\r## [1] \u0026quot;Value of z: 0\u0026quot;\r## [1] \u0026quot;Value of x: 0\u0026quot; \u0026quot;Value of x: 2\u0026quot; \u0026quot;Value of x: 5\u0026quot;\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 2 rows, 2 columns and 4 nonzeros\r## Model fingerprint: 0xe467fd43\r## Coefficient statistics:\r## Matrix range [3e+00, 4e+01]\r## Objective range [1e+00, 2e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [5e+00, 7e+00]\r## Presolve removed 2 rows and 2 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 -8.2857143e+29 0.000000e+00 1.657143e+00 0s\r## Extra 2 simplex iterations after uncrush\r## ## Solved in 2 iterations and 0.00 seconds\r## Unbounded model\r## [1] \u0026quot;DSB Objective Value and New Lower bound: \u0026quot;\r## [1] \u0026quot;Value of u: \u0026quot;\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 3 rows, 2 columns and 6 nonzeros\r## Model fingerprint: 0x9e81c4c8\r## Coefficient statistics:\r## Matrix range [1e+00, 4e+01]\r## Objective range [1e+00, 2e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [1e+00, 1e+00]\r## Presolve removed 3 rows and 2 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 -7.6315789e-01 0.000000e+00 0.000000e+00 0s\r## ## Solved in 0 iterations and 0.00 seconds\r## Optimal objective -7.631578947e-01\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 3 rows, 4 columns and 8 nonzeros\r## Model fingerprint: 0x49b3021e\r## Variable types: 1 continuous, 3 integer (0 binary)\r## Coefficient statistics:\r## Matrix range [2e-01, 4e+00]\r## Objective range [1e+00, 1e+01]\r## Bounds range [0e+00, 0e+00]\r## RHS range [2e+01, 2e+01]\r## Found heuristic solution: objective 18.0000000\r## Presolve removed 1 rows and 1 columns\r## Presolve time: 0.00s\r## Presolved: 2 rows, 3 columns, 6 nonzeros\r## Variable types: 0 continuous, 3 integer (0 binary)\r## ## Root relaxation: objective 6.750000e+01, 1 iterations, 0.00 seconds\r## ## Nodes | Current Node | Objective Bounds | Work\r## Expl Unexpl | Obj Depth IntInf | Incumbent BestBd Gap | It/Node Time\r## ## 0 0 67.50000 0 1 18.00000 67.50000 275% - 0s\r## H 0 0 58.0000000 67.50000 16.4% - 0s\r## ## Cutting planes:\r## Gomory: 1\r## MIR: 1\r## ## Explored 1 nodes (1 simplex iterations) in 0.00 seconds\r## Thread count was 8 (of 8 available processors)\r## ## Solution count 2: 58 18 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 5.800000000000e+01, best bound 5.800000000000e+01, gap 0.0000%\r## [1] \u0026quot;RMP Objective Value and New Upper bound: 58\u0026quot;\r## [1] \u0026quot;Value of z: 0\u0026quot;\r## [1] \u0026quot;Value of x: 1\u0026quot; \u0026quot;Value of x: 4\u0026quot; \u0026quot;Value of x: 4\u0026quot;\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 2 rows, 2 columns and 4 nonzeros\r## Model fingerprint: 0xb674b004\r## Coefficient statistics:\r## Matrix range [3e+00, 4e+01]\r## Objective range [1e+00, 7e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [5e+00, 7e+00]\r## Presolve time: 0.00s\r## ## Solved in 0 iterations and 0.00 seconds\r## Infeasible or unbounded model\r## [1] \u0026quot;DSB Objective Value and New Lower bound: \u0026quot;\r## [1] \u0026quot;Value of u: \u0026quot;\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 3 rows, 2 columns and 6 nonzeros\r## Model fingerprint: 0x56bfae6b\r## Coefficient statistics:\r## Matrix range [1e+00, 4e+01]\r## Objective range [1e+00, 7e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [1e+00, 1e+00]\r## Presolve removed 3 rows and 2 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 -1.0000000e+00 0.000000e+00 0.000000e+00 0s\r## ## Solved in 0 iterations and 0.00 seconds\r## Optimal objective -1.000000000e+00\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 4 rows, 4 columns and 11 nonzeros\r## Model fingerprint: 0x671586c2\r## Variable types: 1 continuous, 3 integer (0 binary)\r## Coefficient statistics:\r## Matrix range [2e-01, 1e+01]\r## Objective range [1e+00, 1e+01]\r## Bounds range [0e+00, 0e+00]\r## RHS range [2e+01, 8e+01]\r## Found heuristic solution: objective 18.0000000\r## Presolve removed 1 rows and 1 columns\r## Presolve time: 0.00s\r## Presolved: 3 rows, 3 columns, 9 nonzeros\r## Variable types: 0 continuous, 3 integer (0 binary)\r## ## Root relaxation: objective 6.750000e+01, 1 iterations, 0.00 seconds\r## ## Nodes | Current Node | Objective Bounds | Work\r## Expl Unexpl | Obj Depth IntInf | Incumbent BestBd Gap | It/Node Time\r## ## 0 0 67.50000 0 1 18.00000 67.50000 275% - 0s\r## H 0 0 57.0000000 67.50000 18.4% - 0s\r## H 0 0 58.0000000 67.50000 16.4% - 0s\r## ## Cutting planes:\r## Gomory: 1\r## MIR: 1\r## ## Explored 1 nodes (1 simplex iterations) in 0.00 seconds\r## Thread count was 8 (of 8 available processors)\r## ## Solution count 3: 58 57 18 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 5.800000000000e+01, best bound 5.800000000000e+01, gap 0.0000%\r## [1] \u0026quot;RMP Objective Value and New Upper bound: 58\u0026quot;\r## [1] \u0026quot;Value of z: 0\u0026quot;\r## [1] \u0026quot;Value of x: 0\u0026quot; \u0026quot;Value of x: 6\u0026quot; \u0026quot;Value of x: 4\u0026quot;\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 2 rows, 2 columns and 4 nonzeros\r## Model fingerprint: 0x5530e933\r## Coefficient statistics:\r## Matrix range [3e+00, 4e+01]\r## Objective range [1e+01, 1e+01]\r## Bounds range [0e+00, 0e+00]\r## RHS range [5e+00, 7e+00]\r## Presolve removed 2 rows and 2 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 0.0000000e+00 0.000000e+00 0.000000e+00 0s\r## ## Solved in 0 iterations and 0.00 seconds\r## Optimal objective 0.000000000e+00\r## [1] \u0026quot;DSB Objective Value and New Lower bound: 58\u0026quot;\r## [1] \u0026quot;Value of u: 0.208333333333333\u0026quot; \u0026quot;Value of u: 0\u0026quot; ## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 5 rows, 4 columns and 15 nonzeros\r## Model fingerprint: 0xd390add2\r## Variable types: 1 continuous, 3 integer (0 binary)\r## Coefficient statistics:\r## Matrix range [2e-01, 1e+01]\r## Objective range [1e+00, 1e+01]\r## Bounds range [0e+00, 0e+00]\r## RHS range [2e+01, 8e+01]\r## Found heuristic solution: objective 18.0000000\r## Presolve removed 2 rows and 1 columns\r## Presolve time: 0.00s\r## Presolved: 3 rows, 3 columns, 9 nonzeros\r## Variable types: 0 continuous, 3 integer (0 binary)\r## ## Root relaxation: objective 6.750000e+01, 1 iterations, 0.00 seconds\r## ## Nodes | Current Node | Objective Bounds | Work\r## Expl Unexpl | Obj Depth IntInf | Incumbent BestBd Gap | It/Node Time\r## ## 0 0 67.50000 0 1 18.00000 67.50000 275% - 0s\r## H 0 0 57.0000000 67.50000 18.4% - 0s\r## H 0 0 58.0000000 67.50000 16.4% - 0s\r## ## Cutting planes:\r## Gomory: 1\r## MIR: 1\r## ## Explored 1 nodes (1 simplex iterations) in 0.00 seconds\r## Thread count was 8 (of 8 available processors)\r## ## Solution count 3: 58 57 18 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 5.800000000000e+01, best bound 5.800000000000e+01, gap 0.0000%\r## [1] \u0026quot;RMP Objective Value and New Upper bound: 58\u0026quot;\r## [1] \u0026quot;Value of z: 0\u0026quot;\r## [1] \u0026quot;Value of x: 0\u0026quot; \u0026quot;Value of x: 6\u0026quot; \u0026quot;Value of x: 4\u0026quot;\r#Column Generation Algorithm\r#Cutting Stock Problem\r#minimize number of rods used (x). Satisfy demand for 44 81 cm pieces, 3 70 cm pieces, and 48 68 cm pieces\r#min x1 + x2 + x3\r#s.t. x1 \u0026gt;= 44; x2 \u0026gt;=3; x3 \u0026gt;= 48\r#x \u0026gt;=0,\rLMP \u0026lt;- list()\rLMP$A \u0026lt;- matrix(c(1,0,0,\r0,1,0,\r0,0,1), nrow=3, byrow=T)\rLMP$obj \u0026lt;- c(1,1,1)\rLMP$modelsense \u0026lt;- \u0026#39;min\u0026#39;\rLMP$rhs \u0026lt;- c(44,3,48)\rLMP$sense \u0026lt;- c(\u0026#39;\u0026gt;\u0026#39;)\rresult \u0026lt;- gurobi(LMP)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 3 rows, 3 columns and 3 nonzeros\r## Model fingerprint: 0xcd2bfab3\r## Coefficient statistics:\r## Matrix range [1e+00, 1e+00]\r## Objective range [1e+00, 1e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [3e+00, 5e+01]\r## Presolve removed 3 rows and 3 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 9.5000000e+01 0.000000e+00 0.000000e+00 0s\r## ## Solved in 0 iterations and 0.00 seconds\r## Optimal objective 9.500000000e+01\rk \u0026lt;- -1\rwhile(k \u0026lt; 0){\rKSP \u0026lt;- list()\rKSP$A \u0026lt;- matrix(c(81,70,68), nrow=1, byrow=T)\rKSP$obj \u0026lt;- result$pi\rKSP$modelsense \u0026lt;- \u0026#39;max\u0026#39;\rKSP$rhs \u0026lt;- c(218)\rKSP$sense \u0026lt;- c(\u0026#39;\u0026lt;\u0026#39;)\rKSP$vtype \u0026lt;- c(\u0026#39;I\u0026#39;,\u0026#39;I\u0026#39;,\u0026#39;I\u0026#39;)\rresult \u0026lt;- gurobi(KSP)\rk \u0026lt;- 1 - sum(result$x*KSP$obj)\rB \u0026lt;- as.matrix(result$x)\rLMP$A \u0026lt;- cbind(LMP$A,B)\rLMP$obj \u0026lt;- c(LMP$obj,1)\rresult \u0026lt;- gurobi(LMP)\rprint(paste(\u0026#39;LMP Objective Value\u0026#39;, result$objval))\rprint(paste(\u0026#39;Sum of Reduced Cost:\u0026#39;, k))\rprint(LMP$A)\rprint(t(as.matrix(result$x)))\r}\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 1 rows, 3 columns and 3 nonzeros\r## Model fingerprint: 0x72f1e20f\r## Variable types: 0 continuous, 3 integer (0 binary)\r## Coefficient statistics:\r## Matrix range [7e+01, 8e+01]\r## Objective range [1e+00, 1e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [2e+02, 2e+02]\r## Found heuristic solution: objective 2.0000000\r## Presolve removed 1 rows and 3 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## ## Explored 0 nodes (0 simplex iterations) in 0.00 seconds\r## Thread count was 1 (of 8 available processors)\r## ## Solution count 2: 3 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 3 rows, 4 columns and 4 nonzeros\r## Model fingerprint: 0x4bac7a68\r## Coefficient statistics:\r## Matrix range [1e+00, 3e+00]\r## Objective range [1e+00, 1e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [3e+00, 5e+01]\r## Presolve removed 3 rows and 4 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 6.3000000e+01 0.000000e+00 0.000000e+00 0s\r## ## Solved in 0 iterations and 0.00 seconds\r## Optimal objective 6.300000000e+01\r## [1] \u0026quot;LMP Objective Value 63\u0026quot;\r## [1] \u0026quot;Sum of Reduced Cost: -2\u0026quot;\r## [,1] [,2] [,3] [,4]\r## [1,] 1 0 0 0\r## [2,] 0 1 0 0\r## [3,] 0 0 1 3\r## [,1] [,2] [,3] [,4]\r## [1,] 44 3 0 16\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 1 rows, 3 columns and 3 nonzeros\r## Model fingerprint: 0x5e04c92d\r## Variable types: 0 continuous, 3 integer (0 binary)\r## Coefficient statistics:\r## Matrix range [7e+01, 8e+01]\r## Objective range [3e-01, 1e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [2e+02, 2e+02]\r## Found heuristic solution: objective 2.0000000\r## Presolve removed 1 rows and 3 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## ## Explored 0 nodes (0 simplex iterations) in 0.00 seconds\r## Thread count was 1 (of 8 available processors)\r## ## Solution count 2: 3 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 3 rows, 5 columns and 5 nonzeros\r## Model fingerprint: 0x46707112\r## Coefficient statistics:\r## Matrix range [1e+00, 3e+00]\r## Objective range [1e+00, 1e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [3e+00, 5e+01]\r## Presolve removed 3 rows and 5 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 6.1000000e+01 0.000000e+00 0.000000e+00 0s\r## ## Solved in 0 iterations and 0.00 seconds\r## Optimal objective 6.100000000e+01\r## [1] \u0026quot;LMP Objective Value 61\u0026quot;\r## [1] \u0026quot;Sum of Reduced Cost: -2\u0026quot;\r## [,1] [,2] [,3] [,4] [,5]\r## [1,] 1 0 0 0 0\r## [2,] 0 1 0 0 3\r## [3,] 0 0 1 3 0\r## [,1] [,2] [,3] [,4] [,5]\r## [1,] 44 0 0 16 1\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 1 rows, 3 columns and 3 nonzeros\r## Model fingerprint: 0x76f224a3\r## Variable types: 0 continuous, 3 integer (0 binary)\r## Coefficient statistics:\r## Matrix range [7e+01, 8e+01]\r## Objective range [3e-01, 1e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [2e+02, 2e+02]\r## Found heuristic solution: objective 2.0000000\r## Presolve removed 1 rows and 3 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## ## Explored 0 nodes (0 simplex iterations) in 0.00 seconds\r## Thread count was 1 (of 8 available processors)\r## ## Solution count 1: 2 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 3 rows, 6 columns and 6 nonzeros\r## Model fingerprint: 0x461ec1df\r## Coefficient statistics:\r## Matrix range [1e+00, 3e+00]\r## Objective range [1e+00, 1e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [3e+00, 5e+01]\r## Presolve removed 3 rows and 6 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 3.9000000e+01 0.000000e+00 0.000000e+00 0s\r## ## Solved in 0 iterations and 0.00 seconds\r## Optimal objective 3.900000000e+01\r## [1] \u0026quot;LMP Objective Value 39\u0026quot;\r## [1] \u0026quot;Sum of Reduced Cost: -1\u0026quot;\r## [,1] [,2] [,3] [,4] [,5] [,6]\r## [1,] 1 0 0 0 0 2\r## [2,] 0 1 0 0 3 0\r## [3,] 0 0 1 3 0 0\r## [,1] [,2] [,3] [,4] [,5] [,6]\r## [1,] 0 0 0 16 1 22\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 1 rows, 3 columns and 3 nonzeros\r## Model fingerprint: 0x282e1563\r## Variable types: 0 continuous, 3 integer (0 binary)\r## Coefficient statistics:\r## Matrix range [7e+01, 8e+01]\r## Objective range [3e-01, 5e-01]\r## Bounds range [0e+00, 0e+00]\r## RHS range [2e+02, 2e+02]\r## Found heuristic solution: objective 1.0000000\r## Presolve removed 1 rows and 3 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## ## Explored 0 nodes (0 simplex iterations) in 0.00 seconds\r## Thread count was 1 (of 8 available processors)\r## ## Solution count 2: 1.16667 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 1.166666666667e+00, best bound 1.166666666667e+00, gap 0.0000%\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 3 rows, 7 columns and 8 nonzeros\r## Model fingerprint: 0xaf053821\r## Coefficient statistics:\r## Matrix range [1e+00, 3e+00]\r## Objective range [1e+00, 1e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [3e+00, 5e+01]\r## Presolve removed 1 rows and 4 columns\r## Presolve time: 0.00s\r## Presolved: 2 rows, 3 columns, 4 nonzeros\r## ## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 1.0000000e+00 3.400000e+01 0.000000e+00 0s\r## 2 3.5000000e+01 0.000000e+00 0.000000e+00 0s\r## ## Solved in 2 iterations and 0.00 seconds\r## Optimal objective 3.500000000e+01\r## [1] \u0026quot;LMP Objective Value 35\u0026quot;\r## [1] \u0026quot;Sum of Reduced Cost: -0.166666666666667\u0026quot;\r## [,1] [,2] [,3] [,4] [,5] [,6] [,7]\r## [1,] 1 0 0 0 0 2 1\r## [2,] 0 1 0 0 3 0 0\r## [3,] 0 0 1 3 0 0 2\r## [,1] [,2] [,3] [,4] [,5] [,6] [,7]\r## [1,] 0 0 0 0 1 10 24\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 1 rows, 3 columns and 3 nonzeros\r## Model fingerprint: 0x4b9369e0\r## Variable types: 0 continuous, 3 integer (0 binary)\r## Coefficient statistics:\r## Matrix range [7e+01, 8e+01]\r## Objective range [3e-01, 5e-01]\r## Bounds range [0e+00, 0e+00]\r## RHS range [2e+02, 2e+02]\r## Found heuristic solution: objective 1.0000000\r## Presolve removed 1 rows and 3 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## ## Explored 0 nodes (0 simplex iterations) in 0.00 seconds\r## Thread count was 1 (of 8 available processors)\r## ## Solution count 1: 1 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 3 rows, 8 columns and 9 nonzeros\r## Model fingerprint: 0xebe33484\r## Coefficient statistics:\r## Matrix range [1e+00, 3e+00]\r## Objective range [1e+00, 1e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [3e+00, 5e+01]\r## Presolve removed 1 rows and 5 columns\r## Presolve time: 0.00s\r## Presolved: 2 rows, 3 columns, 4 nonzeros\r## ## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 1.0000000e+00 3.400000e+01 0.000000e+00 0s\r## 2 3.5000000e+01 0.000000e+00 0.000000e+00 0s\r## ## Solved in 2 iterations and 0.00 seconds\r## Optimal objective 3.500000000e+01\r## [1] \u0026quot;LMP Objective Value 35\u0026quot;\r## [1] \u0026quot;Sum of Reduced Cost: 0\u0026quot;\r## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\r## [1,] 1 0 0 0 0 2 1 2\r## [2,] 0 1 0 0 3 0 0 0\r## [3,] 0 0 1 3 0 0 2 0\r## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\r## [1,] 0 0 0 0 1 10 24 0\rLMP$vtype \u0026lt;- rep(\u0026#39;I\u0026#39;, ncol(LMP$A))\rresult \u0026lt;- gurobi(LMP)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 3 rows, 8 columns and 9 nonzeros\r## Model fingerprint: 0xe1a5582b\r## Variable types: 0 continuous, 8 integer (0 binary)\r## Coefficient statistics:\r## Matrix range [1e+00, 3e+00]\r## Objective range [1e+00, 1e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [3e+00, 5e+01]\r## Found heuristic solution: objective 35.0000000\r## Presolve removed 1 rows and 5 columns\r## Presolve time: 0.00s\r## Presolved: 2 rows, 3 columns, 4 nonzeros\r## Variable types: 0 continuous, 3 integer (0 binary)\r## ## Root relaxation: cutoff, 0 iterations, 0.00 seconds\r## ## Explored 0 nodes (0 simplex iterations) in 0.00 seconds\r## Thread count was 8 (of 8 available processors)\r## ## Solution count 1: 35 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 3.500000000000e+01, best bound 3.500000000000e+01, gap 0.0000%\rprint(paste(\u0026#39;Integer Objective Value\u0026#39;, result$objval))\r## [1] \u0026quot;Integer Objective Value 35\u0026quot;\rLMP$A\r## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\r## [1,] 1 0 0 0 0 2 1 2\r## [2,] 0 1 0 0 3 0 0 0\r## [3,] 0 0 1 3 0 0 2 0\rt(as.matrix(result$x))\r## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\r## [1,] 0 0 0 0 1 0 24 10\rAdd a new chunk by clicking the Insert Chunk button on the toolbar or by pressing Ctrl+Alt+I.\nWhen you save the notebook, an HTML file containing the code and output will be saved alongside it (click the Preview button or press Ctrl+Shift+K to preview the HTML file).\nThe preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike Knit, Preview does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.\n","date":1578528000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578528000,"objectID":"1f25bf22b850968492681cbba9614a34","permalink":"/post/orie/benders/","publishdate":"2020-01-09T00:00:00Z","relpermalink":"/post/orie/benders/","section":"post","summary":"This post explores how to use Benders Decomposition to solve LPs and MIPs.\rI have written these using Gurobi as a solver and as the mathematical formulation software.\rThis is a reproducible example if you have R Studio just make sure you have installed the correct packages.","tags":["R Markdown","Benders","Decomposition","Algorithms","LP","MIP"],"title":"Benders Decomposition Algorithm Explained","type":"post"},{"authors":null,"categories":["ORIE Techniques"],"content":"\r\rThis post explores how to solve QPs by hand and with Gurobi.\rI have written these using Gurobi as a solver and as the mathematical formulation software.\rThis is a reproducible example if you have R Studio just make sure you have installed the correct packages.\nlibrary(gurobi)\r## Warning: package \u0026#39;gurobi\u0026#39; was built under R version 4.0.2\rlibrary(tictoc)\rlibrary(Matrix)\rlibrary(ggplot2)\r## Warning: package \u0026#39;ggplot2\u0026#39; was built under R version 4.0.2\r#library(matlib)\rlibrary(MASS)\r## Warning: package \u0026#39;MASS\u0026#39; was built under R version 4.0.2\rGradient Descent a first order method \\(x_{i+1} = x_i + \\lambda*d/f(x)\\)\nx \u0026lt;- c(-10:10)\rfx1 \u0026lt;- x^2\rxi \u0026lt;- 10\rlambda \u0026lt;- 0.2\rxit \u0026lt;- xi\rfx \u0026lt;- xit^2\rdfx \u0026lt;- 2*xit\rgd \u0026lt;- data.frame(\u0026#39;x\u0026#39; = xit, \u0026#39;fx\u0026#39; = fx, \u0026#39;dfx\u0026#39; = dfx)\rwhile(dfx \u0026lt; -10^-50 | dfx \u0026gt; 10^-50){\rxit \u0026lt;- xit - lambda*dfx\rfx \u0026lt;- xit^2\rdfx \u0026lt;- 2*xit\rgd \u0026lt;- rbind(gd, c(xit,fx,dfx))\r}\rhead(gd)\r## x fx dfx\r## 1 10.0000 100.0000000 20.0000\r## 2 6.0000 36.0000000 12.0000\r## 3 3.6000 12.9600000 7.2000\r## 4 2.1600 4.6656000 4.3200\r## 5 1.2960 1.6796160 2.5920\r## 6 0.7776 0.6046618 1.5552\rtail(gd)\r## x fx dfx\r## 228 4.368515e-50 1.908392e-99 8.737030e-50\r## 229 2.621109e-50 6.870213e-100 5.242218e-50\r## 230 1.572665e-50 2.473277e-100 3.145331e-50\r## 231 9.435993e-51 8.903795e-101 1.887199e-50\r## 232 5.661596e-51 3.205366e-101 1.132319e-50\r## 233 3.396957e-51 1.153932e-101 6.793915e-51\rqplot(x = x, y = fx1)\rqplot(x,fx, data = gd)\rstandard form for quadratics\n\\(min\\: z; z = -8x_1-16x_2+x_1^2+4x_2^2\\)\ns.t.\r\\(x_1 + x_2 + x_3 = 5\\)\r\\(x_1 + x_4 = 3\\)\rFrom Jensen and Bard Quadratic Solver notes in Book\rIdea given A,b,c and intial value of x; find optimal x that minimizes c’*x\nconstr1 \u0026lt;- c(1,1,1,0)\rconstr2 \u0026lt;- c(1,0,0,1)\rA \u0026lt;- rbind(constr1,constr2)\rm \u0026lt;- nrow(A)\rn \u0026lt;- ncol(A)\rb \u0026lt;- matrix(c(5,3),nrow =m)\rc \u0026lt;- matrix(c(-8,-16,0,0), nrow = n)\rQ \u0026lt;- rbind(c(2,0,0,0),c(0,8,0,0),c(0,0,0,0),c(0,0,0,0))\r#inital x values (xi) given by slacks = RHS\rxi \u0026lt;- matrix(c(1,1,0.5,0.5), nrow =n)\rm \u0026lt;- nrow(A)\rn \u0026lt;- ncol(A)\rI \u0026lt;- diag(n)\rz1 \u0026lt;- matrix(rep(0,n*n), nrow = n)\rz2 \u0026lt;- matrix(rep(0,m*m), nrow = m)\rz3 \u0026lt;- matrix(rep(0,m*n), nrow = m)\ry \u0026lt;- matrix(rep(1,m), nrow = n)\r#The complimentary slackness modifier 1/t eventually goes to 0 as t \u0026gt;\u0026gt;\u0026gt;\u0026gt; inf\rt \u0026lt;- 9\r#Step size pretty much make it up\ralpha \u0026lt;- 0.1\r#mu*x = 0 in complemntariy slackness condition , mu \u0026gt;0 is dual condition mu correspond to dual variables, #using fancy vectors this gives Xd*mu = XM1 = 1/t where t \u0026gt;\u0026gt;\u0026gt;\u0026gt; inf x \u0026lt;- xi\rmu \u0026lt;- x/t\rmu_minus_c \u0026lt;- mu - c - Q%*%x\r#Gives lagrangian multipliers for constraints\r#Solving c+A*lamda-mu = 0 gives initial lambda\rlambda \u0026lt;- ginv(t(A))%*%(mu_minus_c)\r#combined vector having values of x, lambda, and mu useful when adding the search direction\rw \u0026lt;- rbind(x, lambda, mu)\r#This is the KKT condition stationarity, at optimality this derivative should be 0,\r#Using the lagrangian cx+lambda*Ax-mu \u0026gt;\u0026gt; c+A*lambda-mu\rc_plus_tA \u0026lt;- Q%*%x+c+t(A)%*%lambda-mu\r#This is the KKT condition primal feasiblity, this should always be 0 Ax-b=0 A_times_x_minus_b \u0026lt;- A%*%x-b\r#This is the modfied complimentary condtion XM1 -1/t = 0 X is the diag(x) and M is diag(mu) 1/t \u0026gt;\u0026gt;\u0026gt; 0 as t gets larger\rx_times_mu_minus_y_over_t \u0026lt;- x*mu-y/t\r#The right hand side of the search direction iteration given from the Newton-Raphson Method\r#Combines the vectors above\rB \u0026lt;- rbind(c_plus_tA,A_times_x_minus_b,x_times_mu_minus_y_over_t)\robjective \u0026lt;- 0.5*t(x)%*%Q%*%x+t(c)%*%x\rerror \u0026lt;- norm(B,\u0026#39;2\u0026#39;)\riteration_list \u0026lt;- data.frame(\u0026#39;x1\u0026#39; = x[1], \u0026#39;x2\u0026#39; = x[2], \u0026#39;x3\u0026#39; = x[3], \u0026#39;x4\u0026#39; = x[4], \u0026#39;objective\u0026#39; = objective, \u0026#39;error\u0026#39; = error)\r#loop\rwhile(error \u0026gt; 10^-12){\rt \u0026lt;- t*9\rXd = Diagonal(n = n, x)\rMud = Diagonal(n = n, mu) #The left hand side matrix of the search direction iteration, it containtes information from the A, x, and mu vectors and matricies of 1s or 0s to make the math make sense\rC \u0026lt;- rbind(cbind(Q,t(A),-I),cbind(A,z2,z3), cbind(Mud,t(z3), Xd))\r#The right hand side of the search direction iteration given from the Newton-Raphson Method\r#This contains the objective function costs, the RHS values, as well as the A, x, and mu vectors. #It also has the complimentary condition represented by t\rB \u0026lt;- rbind(Q%*%x+c+t(A)%*%lambda-mu,A%*%x-b,x*mu-y/t)\r#solving the systems of equations with C and B gives the search direction as you move closer and closer to solving the complimentary condition in the KKT conditions\rdw = solve(-C,B)\r#update your w vector which is just a list of the x, mu, and lambda vectors using the search direction\rw \u0026lt;- w + alpha*dw\rx \u0026lt;- w[1:n]\rlambda \u0026lt;- w[(n+1):(n+m)]\rmu \u0026lt;- w[(n+m+1):length(w)]\r#calculate the objective function from the x values and the error. Remember if this satisifies all the KKT conditions then the B vector will be 0.\robjective \u0026lt;- 0.5*t(x)%*%Q%*%x+t(c)%*%x\rerror \u0026lt;- norm(B,\u0026#39;2\u0026#39;)\riteration_list \u0026lt;- rbind(iteration_list,c(x,objective,error))\r}\rhead(iteration_list)\r## x1 x2 x3 x4 objective error\r## 1 1.000000 1.000000 0.50000000 0.50000000 -19.00000 6.520410\r## 2 1.269990 1.096877 0.38313300 0.38001002 -21.28452 6.520877\r## 3 1.516786 1.183938 0.27427586 0.26821381 -23.16982 5.868998\r## 4 1.734188 1.261642 0.18166935 0.17231180 -24.68541 5.282035\r## 5 1.918400 1.330365 0.11098503 0.09745009 -25.87330 4.753769\r## 6 2.066579 1.390789 0.06640714 0.04768647 -26.77733 4.278347\rtail(iteration_list)\r## x1 x2 x3 x4 objective error\r## 278 3 2 3.020886e-08 5.122922e-16 -31 1.531109e-12\r## 279 3 2 2.869842e-08 4.610630e-16 -31 1.377965e-12\r## 280 3 2 2.726350e-08 4.149567e-16 -31 1.239794e-12\r## 281 3 2 2.590032e-08 3.734610e-16 -31 1.115852e-12\r## 282 3 2 2.460531e-08 3.361149e-16 -31 1.003790e-12\r## 283 3 2 2.337504e-08 3.025034e-16 -31 9.038590e-13\rstandard form for quadratics\r\\(min \\:z; z = 4x_1^2 + 4x_2^2 - 2x_1x_2 - 12x_1 - 72x_2 + 384\\)\rs.t.\r\\(2x_1 + x_2 + x_3 = 18\\)\r\\(6x_1+ 5x_2 + x_4 = 60\\)\r\\(2x_1 + 5x_2 + x_5 = 40\\)\n#Another example from http://fourier.eng.hmc.edu/e176/lectures/ch3/node19.html, but don\u0026#39;t have answers #Work out matricies in Wolfram Alpha\r#Idea given A,b,c and intial value of x; find optimal x that minimizes c\u0026#39;*x\rconstr1 \u0026lt;- c(2,1,1,0,0)\rconstr2 \u0026lt;- c(6,5,0,1,0)\rconstr3 \u0026lt;- c(2,5,0,0,1)\rA \u0026lt;- rbind(constr1,constr2, constr3)\rb \u0026lt;- matrix(c(18,60,40),nrow =3)\rc \u0026lt;- matrix(c(-8,-16,0,0,0), nrow = 5)\rQ \u0026lt;- rbind(c(2,1,0,0,0),c(1,2,0,0,0),c(0,0,0,0,0),c(0,0,0,0,0),c(0,0,0,0,0))\rrm(A,b,c,Q,constr1,constr2,constr3)\rAdd a new chunk by clicking the Insert Chunk button on the toolbar or by pressing Ctrl+Alt+I.\nWhen you save the notebook, an HTML file containing the code and output will be saved alongside it (click the Preview button or press Ctrl+Shift+K to preview the HTML file).\nThe preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike Knit, Preview does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.\n","date":1578355200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578355200,"objectID":"3eaa0dab8f4b96cb8587af8e713834b5","permalink":"/post/orie/qp_algorithms/","publishdate":"2020-01-07T00:00:00Z","relpermalink":"/post/orie/qp_algorithms/","section":"post","summary":"This post explores how to solve QPs by hand and with Gurobi.\rI have written these using Gurobi as a solver and as the mathematical formulation software.\rThis is a reproducible example if you have R Studio just make sure you have installed the correct packages.","tags":["R Markdown","QP","Interior Point","Algorithms"],"title":"Quadratic Programming Examples and Algorithms","type":"post"},{"authors":null,"categories":["ORIE Techniques"],"content":"\r\rThis post explores how to use Gurobi to solve more advanced LPs, MIPs, and QPs.\rI have written these using Gurobi as a solver and as the mathematical formulation software.\rThis is a reproducible example if you have R Studio just make sure you have installed the correct packages.\nlibrary(gurobi)\r## Warning: package \u0026#39;gurobi\u0026#39; was built under R version 4.0.2\rlibrary(Matrix)\rThis example formulates and solves the following simple QP model:\n\\(min: x^2 + xy + y^2 + yz + z^2 + 2 x\\)\nsubject to\n $x + 2 y + 3z \\geq 4$\r$x + y \\geq 1$\rx, y, z non-negative\rmodel \u0026lt;- list()\rmodel$A \u0026lt;- matrix(c(1,2,3,1,1,0), nrow=2, byrow=T)\rmodel$Q \u0026lt;- matrix(c(1,0.5,0,0.5,1,0.5,0,0.5,1), nrow=3, byrow=T)\rmodel$obj \u0026lt;- c(2,0,0)\rmodel$rhs \u0026lt;- c(4,1)\rmodel$sense \u0026lt;- c(\u0026#39;\u0026gt;\u0026#39;, \u0026#39;\u0026gt;\u0026#39;)\rresult \u0026lt;- gurobi(model)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 2 rows, 3 columns and 5 nonzeros\r## Model fingerprint: 0xe6f007c4\r## Model has 5 quadratic objective terms\r## Coefficient statistics:\r## Matrix range [1e+00, 3e+00]\r## Objective range [2e+00, 2e+00]\r## QObjective range [2e+00, 2e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [1e+00, 4e+00]\r## Presolve time: 0.00s\r## Presolved: 2 rows, 3 columns, 5 nonzeros\r## Presolved model has 5 quadratic objective terms\r## Ordering time: 0.00s\r## ## Barrier statistics:\r## Free vars : 2\r## AA\u0026#39; NZ : 6.000e+00\r## Factor NZ : 1.000e+01\r## Factor Ops : 3.000e+01 (less than 1 second per iteration)\r## Threads : 1\r## ## Objective Residual\r## Iter Primal Dual Primal Dual Compl Time\r## 0 1.68862999e+05 -1.66862803e+05 1.50e+03 4.63e-07 9.99e+05 0s\r## 1 3.32288030e+05 -3.31121401e+05 1.50e-03 4.55e-13 1.33e+05 0s\r## 2 4.88215027e+04 -4.83744738e+04 1.50e-09 2.84e-14 1.94e+04 0s\r## 3 7.20552197e+03 -7.03403484e+03 3.55e-14 1.42e-14 2.85e+03 0s\r## 4 1.07582166e+03 -1.00982226e+03 1.78e-14 1.07e-14 4.17e+02 0s\r## 5 1.65319400e+02 -1.39657698e+02 3.55e-15 3.55e-15 6.10e+01 0s\r## 6 2.72141305e+01 -1.68504217e+01 1.33e-15 4.44e-16 8.81e+00 0s\r## 7 5.34776479e+00 -4.13214640e-01 2.22e-16 2.22e-16 1.15e+00 0s\r## 8 2.27046251e+00 2.04615758e+00 2.22e-16 4.44e-16 4.49e-02 0s\r## 9 2.11217859e+00 2.11101837e+00 7.77e-15 1.67e-16 2.32e-04 0s\r## 10 2.11111218e+00 2.11111102e+00 5.55e-16 3.29e-16 2.32e-07 0s\r## 11 2.11111111e+00 2.11111111e+00 3.33e-15 3.33e-16 2.32e-10 0s\r## ## Barrier solved model in 11 iterations and 0.00 seconds\r## Optimal objective 2.11111111e+00\rprint(result$objval)\r## [1] 2.111111\rprint(result$x)\r## [1] 3.584007e-10 1.000000e+00 6.666667e-01\rmodel$vtype \u0026lt;- c(\u0026#39;I\u0026#39;, \u0026#39;I\u0026#39;, \u0026#39;I\u0026#39;)\rresult \u0026lt;- gurobi(model)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 2 rows, 3 columns and 5 nonzeros\r## Model fingerprint: 0x2458258b\r## Model has 5 quadratic objective terms\r## Variable types: 0 continuous, 3 integer (0 binary)\r## Coefficient statistics:\r## Matrix range [1e+00, 3e+00]\r## Objective range [2e+00, 2e+00]\r## QObjective range [2e+00, 2e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [1e+00, 4e+00]\r## Found heuristic solution: objective 2.000000e+19\r## Presolve time: 0.00s\r## Presolved: 2 rows, 3 columns, 5 nonzeros\r## Presolved model has 5 quadratic objective terms\r## Variable types: 0 continuous, 3 integer (0 binary)\r## ## Root relaxation: objective 2.111111e+00, 5 iterations, 0.00 seconds\r## ## Nodes | Current Node | Objective Bounds | Work\r## Expl Unexpl | Obj Depth IntInf | Incumbent BestBd Gap | It/Node Time\r## ## 0 0 2.11111 0 1 2.0000e+19 2.11111 100% - 0s\r## H 0 0 3.0000000 2.11111 29.6% - 0s\r## 0 0 2.11111 0 1 3.00000 2.11111 29.6% - 0s\r## ## Explored 1 nodes (5 simplex iterations) in 0.00 seconds\r## Thread count was 8 (of 8 available processors)\r## ## Solution count 2: 3 2e+19 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%\rprint(result$objval)\r## [1] 3\rprint(result$x)\r## [1] 0 1 1\r# Clear space\rrm(model, result)\rThis example formulates and solves the following simple QCP model:\r\\(max: x\\)\nsubject to\n\\(x + y + z = 1\\)\n\\(x^2 + y^2 \\leq z^2\\) (second-order cone)\r$ x^2 yz$ (rotated second-order cone)\rx, y, z non-negative\nmodel \u0026lt;- list()\rmodel$A \u0026lt;- matrix(c(1,1,1), nrow=1, byrow=T)\rmodel$modelsense \u0026lt;- \u0026#39;max\u0026#39;\rmodel$obj \u0026lt;- c(1,0,0)\rmodel$rhs \u0026lt;- c(1)\rmodel$sense \u0026lt;- c(\u0026#39;=\u0026#39;)\r# First quadratic constraint: x^2 + y^2 - z^2 \u0026lt;= 0\rqc1 \u0026lt;- list()\rqc1$Qc \u0026lt;- spMatrix(3, 3, c(1, 2, 3), c(1, 2, 3), c(1.0, 1.0, -1.0))\rqc1$rhs \u0026lt;- 0.0\r# Second quadratic constraint: x^2 - yz \u0026lt;= 0\rqc2 \u0026lt;- list()\rqc2$Qc \u0026lt;- spMatrix(3, 3, c(1, 2), c(1, 3), c(1.0, -1.0))\rqc2$rhs \u0026lt;- 0.0\rmodel$quadcon \u0026lt;- list(qc1, qc2)\rresult \u0026lt;- gurobi(model)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 1 rows, 3 columns and 3 nonzeros\r## Model fingerprint: 0x9bebabed\r## Model has 2 quadratic constraints\r## Coefficient statistics:\r## Matrix range [1e+00, 1e+00]\r## QMatrix range [1e+00, 1e+00]\r## Objective range [1e+00, 1e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [1e+00, 1e+00]\r## Presolve time: 0.00s\r## Presolved: 6 rows, 6 columns, 13 nonzeros\r## Presolved model has 2 second-order cone constraints\r## Ordering time: 0.00s\r## ## Barrier statistics:\r## AA\u0026#39; NZ : 1.500e+01\r## Factor NZ : 2.100e+01\r## Factor Ops : 9.100e+01 (less than 1 second per iteration)\r## Threads : 1\r## ## Objective Residual\r## Iter Primal Dual Primal Dual Compl Time\r## 0 2.38095238e-01 2.38095238e-01 1.11e-16 4.33e-01 9.23e-02 0s\r## 1 3.20481543e-01 3.62123302e-01 5.55e-17 1.39e-02 7.95e-03 0s\r## 2 3.26649101e-01 3.28651430e-01 1.15e-14 5.44e-04 3.46e-04 0s\r## 3 3.26797051e-01 3.27019441e-01 2.06e-13 5.98e-10 2.78e-05 0s\r## 4 3.26990986e-01 3.26994814e-01 4.11e-13 3.45e-13 4.78e-07 0s\r## 5 3.26992304e-01 3.26992876e-01 3.84e-11 2.82e-14 7.15e-08 0s\r## ## Barrier solved model in 5 iterations and 0.00 seconds\r## Optimal objective 3.26992304e-01\r## ## Warning: to get QCP duals, please set parameter QCPDual to 1\rprint(result$objval)\r## [1] 0.3269923\rprint(result$x)\r## [1] 0.3269923 0.2570664 0.4159413\r# Clear space\rrm(model, result)\rThis example considers the following separable, convex problem:\n\\(min: f(x) - y + g(z)\\)\nsubject to\n\\(x + 2 y + 3 z \\leq 4\\)\r\\(x + y \\geq 1\\)\r\\(x, y, z \\geq 0\\)\nwhere \\(f(u) = e^{-u} \\text{ and} \\: g(u) = 2 u^2 - 4u\\: \\forall \\text{ real}\\: u\\)\nIt formulates and solves a simpler LP model by approximating f and\rg with piecewise-linear functions. Then it transforms the model\rinto a MIP by negating the approximation for f, which gives\ra non-convex piecewise-linear function, and solves it again.\nlibrary(gurobi)\rmodel \u0026lt;- list()\rmodel$A \u0026lt;- matrix(c(1,2,3,1,1,0), nrow=2, byrow=T)\rmodel$obj \u0026lt;- c(0,-1,0)\rmodel$ub \u0026lt;- c(1,1,1)\rmodel$rhs \u0026lt;- c(4,1)\rmodel$sense \u0026lt;- c(\u0026#39;\u0026lt;\u0026#39;, \u0026#39;\u0026gt;\u0026#39;)\r# Uniformly spaced points in [0.0, 1.0]\ru \u0026lt;- seq(from=0, to=1, by=0.01)\r# First piecewise-linear function: f(x) = exp(-x)\rpwl1 \u0026lt;- list()\rpwl1$var \u0026lt;- 1\rpwl1$x \u0026lt;- u\rpwl1$y \u0026lt;- sapply(u, function(x) exp(-x))\r# Second piecewise-linear function: g(z) = 2 z^2 - 4 z\rpwl2 \u0026lt;- list()\rpwl2$var \u0026lt;- 3\rpwl2$x \u0026lt;- u\rpwl2$y \u0026lt;- sapply(u, function(z) 2 * z * z - 4 * z)\rmodel$pwlobj \u0026lt;- list(pwl1, pwl2)\rresult \u0026lt;- gurobi(model)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 2 rows, 3 columns and 5 nonzeros\r## Model fingerprint: 0xc12b5aad\r## Model has 2 piecewise-linear objective terms\r## Coefficient statistics:\r## Matrix range [1e+00, 3e+00]\r## Objective range [1e+00, 1e+00]\r## Bounds range [1e+00, 1e+00]\r## RHS range [1e+00, 4e+00]\r## Presolve time: 0.00s\r## Presolved: 2 rows, 3 columns, 5 nonzeros\r## ## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 -2.6321206e+00 5.000000e-01 0.000000e+00 0s\r## 2 -1.9346239e+00 0.000000e+00 0.000000e+00 0s\r## ## Solved in 2 iterations and 0.00 seconds\r## Optimal objective -1.934623931e+00\rprint(result$objval)\r## [1] -1.934624\rprint(result$x)\r## [1] 0.690 0.725 0.620\r# Negate piecewise-linear function on x, making it non-convex\rmodel$pwlobj[[1]]$y \u0026lt;- sapply(u, function(x) -exp(-x))\rresult \u0026lt;- gurobi(model)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 2 rows, 3 columns and 5 nonzeros\r## Model fingerprint: 0x3229e670\r## Model has 2 piecewise-linear objective terms\r## Variable types: 3 continuous, 0 integer (0 binary)\r## Coefficient statistics:\r## Matrix range [1e+00, 3e+00]\r## Objective range [1e+00, 1e+00]\r## Bounds range [1e+00, 1e+00]\r## RHS range [1e+00, 4e+00]\r## Found heuristic solution: objective -1.3678794\r## Presolve time: 0.00s\r## Presolved: 202 rows, 302 columns, 603 nonzeros\r## Variable types: 203 continuous, 99 integer (99 binary)\r## ## Root relaxation: objective -3.777733e+00, 1 iterations, 0.00 seconds\r## ## Nodes | Current Node | Objective Bounds | Work\r## Expl Unexpl | Obj Depth IntInf | Incumbent BestBd Gap | It/Node Time\r## ## * 0 0 0 -3.7777333 -3.77773 0.00% - 0s\r## ## Explored 0 nodes (1 simplex iterations) in 0.00 seconds\r## Thread count was 8 (of 8 available processors)\r## ## Solution count 2: -3.77773 -1.36788 ## No other solutions better than -3.77773\r## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective -3.777733333333e+00, best bound -3.777733333333e+00, gap 0.0000%\rgurobi_write(model, \u0026quot;pwl.lp\u0026quot;)\r## NULL\rprint(result$objval)\r## [1] -3.777733\rprint(result$x)\r## [1] 0.0000000 1.0000000 0.6666667\r# Clear space\rrm(model, pwl1, pwl2, result)\rWant to cover three different sets but subject to a common budget of\relements allowed to be used. However, the sets have different priorities to\rbe covered; and we tackle this by using multi-objective optimization.\n# define primitive data\rgroundSetSize \u0026lt;- 20\rnSubSets \u0026lt;- 4\rBudget \u0026lt;- 12\rSet \u0026lt;- list(\rc( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ),\rc( 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1 ),\rc( 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0 ),\rc( 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0 ) )\rSetObjPriority \u0026lt;- c(3, 2, 2, 1)\rSetObjWeight \u0026lt;- c(1.0, 0.25, 1.25, 1.0)\r# Initialize model\rmodel \u0026lt;- list()\rmodel$modelsense \u0026lt;- \u0026#39;max\u0026#39;\rmodel$modelname \u0026lt;- \u0026#39;multiobj\u0026#39;\r# Set variables, all of them are binary, with 0,1 bounds.\rmodel$vtype \u0026lt;- \u0026#39;B\u0026#39;\rmodel$lb \u0026lt;- 0\rmodel$ub \u0026lt;- 1\rmodel$varnames \u0026lt;- paste(rep(\u0026#39;El\u0026#39;, groundSetSize), 1:groundSetSize, sep=\u0026#39;\u0026#39;)\r# Build constraint matrix\rmodel$A \u0026lt;- spMatrix(1, groundSetSize,\ri = rep(1,groundSetSize),\rj = 1:groundSetSize,\rx = rep(1,groundSetSize))\rmodel$rhs \u0026lt;- c(Budget)\rmodel$sense \u0026lt;- c(\u0026#39;\u0026lt;\u0026#39;)\rmodel$constrnames \u0026lt;- c(\u0026#39;Budget\u0026#39;)\r# Set multi-objectives\rmodel$multiobj \u0026lt;- list()\rfor (m in 1:nSubSets) {\rmodel$multiobj[[m]] \u0026lt;- list()\rmodel$multiobj[[m]]$objn \u0026lt;- Set[[m]]\rmodel$multiobj[[m]]$priority \u0026lt;- SetObjPriority[m]\rmodel$multiobj[[m]]$weight \u0026lt;- SetObjWeight[m]\rmodel$multiobj[[m]]$abstol \u0026lt;- m\rmodel$multiobj[[m]]$reltol \u0026lt;- 0.01\rmodel$multiobj[[m]]$name \u0026lt;- sprintf(\u0026#39;Set%d\u0026#39;, m)\rmodel$multiobj[[m]]$con \u0026lt;- 0.0\r}\r# Save model\rgurobi_write(model,\u0026#39;multiobj_R.lp\u0026#39;)\r## NULL\r# Set parameters\rparams \u0026lt;- list()\rparams$PoolSolutions \u0026lt;- 100\r# Optimize\rresult \u0026lt;- gurobi(model, params)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 1 rows, 20 columns and 20 nonzeros\r## Model fingerprint: 0x28b3c9c7\r## Variable types: 0 continuous, 20 integer (20 binary)\r## Coefficient statistics:\r## Matrix range [1e+00, 1e+00]\r## Objective range [1e+00, 1e+00]\r## Bounds range [1e+00, 1e+00]\r## RHS range [1e+01, 1e+01]\r## ## ---------------------------------------------------------------------------\r## Multi-objectives: starting optimization with 4 objectives (3 combined) ...\r## ---------------------------------------------------------------------------\r## ## Multi-objectives: applying initial presolve ...\r## ---------------------------------------------------------------------------\r## ## Presolve time: 0.00s\r## Presolved: 1 rows and 20 columns\r## ---------------------------------------------------------------------------\r## ## Multi-objectives: optimize objective 1 (Set1) ...\r## ---------------------------------------------------------------------------\r## ## Found heuristic solution: objective 10.0000000\r## ## Explored 0 nodes (0 simplex iterations) in 0.00 seconds\r## Thread count was 1 (of 8 available processors)\r## ## Solution count 1: 10 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 1.000000000000e+01, best bound 1.000000000000e+01, gap 0.0000%\r## ---------------------------------------------------------------------------\r## ## Multi-objectives: optimize objective 2 (weighted) ...\r## ---------------------------------------------------------------------------\r## ## ## Loaded user MIP start with objective 6.25\r## ## Presolve removed 2 rows and 20 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## ## Explored 0 nodes (0 simplex iterations) in 0.00 seconds\r## Thread count was 1 (of 8 available processors)\r## ## Solution count 2: 10.5 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 1.050000000000e+01, best bound 1.050000000000e+01, gap 0.0000%\r## ---------------------------------------------------------------------------\r## ## Multi-objectives: optimize objective 3 (Set4) ...\r## ---------------------------------------------------------------------------\r## ## ## Loaded user MIP start with objective 6\r## ## Presolve removed 3 rows and 20 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## ## Explored 0 nodes (0 simplex iterations) in 0.00 seconds\r## Thread count was 1 (of 8 available processors)\r## ## Solution count 2: 7 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 7.000000000000e+00, best bound 7.000000000000e+00, gap 0.0000%\r## ## ---------------------------------------------------------------------------\r## Multi-objectives: solved in 0.00 seconds, solution count 3\r# Capture solution information\rif (result$status != \u0026#39;OPTIMAL\u0026#39;) {\rcat(\u0026#39;Optimization finished with status\u0026#39;, result$status, \u0026#39;\\n\u0026#39;)\rstop(\u0026#39;Stop now\\n\u0026#39;)\r}\r# Print best solution\rcat(\u0026#39;Selected elements in best solution:\\n\u0026#39;)\r## Selected elements in best solution:\rfor (e in 1:groundSetSize) {\rif(result$x[e] \u0026lt; 0.9) next\rcat(\u0026#39; El\u0026#39;,e,sep=\u0026#39;\u0026#39;)\r}\r## El2 El3 El4 El5 El6 El7 El8 El9 El10 El11 El12 El17\rcat(\u0026#39;\\n\u0026#39;)\r# Iterate over the best 10 solutions\rif (\u0026#39;pool\u0026#39; %in% names(result)) {\rsolcount \u0026lt;- length(result$pool)\rcat(\u0026#39;Number of solutions found:\u0026#39;, solcount, \u0026#39;\\n\u0026#39;)\rif (solcount \u0026gt; 10) {\rsolcount \u0026lt;- 10\r}\rcat(\u0026#39;Objective values for first\u0026#39;, solcount, \u0026#39;solutions:\\n\u0026#39;)\rfor (k in 1:solcount) {\rcat(\u0026#39;Solution\u0026#39;, k, \u0026#39;has objective:\u0026#39;, result$pool[[k]]$objval[1], \u0026#39;\\n\u0026#39;)\r}\r} else {\rsolcount \u0026lt;- 1\rcat(\u0026#39;Number of solutions found:\u0026#39;, solcount, \u0026#39;\\n\u0026#39;)\rcat(\u0026#39;Solution 1 has objective:\u0026#39;, result$objval, \u0026#39;\\n\u0026#39;)\r}\r## Number of solutions found: 3 ## Objective values for first 3 solutions:\r## Solution 1 has objective: 9 ## Solution 2 has objective: 9 ## Solution 3 has objective: 10\r# Clean up\rrm(model, params, result)\rAssign workers to shifts; each worker may or may not be available on a\rparticular day. We use Pareto optimization to solve the model:\rfirst, we minimize the linear sum of the slacks. Then, we constrain\rthe sum of the slacks, and we minimize a quadratic objective that\rtries to balance the workload among the workers.\n# define data\rnShifts \u0026lt;- 14\rnWorkers \u0026lt;- 7\rnVars \u0026lt;- (nShifts + 1) * (nWorkers + 1) + nWorkers + 1\rvarIdx \u0026lt;- function(w,s) {s+(w-1)*nShifts}\rshiftSlackIdx \u0026lt;- function(s) {s+nShifts*nWorkers}\rtotShiftIdx \u0026lt;- function(w) {w + nShifts * (nWorkers+1)}\ravgShiftIdx \u0026lt;- ((nShifts+1)*(nWorkers+1))\rdiffShiftIdx \u0026lt;- function(w) {w + avgShiftIdx}\rtotalSlackIdx \u0026lt;- nVars\rShifts \u0026lt;- c(\u0026#39;Mon1\u0026#39;, \u0026#39;Tue2\u0026#39;, \u0026#39;Wed3\u0026#39;, \u0026#39;Thu4\u0026#39;, \u0026#39;Fri5\u0026#39;, \u0026#39;Sat6\u0026#39;, \u0026#39;Sun7\u0026#39;,\r\u0026#39;Mon8\u0026#39;, \u0026#39;Tue9\u0026#39;, \u0026#39;Wed10\u0026#39;, \u0026#39;Thu11\u0026#39;, \u0026#39;Fri12\u0026#39;, \u0026#39;Sat13\u0026#39;, \u0026#39;Sun14\u0026#39;)\rWorkers \u0026lt;- c( \u0026#39;Amy\u0026#39;, \u0026#39;Bob\u0026#39;, \u0026#39;Cathy\u0026#39;, \u0026#39;Dan\u0026#39;, \u0026#39;Ed\u0026#39;, \u0026#39;Fred\u0026#39;, \u0026#39;Gu\u0026#39; )\rshiftRequirements \u0026lt;- c(3, 2, 4, 4, 5, 6, 5, 2, 2, 3, 4, 6, 7, 5 )\ravailability \u0026lt;- list( c( 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1 ),\rc( 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0 ),\rc( 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 ),\rc( 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1 ),\rc( 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1 ),\rc( 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1 ),\rc( 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ) )\r# Function to display results\rsolveandprint \u0026lt;- function(model, env) {\rresult \u0026lt;- gurobi(model, env = env)\rif(result$status == \u0026#39;OPTIMAL\u0026#39;) {\rcat(\u0026#39;The optimal objective is\u0026#39;,result$objval,\u0026#39;\\n\u0026#39;)\rcat(\u0026#39;Schedule:\\n\u0026#39;)\rfor (s in 1:nShifts) {\rcat(\u0026#39;\\t\u0026#39;,Shifts[s],\u0026#39;:\u0026#39;)\rfor (w in 1:nWorkers) {\rif (result$x[varIdx(w,s)] \u0026gt; 0.9) cat(Workers[w],\u0026#39; \u0026#39;)\r}\rcat(\u0026#39;\\n\u0026#39;)\r}\rcat(\u0026#39;Workload:\\n\u0026#39;)\rfor (w in 1:nWorkers) {\rcat(\u0026#39;\\t\u0026#39;,Workers[w],\u0026#39;:\u0026#39;,result$x[totShiftIdx(w)],\u0026#39;\\n\u0026#39;)\r}\r} else {\rcat(\u0026#39;Optimization finished with status\u0026#39;,result$status)\r}\rresult\r}\r# Set-up environment\renv \u0026lt;- list()\renv$logfile \u0026lt;- \u0026#39;workforce4.log\u0026#39;\r# Build model\rmodel \u0026lt;- list()\rmodel$modelname \u0026lt;- \u0026#39;workforce4\u0026#39;\rmodel$modelsense \u0026lt;- \u0026#39;min\u0026#39;\r# Initialize assignment decision variables:\r# x[w][s] == 1 if worker w is assigned to shift s.\r# This is no longer a pure assignment model, so we must\r# use binary variables.\rmodel$vtype \u0026lt;- rep(\u0026#39;C\u0026#39;, nVars)\rmodel$lb \u0026lt;- rep(0, nVars)\rmodel$ub \u0026lt;- rep(1, nVars)\rmodel$obj \u0026lt;- rep(0, nVars)\rmodel$varnames \u0026lt;- rep(\u0026#39;\u0026#39;,nVars)\rfor (w in 1:nWorkers) {\rfor (s in 1:nShifts) {\rmodel$vtype[varIdx(w,s)] = \u0026#39;B\u0026#39;\rmodel$varnames[varIdx(w,s)] = paste0(Workers[w],\u0026#39;.\u0026#39;,Shifts[s])\rif (availability[[w]][s] == 0) model$ub[varIdx(w,s)] = 0\r}\r}\r# Initialize shift slack variables\rfor (s in 1:nShifts) {\rmodel$varnames[shiftSlackIdx(s)] = paste0(\u0026#39;ShiftSlack\u0026#39;,Shifts[s])\rmodel$ub[shiftSlackIdx(s)] = Inf\r}\r# Initialize worker slack and diff variables\rfor (w in 1:nWorkers) {\rmodel$varnames[totShiftIdx(w)] = paste0(\u0026#39;TotalShifts\u0026#39;,Workers[w])\rmodel$ub[totShiftIdx(w)] = Inf\rmodel$varnames[diffShiftIdx(w)] = paste0(\u0026#39;DiffShifts\u0026#39;,Workers[w])\rmodel$ub[diffShiftIdx(w)] = Inf\rmodel$lb[diffShiftIdx(w)] = -Inf\r}\r#Initialize average shift variable\rmodel$ub[avgShiftIdx] = Inf\rmodel$varnames[avgShiftIdx] = \u0026#39;AvgShift\u0026#39;\r#Initialize total slack variable\rmodel$ub[totalSlackIdx] = Inf\rmodel$varnames[totalSlackIdx] = \u0026#39;TotalSlack\u0026#39;\rmodel$obj[totalSlackIdx] = 1\r# Set-up shift-requirements constraints\rmodel$A \u0026lt;- spMatrix(nShifts,nVars,\ri = c(c(mapply(rep,1:nShifts,nWorkers)),\rc(1:nShifts)),\rj = c(mapply(varIdx,1:nWorkers,\rmapply(rep,1:nShifts,nWorkers)),\rshiftSlackIdx(1:nShifts)),\rx = rep(1,nShifts * (nWorkers+1)))\rmodel$sense \u0026lt;- rep(\u0026#39;=\u0026#39;,nShifts)\rmodel$rhs \u0026lt;- shiftRequirements\rmodel$constrnames \u0026lt;- Shifts\r# Set TotalSlack equal to the sum of each shift slack\rB \u0026lt;- spMatrix(1, nVars,\ri = rep(1,nShifts+1),\rj = c(shiftSlackIdx(1:nShifts),totalSlackIdx),\rx = c(rep(1,nShifts),-1))\rmodel$A \u0026lt;- rbind(model$A, B)\rmodel$rhs \u0026lt;- c(model$rhs,0)\rmodel$sense \u0026lt;- c(model$sense,\u0026#39;=\u0026#39;)\rmodel$constrnames \u0026lt;- c(model$constrnames, \u0026#39;TotalSlack\u0026#39;)\r# Set total number of shifts for each worker\rB \u0026lt;- spMatrix(nWorkers, nVars,\ri = c(mapply(rep,1:nWorkers,nShifts),\r1:nWorkers),\rj = c(mapply(varIdx,c(mapply(rep,1:nWorkers,nShifts)),1:nShifts),\rtotShiftIdx(1:nWorkers)),\rx = c(rep(1,nShifts*nWorkers),rep(-1,nWorkers)))\rmodel$A \u0026lt;- rbind(model$A, B)\rmodel$rhs \u0026lt;- c(model$rhs,rep(0,nWorkers))\rmodel$sense \u0026lt;- c(model$sense,rep(\u0026#39;=\u0026#39;,nWorkers))\rmodel$constrnames \u0026lt;- c(model$constrnames, sprintf(\u0026#39;TotalShifts%s\u0026#39;,Workers[1:nWorkers]))\r# Save initial model\rgurobi_write(model,\u0026#39;workforce4.lp\u0026#39;, env)\r## NULL\r# Optimize\rresult \u0026lt;- solveandprint(model, env)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 22 rows, 128 columns and 232 nonzeros\r## Model fingerprint: 0x78ab1a9c\r## Variable types: 30 continuous, 98 integer (98 binary)\r## Coefficient statistics:\r## Matrix range [1e+00, 1e+00]\r## Objective range [1e+00, 1e+00]\r## Bounds range [1e+00, 1e+00]\r## RHS range [2e+00, 7e+00]\r## Found heuristic solution: objective 58.0000000\r## Presolve removed 22 rows and 128 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## ## Explored 0 nodes (0 simplex iterations) in 0.00 seconds\r## Thread count was 1 (of 8 available processors)\r## ## Solution count 2: 6 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 6.000000000000e+00, best bound 6.000000000000e+00, gap 0.0000%\r## The optimal objective is 6 ## Schedule:\r## Mon1 :Bob Fred Gu ## Tue2 :Amy Ed ## Wed3 :Amy Cathy Fred Gu ## Thu4 :Cathy Ed ## Fri5 :Amy Bob Cathy Ed Gu ## Sat6 :Bob Dan Fred Gu ## Sun7 :Amy Cathy Ed Gu ## Mon8 :Fred Gu ## Tue9 :Amy Ed ## Wed10 :Amy Cathy Gu ## Thu11 :Amy Dan Ed Gu ## Fri12 :Amy Cathy Dan Fred Gu ## Sat13 :Amy Bob Cathy Dan Ed Fred Gu ## Sun14 :Amy Cathy Dan Fred Gu ## Workload:\r## Amy : 10 ## Bob : 4 ## Cathy : 8 ## Dan : 5 ## Ed : 7 ## Fred : 7 ## Gu : 11\rif (result$status != \u0026#39;OPTIMAL\u0026#39;) stop(\u0026#39;Stop now\\n\u0026#39;)\r# Constraint the slack by setting its upper and lower bounds\rtotalSlack \u0026lt;- result$x[totalSlackIdx]\rmodel$lb[totalSlackIdx] = totalSlack\rmodel$ub[totalSlackIdx] = totalSlack\r# Link average number of shifts worked and difference with average\rB \u0026lt;- spMatrix(nWorkers+1, nVars,\ri = c(1:nWorkers,\r1:nWorkers,\r1:nWorkers,\rrep(nWorkers+1,nWorkers+1)),\rj = c(totShiftIdx(1:nWorkers),\rdiffShiftIdx(1:nWorkers),\rrep(avgShiftIdx,nWorkers),\rtotShiftIdx(1:nWorkers),avgShiftIdx),\rx = c(rep(1, nWorkers),\rrep(-1,nWorkers),\rrep(-1,nWorkers),\rrep(1,nWorkers),-nWorkers))\rmodel$A \u0026lt;- rbind(model$A, B)\rmodel$rhs \u0026lt;- c(model$rhs,rep(0,nWorkers+1))\rmodel$sense \u0026lt;- c(model$sense,rep(\u0026#39;=\u0026#39;,nWorkers+1))\rmodel$constrnames \u0026lt;- c(model$constrnames,\rsprintf(\u0026#39;DiffShifts%s\u0026#39;,Workers[1:nWorkers]),\r\u0026#39;AvgShift\u0026#39;)\r# Objective: minimize the sum of the square of the difference from the\r# average number of shifts worked\rmodel$obj \u0026lt;- 0\rmodel$Q \u0026lt;- spMatrix(nVars,nVars,\ri = c(diffShiftIdx(1:nWorkers)),\rj = c(diffShiftIdx(1:nWorkers)),\rx = rep(1,nWorkers))\r# Save modified model\rgurobi_write(model,\u0026#39;workforce4b.lp\u0026#39;, env)\r## NULL\r# Optimize\rresult \u0026lt;- solveandprint(model, env)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 30 rows, 128 columns and 261 nonzeros\r## Model fingerprint: 0x377bf6f1\r## Model has 7 quadratic objective terms\r## Variable types: 30 continuous, 98 integer (98 binary)\r## Coefficient statistics:\r## Matrix range [1e+00, 7e+00]\r## Objective range [0e+00, 0e+00]\r## QObjective range [2e+00, 2e+00]\r## Bounds range [1e+00, 6e+00]\r## RHS range [2e+00, 7e+00]\r## Found heuristic solution: objective 37.7142857\r## Presolve removed 6 rows and 63 columns\r## Presolve time: 0.00s\r## Presolved: 24 rows, 65 columns, 136 nonzeros\r## Presolved model has 7 quadratic objective terms\r## Variable types: 7 continuous, 58 integer (50 binary)\r## ## Root relaxation: objective 2.142857e-01, 219 iterations, 0.00 seconds\r## ## Nodes | Current Node | Objective Bounds | Work\r## Expl Unexpl | Obj Depth IntInf | Incumbent BestBd Gap | It/Node Time\r## ## H 0 0 25.7142857 0.00000 100% - 0s\r## 0 0 0.21429 0 12 25.71429 0.21429 99.2% - 0s\r## H 0 0 3.7142857 0.21429 94.2% - 0s\r## H 0 0 1.7142857 0.21429 87.5% - 0s\r## 0 0 0.21429 0 12 1.71429 0.21429 87.5% - 0s\r## 0 2 0.21429 0 12 1.71429 0.21429 87.5% - 0s\r## ## Explored 19 nodes (273 simplex iterations) in 0.04 seconds\r## Thread count was 8 (of 8 available processors)\r## ## Solution count 4: 1.71429 3.71429 25.7143 37.7143 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 1.714285714286e+00, best bound 1.714285714286e+00, gap 0.0000%\r## The optimal objective is 1.714286 ## Schedule:\r## Mon1 :Bob Ed Fred ## Tue2 :Bob Fred ## Wed3 :Amy Cathy Dan Ed ## Thu4 :Cathy Ed ## Fri5 :Bob Cathy Dan Ed Gu ## Sat6 :Bob Dan Fred Gu ## Sun7 :Amy Cathy Ed Gu ## Mon8 :Bob Cathy ## Tue9 :Amy Fred ## Wed10 :Amy Dan Gu ## Thu11 :Bob Dan Ed Gu ## Fri12 :Amy Cathy Dan Fred Gu ## Sat13 :Amy Bob Cathy Dan Ed Fred Gu ## Sun14 :Amy Cathy Ed Fred Gu ## Workload:\r## Amy : 7 ## Bob : 7 ## Cathy : 8 ## Dan : 7 ## Ed : 8 ## Fred : 7 ## Gu : 8\rif (result$status != \u0026#39;OPTIMAL\u0026#39;) stop(\u0026#39;Stop now\\n\u0026#39;)\r#Clear space\rrm(model, env, availability, Shifts, Workers, shiftRequirements, result)\r# Assign workers to shifts; each worker may or may not be available on a\r# particular day. We use multi-objective optimization to solve the model.\r# The highest-priority objective minimizes the sum of the slacks\r# (i.e., the total number of uncovered shifts). The secondary objective\r# minimizes the difference between the maximum and minimum number of\r# shifts worked among all workers. The second optimization is allowed\r# to degrade the first objective by up to the smaller value of 10% and 2\r# define data\rnShifts \u0026lt;- 14\rnWorkers \u0026lt;- 8\rnVars \u0026lt;- (nShifts + 1) * (nWorkers + 1) + 2\rvarIdx \u0026lt;- function(w,s) {s+(w-1)*nShifts}\rshiftSlackIdx \u0026lt;- function(s) {s+nShifts*nWorkers}\rtotShiftIdx \u0026lt;- function(w) {w + nShifts * (nWorkers+1)}\rminShiftIdx \u0026lt;- ((nShifts+1)*(nWorkers+1))\rmaxShiftIdx \u0026lt;- (minShiftIdx+1)\rtotalSlackIdx \u0026lt;- nVars\rShifts \u0026lt;- c(\u0026#39;Mon1\u0026#39;, \u0026#39;Tue2\u0026#39;, \u0026#39;Wed3\u0026#39;, \u0026#39;Thu4\u0026#39;, \u0026#39;Fri5\u0026#39;, \u0026#39;Sat6\u0026#39;, \u0026#39;Sun7\u0026#39;,\r\u0026#39;Mon8\u0026#39;, \u0026#39;Tue9\u0026#39;, \u0026#39;Wed10\u0026#39;, \u0026#39;Thu11\u0026#39;, \u0026#39;Fri12\u0026#39;, \u0026#39;Sat13\u0026#39;, \u0026#39;Sun14\u0026#39;)\rWorkers \u0026lt;- c( \u0026#39;Amy\u0026#39;, \u0026#39;Bob\u0026#39;, \u0026#39;Cathy\u0026#39;, \u0026#39;Dan\u0026#39;, \u0026#39;Ed\u0026#39;, \u0026#39;Fred\u0026#39;, \u0026#39;Gu\u0026#39;, \u0026#39;Tobi\u0026#39; )\rshiftRequirements \u0026lt;- c(3, 2, 4, 4, 5, 6, 5, 2, 2, 3, 4, 6, 7, 5 )\ravailability \u0026lt;- list( c( 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1 ),\rc( 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0 ),\rc( 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 ),\rc( 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1 ),\rc( 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1 ),\rc( 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1 ),\rc( 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1 ),\rc( 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ) )\r# Function to display results\rsolveandprint \u0026lt;- function(model, env) {\rresult \u0026lt;- gurobi(model, env = env)\rif(result$status == \u0026#39;OPTIMAL\u0026#39;) {\rcat(\u0026#39;The optimal objective is\u0026#39;,result$objval,\u0026#39;\\n\u0026#39;)\rcat(\u0026#39;Schedule:\\n\u0026#39;)\rfor (s in 1:nShifts) {\rcat(\u0026#39;\\t\u0026#39;,Shifts[s],\u0026#39;:\u0026#39;)\rfor (w in 1:nWorkers) {\rif (result$x[varIdx(w,s)] \u0026gt; 0.9) cat(Workers[w],\u0026#39; \u0026#39;)\r}\rcat(\u0026#39;\\n\u0026#39;)\r}\rcat(\u0026#39;Workload:\\n\u0026#39;)\rfor (w in 1:nWorkers) {\rcat(\u0026#39;\\t\u0026#39;,Workers[w],\u0026#39;:\u0026#39;,result$x[totShiftIdx(w)],\u0026#39;\\n\u0026#39;)\r}\r} else {\rcat(\u0026#39;Optimization finished with status\u0026#39;,result$status)\r}\rresult\r}\r# Set-up environment\renv \u0026lt;- list()\renv$logfile \u0026lt;- \u0026#39;workforce5.log\u0026#39;\r# Build model\rmodel \u0026lt;- list()\rmodel$modelname \u0026lt;- \u0026#39;workforce5\u0026#39;\rmodel$modelsense \u0026lt;- \u0026#39;min\u0026#39;\r# Initialize assignment decision variables:\r# x[w][s] == 1 if worker w is assigned to shift s.\r# This is no longer a pure assignment model, so we must\r# use binary variables.\rmodel$vtype \u0026lt;- rep(\u0026#39;C\u0026#39;, nVars)\rmodel$lb \u0026lt;- rep(0, nVars)\rmodel$ub \u0026lt;- rep(1, nVars)\rmodel$varnames \u0026lt;- rep(\u0026#39;\u0026#39;,nVars)\rfor (w in 1:nWorkers) {\rfor (s in 1:nShifts) {\rmodel$vtype[varIdx(w,s)] = \u0026#39;B\u0026#39;\rmodel$varnames[varIdx(w,s)] = paste0(Workers[w],\u0026#39;.\u0026#39;,Shifts[s])\rif (availability[[w]][s] == 0) model$ub[varIdx(w,s)] = 0\r}\r}\r# Initialize shift slack variables\rfor (s in 1:nShifts) {\rmodel$varnames[shiftSlackIdx(s)] = paste0(\u0026#39;ShiftSlack\u0026#39;,Shifts[s])\rmodel$ub[shiftSlackIdx(s)] = Inf\r}\r# Initialize worker slack and diff variables\rfor (w in 1:nWorkers) {\rmodel$varnames[totShiftIdx(w)] = paste0(\u0026#39;TotalShifts\u0026#39;,Workers[w])\rmodel$ub[totShiftIdx(w)] = Inf\r}\r#Initialize min/max shift variables\rmodel$ub[minShiftIdx] = Inf\rmodel$varnames[minShiftIdx] = \u0026#39;MinShift\u0026#39;\rmodel$ub[maxShiftIdx] = Inf\rmodel$varnames[maxShiftIdx] = \u0026#39;MaxShift\u0026#39;\r#Initialize total slack variable\rmodel$ub[totalSlackIdx] = Inf\rmodel$varnames[totalSlackIdx] = \u0026#39;TotalSlack\u0026#39;\r# Set-up shift-requirements constraints\rmodel$A \u0026lt;- spMatrix(nShifts,nVars,\ri = c(c(mapply(rep,1:nShifts,nWorkers)),\rc(1:nShifts)),\rj = c(mapply(varIdx,1:nWorkers,\rmapply(rep,1:nShifts,nWorkers)),\rshiftSlackIdx(1:nShifts)),\rx = rep(1,nShifts * (nWorkers+1)))\rmodel$sense \u0026lt;- rep(\u0026#39;=\u0026#39;,nShifts)\rmodel$rhs \u0026lt;- shiftRequirements\rmodel$constrnames \u0026lt;- Shifts\r# Set TotalSlack equal to the sum of each shift slack\rB \u0026lt;- spMatrix(1, nVars,\ri = rep(1,nShifts+1),\rj = c(shiftSlackIdx(1:nShifts),totalSlackIdx),\rx = c(rep(1,nShifts),-1))\rmodel$A \u0026lt;- rbind(model$A, B)\rmodel$rhs \u0026lt;- c(model$rhs,0)\rmodel$sense \u0026lt;- c(model$sense,\u0026#39;=\u0026#39;)\rmodel$constrnames \u0026lt;- c(model$constrnames, \u0026#39;TotalSlack\u0026#39;)\r# Set total number of shifts for each worker\rB \u0026lt;- spMatrix(nWorkers, nVars,\ri = c(mapply(rep,1:nWorkers,nShifts),\r1:nWorkers),\rj = c(mapply(varIdx,c(mapply(rep,1:nWorkers,nShifts)),1:nShifts),\rtotShiftIdx(1:nWorkers)),\rx = c(rep(1,nShifts*nWorkers),rep(-1,nWorkers)))\rmodel$A \u0026lt;- rbind(model$A, B)\rmodel$rhs \u0026lt;- c(model$rhs,rep(0,nWorkers))\rmodel$sense \u0026lt;- c(model$sense,rep(\u0026#39;=\u0026#39;,nWorkers))\rmodel$constrnames \u0026lt;- c(model$constrnames, sprintf(\u0026#39;TotalShifts%s\u0026#39;,Workers[1:nWorkers]))\r# Set minShift / maxShift general constraints\rmodel$genconmin \u0026lt;- list(list(resvar = minShiftIdx,\rvars = c(totShiftIdx(1:nWorkers)),\rname = \u0026#39;MinShift\u0026#39;))\rmodel$genconmax \u0026lt;- list(list(resvar = maxShiftIdx,\rvars = c(totShiftIdx(1:nWorkers)),\rname = \u0026#39;MaxShift\u0026#39;))\r# Set multiobjective\rmodel$multiobj \u0026lt;- list(1:2)\rmodel$multiobj[[1]] \u0026lt;- list()\rmodel$multiobj[[1]]$objn \u0026lt;- c(rep(0,nVars))\rmodel$multiobj[[1]]$objn[totalSlackIdx] = 1\rmodel$multiobj[[1]]$priority \u0026lt;- 2\rmodel$multiobj[[1]]$weight \u0026lt;- 1\rmodel$multiobj[[1]]$abstol \u0026lt;- 2\rmodel$multiobj[[1]]$reltol \u0026lt;- 0.1\rmodel$multiobj[[1]]$name \u0026lt;- \u0026#39;TotalSlack\u0026#39;\rmodel$multiobj[[1]]$con \u0026lt;- 0.0\rmodel$multiobj[[2]] \u0026lt;- list()\rmodel$multiobj[[2]]$objn \u0026lt;- c(rep(0,nVars))\rmodel$multiobj[[2]]$objn[minShiftIdx] = -1\rmodel$multiobj[[2]]$objn[maxShiftIdx] = 1\rmodel$multiobj[[2]]$priority \u0026lt;- 1\rmodel$multiobj[[2]]$weight \u0026lt;- 1\rmodel$multiobj[[2]]$abstol \u0026lt;- 0\rmodel$multiobj[[2]]$reltol \u0026lt;- 0\rmodel$multiobj[[2]]$name \u0026lt;- \u0026#39;Fairness\u0026#39;\rmodel$multiobj[[2]]$con \u0026lt;- 0.0\r# Save initial model\rgurobi_write(model,\u0026#39;workforce5.lp\u0026#39;, env)\r## NULL\r# Optimize\rresult \u0026lt;- solveandprint(model, env)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 23 rows, 137 columns and 261 nonzeros\r## Model fingerprint: 0xd347a5b4\r## Model has 2 general constraints\r## Variable types: 25 continuous, 112 integer (112 binary)\r## Coefficient statistics:\r## Matrix range [1e+00, 1e+00]\r## Objective range [1e+00, 1e+00]\r## Bounds range [1e+00, 1e+00]\r## RHS range [2e+00, 7e+00]\r## ## ---------------------------------------------------------------------------\r## Multi-objectives: starting optimization with 2 objectives ... ## ---------------------------------------------------------------------------\r## ## Multi-objectives: applying initial presolve ...\r## ---------------------------------------------------------------------------\r## ## Presolve added 13 rows and 0 columns\r## Presolve removed 0 rows and 3 columns\r## Presolve time: 0.00s\r## Presolved: 36 rows and 134 columns\r## ---------------------------------------------------------------------------\r## ## Multi-objectives: optimize objective 1 (TotalSlack) ...\r## ---------------------------------------------------------------------------\r## ## Presolve added 8 rows and 0 columns\r## Presolve removed 0 rows and 20 columns\r## Presolve time: 0.00s\r## Presolved: 44 rows, 114 columns, 224 nonzeros\r## Presolved model has 8 SOS constraint(s)\r## Variable types: 18 continuous, 96 integer (81 binary)\r## Found heuristic solution: objective 7.0000000\r## Found heuristic solution: objective 6.0000000\r## ## Root relaxation: objective 3.000000e+00, 30 iterations, 0.00 seconds\r## ## Nodes | Current Node | Objective Bounds | Work\r## Expl Unexpl | Obj Depth IntInf | Incumbent BestBd Gap | It/Node Time\r## ## 0 0 3.00000 0 4 6.00000 3.00000 50.0% - 0s\r## H 0 0 3.0000000 3.00000 0.00% - 0s\r## 0 0 3.00000 0 4 3.00000 3.00000 0.00% - 0s\r## ## Explored 1 nodes (30 simplex iterations) in 0.01 seconds\r## Thread count was 8 (of 8 available processors)\r## ## Solution count 3: 3 6 7 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%\r## ---------------------------------------------------------------------------\r## ## Multi-objectives: optimize objective 2 (Fairness) ...\r## ---------------------------------------------------------------------------\r## ## ## Loaded user MIP start with objective 4\r## ## Presolve added 8 rows and 0 columns\r## Presolve removed 0 rows and 10 columns\r## Presolve time: 0.00s\r## Presolved: 45 rows, 124 columns, 273 nonzeros\r## Presolved model has 8 SOS constraint(s)\r## Variable types: 18 continuous, 106 integer (81 binary)\r## ## Root relaxation: objective 0.000000e+00, 60 iterations, 0.00 seconds\r## ## Nodes | Current Node | Objective Bounds | Work\r## Expl Unexpl | Obj Depth IntInf | Incumbent BestBd Gap | It/Node Time\r## ## 0 0 0.00000 0 19 4.00000 0.00000 100% - 0s\r## H 0 0 1.0000000 0.00000 100% - 0s\r## 0 0 0.14286 0 21 1.00000 0.14286 85.7% - 0s\r## 0 0 0.14286 0 18 1.00000 0.14286 85.7% - 0s\r## 0 0 0.14286 0 16 1.00000 0.14286 85.7% - 0s\r## 0 2 0.14286 0 16 1.00000 0.14286 85.7% - 0s\r## ## Explored 1213 nodes (4042 simplex iterations) in 0.16 seconds\r## Thread count was 8 (of 8 available processors)\r## ## Solution count 3: 1 1 4 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%\r## ## ---------------------------------------------------------------------------\r## Multi-objectives: solved in 0.17 seconds, solution count 5\r## ## The optimal objective is 4 1 ## Schedule:\r## Mon1 :Bob Ed Fred ## Tue2 :Amy Bob ## Wed3 :Amy Dan Gu Tobi ## Thu4 :Cathy Ed Gu ## Fri5 :Amy Bob Cathy Dan Ed ## Sat6 :Bob Dan Fred Gu Tobi ## Sun7 :Amy Cathy Ed Gu Tobi ## Mon8 :Ed Fred ## Tue9 :Cathy Fred ## Wed10 :Cathy Dan Gu ## Thu11 :Bob Cathy Gu Tobi ## Fri12 :Amy Cathy Dan Fred Tobi ## Sat13 :Amy Bob Dan Ed Fred Tobi ## Sun14 :Amy Dan Ed Fred Gu ## Workload:\r## Amy : 7 ## Bob : 6 ## Cathy : 7 ## Dan : 7 ## Ed : 7 ## Fred : 7 ## Gu : 7 ## Tobi : 6\rif (result$status != \u0026#39;OPTIMAL\u0026#39;) stop(\u0026#39;Stop now\\n\u0026#39;)\r#Clear space\rrm(model, env, availability, Shifts, Workers, shiftRequirements, result)\rAdd a new chunk by clicking the Insert Chunk button on the toolbar or by pressing Ctrl+Alt+I.\nWhen you save the notebook, an HTML file containing the code and output will be saved alongside it (click the Preview button or press Ctrl+Shift+K to preview the HTML file).\nThe preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike Knit, Preview does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.\n","date":1578268800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578268800,"objectID":"cc7bbe657f42d1a95ebcd974dd1207bf","permalink":"/post/orie/gurobi_examples2/","publishdate":"2020-01-06T00:00:00Z","relpermalink":"/post/orie/gurobi_examples2/","section":"post","summary":"This post explores how to use Gurobi to solve more advanced LPs, MIPs, and QPs.\rI have written these using Gurobi as a solver and as the mathematical formulation software.","tags":["R Markdown","QP","Gurboi","Algorithms"],"title":"Gurboi's R Examples 2","type":"post"},{"authors":null,"categories":["ORIE Basics"],"content":" \rThis post explores how to use Gurobi to solve LPs and MIPs.\rI have written these using Gurobi as a solver and as the mathematical formulation software.\rThis is a reproducible example if you have R Studio just make sure you have installed the correct packages.\nlibrary(gurobi)\r## Warning: package \u0026#39;gurobi\u0026#39; was built under R version 4.0.2\rlibrary(Matrix)\rThis example formulates and solves the following simple LP model:\r\\(max: x + 2y + 3z\\)\nsubject to\r\\(x + y \\leq 1\\)\r\\(y + z \\leq 1\\)\nmodel \u0026lt;- list()\rmodel$A \u0026lt;- matrix(c(1,1,0,0,1,1), nrow=2, byrow=T)\rmodel$obj \u0026lt;- c(1,2,3)\rmodel$modelsense \u0026lt;- \u0026#39;max\u0026#39;\rmodel$rhs \u0026lt;- c(1,1)\rmodel$sense \u0026lt;- c(\u0026#39;\u0026lt;\u0026#39;, \u0026#39;\u0026lt;\u0026#39;)\rresult \u0026lt;- gurobi(model)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 2 rows, 3 columns and 4 nonzeros\r## Model fingerprint: 0x39e2cde3\r## Coefficient statistics:\r## Matrix range [1e+00, 1e+00]\r## Objective range [1e+00, 3e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [1e+00, 1e+00]\r## Presolve removed 2 rows and 3 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 4.0000000e+00 0.000000e+00 0.000000e+00 0s\r## ## Solved in 0 iterations and 0.00 seconds\r## Optimal objective 4.000000000e+00\rprint(result$objval)\r## [1] 4\rprint(result$x)\r## [1] 1 0 1\r# Second option for A - as a sparseMatrix (using the Matrix package)...\rmodel$A \u0026lt;- spMatrix(2, 3, c(1, 1, 2, 2), c(1, 2, 2, 3), c(1, 1, 1, 1))\rparams \u0026lt;- list(Method=2, TimeLimit=100)\rresult \u0026lt;- gurobi(model, params)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 2 rows, 3 columns and 4 nonzeros\r## Model fingerprint: 0x39e2cde3\r## Coefficient statistics:\r## Matrix range [1e+00, 1e+00]\r## Objective range [1e+00, 3e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [1e+00, 1e+00]\r## Presolve removed 2 rows and 3 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 4.0000000e+00 0.000000e+00 0.000000e+00 0s\r## ## Solved in 0 iterations and 0.00 seconds\r## Optimal objective 4.000000000e+00\rprint(result$objval)\r## [1] 4\rprint(result$x)\r## [1] 1 0 1\r# Third option for A - as a sparse triplet matrix (using the slam package)...\rmodel$A \u0026lt;- simple_triplet_matrix(c(1, 1, 2, 2), c(1, 2, 2, 3), c(1, 1, 1, 1))\rparams \u0026lt;- list(Method=3, TimeLimit=100)\rresult \u0026lt;- gurobi(model, params)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 2 rows, 3 columns and 4 nonzeros\r## Model fingerprint: 0x39e2cde3\r## Coefficient statistics:\r## Matrix range [1e+00, 1e+00]\r## Objective range [1e+00, 3e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [1e+00, 1e+00]\r## Presolve removed 2 rows and 3 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 4.0000000e+00 0.000000e+00 0.000000e+00 0s\r## ## Solved in 0 iterations and 0.00 seconds\r## Optimal objective 4.000000000e+00\rprint(result$objval)\r## [1] 4\rprint(result$x)\r## [1] 1 0 1\r# Clear space\rrm(result, params, model)\rThis example formulates and solves the following simple MIP model:\r\\(max: x + y + 2 z\\)\rsubject to\r\\(x + 2 y + 3 z \\leq 4\\)\r\\(x + y \\geq 1\\)\rx, y, z binary\nmodel \u0026lt;- list()\rmodel$A \u0026lt;- matrix(c(1,2,3,1,1,0), nrow=2, ncol=3, byrow=T)\rmodel$obj \u0026lt;- c(1,1,2)\rmodel$modelsense \u0026lt;- \u0026#39;max\u0026#39;\rmodel$rhs \u0026lt;- c(4,1)\rmodel$sense \u0026lt;- c(\u0026#39;\u0026lt;\u0026#39;, \u0026#39;\u0026gt;\u0026#39;)\rmodel$vtype \u0026lt;- c(\u0026#39;B\u0026#39;,\u0026#39;B\u0026#39;,\u0026#39;B\u0026#39;)\rparams \u0026lt;- list(OutputFlag=0)\rresult \u0026lt;- gurobi(model, params)\rprint(\u0026#39;Solution:\u0026#39;)\r## [1] \u0026quot;Solution:\u0026quot;\rprint(result$objval)\r## [1] 3\rprint(result$x)\r## [1] 1 0 1\r# Clear space\rrm(model, result, params)\r# Solve the classic diet model, showing how to add constraints\r# to an existing model.\r# define primitive data\rCategories \u0026lt;- c(\u0026#39;calories\u0026#39;, \u0026#39;protein\u0026#39;, \u0026#39;fat\u0026#39;, \u0026#39;sodium\u0026#39;)\rnCategories \u0026lt;- length(Categories)\rminNutrition \u0026lt;- c( 1800 , 91 , 0 , 0 )\rmaxNutrition \u0026lt;- c( 2200 , Inf , 65 , 1779 )\rFoods \u0026lt;- c(\u0026#39;hamburger\u0026#39;, \u0026#39;chicken\u0026#39;, \u0026#39;hot dog\u0026#39;, \u0026#39;fries\u0026#39;, \u0026#39;macaroni\u0026#39;,\r\u0026#39;pizza\u0026#39;, \u0026#39;salad\u0026#39;, \u0026#39;milk\u0026#39;, \u0026#39;ice cream\u0026#39;)\rnFoods \u0026lt;- length(Foods)\rcost \u0026lt;- c(2.49, 2.89, 1.50, 1.89, 2.09, 1.99, 2.49, 0.89, 1.59)\rnutritionValues \u0026lt;- c( 410, 24, 26 , 730,\r420, 32, 10 , 1190,\r560, 20, 32 , 1800,\r380, 4, 19 , 270,\r320, 12, 10 , 930,\r320, 15, 12 , 820,\r320, 31, 12 , 1230,\r100, 8, 2.5, 125,\r330, 8, 10 , 180 )\r#Each constraint is basically the Nutrion = sum(food*nut/food)\r#Could have just made nutrition the RHS, but it works as a bounded variable because you need both upper and lower and it shrinks the amount of equations\r#Objective min cost of food\r# Build model\rmodel \u0026lt;- list()\r#spMatrix tells you where to put the non zero values in matrix i,j is the location and x are teh values for each pair\rmodel$A \u0026lt;- spMatrix(nCategories, nCategories + nFoods,\ri = c(mapply(rep,1:4,1+nFoods)),\rj = c(1, (nCategories+1):(nCategories+nFoods),\r2, (nCategories+1):(nCategories+nFoods),\r3, (nCategories+1):(nCategories+nFoods),\r4, (nCategories+1):(nCategories+nFoods) ),\rx = c(-1.0, nutritionValues[1 + nCategories*(0:(nFoods-1))],\r-1.0, nutritionValues[2 + nCategories*(0:(nFoods-1))],\r-1.0, nutritionValues[3 + nCategories*(0:(nFoods-1))],\r-1.0, nutritionValues[4 + nCategories*(0:(nFoods-1))] ))\rmodel$obj \u0026lt;- c(rep(0, nCategories), cost)\rmodel$lb \u0026lt;- c(minNutrition, rep(0, nFoods))\rmodel$ub \u0026lt;- c(maxNutrition, rep(Inf, nFoods))\rmodel$varnames \u0026lt;- c(Categories, Foods)\rmodel$rhs \u0026lt;- rep(0,nCategories)\rmodel$sense \u0026lt;- rep(\u0026#39;=\u0026#39;,nCategories)\rmodel$constrnames \u0026lt;- Categories\rmodel$modelname \u0026lt;- \u0026#39;diet\u0026#39;\rmodel$modelsense \u0026lt;- \u0026#39;min\u0026#39;\r# display results\rprintSolution \u0026lt;- function(model, res, nCategories, nFoods) {\rif (res$status == \u0026#39;OPTIMAL\u0026#39;) {\rcat(\u0026#39;\\nCost: \u0026#39;,res$objval,\u0026#39;\\nBuy:\\n\u0026#39;)\rfor (j in nCategories + 1:nFoods) {\rif (res$x[j] \u0026gt; 1e-4) {\rcat(format(model$varnames[j],justify=\u0026#39;left\u0026#39;,width=10),\u0026#39;:\u0026#39;,\rformat(res$x[j],justify=\u0026#39;right\u0026#39;,width=10,nsmall=2),\u0026#39;\\n\u0026#39;)\r}\r}\rcat(\u0026#39;\\nNutrition:\\n\u0026#39;)\rfor (j in 1:nCategories) {\rcat(format(model$varnames[j],justify=\u0026#39;left\u0026#39;,width=10),\u0026#39;:\u0026#39;,\rformat(res$x[j],justify=\u0026#39;right\u0026#39;,width=10,nsmall=2),\u0026#39;\\n\u0026#39;)\r}\r} else {\rcat(\u0026#39;No solution\\n\u0026#39;)\r}\r}\r# Optimize\rres \u0026lt;- gurobi(model)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 4 rows, 13 columns and 40 nonzeros\r## Model fingerprint: 0xff20f824\r## Coefficient statistics:\r## Matrix range [1e+00, 2e+03]\r## Objective range [9e-01, 3e+00]\r## Bounds range [7e+01, 2e+03]\r## RHS range [0e+00, 0e+00]\r## Presolve removed 0 rows and 3 columns\r## Presolve time: 0.00s\r## Presolved: 4 rows, 10 columns, 37 nonzeros\r## ## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 0.0000000e+00 1.472500e+02 0.000000e+00 0s\r## 4 1.1828861e+01 0.000000e+00 0.000000e+00 0s\r## ## Solved in 4 iterations and 0.00 seconds\r## Optimal objective 1.182886111e+01\rprintSolution(model, res, nCategories, nFoods)\r## ## Cost: 11.82886 ## Buy:\r## hamburger : 0.6045139 ## milk : 6.970139 ## ice cream : 2.591319 ## ## Nutrition:\r## calories : 1800.00 ## protein : 91.00 ## fat : 59.0559 ## sodium : 1779.00\r# Adding constraint: at most 6 servings of dairy\r# this is the matrix part of the constraint\rB \u0026lt;- spMatrix(1, nCategories + nFoods,\ri = rep(1,2),\rj = (nCategories+c(8,9)),\rx = rep(1,2))\r# append B to A\rmodel$A \u0026lt;- rbind(model$A, B)\r# extend row-related vectors\rmodel$constrnames \u0026lt;- c(model$constrnames, \u0026#39;limit_dairy\u0026#39;)\rmodel$rhs \u0026lt;- c(model$rhs, 10)\rmodel$sense \u0026lt;- c(model$sense, \u0026#39;\u0026lt;\u0026#39;)\r# Optimize\rres \u0026lt;- gurobi(model)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 5 rows, 13 columns and 42 nonzeros\r## Model fingerprint: 0xc012cadd\r## Coefficient statistics:\r## Matrix range [1e+00, 2e+03]\r## Objective range [9e-01, 3e+00]\r## Bounds range [7e+01, 2e+03]\r## RHS range [1e+01, 1e+01]\r## Presolve removed 0 rows and 3 columns\r## Presolve time: 0.00s\r## Presolved: 5 rows, 10 columns, 39 nonzeros\r## ## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 0.0000000e+00 1.472500e+02 0.000000e+00 0s\r## 4 1.1828861e+01 0.000000e+00 0.000000e+00 0s\r## ## Solved in 4 iterations and 0.00 seconds\r## Optimal objective 1.182886111e+01\rprintSolution(model, res, nCategories, nFoods)\r## ## Cost: 11.82886 ## Buy:\r## hamburger : 0.6045139 ## milk : 6.970139 ## ice cream : 2.591319 ## ## Nutrition:\r## calories : 1800.00 ## protein : 91.00 ## fat : 59.0559 ## sodium : 1779.00\r# Clear space\r#rm(res, model)\r#Facility Location Problem (MIP)\r# define primitive data\rnPlants \u0026lt;- 5\rnWarehouses \u0026lt;- 4\r# Warehouse demand in thousands of units\rDemand \u0026lt;- c(15, 18, 14, 20)\r# Plant capacity in thousands of units Capacity \u0026lt;- c(20, 22, 17, 19, 18)\r# Fixed costs for each plant FixedCosts \u0026lt;- c( 12000, 15000, 17000, 13000, 16000)\r# Transportation costs per thousand units TransCosts \u0026lt;- c(4000, 2000, 3000, 2500, 4500,\r2500, 2600, 3400, 3000, 4000,\r1200, 1800, 2600, 4100, 3000,\r2200, 2600, 3100, 3700, 3200 )\rflowidx \u0026lt;- function(w, p) {nPlants * (w-1) + p}\r# Build model\rmodel \u0026lt;- list()\rmodel$modelname \u0026lt;- \u0026#39;facility\u0026#39;\rmodel$modelsense \u0026lt;- \u0026#39;min\u0026#39;\r# initialize data for variables\rmodel$lb \u0026lt;- 0\rmodel$ub \u0026lt;- c(rep(1, nPlants), rep(Inf, nPlants * nWarehouses))\rmodel$vtype \u0026lt;- c(rep(\u0026#39;B\u0026#39;, nPlants), rep(\u0026#39;C\u0026#39;, nPlants * nWarehouses))\rmodel$obj \u0026lt;- c(FixedCosts, TransCosts)\rmodel$varnames \u0026lt;- c(paste0(rep(\u0026#39;Open\u0026#39;,nPlants),1:nPlants),\rsprintf(\u0026#39;Trans%d,%d\u0026#39;,\rc(mapply(rep,1:nWarehouses,nPlants)),\r1:nPlants))\r# build production constraint matrix\r#uses custom functions to fill out matrix, a bit out my wheelhouse\rA1 \u0026lt;- spMatrix(nPlants, nPlants, i = c(1:nPlants), j = (1:nPlants), x = -Capacity)\rA2 \u0026lt;- spMatrix(nPlants, nPlants * nWarehouses,\ri = c(mapply(rep, 1:nPlants, nWarehouses)),\rj = mapply(flowidx,1:nWarehouses,c(mapply(rep,1:nPlants,nWarehouses))),\rx = rep(1, nWarehouses * nPlants))\rA3 \u0026lt;- spMatrix(nWarehouses, nPlants)\rA4 \u0026lt;- spMatrix(nWarehouses, nPlants * nWarehouses,\ri = c(mapply(rep, 1:nWarehouses, nPlants)),\rj = mapply(flowidx,c(mapply(rep,1:nWarehouses,nPlants)),1:nPlants),\rx = rep(1, nPlants * nWarehouses))\rmodel$A \u0026lt;- rbind(cbind(A1, A2), cbind(A3, A4))\rmodel$rhs \u0026lt;- c(rep(0, nPlants), Demand)\rmodel$sense \u0026lt;- c(rep(\u0026#39;\u0026lt;\u0026#39;, nPlants), rep(\u0026#39;=\u0026#39;, nWarehouses))\rmodel$constrnames \u0026lt;- c(sprintf(\u0026#39;Capacity%d\u0026#39;,1:nPlants),\rsprintf(\u0026#39;Demand%d\u0026#39;,1:nWarehouses))\r# Save model\rgurobi_write(model,\u0026#39;facilityR.lp\u0026#39;)\r## NULL\r# Guess at the starting point: close the plant with the highest fixed\r# costs; open all others first open all plants\rmodel$start \u0026lt;- c(rep(1,nPlants),rep(NA, nPlants * nWarehouses))\r# find most expensive plant, and close it in mipstart\rcat(\u0026#39;Initial guess:\\n\u0026#39;)\r## Initial guess:\rworstidx \u0026lt;- which.max(FixedCosts)\rmodel$start[worstidx] \u0026lt;- 0\rcat(\u0026#39;Closing plant\u0026#39;,worstidx,\u0026#39;\\n\u0026#39;)\r## Closing plant 3\r# set parameters\rparams \u0026lt;- list()\rparams$method \u0026lt;- 2\r# Optimize\rres \u0026lt;- gurobi(model, params)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 9 rows, 25 columns and 45 nonzeros\r## Model fingerprint: 0x36b45dc0\r## Variable types: 20 continuous, 5 integer (5 binary)\r## Coefficient statistics:\r## Matrix range [1e+00, 2e+01]\r## Objective range [1e+03, 2e+04]\r## Bounds range [1e+00, 1e+00]\r## RHS range [1e+01, 2e+01]\r## ## User MIP start produced solution with objective 210500 (0.01s)\r## Loaded user MIP start with objective 210500\r## ## Presolve time: 0.00s\r## Presolved: 9 rows, 25 columns, 45 nonzeros\r## Variable types: 20 continuous, 5 integer (5 binary)\r## Root barrier log...\r## ## Ordering time: 0.00s\r## ## Barrier statistics:\r## AA\u0026#39; NZ : 2.000e+01\r## Factor NZ : 4.500e+01\r## Factor Ops : 2.850e+02 (less than 1 second per iteration)\r## Threads : 1\r## ## Objective Residual\r## Iter Primal Dual Primal Dual Compl Time\r## 0 7.94290841e+05 -2.24842916e+05 7.25e+00 3.75e+03 2.69e+04 0s\r## 1 2.34432856e+05 7.59319096e+04 1.78e-15 3.64e-12 3.17e+03 0s\r## 2 2.10232015e+05 1.89880475e+05 8.88e-16 4.01e-12 4.07e+02 0s\r## 3 2.00964341e+05 1.98582137e+05 9.77e-15 2.79e-12 4.76e+01 0s\r## 4 1.99878036e+05 1.99804970e+05 2.46e-13 3.19e-12 1.46e+00 0s\r## 5 1.99833638e+05 1.99832960e+05 3.14e-13 1.82e-12 1.36e-02 0s\r## 6 1.99833333e+05 1.99833333e+05 1.47e-14 2.86e-12 1.39e-08 0s\r## 7 1.99833333e+05 1.99833333e+05 7.10e-15 2.73e-12 1.39e-14 0s\r## ## Barrier solved model in 7 iterations and 0.01 seconds\r## Optimal objective 1.99833333e+05\r## ## ## Root relaxation: objective 1.998333e+05, 6 iterations, 0.00 seconds\r## ## Nodes | Current Node | Objective Bounds | Work\r## Expl Unexpl | Obj Depth IntInf | Incumbent BestBd Gap | It/Node Time\r## ## 0 0 199833.333 0 1 210500.000 199833.333 5.07% - 0s\r## 0 0 200252.941 0 1 210500.000 200252.941 4.87% - 0s\r## 0 0 210500.000 0 1 210500.000 210500.000 0.00% - 0s\r## ## Cutting planes:\r## Flow cover: 3\r## ## Explored 1 nodes (11 simplex iterations) in 0.01 seconds\r## Thread count was 8 (of 8 available processors)\r## ## Solution count 1: 210500 ## ## Optimal solution found (tolerance 1.00e-04)\r## Best objective 2.105000000000e+05, best bound 2.105000000000e+05, gap 0.0000%\r# Print solution\rif (res$status == \u0026#39;OPTIMAL\u0026#39;) {\rcat(\u0026#39;\\nTotal Costs:\u0026#39;,res$objval,\u0026#39;\\nsolution:\\n\u0026#39;)\rcat(\u0026#39;Facilities:\u0026#39;, model$varnames[which(res$x[1:nPlants]\u0026gt;1e-5)], \u0026#39;\\n\u0026#39;)\ractive \u0026lt;- nPlants + which(res$x[(nPlants+1):(nPlants*(nWarehouses+1))] \u0026gt; 1e-5)\rcat(\u0026#39;Flows: \u0026#39;)\rcat(sprintf(\u0026#39;%s=%g \u0026#39;,model$varnames[active], res$x[active]), \u0026#39;\\n\u0026#39;)\rrm(active)\r} else {\rcat(\u0026#39;No solution\\n\u0026#39;)\r}\r## ## Total Costs: 210500 ## solution:\r## Facilities: Open1 Open2 Open4 Open5 ## Flows: Trans1,2=14 Trans1,4=1 Trans2,4=18 Trans3,1=14 Trans4,1=6 Trans4,2=8 Trans4,5=6\r# Clear space\rrm(res, model, params, A1, A2, A3, A4)\r# Assign workers to shifts; each worker may or may not be available on a\r# particular day. If the problem cannot be solved, use IIS iteratively to\r# find all conflicting constraints.\r# Function to display results\rprintsolution \u0026lt;- function(result) {\rif(result$status == \u0026#39;OPTIMAL\u0026#39;) {\rcat(\u0026#39;The optimal objective is\u0026#39;,result$objval,\u0026#39;\\n\u0026#39;)\rcat(\u0026#39;Schedule:\\n\u0026#39;)\rfor (s in 1:nShifts) {\rcat(\u0026#39;\\t\u0026#39;,Shifts[s],\u0026#39;:\u0026#39;)\rfor (w in 1:nWorkers) {\rif (result$x[varIdx(w,s)] \u0026gt; 0.9) cat(Workers[w],\u0026#39; \u0026#39;)\r}\rcat(\u0026#39;\\n\u0026#39;)\r}\r}\r}\r# define data\rnShifts \u0026lt;- 14\rnWorkers \u0026lt;- 7\rnVars \u0026lt;- nShifts * nWorkers\rvarIdx \u0026lt;- function(w,s) {s+(w-1)*nShifts}\rShifts \u0026lt;- c(\u0026#39;Mon1\u0026#39;, \u0026#39;Tue2\u0026#39;, \u0026#39;Wed3\u0026#39;, \u0026#39;Thu4\u0026#39;, \u0026#39;Fri5\u0026#39;, \u0026#39;Sat6\u0026#39;, \u0026#39;Sun7\u0026#39;,\r\u0026#39;Mon8\u0026#39;, \u0026#39;Tue9\u0026#39;, \u0026#39;Wed10\u0026#39;, \u0026#39;Thu11\u0026#39;, \u0026#39;Fri12\u0026#39;, \u0026#39;Sat13\u0026#39;, \u0026#39;Sun14\u0026#39;)\rWorkers \u0026lt;- c( \u0026#39;Amy\u0026#39;, \u0026#39;Bob\u0026#39;, \u0026#39;Cathy\u0026#39;, \u0026#39;Dan\u0026#39;, \u0026#39;Ed\u0026#39;, \u0026#39;Fred\u0026#39;, \u0026#39;Gu\u0026#39; )\rpay \u0026lt;- c(10, 12, 10, 8, 8, 9, 11 )\rshiftRequirements \u0026lt;- c(3, 2, 4, 4, 5, 6, 5, 2, 2, 3, 4, 6, 7, 5 )\ravailability \u0026lt;- list( c( 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1 ),\rc( 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0 ),\rc( 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 ),\rc( 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1 ),\rc( 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1 ),\rc( 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1 ),\rc( 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ) )\r# Set-up environment\renv \u0026lt;- list()\renv$logfile \u0026lt;- \u0026#39;workforce2.log\u0026#39;\r# Build model\rmodel \u0026lt;- list()\rmodel$modelname \u0026lt;- \u0026#39;workforce2\u0026#39;\rmodel$modelsense \u0026lt;- \u0026#39;min\u0026#39;\r# Initialize assignment decision variables:\r# x[w][s] == 1 if worker w is assigned\r# to shift s. Since an assignment model always produces integer\r# solutions, we use continuous variables and solve as an LP.\rmodel$lb \u0026lt;- 0\rmodel$ub \u0026lt;- rep(1, nVars)\rmodel$obj \u0026lt;- rep(0, nVars)\rmodel$varnames \u0026lt;- rep(\u0026#39;\u0026#39;,nVars)\rfor (w in 1:nWorkers) {\rfor (s in 1:nShifts) {\rmodel$varnames[varIdx(w,s)] = paste0(Workers[w],\u0026#39;.\u0026#39;,Shifts[s])\rmodel$obj[varIdx(w,s)] = pay[w]\rif (availability[[w]][s] == 0) model$ub[varIdx(w,s)] = 0\r}\r}\r# Set-up shift-requirements constraints\rmodel$A \u0026lt;- spMatrix(nShifts,nVars,\ri = c(mapply(rep,1:nShifts,nWorkers)),\rj = mapply(varIdx,1:nWorkers,\rmapply(rep,1:nShifts,nWorkers)),\rx = rep(1,nShifts * nWorkers))\rmodel$sense \u0026lt;- rep(\u0026#39;=\u0026#39;,nShifts)\rmodel$rhs \u0026lt;- shiftRequirements\rmodel$constrnames \u0026lt;- Shifts\r# Save model\rgurobi_write(model,\u0026#39;workforce2.lp\u0026#39;, env)\r## NULL\r# Optimize\rresult \u0026lt;- gurobi(model, env = env)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 14 rows, 98 columns and 98 nonzeros\r## Model fingerprint: 0xbddc1063\r## Coefficient statistics:\r## Matrix range [1e+00, 1e+00]\r## Objective range [8e+00, 1e+01]\r## Bounds range [1e+00, 1e+00]\r## RHS range [2e+00, 7e+00]\r## Presolve removed 1 rows and 60 columns\r## Presolve time: 0.00s\r## ## Solved in 0 iterations and 0.00 seconds\r## Infeasible model\r# Display results\rif (result$status == \u0026#39;OPTIMAL\u0026#39;) {\r# The code may enter here if you change some of the data... otherwise\r# this will never be executed.\rprintsolution(result);\r} else if (result$status == \u0026#39;INFEASIBLE\u0026#39;) {\r# We will loop until we reduce a model that can be solved\rnumremoved \u0026lt;- 0 while(result$status == \u0026#39;INFEASIBLE\u0026#39;) {\riis \u0026lt;- gurobi_iis(model, env = env)\rkeep \u0026lt;- (!iis$Arows)\rcat(\u0026#39;Removing rows\u0026#39;,model$constrnames[iis$Arows],\u0026#39;...\\n\u0026#39;)\rmodel$A \u0026lt;- model$A[keep,,drop = FALSE]\rmodel$sense \u0026lt;- model$sense[keep]\rmodel$rhs \u0026lt;- model$rhs[keep]\rmodel$constrnames \u0026lt;- model$constrnames[keep]\rnumremoved \u0026lt;- numremoved + 1\rgurobi_write(model, paste0(\u0026#39;workforce2-\u0026#39;,numremoved,\u0026#39;.lp\u0026#39;), env)\rresult \u0026lt;- gurobi(model, env = env)\r}\rprintsolution(result)\rrm(iis)\r} else {\r# Just to handle user interruptions or other problems\rcat(\u0026#39;Unexpected status\u0026#39;,result$status,\u0026#39;\\nEnding now\\n\u0026#39;)\r}\r## ## IIS computed: 1 constraints and 7 bounds\r## IIS runtime: 0.00 seconds\r## Removing rows Thu4 ...\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 13 rows, 98 columns and 91 nonzeros\r## Model fingerprint: 0x75a77c30\r## Coefficient statistics:\r## Matrix range [1e+00, 1e+00]\r## Objective range [8e+00, 1e+01]\r## Bounds range [1e+00, 1e+00]\r## RHS range [2e+00, 7e+00]\r## Presolve removed 1 rows and 61 columns\r## Presolve time: 0.00s\r## ## Solved in 0 iterations and 0.00 seconds\r## Infeasible model\r## ## IIS computed: 1 constraints and 7 bounds\r## IIS runtime: 0.00 seconds\r## Removing rows Sat6 ...\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 12 rows, 98 columns and 84 nonzeros\r## Model fingerprint: 0x529973cc\r## Coefficient statistics:\r## Matrix range [1e+00, 1e+00]\r## Objective range [8e+00, 1e+01]\r## Bounds range [1e+00, 1e+00]\r## RHS range [2e+00, 7e+00]\r## Presolve removed 1 rows and 62 columns\r## Presolve time: 0.00s\r## ## Solved in 0 iterations and 0.00 seconds\r## Infeasible model\r## ## IIS computed: 1 constraints and 7 bounds\r## IIS runtime: 0.00 seconds\r## Removing rows Sun7 ...\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 11 rows, 98 columns and 77 nonzeros\r## Model fingerprint: 0x0cbf4dba\r## Coefficient statistics:\r## Matrix range [1e+00, 1e+00]\r## Objective range [8e+00, 1e+01]\r## Bounds range [1e+00, 1e+00]\r## RHS range [2e+00, 7e+00]\r## Presolve removed 1 rows and 63 columns\r## Presolve time: 0.00s\r## ## Solved in 0 iterations and 0.00 seconds\r## Infeasible model\r## ## IIS computed: 1 constraints and 7 bounds\r## IIS runtime: 0.00 seconds\r## Removing rows Fri12 ...\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 10 rows, 98 columns and 70 nonzeros\r## Model fingerprint: 0x02f1ed80\r## Coefficient statistics:\r## Matrix range [1e+00, 1e+00]\r## Objective range [8e+00, 1e+01]\r## Bounds range [1e+00, 1e+00]\r## RHS range [2e+00, 7e+00]\r## Presolve removed 10 rows and 98 columns\r## Presolve time: 0.00s\r## Presolve: All rows and columns removed\r## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 3.3500000e+02 0.000000e+00 1.480000e+02 0s\r## Extra 5 simplex iterations after uncrush\r## 5 3.3500000e+02 0.000000e+00 0.000000e+00 0s\r## ## Solved in 5 iterations and 0.00 seconds\r## Optimal objective 3.350000000e+02\r## The optimal objective is 335 ## Schedule:\r## Mon1 :Ed Fred Gu ## Tue2 :Dan Ed ## Wed3 :Amy Dan Ed Fred ## Thu4 :\r## Fri5 :Amy Cathy Dan Ed Gu ## Sat6 :\r## Sun7 :\r## Mon8 :Dan Ed ## Tue9 :Dan Ed ## Wed10 :Amy Cathy Dan ## Thu11 :Amy Cathy Dan Ed ## Fri12 :\r## Sat13 :Amy Bob Cathy Dan Ed Fred Gu ## Sun14 :Amy Cathy Dan Ed Fred\r#Clear space\rrm(model, env, availability, Shifts, Workers, pay, shiftRequirements, result)\r# Assign workers to shifts; each worker may or may not be available on a\r# particular day. If the problem cannot be solved, relax the model\r# to determine which constraints cannot be satisfied, and how much\r# they need to be relaxed.\r# Function to display results\rprintsolution \u0026lt;- function(result) {\rif(result$status == \u0026#39;OPTIMAL\u0026#39;) {\rcat(\u0026#39;The optimal objective is\u0026#39;,result$objval,\u0026#39;\\n\u0026#39;)\rcat(\u0026#39;Schedule:\\n\u0026#39;)\rfor (s in 1:nShifts) {\rcat(\u0026#39;\\t\u0026#39;,Shifts[s],\u0026#39;:\u0026#39;)\rfor (w in 1:nWorkers) {\rif (result$x[varIdx(w,s)] \u0026gt; 0.9) cat(Workers[w],\u0026#39; \u0026#39;)\r}\rcat(\u0026#39;\\n\u0026#39;)\r}\r}\r}\r# define data\rnShifts \u0026lt;- 14\rnWorkers \u0026lt;- 7\rnVars \u0026lt;- nShifts * nWorkers\rvarIdx \u0026lt;- function(w,s) {s+(w-1)*nShifts}\rShifts \u0026lt;- c(\u0026#39;Mon1\u0026#39;, \u0026#39;Tue2\u0026#39;, \u0026#39;Wed3\u0026#39;, \u0026#39;Thu4\u0026#39;, \u0026#39;Fri5\u0026#39;, \u0026#39;Sat6\u0026#39;, \u0026#39;Sun7\u0026#39;,\r\u0026#39;Mon8\u0026#39;, \u0026#39;Tue9\u0026#39;, \u0026#39;Wed10\u0026#39;, \u0026#39;Thu11\u0026#39;, \u0026#39;Fri12\u0026#39;, \u0026#39;Sat13\u0026#39;, \u0026#39;Sun14\u0026#39;)\rWorkers \u0026lt;- c( \u0026#39;Amy\u0026#39;, \u0026#39;Bob\u0026#39;, \u0026#39;Cathy\u0026#39;, \u0026#39;Dan\u0026#39;, \u0026#39;Ed\u0026#39;, \u0026#39;Fred\u0026#39;, \u0026#39;Gu\u0026#39; )\rpay \u0026lt;- c(10, 12, 10, 8, 8, 9, 11 )\rshiftRequirements \u0026lt;- c(3, 2, 4, 4, 5, 6, 5, 2, 2, 3, 4, 6, 7, 5 )\ravailability \u0026lt;- list( c( 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1 ),\rc( 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0 ),\rc( 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 ),\rc( 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1 ),\rc( 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1 ),\rc( 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1 ),\rc( 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ) )\r# Set-up environment\renv \u0026lt;- list()\renv$logfile \u0026lt;- \u0026#39;workforce3.log\u0026#39;\r# Build model\rmodel \u0026lt;- list()\rmodel$modelname \u0026lt;- \u0026#39;workforce3\u0026#39;\rmodel$modelsense \u0026lt;- \u0026#39;min\u0026#39;\r# Initialize assignment decision variables:\r# x[w][s] == 1 if worker w is assigned\r# to shift s. Since an assignment model always produces integer\r# solutions, we use continuous variables and solve as an LP.\rmodel$lb \u0026lt;- 0\rmodel$ub \u0026lt;- rep(1, nVars)\rmodel$obj \u0026lt;- rep(0, nVars)\rmodel$varnames \u0026lt;- rep(\u0026#39;\u0026#39;,nVars)\rfor (w in 1:nWorkers) {\rfor (s in 1:nShifts) {\rmodel$varnames[varIdx(w,s)] = paste0(Workers[w],\u0026#39;.\u0026#39;,Shifts[s])\rmodel$obj[varIdx(w,s)] = pay[w]\rif (availability[[w]][s] == 0) model$ub[varIdx(w,s)] = 0\r}\r}\r# Set-up shift-requirements constraints\rmodel$A \u0026lt;- spMatrix(nShifts,nVars,\ri = c(mapply(rep,1:nShifts,nWorkers)),\rj = mapply(varIdx,1:nWorkers,\rmapply(rep,1:nShifts,nWorkers)),\rx = rep(1,nShifts * nWorkers))\rmodel$sense \u0026lt;- rep(\u0026#39;=\u0026#39;,nShifts)\rmodel$rhs \u0026lt;- shiftRequirements\rmodel$constrnames \u0026lt;- Shifts\r# Save model\rgurobi_write(model,\u0026#39;workforce3.lp\u0026#39;, env)\r## NULL\r# Optimize\rresult \u0026lt;- gurobi(model, env = env)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 14 rows, 98 columns and 98 nonzeros\r## Model fingerprint: 0xbddc1063\r## Coefficient statistics:\r## Matrix range [1e+00, 1e+00]\r## Objective range [8e+00, 1e+01]\r## Bounds range [1e+00, 1e+00]\r## RHS range [2e+00, 7e+00]\r## Presolve removed 1 rows and 60 columns\r## Presolve time: 0.00s\r## ## Solved in 0 iterations and 0.00 seconds\r## Infeasible model\r# Display results\rif (result$status == \u0026#39;OPTIMAL\u0026#39;) {\r# The code may enter here if you change some of the data... otherwise\r# this will never be executed.\rprintsolution(result);\r} else if (result$status == \u0026#39;INFEASIBLE\u0026#39;) {\r# Use gurobi_feasrelax to find out which copnstraints should be relaxed\r# and by how much to make the problem feasible.\rpenalties \u0026lt;- list()\rpenalties$lb \u0026lt;- Inf\rpenalties$ub \u0026lt;- Inf\rpenalties$rhs \u0026lt;- rep(1,length(model$rhs))\rfeasrelax \u0026lt;- gurobi_feasrelax(model, 0, FALSE, penalties, env = env)\rresult \u0026lt;- gurobi(feasrelax$model, env = env)\rif (result$status == \u0026#39;OPTIMAL\u0026#39;) {\rprintsolution(result)\rcat(\u0026#39;Slack values:\\n\u0026#39;)\rfor (j in (nVars+1):length(result$x)) {\rif(result$x[j] \u0026gt; 0.1)\rcat(\u0026#39;\\t\u0026#39;,feasrelax$model$varnames[j],result$x[j],\u0026#39;\\n\u0026#39;)\r}\r} else {\rcat(\u0026#39;Unexpected status\u0026#39;,result$status,\u0026#39;\\nEnding now\\n\u0026#39;)\r}\rrm(penalties, feasrelax)\r} else {\r# Just to handle user interruptions or other problems\rcat(\u0026#39;Unexpected status\u0026#39;,result$status,\u0026#39;\\nEnding now\\n\u0026#39;)\r}\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 14 rows, 126 columns and 126 nonzeros\r## Model fingerprint: 0xa5484b98\r## Coefficient statistics:\r## Matrix range [1e+00, 1e+00]\r## Objective range [1e+00, 1e+00]\r## Bounds range [1e+00, 1e+00]\r## RHS range [2e+00, 7e+00]\r## Presolve removed 5 rows and 99 columns\r## Presolve time: 0.00s\r## Presolved: 9 rows, 27 columns, 27 nonzeros\r## ## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 6.0000000e+00 0.000000e+00 0.000000e+00 0s\r## 0 6.0000000e+00 0.000000e+00 0.000000e+00 0s\r## ## Solved in 0 iterations and 0.00 seconds\r## Optimal objective 6.000000000e+00\r## The optimal objective is 6 ## Schedule:\r## Mon1 :Ed Fred Gu ## Tue2 :Bob Ed ## Wed3 :Amy Cathy Fred Gu ## Thu4 :Cathy Ed ## Fri5 :Amy Cathy Dan Ed Gu ## Sat6 :Bob Dan Fred Gu ## Sun7 :Amy Cathy Ed Gu ## Mon8 :Dan Ed ## Tue9 :Dan Gu ## Wed10 :Amy Dan Gu ## Thu11 :Amy Bob Ed Gu ## Fri12 :Amy Cathy Dan Fred Gu ## Sat13 :Amy Bob Cathy Dan Ed Fred Gu ## Sun14 :Amy Cathy Ed Fred Gu ## Slack values:\r## ArtP_Thu4 2 ## ArtP_Sat6 2 ## ArtP_Sun7 1 ## ArtP_Fri12 1\r#Clear space\rrm(model, env, availability, Shifts, Workers, pay, shiftRequirements, result)\rAdd a new chunk by clicking the Insert Chunk button on the toolbar or by pressing Ctrl+Alt+I.\nWhen you save the notebook, an HTML file containing the code and output will be saved alongside it (click the Preview button or press Ctrl+Shift+K to preview the HTML file).\nThe preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike Knit, Preview does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.\n","date":1578182400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578182400,"objectID":"1d2c3a92ab81e4bf236792b30618a378","permalink":"/post/orie/gurobi_examples/","publishdate":"2020-01-05T00:00:00Z","relpermalink":"/post/orie/gurobi_examples/","section":"post","summary":"This post explores how to use Gurobi to solve LPs and MIPs.\rI have written these using Gurobi as a solver and as the mathematical formulation software.\rThis is a reproducible example if you have R Studio just make sure you have installed the correct packages.","tags":["R Markdown","LP","MIP","Gurobi"],"title":"Gurobi Basic LP/MIP Examples","type":"post"},{"authors":null,"categories":["ORIE Basics"],"content":"\r\rThis post explores how to markov chains work and how to visulaize them in R.\rI use a R package specifically designed to visualize markov chains.\rI also represent these markov chains using tables.\rThis is a reproducible example if you have R Studio just make sure you have installed the correct packages.\nlibrary(markovchain)\r## Warning: package \u0026#39;markovchain\u0026#39; was built under R version 4.0.2\rlibrary(diagram)\r#Allows the use of exponential operators in matrix\rlibrary(expm)\r## Warning: package \u0026#39;expm\u0026#39; was built under R version 4.0.2\r#library(matlib)\r# A good article about Markov Chain Monte Carlo Methods https://towardsdatascience.com/a-zero-math-introduction-to-markov-chain-monte-carlo-methods-dcba889e0c50\r# A Simple Example from https://www.analyticsvidhya.com/blog/2014/07/markov-chain-simplified/\r# Creating a transition matrix\rtrans_mat \u0026lt;- matrix(c(0.7,0.3,0.1,0.9),nrow = 2, byrow = TRUE)\rtrans_mat\r## [,1] [,2]\r## [1,] 0.7 0.3\r## [2,] 0.1 0.9\r# create the Discrete Time Markov Chain\rdisc_trans \u0026lt;- new(\u0026quot;markovchain\u0026quot;,transitionMatrix=trans_mat, states=c(\u0026quot;Pepsi\u0026quot;,\u0026quot;Coke\u0026quot;), name=\u0026quot;MC 1\u0026quot;) mcDF \u0026lt;- as(disc_trans,\u0026quot;data.frame\u0026quot;)\rmcDF\r## t0 t1 prob\r## 1 Pepsi Pepsi 0.7\r## 2 Pepsi Coke 0.3\r## 3 Coke Pepsi 0.1\r## 4 Coke Coke 0.9\rdisc_trans\r## MC 1 ## A 2 - dimensional discrete Markov Chain defined by the following states: ## Pepsi, Coke ## The transition matrix (by rows) is defined as follows: ## Pepsi Coke\r## Pepsi 0.7 0.3\r## Coke 0.1 0.9\rplot(disc_trans)\r#Market Share after one month\rCurrent_state \u0026lt;- c(0.55,0.45)\rsteps \u0026lt;- 1\rfinalState \u0026lt;- Current_state*disc_trans^steps #using power operator\rfinalState\r## Pepsi Coke\r## [1,] 0.43 0.57\r#Market Share after two month\rCurrent_state \u0026lt;- c(0.55,0.45)\rsteps \u0026lt;- 2\rfinalState \u0026lt;- Current_state*disc_trans^steps #using power operator\rfinalState\r## Pepsi Coke\r## [1,] 0.358 0.642\r#Markov Chain Statistical Operations\rsteadyStates(disc_trans)\r## Pepsi Coke\r## [1,] 0.25 0.75\rmeanFirstPassageTime(disc_trans)\r## Pepsi Coke\r## Pepsi 0 3.333333\r## Coke 10 0.000000\rmeanRecurrenceTime(disc_trans)\r## Pepsi Coke ## 4.000000 1.333333\rhittingProbabilities(disc_trans)\r## Pepsi Coke\r## Pepsi 1 1\r## Coke 1 1\rmeanAbsorptionTime(disc_trans)\r## named numeric(0)\r#absorptionProbabilities(disc_trans)\rperiod(disc_trans)\r## [1] 1\rsummary(disc_trans)\r## MC 1 Markov chain that is composed by: ## Closed classes: ## Pepsi Coke ## Recurrent classes: ## {Pepsi,Coke}\r## Transient classes: ## NONE ## The Markov chain is irreducible ## The absorbing states are: NONE\r#Manually Calculating Markov Chains\r#https://www.probabilitycourse.com/chapter11/11_2_1_introduction.php\r#Chapman-Kolmogorov Equation P^(n) = P^n\r#p_ij^(m+n) = P(X_m+n = j | X_0 = i) = sum(p_ik^(m)*p_kj^(n))\r#Probabilty Space after 5 steps\rsteps \u0026lt;- 5\rCurrent_state%*%(trans_mat%^%steps)\r## [,1] [,2]\r## [1,] 0.273328 0.726672\r#Mean Return and Mean Hitting Times using Recursive Equations\r#r_l = 1 + sum(t_k*p_lk)\r#t_l = 0; t_k = 1 + sum(t_j*p_kj)\r#Given X_0 = Coke time until pepsi first time, t_pepsi = 0\r# t_coke = 1 + 1/10*t_pepsi + 9/10t_coke\rt_coke \u0026lt;- solve(1/10,1)\r#r_pepsi = 1 + 7/10*t_pepsi + 3/10*t_coke\rr_pepsi \u0026lt;- 1 + 3/10*t_coke\rmeanFirstPassageTime(disc_trans)\r## Pepsi Coke\r## Pepsi 0 3.333333\r## Coke 10 0.000000\rt_coke\r## [1] 10\rmeanRecurrenceTime(disc_trans)\r## Pepsi Coke ## 4.000000 1.333333\rr_pepsi\r## [1] 4\r#Steady State\r#Stationary Distribtution pi = pi*P, sum(pi) = 1 and if irreducible and aperiodic pi_j = lim(n\u0026gt;inf)P(X_n =j | X_0 = i)\r#pi_p = 7/10pi_p+1/10pi_c; pi_c = 3/10pi_p + 9/10pi_c, pi_c+pi_p =1\rA \u0026lt;- matrix(c(-3/10,1/10,3/10,-1/10,1,1), nrow =3, byrow = TRUE )\rB \u0026lt;- c(0,0,1)\rsteadyStates(disc_trans)\r## Pepsi Coke\r## [1,] 0.25 0.75\r# Solve(A,B)\r#rm(Current_state, disc_trans, finalState,steps,trans_mat)\r#Continous Time Markov Chains\renergyStates \u0026lt;- c(\u0026quot;sigma\u0026quot;, \u0026quot;sigma_star\u0026quot;)\r#Must produce generator matrix from a transistion probablity matrix\rQ \u0026lt;- expm::logm(disc_trans@transitionMatrix,method=\u0026#39;Eigen\u0026#39;)\rgen \u0026lt;- matrix(data = c(-3, 3, 1, -1), nrow = 2, byrow = TRUE, dimnames = list(energyStates, energyStates))\rmolecularCTMC \u0026lt;- new(\u0026quot;ctmc\u0026quot;, states = energyStates, byrow = TRUE, generator = gen, name = \u0026quot;Molecular Transition Model\u0026quot;)\rstatesDist \u0026lt;- c(0.8, 0.2)\rrctmc(n = 3, ctmc = molecularCTMC, initDist = statesDist, out.type = \u0026quot;df\u0026quot;, include.T0 = FALSE, T = 4)\r## states time\r## 1 sigma 0.490779113024473\r## 2 sigma_star 0.893907884742721\r## 3 sigma 1.83824493102602\rsteadyStates(molecularCTMC)\r## sigma sigma_star\r## [1,] 0.25 0.75\r#Q-Learning with Liars Dice\r#http://gradientdescending.com/q-learning-example-with-liars-dice-in-r/\r# play a round of liars dice\rliars.dice.round \u0026lt;- function(players, control, player.dice.count, agents, game.states, reward, Q.mat, a = 1, verbose = 1){\r# set array for recording results\ry.ctrl = c(); y.state = c(); y.action = c()\r# roll the dice for each player\rif(verbose \u0026gt; 0) cat(\u0026quot;\\n\\n\u0026quot;)\rrolls \u0026lt;- lapply(1:players, function(x) sort(sample(1:6, player.dice.count[[x]], replace = TRUE)))\rif(verbose \u0026gt; 1) lapply(rolls, function(x) cat(\u0026quot;dice: \u0026quot;, x, \u0026quot;\\n\u0026quot;))\rtotal.dice \u0026lt;- sum(unlist(player.dice.count))\r# set penalty\rpenalty \u0026lt;- sapply(1:players, function(x) 0, simplify = FALSE)\r# print dice blocks\rif(verbose \u0026gt; 0) Dice(rolls[[1]])\r# set up roll table\rroll.table \u0026lt;- roll.table.fn(rolls)\r# initial bid\rif(verbose \u0026gt; 0) cat(\u0026quot;place first bid\\nPlayer\u0026quot;, control, \u0026quot;has control\\n\u0026quot;)\rif(control == a){\rdice.value \u0026lt;- set.dice.value(\u0026quot;dice value: \u0026quot;, 6)\rdice.quantity \u0026lt;- set.dice.value(\u0026quot;quantity; \u0026quot;, sum(roll.table))\r}else{\r# agent plays\rp1.state \u0026lt;- which(game.states$total == total.dice \u0026amp; game.states$p1 == player.dice.count[[1]] \u0026amp; game.states$prob_cat == total.dice)\rpars \u0026lt;- list(dice = rolls[[control]], total.dice = total.dice, dice.value = NULL, dice.quantity = 0, p1.state = p1.state)\ragent.action \u0026lt;- agents[[control]](pars = pars, Q.mat = Q.mat)\rdice.value \u0026lt;- agent.action$dice.value\rdice.quantity \u0026lt;- agent.action$dice.quantity\r}\r# calculate probability cat and determine the game state\r# action set to raise because you can\u0026#39;t call without an initial bid\r# this could be a 3rd action (initial bid) but it\u0026#39;s not really necessary\rplayer.dice.qty \u0026lt;- table(rolls[[1]])[as.character(dice.value)]\rplayer.dice.qty \u0026lt;- ifelse(is.na(player.dice.qty), 0, player.dice.qty) %\u0026gt;% unname\rprob.cat \u0026lt;- calc.prob(c(total.dice, player.dice.count[[1]], dice.quantity, player.dice.qty))\rp1.state \u0026lt;- which(game.states$total == total.dice \u0026amp; game.states$p1 == player.dice.count[[1]] \u0026amp; game.states$prob_cat == prob.cat)\rp1.action \u0026lt;- \u0026quot;raise\u0026quot;\r# storing states for Q iteration\ry.ctrl = c(); y.state = c(); y.action = c()\r# moving control to the next player\r# storing the previous player since if the next player calls the previous player could lose a die\rprev \u0026lt;- control\rcontrol \u0026lt;- control %% players + 1\rif(verbose \u0026gt; 0) cat(\u0026quot;dice value \u0026quot;, dice.value, \u0026quot;; dice quantity \u0026quot;, dice.quantity, \u0026quot;\\n\u0026quot;)\r# loop through each player and continue until there is a winner and loser\rcalled \u0026lt;- FALSE\rwhile(!called){\r# check if the player with control is still in the game - if not skip\rif(player.dice.count[[control]] \u0026gt; 0){\rif(control == a){\raction \u0026lt;- readline(\u0026quot;raise or call (r/c)? \u0026quot;)\r}else{\r# the agent makes a decision\rpars \u0026lt;- list(dice = rolls[[control]], total.dice = total.dice, dice.value = dice.value, dice.quantity = dice.quantity, p1.state = p1.state)\ragent.action \u0026lt;- agents[[control]](pars = pars, Q.mat = Q.mat)\raction \u0026lt;- agent.action$action\r}\r# storing states for reward iteration\rif(control == 1 \u0026amp; !is.null(agent.action$action)){\rplayer.dice.qty \u0026lt;- table(rolls[[1]])[as.character(dice.value)]\rplayer.dice.qty \u0026lt;- ifelse(is.na(player.dice.qty), 0, player.dice.qty) %\u0026gt;% unname\rp1.action \u0026lt;- agent.action$action\rprob.cat \u0026lt;- calc.prob(c(total.dice, player.dice.count[[1]], dice.quantity, player.dice.qty))\rp1.state \u0026lt;- which(game.states$total == total.dice \u0026amp; game.states$p1 == player.dice.count[[1]] \u0026amp; game.states$prob_cat == prob.cat)\r}\r# called\rif(action %in% c(\u0026quot;call\u0026quot;, \u0026quot;c\u0026quot;)){\rif(verbose \u0026gt; 0) {\rcat(\u0026quot;player\u0026quot;, control, \u0026quot;called\\nRoll table\\n\u0026quot;)\rprint(roll.table)\r}\r# dice are reavealed\r# check if the quantity of dice value is less or more than the total in the pool\r# if more control loses otherwise control-1 win\rif(dice.quantity \u0026gt; roll.table[dice.value]){\rpenalty[[prev]] \u0026lt;- penalty[[prev]] - 1\rif(verbose \u0026gt; 0) cat(\u0026quot;player\u0026quot;, prev, \u0026quot;lost a die\\n\u0026quot;)\r}else{\rpenalty[[control]] \u0026lt;- penalty[[control]] - 1\rif(verbose \u0026gt; 0) cat(\u0026quot;player\u0026quot;, control, \u0026quot;lost a die\\n\u0026quot;)\r}\r# for Q iteration\ry.ctrl \u0026lt;- c(y.ctrl, control); y.state \u0026lt;- c(y.state, p1.state); y.action \u0026lt;- c(y.action, p1.action)\r# if called use the penalty array to change states\rprob.cat \u0026lt;- calc.prob(c(total.dice, player.dice.count[[1]], dice.quantity, player.dice.qty))\rp1.state \u0026lt;- which(game.states$total == total.dice-1 \u0026amp; game.states$p1 == player.dice.count[[1]]+penalty[[1]] \u0026amp; game.states$prob_cat == prob.cat)\r# break the loop\rcalled \u0026lt;- TRUE\r}else{\rif(verbose \u0026gt; 0) cat(\u0026quot;player\u0026quot;, control, \u0026quot;raised\\n\u0026quot;)\rif(control == a){\r# player sets next dice value\rdice.value \u0026lt;- set.dice.value(\u0026quot;dice value: \u0026quot;, 6)\rdice.quantity \u0026lt;- set.dice.value(\u0026quot;quantity; \u0026quot;, sum(roll.table))\r}else{\rdice.value \u0026lt;- agent.action$dice.value\rdice.quantity \u0026lt;- agent.action$dice.quantity\r}\r# p1 state after the raise\rprob.cat \u0026lt;- calc.prob(c(total.dice, player.dice.count[[1]], dice.quantity, player.dice.qty))\rp1.state \u0026lt;- which(game.states$total == total.dice \u0026amp; game.states$p1 == player.dice.count[[1]] \u0026amp; game.states$prob_cat == prob.cat)\rif(verbose \u0026gt; 0) cat(\u0026quot;dice value\u0026quot;, dice.value, \u0026quot;; dice quantity\u0026quot;, dice.quantity, \u0026quot;\\n\u0026quot;)\r}\r# store info for Q update\ry.ctrl \u0026lt;- c(y.ctrl, control); y.state \u0026lt;- c(y.state, p1.state); y.action \u0026lt;- c(y.action, p1.action)\r# set the control player to now be the previous player\rprev \u0026lt;- control\r}\r# next player has control\rcontrol \u0026lt;- control %% players + 1\r}\r# play results and return\rplay \u0026lt;- data.frame(y.ctrl, y.state, y.action)\rreturn(list(penalty = penalty, play = play))\r}\r# play a full game of liars dice\rplay.liars.dice \u0026lt;- function(players = 4, num.dice = 6, auto = FALSE, verbose = 1, agents, Q.mat = NULL, train = FALSE, print.trans = FALSE){\r# begin!\rif(verbose \u0026gt; 0) liars.dice.title()\r# setting the number of dice each player has\rndice \u0026lt;- sapply(rep(num.dice, players), function(x) x, simplify = FALSE)\rplayers.left \u0026lt;- sum(unlist(ndice) \u0026gt; 0)\r# setting game states matrix\rgame.states \u0026lt;- generate.game.states(players, num.dice)\r# set up reward matrix\rreward \u0026lt;- generate.reward.matrix(game.states)\rreward \u0026lt;- list(raise = reward, call = reward)\r# set Q matrix if null\rif(is.null(Q.mat)) Q.mat \u0026lt;- matrix(0, nrow = nrow(reward$raise), ncol = length(reward), dimnames = list(c(), names(reward)))\r# while there is at least 2 left in the game\r# who has control\rctrl \u0026lt;- sample(1:players, 1)\rplay.df \u0026lt;- data.frame()\rwhile(players.left \u0026gt; 1){\r# play a round\rresults \u0026lt;- liars.dice.round(\rplayers = players, control = ctrl,\rplayer.dice.count = ndice, game.states = game.states,\rreward = reward,\rQ.mat = Q.mat,\ragents = agents,\ra = as.numeric(!auto),\rverbose = verbose\r)\r# update how many dice the players are left with given the # outcomes of the round\rfor(k in seq_along(ndice)){\rndice[[k]] \u0026lt;- ndice[[k]] + results$penalty[[k]]\rif(ndice[[k]] == 0 \u0026amp; results$penalty[[k]] == -1){\rif(verbose \u0026gt; 0) cat(\u0026quot;player\u0026quot;, k, \u0026quot;is out of the game\\n\u0026quot;)\r}\r# update who has control so they can start the bidding\rif(results$penalty[[k]] == -1){\rctrl \u0026lt;- k\rwhile(ndice[[ctrl]] == 0){\rctrl \u0026lt;- ctrl %% players + 1\r}\r}\r}\r# checking how many are left and if anyone won the game\rplayers.left \u0026lt;- sum(unlist(ndice) \u0026gt; 0)\rif(players.left == 1){\rif(verbose \u0026gt; 0) cat(\u0026quot;player\u0026quot;, which(unlist(ndice) \u0026gt; 0), \u0026quot;won the game\\n\u0026quot;)\r}\r# appending play\rplay.df \u0026lt;- rbind(play.df, results$play)\r}\rif(print.trans) print(play.df)\r# update Q\r# rather than training after each action, training at the # end of each game in bulk\r# just easier this way\rif(train) Q.mat \u0026lt;- update.Q(play.df, Q.mat, reward)\r# return the winner and Q matrix\rreturn(list(winner = which(unlist(ndice) \u0026gt; 0), Q.mat = Q.mat))\r}\r#Other Stochastic Processes\r#Martingales http://gradientdescending.com/martingale-strategies-dont-work-but-we-knew-that-simulation-analysis-in-r/\r#https://github.com/doehm/martingale\r#Bayesian Networks http://gradientdescending.com/simulating-data-with-bayesian-networks/\r#Other Q Learning https://www.r-bloggers.com/a-simple-intro-to-q-learning-in-r-floor-plan-navigation/\r#https://dataaspirant.com/2018/02/05/reinforcement-learning-r/\rAdd a new chunk by clicking the Insert Chunk button on the toolbar or by pressing Ctrl+Alt+I.\nWhen you save the notebook, an HTML file containing the code and output will be saved alongside it (click the Preview button or press Ctrl+Shift+K to preview the HTML file).\nThe preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike Knit, Preview does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.\n","date":1578096000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578096000,"objectID":"1ef09f18a5754f92d709c05d0271746b","permalink":"/post/orie/markovchains/","publishdate":"2020-01-04T00:00:00Z","relpermalink":"/post/orie/markovchains/","section":"post","summary":"This post explores how to markov chains work and how to visulaize them in R.\rI use a R package specifically designed to visualize markov chains.\rI also represent these markov chains using tables.","tags":["R Markdown","Stochastic Processes","Markov Chains","Statistical Testing"],"title":"Basics of Markov Chains","type":"post"},{"authors":null,"categories":["ORIE Basics"],"content":"\r\rThis post explores how to use the fundamental algorithms to solve LPs.\rI have written these using Gurobi as a solver and as the mathematical formulation software.\rThis is a reproducible example if you have R Studio just make sure you have installed the correct packages.\nlibrary(gurobi)\r## Warning: package \u0026#39;gurobi\u0026#39; was built under R version 4.0.2\rlibrary(tictoc)\rlibrary(Matrix)\rlibrary(ggplot2)\r## Warning: package \u0026#39;ggplot2\u0026#39; was built under R version 4.0.2\rlibrary(MASS)\r## Warning: package \u0026#39;MASS\u0026#39; was built under R version 4.0.2\r\\(max: 2x_1 + 3x_2\\)\rs.t.\r\\(-x_1 + x_2 \\leq 5\\)\r\\(x_1+3x_2 \u0026lt;= 35; x_1 \\leq 20\\)\n#library(matlib)\r#https://cran.r-project.org/web/packages/matlib/vignettes/linear-equations.html\r#another method using outer function https://stackoverflow.com/questions/10199547/plotting-curves-given-by-equations-in-r\rA \u0026lt;- matrix(c(-1, 1, 1, 1, 3, 0), 3, 2)\rb \u0026lt;- c(5,35, 20)\r#showEqn(A, b)\r#c( R(A), R(cbind(A,b)) ) # show ranks\r#all.equal( R(A), R(cbind(A,b)) ) # consistent?\r#plotEqn(A,b, xlim = c(0,60), ylim = c(0,60))\rrm(A,b)\r# linear program example from # http://lpsolve.sourceforge.net/5.5/formulate.htm\r# in this script, we don\u0026#39;t solve the linear program but plot it in 2-d space\r# for visualization purposes. ### set up some functions to define the constraints and the profit\r# money constraint\r#-x_1 + x_2 \u0026lt;= 5;\rconstraint1 = function(x1){\rx2 = (5 + x1)\rreturn(x2)\r}\r# storage constraint\r#x_1+3x_2 \u0026lt;= 35; constraint2 = function(x1){\rx2 = (35 - x1)/3\rreturn(x2)\r}\r# acreage constraint\r#x_1 \u0026lt;= 20\r#constraint3 = function(x1){\r# x2 = 20 - x1\r# return(x2)\r#}\r# profit contours - returns barley given wheat and profit. i.e. gives us the information needed to plot a line of (wheat, barley) combinations that yield a given amount of profit\r#max z = 2x_1 + 3x_2\rprofitContour = function(x1Array, z){\rx2 \u0026lt;- numeric(length(x1Array))\rfor (i in 0:length(x1)){\rx2[i] = (z - 2*x1[i]) / 3\r}\rreturn(x2)\r}\r### set up data frame for plotting. Data frame will put barley in terms of wheat. Wheat will be our x axis, and barley will be our y axis.\rx1 = seq(0,20)\r# add data for plotting the constraints. I.e. how much barley we can have in each constraint given an amount of wheat.\rplotDF = data.frame(x1, constraint1(x1), constraint2(x1))\rnames(plotDF) = c(\u0026#39;x1\u0026#39;,\u0026#39;con1\u0026#39;,\u0026#39;con2\u0026#39;)\rplotDF$zero = rep(0,length(x1))\r# add data for plotting the profit contours. I.e. how much barlet do we need to make a certain profit given a certain amount of wheat.\rfor (z in c(25, 40, 55, 70, 85)){\rx2 \u0026lt;- data.frame(profitContour(x1, z))\rnames(x2) = paste(\u0026#39;z\u0026#39;, z, sep=\u0026quot;\u0026quot;)\rplotDF \u0026lt;- cbind(plotDF, x2)\r}\r#set all negatives to zero, since you can\u0026#39;t have negative x2\rplotDF \u0026lt;- replace(plotDF, plotDF\u0026lt;0, 0)\r### set up and view the charts\r# plot the constraint lines\rp0 = ggplot(plotDF, aes(x = x1)) + coord_cartesian(ylim=c(0,25),xlim = c(0,25))+ geom_line(aes(y = con1), colour = \u0026#39;red\u0026#39;, linetype = 2) +\rgeom_line(aes(y = con2), colour = \u0026#39;green\u0026#39;, linetype = 2) +\rxlab(\u0026#39;x1\u0026#39;) +\rylab(\u0026#39;x2\u0026#39;) # add an area plot underneath the constraint lines. This is the feasible solution space.\rp1 \u0026lt;- p0 + geom_area(aes(y = pmin(con1,con2)), fill = \u0026#39;gray40\u0026#39;)\r# view the constraints and feasible solution space\r# add the profit contour lines\rp2 \u0026lt;- p1 + geom_line(aes(y = z25), colour = \u0026#39;blue\u0026#39;, linetype = 1) +\rgeom_line(aes(y = z40), colour = \u0026#39;blue\u0026#39;, linetype = 1) +\rgeom_line(aes(y = z55), colour = \u0026#39;blue\u0026#39;, linetype = 1) +\rgeom_line(aes(y = z70), colour = \u0026#39;blue\u0026#39;, linetype = 1) +\rgeom_line(aes(y = z85), colour = \u0026#39;blue\u0026#39;, linetype = 1)\r# view the whole chart\rplotDF\r## x1 con1 con2 zero z25 z40 z55 z70 z85\r## 1 0 5 11.666667 0 8.3333333 13.3333333 18.333333 23.33333 28.33333\r## 2 1 6 11.333333 0 7.6666667 12.6666667 17.666667 22.66667 27.66667\r## 3 2 7 11.000000 0 7.0000000 12.0000000 17.000000 22.00000 27.00000\r## 4 3 8 10.666667 0 6.3333333 11.3333333 16.333333 21.33333 26.33333\r## 5 4 9 10.333333 0 5.6666667 10.6666667 15.666667 20.66667 25.66667\r## 6 5 10 10.000000 0 5.0000000 10.0000000 15.000000 20.00000 25.00000\r## 7 6 11 9.666667 0 4.3333333 9.3333333 14.333333 19.33333 24.33333\r## 8 7 12 9.333333 0 3.6666667 8.6666667 13.666667 18.66667 23.66667\r## 9 8 13 9.000000 0 3.0000000 8.0000000 13.000000 18.00000 23.00000\r## 10 9 14 8.666667 0 2.3333333 7.3333333 12.333333 17.33333 22.33333\r## 11 10 15 8.333333 0 1.6666667 6.6666667 11.666667 16.66667 21.66667\r## 12 11 16 8.000000 0 1.0000000 6.0000000 11.000000 16.00000 21.00000\r## 13 12 17 7.666667 0 0.3333333 5.3333333 10.333333 15.33333 20.33333\r## 14 13 18 7.333333 0 0.0000000 4.6666667 9.666667 14.66667 19.66667\r## 15 14 19 7.000000 0 0.0000000 4.0000000 9.000000 14.00000 19.00000\r## 16 15 20 6.666667 0 0.0000000 3.3333333 8.333333 13.33333 18.33333\r## 17 16 21 6.333333 0 0.0000000 2.6666667 7.666667 12.66667 17.66667\r## 18 17 22 6.000000 0 0.0000000 2.0000000 7.000000 12.00000 17.00000\r## 19 18 23 5.666667 0 0.0000000 1.3333333 6.333333 11.33333 16.33333\r## 20 19 24 5.333333 0 0.0000000 0.6666667 5.666667 10.66667 15.66667\r## 21 20 25 5.000000 0 0.0000000 0.0000000 5.000000 10.00000 15.00000\rp2\rrm(x1,x2,p0,p1,p2, constraint1, constraint2, plotDF, profitContour,z )\rprimal simplex tableu reformulation\r\\(max: z;\\: z - 2x_1 - 3x_2 = 0\\)\rs.t.\r\\(-x_1 + x_2 + x_3 = 5\\)\r\\(x_1+ 3x_2 + x_4 = 35\\)\r\\(x_1 + x_5 = 20\\)\nwhere \\(x_3, x_4, \\text{ and } x_5\\) are slack variables. Giving 3 basic variables for 3 equations. The “4th” constraint describes how z changes with the decision variables\rFor less than or equal constraints adding the slack variables define a basic feasible solution which we use to initialize the algorithm (note use \\(x+1\\) as basic variable instead of \\(x_5\\) for iteration reasons)\ntic(\u0026#39;Simplex\u0026#39;)\rinitial_tableau \u0026lt;- data.frame(row = c(0,1,2,3), basic = (c(\u0026#39;z\u0026#39;, \u0026#39;x3\u0026#39;, \u0026#39;x4\u0026#39;, \u0026#39;x5\u0026#39;)), z = c(1,0,0,0), x1 = c(-2,-1,1,1), x2 = c(-3,1,3,0), x3 = c(0,1,0,0), x4 = c(0,0,1,0), x5 = c(0,0,0,1), RHS = c(0,5,35,20), ratio = c(0,0,0,0))\rinitial_tableau$basic \u0026lt;- as.character(initial_tableau$basic)\rnvars \u0026lt;- 5\rnrows \u0026lt;- 3\rtableau \u0026lt;- initial_tableau\riters \u0026lt;- 1\r#loop iterate until you have no negative coefficients in the first row of the tableau\rmaxiters \u0026lt;- 10\rwhile(iters \u0026lt; maxiters){\r#create a and RHS matrixes for easy calculations\rma \u0026lt;- as.matrix(tableau[,4:(4+nvars-1)])\r#Run this only if there is a negative reduced cost\rif(min(ma[1,]) \u0026lt; 0){\rmrhs \u0026lt;- as.matrix(tableau[,(4+nvars)])\rprint(paste(\u0026#39;iteration:\u0026#39;,iters))\rprint(tableau)\r#use steepest ascent to find the most negative reduced cost and that is the variable that enters the basis (sa) as seen in row 0, caluclate the rations, then determine the pivot row index (pri)\rsa \u0026lt;- which.min(ma[1,])\rratios \u0026lt;- mrhs[2:(nrows+1)]/ma[2:(nrows+1),sa]\rratios[ratios\u0026lt;=0] \u0026lt;- 9999\rpri \u0026lt;- which.min(ratios)+1\r#change pivot row by pivot element (pe) using Gauss Jordan elimination (substition)\r#by simply divide the row and rhs by the pe to get a new pivot row (npr) and new rhs (nrhs)\r#https://www.coursera.org/lecture/solving-algorithms-discrete-optimization/3-3-1-linear-programming-rzHVE\rpe \u0026lt;- ma[pri,sa]\rnpr \u0026lt;- ma[pri,]/pe\rnrhs \u0026lt;- mrhs[pri]/pe\r#take that row and muliply by the negative of the pivot variable\u0026#39;s coefficent in that row column and add the result to that row for both the rhs matrix and the A matrix\rfor(i in 1:(nrows+1)){\rmrhs[i] \u0026lt;- -ma[i,sa]*nrhs+mrhs[i]\r}\rmrhs[pri] \u0026lt;- nrhs\rfor(i in 1:(nrows+1)){\rma[i,] \u0026lt;- -ma[i,sa]*npr+ma[i,]\r}\rma[pri,] \u0026lt;- npr\r#rewrite the new A and RHS matricies to the tableau tableau[,4:(4+nvars-1)] \u0026lt;- ma\rtableau[,(4+nvars)] \u0026lt;- mrhs\rtableau[2:(nrows+1),(4+nvars+1)] \u0026lt;- ratios\rprint(paste(\u0026#39;pivot row:\u0026#39;,(pri-1)))\rprint(paste(\u0026#39;new basis:\u0026#39;, sa))\rtableau[pri,2] \u0026lt;- paste0(\u0026#39;x\u0026#39;,sa)\riters \u0026lt;- iters + 1\r}\relse{\rprint(paste(\u0026#39;Final Tableau; iteration:\u0026#39;,iters))\rprint(tableau[1:(length(tableau)-1)])\rprint(paste0(\u0026#39;objective value:\u0026#39;, mrhs[1]))\rfor(j in 1:nrows+1){\rprint(paste(tableau[j,2], \u0026#39;=\u0026#39;, tableau[j,(4+nvars)]))}\riters \u0026lt;- maxiters}\r}\r## [1] \u0026quot;iteration: 1\u0026quot;\r## row basic z x1 x2 x3 x4 x5 RHS ratio\r## 1 0 z 1 -2 -3 0 0 0 0 0\r## 2 1 x3 0 -1 1 1 0 0 5 0\r## 3 2 x4 0 1 3 0 1 0 35 0\r## 4 3 x5 0 1 0 0 0 1 20 0\r## [1] \u0026quot;pivot row: 1\u0026quot;\r## [1] \u0026quot;new basis: 2\u0026quot;\r## [1] \u0026quot;iteration: 2\u0026quot;\r## row basic z x1 x2 x3 x4 x5 RHS ratio\r## 1 0 z 1 -5 0 3 0 0 15 0.00000\r## 2 1 x2 0 -1 1 1 0 0 5 5.00000\r## 3 2 x4 0 4 0 -3 1 0 20 11.66667\r## 4 3 x5 0 1 0 0 0 1 20 Inf\r## [1] \u0026quot;pivot row: 2\u0026quot;\r## [1] \u0026quot;new basis: 1\u0026quot;\r## [1] \u0026quot;iteration: 3\u0026quot;\r## row basic z x1 x2 x3 x4 x5 RHS ratio\r## 1 0 z 1 0 0 -0.75 1.25 0 40 0\r## 2 1 x2 0 0 1 0.25 0.25 0 10 9999\r## 3 2 x1 0 1 0 -0.75 0.25 0 5 5\r## 4 3 x5 0 0 0 0.75 -0.25 1 15 20\r## [1] \u0026quot;pivot row: 3\u0026quot;\r## [1] \u0026quot;new basis: 3\u0026quot;\r## [1] \u0026quot;Final Tableau; iteration: 4\u0026quot;\r## row basic z x1 x2 x3 x4 x5 RHS\r## 1 0 z 1 0 0 0 1.0000000 1.0000000 55\r## 2 1 x2 0 0 1 0 0.3333333 -0.3333333 5\r## 3 2 x1 0 1 0 0 0.0000000 1.0000000 20\r## 4 3 x3 0 0 0 1 -0.3333333 1.3333333 20\r## [1] \u0026quot;objective value:55\u0026quot;\r## [1] \u0026quot;x2 = 5\u0026quot;\r## [1] \u0026quot;x1 = 20\u0026quot;\r## [1] \u0026quot;x3 = 20\u0026quot;\rtoc()\r## Simplex: 0.05 sec elapsed\rrm(pri,sa,npr,iters,maxiters,ma,mrhs,nrhs,nrows,nvars,pe,ratios,i,j)\rrm(initial_tableau, tableau)\rDual Simplex\rThe dual of the previous problem is\r\\(min 5y_1+35y_2+20y_3\\)\rs.t.\r\\(-y_1+y_2+y_3 \\geq 2\\)\r\\(y_1+3y_2 \\geq 3\\)\nSwitching to a max problem and adding slacks yields\r\\(z=-5y_1-35y_2-20y_3\\)\rs.t.\r\\(y_1-y_2-y_3+y_4 = -2\\)\r\\(-y_1-3y_2+y_5 = -3\\)\ntic(\u0026#39;Dual Simplex\u0026#39;)\rinitial_tableau \u0026lt;- data.frame(row = c(0,1,2), basic = (c(\u0026#39;z\u0026#39;, \u0026#39;y4\u0026#39;, \u0026#39;y5\u0026#39;)), z = c(1,0,0), y1 = c(5,1,-1), y2 = c(35,-1,-3), y3 = c(20,-1,0), y4 = c(0,1,0), y5 = c(0,0,1), RHS = c(0,-2,-3))\rinitial_tableau$basic \u0026lt;- as.character(initial_tableau$basic)\rnvars \u0026lt;- 5\rnrows \u0026lt;- 2\rtableau \u0026lt;- initial_tableau\riters \u0026lt;- 1\rmaxiters \u0026lt;- 10\rwhile(iters \u0026lt; maxiters){\r#create a and RHS matrixes for easy calculations\rma \u0026lt;- as.matrix(tableau[,4:(4+nvars-1)])\r#Check to see if a RHS value is negative\rif(min(tableau[2:(nrows+1),(4+nvars)]) \u0026lt; 0){\rmrhs \u0026lt;- as.matrix(tableau[,(4+nvars)])\rprint(paste(\u0026#39;iteration:\u0026#39;,iters))\rprint(tableau)\r#use steepest ascent to find the most negative RHS and that is the pivot row index (pri)\r#then caluclate the ratios to determine the entering variable (ev)\rpri \u0026lt;- which.min(mrhs[2:(nrows+1),])+1\rratios \u0026lt;- -ma[1,]/ma[pri,]\rratios[ratios\u0026lt;=0] \u0026lt;- 9999\rev \u0026lt;- which.min(ratios)\r#identify the new pivot element, do the same matrix operations to make the new pivot row and the new rhs for that row\r#change pivot row by pivot element (pe) using Gauss Jordan elimination (substition)\r#by simply divide the row and rhs by the pe to get a new pivot row (npr) and new rhs (nrhs)\r#https://www.coursera.org/lecture/solving-algorithms-discrete-optimization/3-3-1-linear-programming-rzHVE\rpe \u0026lt;- ma[pri,ev]\rnpr \u0026lt;- ma[pri,]/pe\rnrhs \u0026lt;- mrhs[pri]/pe\r#Do the matrix operations for the rest of the tableau\r#take that row and muliply by the negative of the pivot variable\u0026#39;s coefficent in that row column and add the result to that row for both the rhs matrix and the A matrix\rfor(i in 1:(nrows+1)){\rmrhs[i] \u0026lt;- -ma[i,ev]*nrhs+mrhs[i]\r}\rmrhs[pri] \u0026lt;- nrhs\rfor(i in 1:(nrows+1)){\rma[i,] \u0026lt;- -ma[i,ev]*npr+ma[i,]\r}\rma[pri,] \u0026lt;- npr\r#rewrite the new A and RHS matricies to the tableau tableau[,4:(3+nvars)] \u0026lt;- ma\rtableau[,(4+nvars)] \u0026lt;- mrhs\rprint(paste(\u0026#39;pivot row:\u0026#39;,(pri-1)))\rprint(paste(\u0026#39;entering variable:\u0026#39;,ev))\rtableau[pri,2] \u0026lt;- paste0(\u0026#39;y\u0026#39;,ev)\riters \u0026lt;- iters + 1\r}\relse{\rprint(tableau)\rprint(paste(\u0026#39;objective value:\u0026#39;, mrhs[1]))\rfor(j in 1:nrows+1){\rprint(paste(tableau[j,2], \u0026#39;=\u0026#39;, tableau[j,(4+nvars)]))}\riters \u0026lt;- maxiters}\r}\r## [1] \u0026quot;iteration: 1\u0026quot;\r## row basic z y1 y2 y3 y4 y5 RHS\r## 1 0 z 1 5 35 20 0 0 0\r## 2 1 y4 0 1 -1 -1 1 0 -2\r## 3 2 y5 0 -1 -3 0 0 1 -3\r## [1] \u0026quot;pivot row: 2\u0026quot;\r## [1] \u0026quot;entering variable: 1\u0026quot;\r## [1] \u0026quot;iteration: 2\u0026quot;\r## row basic z y1 y2 y3 y4 y5 RHS\r## 1 0 z 1 0 20 20 0 5 -15\r## 2 1 y4 0 0 -4 -1 1 1 -5\r## 3 2 y1 0 1 3 0 0 -1 3\r## [1] \u0026quot;pivot row: 1\u0026quot;\r## [1] \u0026quot;entering variable: 2\u0026quot;\r## [1] \u0026quot;iteration: 3\u0026quot;\r## row basic z y1 y2 y3 y4 y5 RHS\r## 1 0 z 1 0 0 15.00 5.00 10.00 -40.00\r## 2 1 y2 0 0 1 0.25 -0.25 -0.25 1.25\r## 3 2 y1 0 1 0 -0.75 0.75 -0.25 -0.75\r## [1] \u0026quot;pivot row: 2\u0026quot;\r## [1] \u0026quot;entering variable: 3\u0026quot;\r## row basic z y1 y2 y3 y4 y5 RHS\r## 1 0 z 1 20.0000000 0 0 20 5.0000000 -55\r## 2 1 y2 0 0.3333333 1 0 0 -0.3333333 1\r## 3 2 y3 0 -1.3333333 0 1 -1 0.3333333 1\r## [1] \u0026quot;objective value: -55\u0026quot;\r## [1] \u0026quot;y2 = 1\u0026quot;\r## [1] \u0026quot;y3 = 1\u0026quot;\rtoc()\r## Dual Simplex: 0.03 sec elapsed\rrm(pri,npr,iters,maxiters,ma,mrhs,nrhs,nrows,nvars,pe,ev,ratios,i,j)\rrm(initial_tableau, tableau)\rInterior Point\rhttp://fourier.eng.hmc.edu/e176/lectures/ch3/node19.html\nKKT (via interior points) vs Simplex\rhttps://math.stackexchange.com/questions/3422607/why-would-you-choose-simplex-over-lagrange-kkt-multipliers-methods\nStandard form:\n\\(max: z; z - 2x_1 - 3x_2 = 0\\)\rs.t.\r\\(-x_1 + x_2 + x_3 = 5\\)\r\\(x_1+ 3x_2 + x_4 = 35\\)\r\\(x_1 + x_5 = 20\\)\rIdea given A,b,c and intial value of x; find optimal x that minimizes c’*x\ntic(\u0026#39;Interior Point: Newton Raphson\u0026#39;)\rconstr1 \u0026lt;- c(-1,1,1,0,0)\rconstr2 \u0026lt;- c(1,3,0,1,0)\rconstr3 \u0026lt;- c(1,0,0,0,1)\rA \u0026lt;- rbind(constr1,constr2, constr3)\rb \u0026lt;- matrix(c(5,35,20),nrow =3)\rc \u0026lt;- matrix(c(-2,-3,0,0,0), nrow = 5)\r#inital x values (xi) just has to be a feasible solution, but give every x variable a value or there will be numerical instablity problems in the matricies\rxi \u0026lt;- matrix(c(1,1,5,31,19), nrow =5)\rm \u0026lt;- nrow(A)\rn \u0026lt;- ncol(A)\rI \u0026lt;- diag(n)\rz1 \u0026lt;- matrix(rep(0,n*n), nrow = n)\rz2 \u0026lt;- matrix(rep(0,m*m), nrow = m)\rz3 \u0026lt;- matrix(rep(0,m*n), nrow = m)\ry \u0026lt;- matrix(rep(1,5), nrow = 5)\r#The complimentary slackness modifier 1/t eventually goes to 0 as t \u0026gt;\u0026gt;\u0026gt;\u0026gt; inf\rt \u0026lt;- 9\r#Step size pretty much make it up the higher the more the step changes, but it might be too quick.\r#if its too quick it converges on negative values of x which is bad, #for an example change this to 0.3 to see a slower convergance and then to 1 to see a divergence\ralpha \u0026lt;- .5\r#mu*x = 0 in complemntariy slackness condition , mu \u0026gt;0 is dual condition mu correspond to dual variables, #using fancy vectors this gives Xd*mu = XM1 = 1/t where t \u0026gt;\u0026gt;\u0026gt;\u0026gt; inf x \u0026lt;- xi\rmu \u0026lt;- x/t\rmu_minus_c \u0026lt;- mu - c\r#Gives lagrangian multipliers for constraints\r#Solving c+A*lamda-mu = 0 gives initial lambda\rlambda \u0026lt;- ginv(t(A))%*%(mu_minus_c)\r#combined vector having values of x, lambda, and mu useful when adding the search direction\rw \u0026lt;- rbind(x, lambda, mu)\r#This is the KKT condition stationarity, at optimality this derivative should be 0,\r#Using the lagrangian cx+lambda*Ax-mu \u0026gt;\u0026gt; c+A*lambda-mu\rc_plus_tA \u0026lt;- c+t(A)%*%lambda-mu\r#This is the KKT condition primal feasiblity, this should always be 0 Ax-b=0 A_times_x_minus_b \u0026lt;- A%*%x-b\r#This is the modfied complimentary condtion XM1 -1/t = 0 X is the diag(x) and M is diag(mu) 1/t \u0026gt;\u0026gt;\u0026gt; 0 as t gets larger\rx_times_mu_minus_y_over_t \u0026lt;- x*mu-y/t\r#The right hand side of the search direction iteration given from the Newton-Raphson Method\r#Combines the vectors above\rB \u0026lt;- rbind(c_plus_tA,A_times_x_minus_b,x_times_mu_minus_y_over_t)\robjective \u0026lt;- t(c)%*%x\rerror \u0026lt;- norm(B,\u0026#39;2\u0026#39;)\riteration_list \u0026lt;- data.frame(\u0026#39;x1\u0026#39; = x[1], \u0026#39;x2\u0026#39; = x[2], \u0026#39;x3\u0026#39; = x[3], \u0026#39;x4\u0026#39; = x[4], \u0026#39;x5\u0026#39; = x[5], \u0026#39;objective\u0026#39; = objective, \u0026#39;error\u0026#39; = error)\r#loop\rwhile(error \u0026gt; 10^-7){\rt \u0026lt;- t*9\rXd = Diagonal(n = n, x)\rMud = Diagonal(n = n, mu) #The left hand side matrix of the search direction iteration, it containtes information from the A, x, and mu vectors and matricies of 1s or 0s to make the math make sense\rC \u0026lt;- rbind(cbind(z1,t(A),-I),cbind(A,z2,z3), cbind(Mud,t(z3), Xd))\r#The right hand side of the search direction iteration given from the Newton-Raphson Method\r#This contains the objective function costs, the RHS values, as well as the A, x, and mu vectors. #It also has the complimentary condition represented by t\rB \u0026lt;- rbind(c+t(A)%*%lambda-mu,A%*%x-b,x*mu-y/t)\r#solving the systems of equations with C and B gives the search direction as you move closer and closer to solving the complimentary condition in the KKT conditions\rdw = solve(-C,B)\r#update your w vector which is just a list of the x, mu, and lambda vectors using the search direction\rw \u0026lt;- w + alpha*dw\rx \u0026lt;- w[1:n]\rlambda \u0026lt;- w[(n+1):(n+m)]\rmu \u0026lt;- w[(n+m+1):length(w)]\r#calculate the objective function from the x values and the error. Remember if this satisifies all the KKT conditions then the B vector will be 0.\robjective \u0026lt;- t(c)%*%x\rerror \u0026lt;- norm(B,\u0026#39;2\u0026#39;)\riteration_list \u0026lt;- rbind(iteration_list,c(x,objective,error))\r}\rtoc()\r## Interior Point: Newton Raphson: 0.22 sec elapsed\rhead(iteration_list)\r## x1 x2 x3 x4 x5 objective error\r## 1 1.000000 1.000000 5.000000 31.000000 19.000000 -5.00000 113.97801\r## 2 2.815083 1.900809 5.914274 26.482489 17.184917 -11.33259 114.10755\r## 3 10.549002 1.617924 13.931079 19.597227 9.450998 -25.95178 62.76629\r## 4 13.970331 2.387418 16.582913 13.867413 6.029669 -35.10292 35.22695\r## 5 16.877593 3.136894 18.740699 8.711726 3.122407 -43.16587 19.61963\r## 6 18.419517 3.865645 19.553873 4.983549 1.580483 -48.43597 10.66207\rtail(iteration_list)\r## x1 x2 x3 x4 x5 objective error\r## 28 20 5 20 1.386952e-06 3.808029e-07 -55 2.878188e-06\r## 29 20 5 20 6.934761e-07 1.904014e-07 -55 1.439094e-06\r## 30 20 5 20 3.467381e-07 9.520072e-08 -55 7.195471e-07\r## 31 20 5 20 1.733690e-07 4.760036e-08 -55 3.597735e-07\r## 32 20 5 20 8.668451e-08 2.380018e-08 -55 1.798868e-07\r## 33 20 5 20 4.334226e-08 1.190009e-08 -55 8.994339e-08\rrm(x,lambda,mu,z1,z2,z3,y,xi,Xd,Mud,t,n,I,alpha,b,c,constr1,constr2,constr3,m)\rrm(c_plus_tA,mu_minus_c,A_times_x_minus_b,x_times_mu_minus_y_over_t, A,B,C,dw)\rrm(iteration_list,objective,error,w)\r\\(max: z = 2x_1 + 3x_2\\)\ns.t.\n\\(-x_1 + x_2 \\leq 5\\)\r\\(x_1+3x_2 \\leq 35\\)\r\\(x_1 \\leq 20\\)\nThis solver runs all the techniques above in paralel.\rThe Simplex, Dual Simplex, and 3 versions of the interior point method (barrier method).\rThis requires 5 cores. Whichever one solves the fastest produces the output.\ntic(\u0026#39;Gurobi Solver\u0026#39;)\rmodel \u0026lt;- list()\rmodel$A \u0026lt;- matrix(c(-1,1,\r1,3,\r1,0), nrow=3, byrow=T)\rmodel$obj \u0026lt;- c(2,3)\rmodel$rhs \u0026lt;- c(5,\r35,\r20)\rmodel$sense \u0026lt;- c(\u0026#39;\u0026lt;\u0026#39;,\r\u0026#39;\u0026lt;\u0026#39;,\r\u0026#39;\u0026lt;\u0026#39;)\rmodel$modelsense \u0026lt;- \u0026#39;max\u0026#39;\rresult \u0026lt;- gurobi(model)\r## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)\r## Optimize a model with 3 rows, 2 columns and 5 nonzeros\r## Model fingerprint: 0x1b1ba9b3\r## Coefficient statistics:\r## Matrix range [1e+00, 3e+00]\r## Objective range [2e+00, 3e+00]\r## Bounds range [0e+00, 0e+00]\r## RHS range [5e+00, 4e+01]\r## Presolve removed 1 rows and 0 columns\r## Presolve time: 0.00s\r## Presolved: 2 rows, 2 columns, 4 nonzeros\r## ## Iteration Objective Primal Inf. Dual Inf. Time\r## 0 7.0000000e+01 1.875000e+00 0.000000e+00 0s\r## 1 5.5000000e+01 0.000000e+00 0.000000e+00 0s\r## ## Solved in 1 iterations and 0.00 seconds\r## Optimal objective 5.500000000e+01\r#print(result$objval)\r#print(result$x)\r# Clear space\rrm(model, result)\rtoc()\r## Gurobi Solver: 0 sec elapsed\rAdd a new chunk by clicking the Insert Chunk button on the toolbar or by pressing Ctrl+Alt+I.\nWhen you save the notebook, an HTML file containing the code and output will be saved alongside it (click the Preview button or press Ctrl+Shift+K to preview the HTML file).\nThe preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike Knit, Preview does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.\nAdd a new chunk by clicking the Insert Chunk button on the toolbar or by pressing Ctrl+Alt+I.\nWhen you save the notebook, an HTML file containing the code and output will be saved alongside it (click the Preview button or press Ctrl+Shift+K to preview the HTML file).\nThe preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike Knit, Preview does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.\n","date":1578009600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578009600,"objectID":"b3fadb1cd7421d2e5685d8203c47941f","permalink":"/post/orie/lp_algorithms/","publishdate":"2020-01-03T00:00:00Z","relpermalink":"/post/orie/lp_algorithms/","section":"post","summary":"This post explores how to use the fundamental algorithms to solve LPs.\rI have written these using Gurobi as a solver and as the mathematical formulation software.\rThis is a reproducible example if you have R Studio just make sure you have installed the correct packages.","tags":["R Markdown","LP","Algorithms"],"title":"Linear Programming Examples and Applications","type":"post"},{"authors":null,"categories":["ORIE Basics"],"content":"\r\rThis post explores some of the basic concepts of simulation.\rI mostly explore these concepts using basic probablity and the built in distribution functions.\rThis is a reproducible example if you have R Studio just make sure you have installed the correct packages.\n#Ideas from Probablity Course https://www.probabilitycourse.com/chapter13/chapter13.php\rset.seed(123)\rp \u0026lt;- 0.5\rn \u0026lt;- 1000\rU \u0026lt;- runif(n)\rtoss \u0026lt;- as.integer(U \u0026lt; p)\r#cumalative number of heads a \u0026lt;- numeric(n+1)\r#running average of heads\ravg \u0026lt;- numeric(n)\rfor(i in 2:n+1){\ra[i] \u0026lt;- a[i-1] + toss[i-1]\ravg[i-1] \u0026lt;- a[i]/(i-1)\r}\rplot(1:n, avg, type = \u0026quot;l\u0026quot;, lwd = 5, col = \u0026quot;blue\u0026quot;, ylab = \u0026quot;ProportionofHeads\u0026quot;,\rxlab = \u0026quot;CoinTossNumber\u0026quot;)\rrm(p,n,U,toss,a,avg, i)\rset.seed(123)\rp \u0026lt;- 0.2\rn \u0026lt;- 1000\rU \u0026lt;- runif(n)\r#The function U \u0026lt; p creates Bernouli Random variables with probablity p, 1 if U \u0026lt; p 0 otherwise\r#the sum of Bernouli variables is a Binomial of (n,p) so X is a Binomial(1000,0.2)\rX \u0026lt;- sum(as.integer(U \u0026lt; p))\rX\r## [1] 198\r#The built in function for binomial (number of observations, number of trials, probablity)\rrbinom(1,n,p)\r## [1] 196\r#Arbitrary Distribution\r#P(X =1) = 0.35, P(X = 2) = 0.15, P(X=3) = 0.4, P(X=4) = 0.1\r#P(X=xi) = P(U element Ai) = pi\rP \u0026lt;- c(0.35,0.5,0.9,1)\rX \u0026lt;- c(1,2,3,4)\ri \u0026lt;- 1\rr \u0026lt;- runif(1)\rwhile(r \u0026gt; P[i]){\ri \u0026lt;- i + 1\r}\rX[i]\r## [1] 1\r#Create RV with density f(x) = 2.5*x*sqrt(x) = x^5/2\r#Using inverse X^5/2 = U \u0026gt;\u0026gt; X = U^2/5\rU \u0026lt;- runif(1)\rX \u0026lt;- U^(2/5)\rprint(paste(\u0026#39;Distrubution with density f(x) = X^(5/2):\u0026#39;,X))\r## [1] \u0026quot;Distrubution with density f(x) = X^(5/2): 0.938571171721709\u0026quot;\r#Generate RV with density function Beta(2,4), g(x) =1 0\u0026lt;x\u0026lt;1\r#f(x) = 20x(1-x)^3, g(x) = 1, f(x)/g(x) = 20x(1-x)^3\r#Find smallest c such that f(x)/g(x) \u0026lt;= c\r#Using differention d(f(x)/g(x))/dx \u0026gt;\u0026gt;\u0026gt; x = 1/4 \u0026gt;\u0026gt;\u0026gt; f(x)/g(x) \u0026lt;= 135/64 \u0026gt;\u0026gt;\u0026gt; f(x)/(c*g(x)) = 256x(1-x)^3\r#This code keeps looping until U2 (which is f(x)/c*g(x)) dips below its bound. Hence it rejects higher values\rn \u0026lt;- 1\rrejects \u0026lt;- 0\rwhile(n == 1){\rU1 \u0026lt;- runif(1)\rU2 \u0026lt;- runif(1)\rrejects \u0026lt;- rejects + 1\rif(U2 \u0026lt;= 256/27*U1*(1-U1)^3){\rX \u0026lt;- U1\rn \u0026lt;- 0\r}\r}\rprint(paste(\u0026#39;Total Number of Rejections:\u0026#39;, rejects))\r## [1] \u0026quot;Total Number of Rejections: 3\u0026quot;\rprint(paste(\u0026#39;Beta RV:\u0026#39;, X))\r## [1] \u0026quot;Beta RV: 0.0656281118281186\u0026quot;\rprint(paste(\u0026#39;R produced Beta:\u0026#39;, rbeta(1,2,4, ncp = 0)))\r## [1] \u0026quot;R produced Beta: 0.281731495984851\u0026quot;\rrm(i,n,p,P,r,U,X, rejects)\r#Transformations of Uniform Distribution to other distrubtions\rset.seed(123)\r#Inverse Transformation to Exponential\r#F(x) = 1 - e^-x\r#X = F-1(U) = - ln(1-U) \u0026gt;\u0026gt;\u0026gt; - ln(U)\rlambda \u0026lt;- 1\rU \u0026lt;- runif(1)\rX \u0026lt;- (-1/lambda)*log(U)\rprint(paste(\u0026#39;Exponential RV:\u0026#39;,X))\r## [1] \u0026quot;Exponential RV: 1.24626281987372\u0026quot;\rprint(paste(\u0026#39;R produced Exponential RV:\u0026#39;,rexp(1,lambda)))\r## [1] \u0026quot;R produced Exponential RV: 0.576610270887613\u0026quot;\r#Using sums to create Gamma(n,lambda) from exp(lambda) Gamma(n,lambda) = sum_n(Exponential(lambda))\rn \u0026lt;- 20\rX \u0026lt;- (-1/lambda)*sum(log(U))\rprint(paste(\u0026#39;Gamma RV:\u0026#39;,X))\r## [1] \u0026quot;Gamma RV: 1.24626281987372\u0026quot;\rprint(paste(\u0026#39;R produced Gamma RV:\u0026#39;, rgamma(1,n,lambda)))\r## [1] \u0026quot;R produced Gamma RV: 18.4968091472022\u0026quot;\rrm(n,lambda,X)\r#Create Poisson Distribution which is the number of exponential arrivals in a given time period\r#Ti = 1/lambdaln(Ui)\rset.seed(123)\rlambda \u0026lt;- 2\ri \u0026lt;- 0\rU \u0026lt;- runif(1)\rY \u0026lt;- -1/lambda*log(U)\rsum \u0026lt;- Y\rwhile(sum \u0026lt; 1){\rU \u0026lt;- runif(1)\rY \u0026lt;- -1/lambda*log(U)\rsum \u0026lt;- sum + Y\ri \u0026lt;- i+1\r}\rX \u0026lt;- i\rprint(paste(\u0026#39;Poisson RV:\u0026#39;,X))\r## [1] \u0026quot;Poisson RV: 2\u0026quot;\rprint(paste(\u0026#39;R produced Poisson RV:\u0026#39;, rpois(1,lambda)))\r## [1] \u0026quot;R produced Poisson RV: 4\u0026quot;\r#Creating Normals with the Box Mueller Method (inefficient because of the sqrt, cos, and sine functions)\r#Z1 = sqrt(-2ln(U1)cos(2*pi*U2))\r#Z2 = sqrt(-2ln(U1)sin(2*pi*U2))\rn \u0026lt;- 5000\rU1 \u0026lt;- runif(n)\rU2 \u0026lt;- runif(n)\rZ1 \u0026lt;- sqrt(-2*log(U1))*cos(2*pi*U2)\rZ2 \u0026lt;- sqrt(-2*log(U1))*sin(2*pi*U2)\r#Created Via R Function\rZ3 \u0026lt;- rnorm(5000)\rhist(Z1,col = \u0026#39;wheat\u0026#39;, label = T)\rhist(Z3,col = \u0026#39;wheat\u0026#39;, label = T)\r#Geometric Function - Loops Bernoulis until first success\r# K \u0026lt;- number of failures plust 1 success K \u0026lt;- 1\rp \u0026lt;- 0.2\rwhile(runif(1) \u0026gt; p){\rK \u0026lt;- K +1\r}\rprint(paste(\u0026#39;Geometric RV:\u0026#39;, K))\r## [1] \u0026quot;Geometric RV: 8\u0026quot;\rprint(paste(\u0026#39;R produced Geometric RV:\u0026#39;,rgeom(1,p)))\r## [1] \u0026quot;R produced Geometric RV: 1\u0026quot;\r#Negative Binomial Method - Number of Geometric trials needed to get r success NegBin(1,r,p)\rK \u0026lt;- 1\rp \u0026lt;- 0.2\rr \u0026lt;- 2\rsuccess \u0026lt;- 0\rwhile(success \u0026lt; r){\rif(runif(1) \u0026gt; p){\rK \u0026lt;- K + 1\r#failure\r}else{\rsuccess \u0026lt;- success + 1\r}\r}\rprint(paste(\u0026#39;Negative Binomial RV:\u0026#39;, K+r-1))\r## [1] \u0026quot;Negative Binomial RV: 6\u0026quot;\rprint(paste(\u0026#39;R produced Negative Binomial:\u0026#39;, rnbinom(1,r,p)))\r## [1] \u0026quot;R produced Negative Binomial: 6\u0026quot;\rrt(1,1,1) #number of variables, df, ncp\r## [1] -0.06314223\rTypical metrics for Queueing that can be extended to all types of simulations:\n• L: average number of jobs in the system\r• W: average time spent in the system (cycle time)\r• Q: average number of jobs in queue\r• d: average time in queue\r• system utilization\r• system throughput\r• distribution of waiting time\r• distribution of system size\r• distribution of queue size\n#M/M/1 Queue Simulation\r#Source for this code http://web02.gonzaga.edu/faculty/burchn/R_files/Miscellaneous/queueing_theory_MM1.html\r#variable saying how many arrivals per time period\rlambda = .3\r#saying the average departures per time period\rmu = 1\r#How long the simulation runs note not a number of events\rtime = 500\rt = 0\r#the length of a queue after a number of events. Aka Q_history[500] = 5 says the queue is 5 people long after 500 events it isn\u0026#39;t a sum.\r#It updates after for n during event n\rQ_hist = 0\r#Think this is the sum of all the queues s = 0\r#exponential distb with mean 1/rate T1 is time uuntil next event rate lamba + mu if there is something in queue otherwise just an arrival\rT1 = rexp(1,rate=lambda)\r#Initializing parameter\rQ = 1\r#Time until first event is T1\revent_times = T1\r#The time of the first event is T1\rt = T1\r#Same reasoning\rnum_event = 1\ri \u0026lt;- 1\rsims \u0026lt;- 10\r#Busy time simulation 1:10\rB \u0026lt;- c(1:10)\rBT \u0026lt;- c(1:10)\r#Average length of queue for simulation 1:10\rL \u0026lt;- c(1:10)\r#Average time customer spends in line\rW \u0026lt;- c(1:10)\rwhile (i \u0026lt;= sims){\rprint(i)\rwhile (t\u0026lt;time) {\rnum_event = num_event+1\rif(Q\u0026gt;0) {\r# we checked to make sure queue was not empty\r#odds someone arrives or leaves the queue\rT1 = rexp(1,rate=lambda+mu)\r#use p as random number to determine if next even is an arrival or a departure\rp = runif(1,0,1)\rQ_hist[num_event] = Q\r#if p is less than lambda/(lamda+mu) it is an arrival otherwise it is a departure\rQ = ifelse(p\u0026lt;lambda/(lambda+mu),Q+1,Q-1)\r} else {\r# here, the queue was empty, so only arrivals are possible\rT1 = rexp(1,rate=lambda)\rQ_hist[num_event] = Q\rQ = 1\r}\r#new time is the original t plus the time to the next event\rt = t+T1\r#A vector that shows how long it is to the next event\revent_times[num_event] = T1\rs = s+T1*Q_hist[num_event]\r}\r#Time system is busy\rBT[i] \u0026lt;- sum(event_times)-sum(event_times[which(Q_hist %in% 0)])\rnum_cust \u0026lt;- lambda*time\rB[i] \u0026lt;- BT[i]/length(which(Q_hist %in% 0))\r#Average queue length in the system\rL[i] \u0026lt;- s/t\r#Average time customer spends in line\rW[i] \u0026lt;- L[i] / lambda\rtime = 500\rt = 0\rQ_hist = 0\rs = 0\rT1 = rexp(1,rate=lambda)\rQ = 1\revent_times = T1\rt = T1\rnum_event = 1\ri \u0026lt;- i + 1\r}\r## [1] 1\r## [1] 2\r## [1] 3\r## [1] 4\r## [1] 5\r## [1] 6\r## [1] 7\r## [1] 8\r## [1] 9\r## [1] 10\r#rho/(1-rho) [.4285, 9, -11]\ravg_num \u0026lt;- mean(L) #rho/(1-rho)^2 [.6122, 90, 110]\rvariance \u0026lt;- var(L) Sd2 \u0026lt;- sum((L-avg_num)^2 / (sims - 1))\r# 1/(mu-lambda) [1.42, 10, -10]\rbusy_time \u0026lt;- mean(B)\ravg_num\r## [1] 0.4417826\rvariance\r## [1] 0.003876663\rSd2\r## [1] 0.003876663\rbusy_time\r## [1] 1.452299\rA quick Monte Carlo Simulation to estimate the value of the integral \\(\\int_{0.01}^1x^{-0.5}\\,dx\\)\n#https://stackoverflow.com/questions/22001977/monte-carlo-integration-in-r-getting-the-wrong-answer-using-hit-or-miss\ns \u0026lt;- NULL\rm \u0026lt;- 1000\ra \u0026lt;- 0.01\rb \u0026lt;- 1\rset.seed(5)\rx \u0026lt;- runif(m,a,b)\ry \u0026lt;- 10*runif(m,0,1)\rfor (i in 1:m){\rif(y[i]\u0026lt;(x[i]^(-0.5))){\rs[i] \u0026lt;- 1\r}\relse{\rs[i] \u0026lt;-0\r}\r}\rnn\u0026lt;- sum(s)*(b-a)/m*10 #note that the addition of the area of the rectangle\rprint(nn)\r## [1] 1.683\rplot(x,y)\rf2 \u0026lt;- function(x) sqrt(1-x^2)\rs \u0026lt;- seq(-1 , 1 ,by=0.001)\rplot(s,f2(s))\r# Get the max value of function within the range\rc \u0026lt;- ceiling(max(f2(s)))\r# [1] 1\rn \u0026lt;- 1000000\ra \u0026lt;- -1\rb \u0026lt;- 1\rset.seed(5)\rx \u0026lt;- runif(n,a,b)\ry \u0026lt;- c*runif(n,0,1)\rR \u0026lt;- sum(y \u0026lt; f2(x))/n\r(b-a)*c*R\r## [1] 1.57063\r#[1] 1.57063 # multiply it by 2 to get full area\rpi/2\r## [1] 1.570796\r#[1] 1.570796\rSim HW2 does a good job showing confidence intervals and convergence of normals, exponentials, and lognormals.\nSim HW4 shows how to run 5 tests for independance (Runs, Autocorrelation), uniformity (Chi-Squared and KS), or both (Serial)\nSim HW5 shows how to generate RVs recurseively until they drop below a certain variance.\n#CLT Basics https://stats.stackexchange.com/questions/22557/central-limit-theorem-versus-law-of-large-numbers\r#https://www.probabilitycourse.com/chapter7/7_2_4_convergence_in_distribution.php\r#https://www.analyticsvidhya.com/blog/2019/05/statistics-101-introduction-central-limit-theorem/\r#LLN (WLLN - convergence in prob) (SLLN - almost sure convergence) (CLT - convergence in distribution)\r#WLLN https://www.probabilitycourse.com/chapter7/7_2_5_convergence_in_probability.php\r#SLLN and continous mapping theroem https://www.probabilitycourse.com/chapter7/7_2_7_almost_sure_convergence.php\r#Probability Basics\r#https://daviddalpiaz.github.io/r4sl/probability-review.html\rAdd a new chunk by clicking the Insert Chunk button on the toolbar or by pressing Ctrl+Alt+I.\nWhen you save the notebook, an HTML file containing the code and output will be saved alongside it (click the Preview button or press Ctrl+Shift+K to preview the HTML file).\nThe preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike Knit, Preview does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.\n","date":1577923200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577923200,"objectID":"219ffe7a538e3a90cb5dc974ab770add","permalink":"/post/orie/simulation_basics/","publishdate":"2020-01-02T00:00:00Z","relpermalink":"/post/orie/simulation_basics/","section":"post","summary":"This post explores some of the basic concepts of simulation.\rI mostly explore these concepts using basic probablity and the built in distribution functions.\rThis is a reproducible example if you have R Studio just make sure you have installed the correct packages.","tags":["R Markdown","Simulation","RNG","Statistical Testing"],"title":"The Basics of Simulation","type":"post"},{"authors":null,"categories":["ORIE Basics"],"content":"\r\rThis post explores some of the basic concepts of statistics.\rI mostly explore these concepts using linear regression.\rThis is a reproducible example if you have R Studio just make sure you have installed the correct packages.\n#http://r-statistics.co/Linear-Regression.html\r#https://www.statmethods.net/stats/regression.html\r#http://r-statistics.co/Statistical-Tests-in-R.html\r#http://www.sthda.com/english/articles/40-regression-analysis/166-predict-in-r-model-predictions-and-confidence-intervals/\r#Dr. Sager Utexas datasets\rdata \u0026lt;- read.table(\u0026#39;AustinApartmentRents1.txt\u0026#39;, header = TRUE)\rsummary(data)\r## Rent Area ## Min. : 399.0 Min. : 474 ## 1st Qu.: 470.0 1st Qu.: 666 ## Median : 535.0 Median : 755 ## Mean : 572.3 Mean : 816 ## 3rd Qu.: 638.8 3rd Qu.: 925 ## Max. :1050.0 Max. :1864\rcor(data$Rent, data$Area)\r## [1] 0.8740597\rmodel \u0026lt;- lm(Rent ~ Area, data = data)\rsummary(model)\r## ## Call:\r## lm(formula = Rent ~ Area, data = data)\r## ## Residuals:\r## Min 1Q Median 3Q Max ## -154.659 -50.882 8.189 54.874 148.207 ## ## Coefficients:\r## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 160.18706 31.36081 5.108 3.8e-06 ***\r## Area 0.50497 0.03685 13.702 \u0026lt; 2e-16 ***\r## ---\r## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\r## ## Residual standard error: 68.86 on 58 degrees of freedom\r## Multiple R-squared: 0.764, Adjusted R-squared: 0.7599 ## F-statistic: 187.7 on 1 and 58 DF, p-value: \u0026lt; 2.2e-16\rtest.Areas \u0026lt;- data.frame(Area = c (500,1000))\rpredict(model, newdata = test.Areas)\r## 1 2 ## 412.6713 665.1556\rdata1 \u0026lt;- read.table(\u0026#39;AustinApartmentRents2.txt\u0026#39;, header = TRUE)\r#A convient tool to see a lot of the initial data exploration\r#https://towardsdatascience.com/simple-fast-exploratory-data-analysis-in-r-with-dataexplorer-package-e055348d9619\rlibrary(DataExplorer)\r## Warning: package \u0026#39;DataExplorer\u0026#39; was built under R version 4.0.2\rplot_str(data1)\rplot_missing(data1)\rplot_histogram(data1)\rplot_density(data1)\rplot_correlation(data1)\rplot_bar(data1)\r#create_report(data1) #This creates an HTML report of all the above information and more\r#Confidence intervals around indivudual values\rpred.int \u0026lt;- predict(model, interval = \u0026#39;prediction\u0026#39;)\r## Warning in predict.lm(model, interval = \u0026quot;prediction\u0026quot;): predictions on current data refer to _future_ responses\r#Confidence intervals around means\rpred.conf \u0026lt;- predict(model, interval = \u0026#39;confidence\u0026#39;)\rcbind(data,pred.int,pred.conf)\r## Rent Area fit lwr upr fit lwr upr\r## 1 519 725 526.2893 387.1539 665.4247 526.2893 507.2700 545.3085\r## 2 765 995 662.6308 523.0320 802.2296 662.6308 640.4747 684.7868\r## 3 475 481 403.0769 261.9228 544.2310 403.0769 372.6213 433.5326\r## 4 575 925 627.2830 488.0776 766.4884 627.2830 607.7583 646.8077\r## 5 415 600 463.1682 323.2840 603.0524 463.1682 439.2801 487.0563\r## 6 530 668 497.5061 358.1044 636.9078 497.5061 476.6278 518.3843\r## 7 580 725 526.2893 387.1539 665.4247 526.2893 507.2700 545.3085\r## 8 995 1421 877.7474 731.7844 1023.7104 877.7474 829.7031 925.7917\r## 9 565 672 499.5259 360.1470 638.9048 499.5259 478.8005 520.2514\r## 10 620 1025 677.7799 537.9544 817.6053 677.7799 654.2379 701.3218\r## 11 450 781 554.5675 415.5703 693.5648 554.5675 536.5869 572.5481\r## 12 520 800 564.1619 425.1837 703.1402 564.1619 546.3289 581.9950\r## 13 495 870 599.5097 460.4795 738.5399 599.5097 581.2764 617.7431\r## 14 420 700 513.6651 374.4284 652.9017 513.6651 493.9190 533.4112\r## 15 575 800 564.1619 425.1837 703.1402 564.1619 546.3289 581.9950\r## 16 425 620 473.2676 333.5438 612.9913 473.2676 450.3375 496.1977\r## 17 770 1040 685.3544 545.4026 825.3061 685.3544 661.0735 709.6352\r## 18 445 520 422.7707 282.0919 563.4495 422.7707 394.5998 450.9416\r## 19 510 880 604.5594 465.5062 743.6127 604.5594 586.1509 622.9679\r## 20 635 832 580.3209 441.3427 719.2991 580.3209 562.4884 598.1535\r## 21 470 545 435.3949 294.9906 575.7993 435.3949 408.6285 462.1614\r## 22 700 921 625.2631 486.0744 764.4518 625.2631 605.8580 644.6682\r## 23 450 577 451.5539 311.4663 591.6416 451.5539 426.5018 476.6060\r## 24 785 1080 705.5531 565.2224 845.8838 705.5531 679.1757 731.9306\r## 25 485 710 518.7147 379.5215 657.9080 518.7147 499.2771 538.1524\r## 26 415 605 465.6930 325.8504 605.5357 465.6930 442.0494 489.3367\r## 27 399 680 503.5657 364.2305 642.9008 503.5657 483.1366 523.9948\r## 28 585 730 528.8141 389.6960 667.9322 528.8141 509.9220 547.7063\r## 29 525 687 507.1005 367.8016 646.3994 507.1005 486.9201 527.2809\r## 30 495 703 515.1800 375.9568 654.4032 515.1800 495.5288 534.8311\r## 31 505 672 499.5259 360.1470 638.9048 499.5259 478.8005 520.2514\r## 32 445 660 493.4663 354.0171 632.9155 493.4663 472.2734 514.6593\r## 33 565 755 541.4383 402.3922 680.4845 541.4383 523.0835 559.7931\r## 34 650 810 569.2116 430.2377 708.1855 569.2116 551.4123 587.0109\r## 35 515 611 468.7229 328.9288 608.5169 468.7229 445.3683 492.0774\r## 36 470 705 516.1899 376.9755 655.4044 516.1899 496.6009 535.7789\r## 37 470 564 444.9893 304.7778 585.2009 444.9893 419.2531 470.7255\r## 38 700 1250 791.3978 648.7851 934.0105 791.3978 754.7720 828.0235\r## 39 455 512 418.7310 277.9593 559.5026 418.7310 390.1001 447.3618\r## 40 550 630 478.3173 338.6680 617.9666 478.3173 455.8452 500.7893\r## 41 625 850 589.4103 450.4146 728.4061 589.4103 571.4413 607.3794\r## 42 745 1156 743.9307 602.7129 885.1486 743.9307 713.1810 774.6805\r## 43 540 932 630.8178 491.5816 770.0540 630.8178 611.0749 650.5607\r## 44 650 755 541.4383 402.3922 680.4845 541.4383 523.0835 559.7931\r## 45 595 1093 712.1177 571.6507 852.5847 712.1177 685.0246 739.2108\r## 46 470 751 539.4185 400.3624 678.4745 539.4185 520.9890 557.8479\r## 47 480 608 467.2080 327.3898 607.0261 467.2080 443.7095 490.7064\r## 48 460 900 614.6588 475.5477 753.7699 614.6588 595.8181 633.4994\r## 49 600 860 594.4600 455.4490 733.4711 594.4600 576.3734 612.5467\r## 50 575 925 627.2830 488.0776 766.4884 627.2830 607.7583 646.8077\r## 51 659 944 636.8774 497.5840 776.1708 636.8774 616.7351 657.0197\r## 52 650 940 634.8575 495.5838 774.1312 634.8575 614.8518 654.8632\r## 53 750 1048 689.3941 549.3715 829.4168 689.3941 664.7079 714.0803\r## 54 455 474 399.5422 258.2967 540.7876 399.5422 368.6660 430.4184\r## 55 430 700 513.6651 374.4284 652.9017 513.6651 493.9190 533.4112\r## 56 605 921 625.2631 486.0744 764.4518 625.2631 605.8580 644.6682\r## 57 929 1229 780.7934 638.5205 923.0664 780.7934 745.5138 816.0731\r## 58 695 896 612.6389 473.5406 751.7372 612.6389 593.8932 631.3846\r## 59 455 630 478.3173 338.6680 617.9666 478.3173 455.8452 500.7893\r## 60 1050 1864 1101.4485 942.4198 1260.4772 1101.4485 1022.1188 1180.7782\r# 2. Regression line + confidence intervals\rlibrary(\u0026quot;ggplot2\u0026quot;)\r## Warning: package \u0026#39;ggplot2\u0026#39; was built under R version 4.0.2\rmydata \u0026lt;- cbind(data, pred.int)\rp \u0026lt;- ggplot(mydata, aes(Area, Rent)) +\rgeom_point() +\rstat_smooth(method = lm)\r# 3. Add prediction intervals\rp + geom_line(aes(y = lwr), color = \u0026quot;red\u0026quot;, linetype = \u0026quot;dashed\u0026quot;)+\rgeom_line(aes(y = upr), color = \u0026quot;red\u0026quot;, linetype = \u0026quot;dashed\u0026quot;)\r#T Test for samples\rlibrary(dplyr)\rsample1 \u0026lt;- sample_n(data,40)\rmodel1 \u0026lt;- lm(Rent ~ Area, data = data)\rp1 \u0026lt;- predict(model1, interval = \u0026#39;confidence\u0026#39;, level = 0.95)\rsummary(p1)\r## fit lwr upr ## Min. : 399.5 Min. : 368.7 Min. : 430.4 ## 1st Qu.: 496.5 1st Qu.: 475.5 1st Qu.: 517.5 ## Median : 541.4 Median : 523.1 Median : 559.8 ## Mean : 572.3 Mean : 548.8 Mean : 595.7 ## 3rd Qu.: 627.3 3rd Qu.: 607.8 3rd Qu.: 646.8 ## Max. :1101.4 Max. :1022.1 Max. :1180.8\rt.test(p1, mu = 550)\r## ## One Sample t-test\r## ## data: p1\r## t = 2.4118, df = 179, p-value = 0.01688\r## alternative hypothesis: true mean is not equal to 550\r## 95 percent confidence interval:\r## 554.0485 590.4849\r## sample estimates:\r## mean of x ## 572.2667\r#MultiVariable Linear Regression\rsummary(data1)\r## Rent Area Bedrooms Bathrooms ## Min. : 399.0 Min. : 474 Min. :1.000 Min. :1.00 ## 1st Qu.: 470.0 1st Qu.: 666 1st Qu.:1.000 1st Qu.:1.00 ## Median : 535.0 Median : 755 Median :1.000 Median :1.00 ## Mean : 572.3 Mean : 816 Mean :1.517 Mean :1.25 ## 3rd Qu.: 638.8 3rd Qu.: 925 3rd Qu.:2.000 3rd Qu.:1.25 ## Max. :1050.0 Max. :1864 Max. :5.000 Max. :2.00 ## Security Parking Distance Shuttle ## Min. :0.0000 Min. :0.0000 Min. : 1.100 Min. :0.0000 ## 1st Qu.:0.0000 1st Qu.:0.0000 1st Qu.: 5.000 1st Qu.:1.0000 ## Median :0.0000 Median :0.0000 Median : 6.000 Median :1.0000 ## Mean :0.1667 Mean :0.1333 Mean : 5.935 Mean :0.8667 ## 3rd Qu.:0.0000 3rd Qu.:0.0000 3rd Qu.: 7.000 3rd Qu.:1.0000 ## Max. :1.0000 Max. :1.0000 Max. :10.500 Max. :1.0000 ## Age ## Min. : 1.00 ## 1st Qu.:10.00 ## Median :16.50 ## Mean :16.33 ## 3rd Qu.:22.25 ## Max. :32.00\rmodel2 \u0026lt;- lm(Rent ~ Area + Bathrooms, data = data1)\rsummary(model2)\r## ## Call:\r## lm(formula = Rent ~ Area + Bathrooms, data = data1)\r## ## Residuals:\r## Min 1Q Median 3Q Max ## -152.02 -45.45 10.38 39.91 129.28 ## ## Coefficients:\r## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 143.66927 29.51345 4.868 9.31e-06 ***\r## Area 0.38746 0.04982 7.777 1.61e-10 ***\r## Bathrooms 89.92902 27.75071 3.241 0.00199 ** ## ---\r## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\r## ## Residual standard error: 63.83 on 57 degrees of freedom\r## Multiple R-squared: 0.8007, Adjusted R-squared: 0.7937 ## F-statistic: 114.5 on 2 and 57 DF, p-value: \u0026lt; 2.2e-16\rtest.bathrooms \u0026lt;- data.frame(Area = c(500,1000), Bathrooms = c(1,2))\rp2a \u0026lt;- predict(model2, newdata = test.bathrooms, interval = \u0026#39;confidence\u0026#39;)\rp2 \u0026lt;- as.data.frame(predict(model2, interval = \u0026#39;confidence\u0026#39;, level = 0.95))\rcbind(p2, data1)\r## fit lwr upr Rent Area Bedrooms Bathrooms Security Parking\r## 1 514.5062 495.4259 533.5866 519 725 1 1 0 0\r## 2 709.0493 673.7669 744.3316 765 995 2 2 0 0\r## 3 419.9662 389.8581 450.0743 475 481 1 1 0 0\r## 4 681.9271 643.6132 720.2411 575 925 2 2 0 1\r## 5 466.0738 443.8498 488.2979 415 600 1 1 0 0\r## 6 492.4211 472.8074 512.0348 530 668 1 1 0 0\r## 7 514.5062 495.4259 533.5866 580 725 1 1 0 0\r## 8 874.1069 829.4987 918.7151 995 1421 2 2 0 1\r## 9 493.9709 474.4481 513.4937 565 672 1 1 0 0\r## 10 630.7440 594.3939 667.0941 620 1025 2 1 1 0\r## 11 536.2040 516.0356 556.3724 450 781 1 1 1 0\r## 12 543.5657 522.6986 564.4328 520 800 2 1 0 0\r## 13 570.6878 546.1304 595.2452 495 870 2 1 0 0\r## 14 504.8198 485.7109 523.9287 420 700 1 1 0 0\r## 15 543.5657 522.6986 564.4328 575 800 1 1 0 0\r## 16 473.8230 452.5572 495.0888 425 620 1 1 0 0\r## 17 726.4849 692.5303 760.4395 770 1040 2 2 0 1\r## 18 435.0771 407.8700 462.2843 445 520 1 1 0 0\r## 19 574.5624 549.3637 599.7611 510 880 2 1 0 1\r## 20 555.9644 533.6045 578.3243 635 832 1 1 0 0\r## 21 444.7636 419.2769 470.2502 470 545 1 1 0 0\r## 22 680.3773 641.8590 718.8955 700 921 2 2 0 0\r## 23 457.1623 433.6744 480.6501 450 577 1 1 0 0\r## 24 741.9833 708.7412 775.2254 785 1080 2 2 0 0\r## 25 508.6944 489.6360 527.7527 485 710 1 1 0 0\r## 26 468.0111 446.0397 489.9826 415 605 1 1 0 0\r## 27 497.0706 477.7062 516.4349 399 680 1 1 0 1\r## 28 516.4435 497.3298 535.5573 585 730 2 1 0 0\r## 29 499.7828 480.5310 519.0346 525 687 1 1 0 0\r## 30 505.9821 486.8939 525.0704 495 703 1 1 0 0\r## 31 493.9709 474.4481 513.4937 505 672 1 1 1 0\r## 32 489.3214 469.5030 509.1398 445 660 1 1 0 0\r## 33 526.1300 506.6576 545.6024 565 755 2 1 0 0\r## 34 547.4403 526.1468 568.7337 650 810 2 1 0 0\r## 35 470.3359 448.6563 492.0154 515 611 1 1 0 0\r## 36 506.7571 487.6799 525.8342 470 705 1 1 0 0\r## 37 452.1253 427.8562 476.3944 470 564 1 1 0 0\r## 38 807.8514 772.3992 843.3035 700 1250 3 2 0 1\r## 39 431.9774 404.1949 459.7599 455 512 1 1 1 0\r## 40 477.6976 456.8558 498.5395 550 630 1 1 0 0\r## 41 562.9387 539.5887 586.2886 625 850 2 1 1 0\r## 42 771.4302 738.2367 804.6237 745 1156 3 2 0 0\r## 43 594.7103 565.8488 623.5718 540 932 2 1 0 0\r## 44 526.1300 506.6576 545.6024 650 755 1 1 1 1\r## 45 747.0203 713.9093 780.1312 595 1093 2 2 1 0\r## 46 524.5802 505.1862 543.9741 470 751 1 1 1 0\r## 47 469.1735 447.3496 490.9974 480 608 1 1 0 0\r## 48 582.3116 555.7642 608.8590 460 900 1 1 0 1\r## 49 566.8132 542.8728 590.7537 600 860 2 1 0 0\r## 50 591.9981 563.6574 620.3388 575 925 2 1 0 0\r## 51 689.2888 651.9023 726.6754 659 944 2 2 0 0\r## 52 687.7390 650.1632 725.3148 650 940 2 2 0 0\r## 53 729.5846 695.8090 763.3602 750 1048 2 2 0 0\r## 54 417.2540 386.6020 447.9060 455 474 1 1 0 0\r## 55 504.8198 485.7109 523.9287 430 700 1 1 0 0\r## 56 590.4483 562.4017 618.4949 605 921 1 1 0 0\r## 57 799.7147 764.9734 834.4561 929 1229 2 2 1 0\r## 58 670.6908 630.8290 710.5526 695 896 2 2 0 0\r## 59 477.6976 456.8558 498.5395 455 630 1 1 1 0\r## 60 1045.7513 964.5360 1126.9667 1050 1864 5 2 0 0\r## Distance Shuttle Age\r## 1 10.5 1 9\r## 2 6.5 1 17\r## 3 6.5 1 17\r## 4 4.0 1 9\r## 5 5.0 1 30\r## 6 6.5 1 19\r## 7 7.0 1 17\r## 8 6.5 1 16\r## 9 7.0 1 17\r## 10 5.0 1 3\r## 11 5.5 1 3\r## 12 6.0 1 20\r## 13 5.0 1 27\r## 14 6.0 1 22\r## 15 7.0 1 10\r## 16 8.0 0 27\r## 17 6.5 1 16\r## 18 3.0 1 12\r## 19 7.0 0 25\r## 20 6.0 1 13\r## 21 6.5 1 9\r## 22 3.0 1 26\r## 23 8.0 1 18\r## 24 5.0 1 10\r## 25 6.0 1 25\r## 26 6.0 1 22\r## 27 7.0 0 25\r## 28 6.5 1 19\r## 29 7.0 1 15\r## 30 6.5 1 14\r## 31 6.5 1 9\r## 32 6.0 1 25\r## 33 3.0 1 12\r## 34 2.0 1 32\r## 35 6.5 1 17\r## 36 7.5 0 13\r## 37 5.0 1 10\r## 38 4.0 1 9\r## 39 10.0 0 10\r## 40 2.0 1 32\r## 41 7.0 1 1\r## 42 7.5 0 13\r## 43 6.0 1 22\r## 44 1.1 1 26\r## 45 5.5 1 3\r## 46 5.0 1 3\r## 47 6.0 1 15\r## 48 4.0 1 9\r## 49 6.0 1 25\r## 50 6.0 1 23\r## 51 7.0 1 25\r## 52 8.0 0 27\r## 53 7.0 1 3\r## 54 5.0 1 10\r## 55 6.0 1 20\r## 56 7.5 0 13\r## 57 5.0 1 11\r## 58 6.5 1 19\r## 59 5.5 1 9\r## 60 6.0 1 22\rp2a\r## fit lwr upr\r## 1 427.3279 398.6624 455.9935\r## 2 710.9866 675.8776 746.0955\rmodel3 \u0026lt;- lm(Rent ~ Area + Bathrooms + Security + Parking + Distance, data = data1)\rsummary(model3)\r## ## Call:\r## lm(formula = Rent ~ Area + Bathrooms + Security + Parking + Distance, ## data = data1)\r## ## Residuals:\r## Min 1Q Median 3Q Max ## -163.199 -37.278 4.548 38.345 149.276 ## ## Coefficients:\r## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 167.45045 43.12346 3.883 0.000283 ***\r## Area 0.39647 0.05084 7.798 2.09e-10 ***\r## Bathrooms 92.60040 28.01804 3.305 0.001691 ** ## Security -0.67875 22.42818 -0.030 0.975969 ## Parking -38.26531 25.89638 -1.478 0.145316 ## Distance -4.92937 5.05014 -0.976 0.333374 ## ---\r## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\r## ## Residual standard error: 64.02 on 54 degrees of freedom\r## Multiple R-squared: 0.81, Adjusted R-squared: 0.7925 ## F-statistic: 46.06 on 5 and 54 DF, p-value: \u0026lt; 2.2e-16\rmodel4 \u0026lt;- lm(Rent ~ Distance + Parking + Security + Bathrooms + Area, data = data1)\rsummary(model4)\r## ## Call:\r## lm(formula = Rent ~ Distance + Parking + Security + Bathrooms + ## Area, data = data1)\r## ## Residuals:\r## Min 1Q Median 3Q Max ## -163.199 -37.278 4.548 38.345 149.276 ## ## Coefficients:\r## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 167.45045 43.12346 3.883 0.000283 ***\r## Distance -4.92937 5.05014 -0.976 0.333374 ## Parking -38.26531 25.89638 -1.478 0.145316 ## Security -0.67875 22.42818 -0.030 0.975969 ## Bathrooms 92.60040 28.01804 3.305 0.001691 ** ## Area 0.39647 0.05084 7.798 2.09e-10 ***\r## ---\r## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\r## ## Residual standard error: 64.02 on 54 degrees of freedom\r## Multiple R-squared: 0.81, Adjusted R-squared: 0.7925 ## F-statistic: 46.06 on 5 and 54 DF, p-value: \u0026lt; 2.2e-16\r#Multicollinearity\r#http://www.sthda.com/english/articles/39-regression-model-diagnostics/160-multicollinearity-essentials-and-vif-in-r/\rlibrary(caret)\r## Warning: package \u0026#39;caret\u0026#39; was built under R version 4.0.2\rset.seed(1234)\ry \u0026lt;- runif(50,min=0, max =100)\rx1 \u0026lt;- runif(50, min = 0, max = 100)\rx2 \u0026lt;- runif(50, min = 0, max = 100)\rz1 \u0026lt;- x1+x2\rz2 \u0026lt;- x1 + x2 + 0.005*runif(50,min=0, max =100)\rlist \u0026lt;- cbind(y,x1,x2,z1,z2)\rlist\r## y x1 x2 z1 z2\r## [1,] 11.3703411 7.377988 3.545673 10.92366 11.14318\r## [2,] 62.2299405 30.968660 56.507611 87.47627 87.59057\r## [3,] 60.9274733 71.727174 28.025778 99.75295 99.79403\r## [4,] 62.3379442 50.454591 20.419632 70.87422 71.29936\r## [5,] 86.0915384 15.299896 13.373890 28.67379 28.79112\r## [6,] 64.0310605 50.393349 32.568192 82.96154 83.45562\r## [7,] 0.9495756 49.396092 15.506197 64.90229 65.20324\r## [8,] 23.2550506 75.120020 12.996214 88.11623 88.61560\r## [9,] 66.6083758 17.464982 43.553106 61.01809 61.20589\r## [10,] 51.4251141 84.839241 3.864265 88.70351 88.98107\r## [11,] 69.3591292 86.483383 71.330156 157.81354 158.02826\r## [12,] 54.4974836 4.185728 10.076904 14.26263 14.55057\r## [13,] 28.2733584 31.718216 95.030494 126.74871 126.96496\r## [14,] 92.3433484 1.374994 12.181776 13.55677 13.66919\r## [15,] 29.2315840 23.902573 21.965662 45.86823 45.91073\r## [16,] 83.7295628 70.649462 91.308777 161.95824 162.27689\r## [17,] 28.6223285 30.809476 94.585312 125.39479 125.61030\r## [18,] 26.6820780 50.854757 27.915622 78.77038 78.80674\r## [19,] 18.6722790 5.164662 12.347109 17.51177 17.91297\r## [20,] 23.2225911 56.456984 79.716046 136.17303 136.33567\r## [21,] 31.6612455 12.148019 74.427722 86.57574 86.95438\r## [22,] 30.2693371 89.283638 91.597422 180.88106 181.17320\r## [23,] 15.9046003 1.462726 99.459825 100.92255 101.27697\r## [24,] 3.9995918 78.312110 94.236072 172.54818 172.76167\r## [25,] 21.8799541 8.996133 48.613541 57.60967 57.78146\r## [26,] 81.0598552 51.918998 28.345954 80.26495 80.64451\r## [27,] 52.5697547 38.426669 25.154570 63.58124 63.79325\r## [28,] 91.4658166 7.005250 50.325517 57.33077 57.61121\r## [29,] 83.1345047 32.064442 49.696617 81.76106 81.81913\r## [30,] 4.5770263 66.849540 31.844581 98.69412 98.84563\r## [31,] 45.6091482 92.640048 96.222283 188.86233 189.10173\r## [32,] 26.5186672 47.190972 63.409937 110.60091 110.77332\r## [33,] 30.4672203 14.261534 12.743340 27.00487 27.30523\r## [34,] 50.7306870 54.426976 42.304699 96.73167 96.76972\r## [35,] 18.1096208 19.617465 91.431691 111.04916 111.52715\r## [36,] 75.9670635 89.858049 46.779233 136.63728 136.64839\r## [37,] 20.1248038 38.949978 90.816915 129.76689 130.18775\r## [38,] 25.8809819 31.087078 59.774328 90.86141 91.17763\r## [39,] 99.2150418 16.002866 63.174282 79.17715 79.33219\r## [40,] 80.7352340 89.618585 86.915832 176.53442 176.90570\r## [41,] 55.3333591 16.639378 50.274982 66.91436 67.23382\r## [42,] 64.6406094 90.042460 98.363511 188.40597 188.90223\r## [43,] 31.1824307 13.407820 32.438603 45.84642 45.91056\r## [44,] 62.1819198 13.161413 48.137495 61.29891 61.74053\r## [45,] 32.9770176 10.528750 35.698708 46.22746 46.63250\r## [46,] 50.1997473 51.158358 62.747768 113.90613 114.31705\r## [47,] 67.7094527 30.019905 74.160019 104.17992 104.59728\r## [48,] 48.4991239 2.671690 56.596682 59.26837 59.63474\r## [49,] 24.3928827 30.964743 98.078651 129.04339 129.53492\r## [50,] 76.5459788 74.211966 57.681274 131.89324 132.21284\rcor(list)\r## y x1 x2 z1 z2\r## y 1.0000000000 0.07758827 -0.07522322 -0.0005374415 -0.0008533985\r## x1 0.0775882672 1.00000000 0.25313221 0.7815275201 0.7811302343\r## x2 -0.0752232228 0.25313221 1.00000000 0.8013821453 0.8017562132\r## z1 -0.0005374415 0.78152752 0.80138215 1.0000000000 0.9999955888\r## z2 -0.0008533985 0.78113023 0.80175621 0.9999955888 1.0000000000\r#model catches exact multicollinearity easily\rmcmodel1 \u0026lt;- lm(y ~ x1+x2+z1+z2)\rsummary(mcmodel1)\r## ## Call:\r## lm(formula = y ~ x1 + x2 + z1 + z2)\r## ## Residuals:\r## Min 1Q Median 3Q Max ## -48.767 -21.484 -2.126 19.999 53.375 ## ## Coefficients: (1 not defined because of singularities)\r## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 51.22 10.53 4.865 1.38e-05 ***\r## x1 15.81 28.05 0.563 0.576 ## x2 15.65 28.09 0.557 0.580 ## z1 NA NA NA NA ## z2 -15.72 28.06 -0.560 0.578 ## ---\r## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\r## ## Residual standard error: 26.93 on 46 degrees of freedom\r## Multiple R-squared: 0.0223, Adjusted R-squared: -0.04146 ## F-statistic: 0.3498 on 3 and 46 DF, p-value: 0.7895\r#has a harder time catching near multicollinearity useful to use VIF or tolerance\rmcmodel2 \u0026lt;- lm(y ~ x1+x2+z2)\rsummary(mcmodel2)\r## ## Call:\r## lm(formula = y ~ x1 + x2 + z2)\r## ## Residuals:\r## Min 1Q Median 3Q Max ## -48.767 -21.484 -2.126 19.999 53.375 ## ## Coefficients:\r## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 51.22 10.53 4.865 1.38e-05 ***\r## x1 15.81 28.05 0.563 0.576 ## x2 15.65 28.09 0.557 0.580 ## z2 -15.72 28.06 -0.560 0.578 ## ---\r## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\r## ## Residual standard error: 26.93 on 46 degrees of freedom\r## Multiple R-squared: 0.0223, Adjusted R-squared: -0.04146 ## F-statistic: 0.3498 on 3 and 46 DF, p-value: 0.7895\rcar::vif(mcmodel2)\r## x1 x2 z2 ## 45305.13 49446.24 118711.40\r#Can drop the collinear term\rmcmodel3 \u0026lt;- lm(y ~ x1+x2)\rsummary(mcmodel3)\r## ## Call:\r## lm(formula = y ~ x1 + x2)\r## ## Residuals:\r## Min 1Q Median 3Q Max ## -50.044 -19.925 -0.354 19.215 55.525 ## ## Coefficients:\r## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 47.74591 8.44508 5.654 8.96e-07 ***\r## x1 0.09332 0.13522 0.690 0.493 ## x2 -0.08784 0.12964 -0.678 0.501 ## ---\r## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\r## ## Residual standard error: 26.73 on 47 degrees of freedom\r## Multiple R-squared: 0.01564, Adjusted R-squared: -0.02625 ## F-statistic: 0.3733 on 2 and 47 DF, p-value: 0.6905\rcar::vif(mcmodel3)\r## x1 x2 ## 1.068463 1.068463\r#Or drop the other one\rmcmodel4 \u0026lt;- lm(y ~ x1+z2)\rsummary(mcmodel4)\r## ## Call:\r## lm(formula = y ~ x1 + z2)\r## ## Residuals:\r## Min 1Q Median 3Q Max ## -50.050 -19.928 -0.363 19.217 55.519 ## ## Coefficients:\r## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 47.77939 8.46296 5.646 9.21e-07 ***\r## x1 0.18145 0.20950 0.866 0.391 ## z2 -0.08807 0.12948 -0.680 0.500 ## ---\r## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\r## ## Residual standard error: 26.73 on 47 degrees of freedom\r## Multiple R-squared: 0.01571, Adjusted R-squared: -0.02618 ## F-statistic: 0.3751 on 2 and 47 DF, p-value: 0.6893\rcar::vif(mcmodel4)\r## x1 z2 ## 2.565184 2.565184\r#normality check\r#https://www.statmethods.net/stats/regression.html\rnmodel \u0026lt;- summary(model2)\rnmodel$residuals\r## 1 2 3 4 5 6 ## 4.493754 55.950733 55.033809 -106.927120 -51.073841 37.578930 ## 7 8 9 10 11 12 ## 65.493754 120.893095 71.029094 -10.744020 -86.203964 -23.565690 ## 13 14 15 16 17 18 ## -75.687837 -84.819765 31.434310 -48.823026 43.515067 9.922899 ## 19 20 21 22 23 24 ## -64.562429 79.035614 25.236418 19.622717 -7.162278 43.016698 ## 25 26 27 28 29 30 ## -23.694358 -53.011137 -98.070580 68.556457 25.217205 -10.982143 ## 31 32 33 34 35 36 ## 11.029094 -44.321396 38.869976 102.559718 44.664107 -36.757062 ## 37 38 39 40 41 42 ## 17.874692 -107.851374 23.022573 72.302382 62.061348 -26.430205 ## 43 44 45 46 47 48 ## -54.710310 123.869976 -152.020273 -54.580187 10.826485 -122.311614 ## 49 50 51 52 53 54 ## 33.186756 -16.998095 -30.288845 -37.739008 20.415393 37.746024 ## 55 56 57 58 59 60 ## -74.819765 14.551742 129.285270 24.309199 -22.697618 4.248650\rlayout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page\rplot(model2)\rhist(nmodel$residuals)\r#Runs different tests for normality run from the predicted values for rent\rp3 \u0026lt;- predict(model2)\rsummary(p3)\r## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 417.3 491.6 526.1 572.3 640.7 1045.8\rsd(p3)\r## [1] 125.7441\r#H0: from normal distribution p \u0026lt; 0.05 reject\rshapiro.test(p3)\r## ## Shapiro-Wilk normality test\r## ## data: p3\r## W = 0.86842, p-value = 1.114e-05\r#compares if two samples are from same distribution so comparing to a normal distribution H0: from different distributions p \u0026lt; 0.05 reject\rks.test(p3, rnorm(60,572.3,125.7441))\r## Warning in ks.test(p3, rnorm(60, 572.3, 125.7441)): cannot compute exact p-value\r## with ties\r## ## Two-sample Kolmogorov-Smirnov test\r## ## data: p3 and rnorm(60, 572.3, 125.7441)\r## D = 0.18333, p-value = 0.2656\r## alternative hypothesis: two-sided\r#Linearity Test\r#https://bookdown.org/ccolonescu/RPoE4/further-inference-in-multiple-regression.html\r#http://r-statistics.co/Statistical-Tests-in-R.html\rlibrary(lmtest)\r## Warning: package \u0026#39;lmtest\u0026#39; was built under R version 4.0.2\r#Ramsey RESET test test whether higher order polynomials are necessary H0: no higher order polynomials are necssary\rresettest(model3, power = 2:3, type = \u0026#39;fitted\u0026#39;)\r## ## RESET test\r## ## data: model3\r## RESET = 1.3333, df1 = 2, df2 = 52, p-value = 0.2725\rresettest(model3, power = 2:3, type = \u0026#39;regressor\u0026#39;)\r## ## RESET test\r## ## data: model3\r## RESET = 2.0443, df1 = 10, df2 = 44, p-value = 0.05111\r#Heteroscedasticity\r#Put simply, heteroscedasticity (also spelled heteroskedasticity) refers to the circumstance in which the variability of a variable is unequal across the range of values of a second variable that predicts it.\r#http://www.statsmakemecry.com/smmctheblog/confusing-stats-terms-explained-heteroscedasticity-heteroske.html\r#Fisher Test can be used to tell if two samples have the same variance H0: ratio of variances is 1 aka they are the same p \u0026lt; 0.05 reject H0\rvar.test(sample(35,p3, replace = TRUE),sample(35,p3, replace = TRUE))\r## ## F test to compare two variances\r## ## data: sample(35, p3, replace = TRUE) and sample(35, p3, replace = TRUE)\r## F = 0.91901, num df = 513, denom df = 513, p-value = 0.3391\r## alternative hypothesis: true ratio of variances is not equal to 1\r## 95 percent confidence interval:\r## 0.7728094 1.0928623\r## sample estimates:\r## ratio of variances ## 0.9190072\r#Independance #Chi square tests if two caterogical variables are dependant on each other H0: variables are independant p \u0026lt; 0.05 reject H0\rchisq.test(table(data1$Bedrooms,data1$Bathrooms))\r## Warning in chisq.test(table(data1$Bedrooms, data1$Bathrooms)): Chi-squared\r## approximation may be incorrect\r## ## Pearson\u0026#39;s Chi-squared test\r## ## data: table(data1$Bedrooms, data1$Bathrooms)\r## X-squared = 29.391, df = 3, p-value = 1.853e-06\rsummary(table(data1$Bedrooms,data1$Bathrooms))\r## Number of cases in table: 60 ## Number of factors: 2 ## Test for independence of all factors:\r## Chisq = 29.391, df = 3, p-value = 1.853e-06\r## Chi-squared approximation may be incorrect\r#Correlation test between two continuous variables H0: correlation is 0 aka they are independant p \u0026lt; 0.05 reject H0\r#All show some correlation\rcor.test(data1$Rent, data1$Area)\r## ## Pearson\u0026#39;s product-moment correlation\r## ## data: data1$Rent and data1$Area\r## t = 13.702, df = 58, p-value \u0026lt; 2.2e-16\r## alternative hypothesis: true correlation is not equal to 0\r## 95 percent confidence interval:\r## 0.7970327 0.9231055\r## sample estimates:\r## cor ## 0.8740597\rcor.test(data1$Bedrooms, data1$Area)\r## ## Pearson\u0026#39;s product-moment correlation\r## ## data: data1$Bedrooms and data1$Area\r## t = 12.811, df = 58, p-value \u0026lt; 2.2e-16\r## alternative hypothesis: true correlation is not equal to 0\r## 95 percent confidence interval:\r## 0.7747757 0.9140118\r## sample estimates:\r## cor ## 0.8595894\rcor.test(data1$Bedrooms, data1$Bathrooms)\r## ## Pearson\u0026#39;s product-moment correlation\r## ## data: data1$Bedrooms and data1$Bathrooms\r## t = 6.6217, df = 58, p-value = 1.262e-08\r## alternative hypothesis: true correlation is not equal to 0\r## 95 percent confidence interval:\r## 0.4826241 0.7800925\r## sample estimates:\r## cor ## 0.6561389\rcor.test(data1$Bedrooms, data1$Bathrooms)\r## ## Pearson\u0026#39;s product-moment correlation\r## ## data: data1$Bedrooms and data1$Bathrooms\r## t = 6.6217, df = 58, p-value = 1.262e-08\r## alternative hypothesis: true correlation is not equal to 0\r## 95 percent confidence interval:\r## 0.4826241 0.7800925\r## sample estimates:\r## cor ## 0.6561389\r#Are uncorrelated\rcor.test(data1$Area, data1$Distance)\r## ## Pearson\u0026#39;s product-moment correlation\r## ## data: data1$Area and data1$Distance\r## t = -0.4492, df = 58, p-value = 0.655\r## alternative hypothesis: true correlation is not equal to 0\r## 95 percent confidence interval:\r## -0.3081967 0.1980052\r## sample estimates:\r## cor ## -0.05887988\r#Both of these tests use log parameters as well as lag and leads to determine if the variance changes or if the predictors are truly independant of each other\r#Other helpful Stat and R learning\r#http://faculty.marshall.usc.edu/gareth-james/ISL/index.html\r#https://web.stanford.edu/~hastie/ElemStatLearn/\r#Essentials of Machine Learning https://www.analyticsvidhya.com/blog/2017/09/common-machine-learning-algorithms/\r#CLT and Stat Basics https://www.analyticsvidhya.com/blog/2019/05/statistics-101-introduction-central-limit-theorem/\rAdd a new chunk by clicking the Insert Chunk button on the toolbar or by pressing Ctrl+Alt+I.\nWhen you save the notebook, an HTML file containing the code and output will be saved alongside it (click the Preview button or press Ctrl+Shift+K to preview the HTML file).\nThe preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike Knit, Preview does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.\n","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577836800,"objectID":"4816b12f6f91359cb34bc23903964894","permalink":"/post/orie/stat_basics/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/post/orie/stat_basics/","section":"post","summary":"This post explores some of the basic concepts of statistics.\rI mostly explore these concepts using linear regression.\rThis is a reproducible example if you have R Studio just make sure you have installed the correct packages.","tags":["R Markdown","Regression","Statistics","Statistical Testing"],"title":"Statistic Basics and Linear Regression","type":"post"},{"authors":["Erick Jones","Benjamin Leibowicz"],"categories":null,"content":"Abstract: The climate change impacts of the anticipated growth in shared autonomous vehicles (SAVs) are highly uncertain due to competing mechanisms whose magnitudes are difficult to estimate. On the one hand, SAVs could reduce greenhouse gas emissions by driving more efficiently, avoiding traffic congestion, accelerating adoption of alternative fuel vehicles, and charging in alignment with renewable electricity generation. On the other hand, SAVs could induce more vehicle miles traveled (VMT) by lowering the time cost of travel and allowing non-drivers to travel more by car. In this study, we develop an energy system optimization model that integrates the electricity and transport sectors, computes endogenous technology adoption, and distinguishes SAVs from privately owned vehicles (POVs) to explore the contributions of SAVs to climate change mitigation. Our results show that widespread SAV adoption lowers costs and emissions, and that these desirable outcomes remain true even if SAVs induce double the VMT of the POVs they replace. SAVs dramatically accelerate the market penetration of electric vehicles. The environmental and economic benefits of this electrification trend are larger if electric SAV charging can be optimally aligned with renewable electricity generation. Especially in the short to medium term, SAV adoption can be a more impactful lever than a carbon tax for decarbonizing vehicle travel.\nKeywords: Autonomous vehicles; Ridesharing; Decarbonization; Climate change mitigation; Energy system modeling; Electric vehicles\n","date":1561939200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1561939200,"objectID":"d2e1bd7e472646bb01c83658626c0ee9","permalink":"/publication/contributions-of-shared-autonomous-vehicles-to-climate-change-mitigation/","publishdate":"2019-07-01T00:00:00Z","relpermalink":"/publication/contributions-of-shared-autonomous-vehicles-to-climate-change-mitigation/","section":"publication","summary":"Looks into how an autonomous shared self driving pardigm could affect climate change.","tags":["Source Themes"],"title":"Contributions of shared autonomous vehicles to climate change mitigation","type":"publication"},{"authors":null,"categories":["Systems Modeling"],"content":"\r\rI extended the work of (Wu and Plantinga 2003) using R and certain equation modififications to investigate how the addition of a light rail line would influence a city.\nCities have housed most of the human race since 2004 and as a result influence most of the individual, commercial, and industrial energy and GHG patterns. However, city designs, have placed amenities in isolated suburban pockets, the abundance of roads have encouraged sprawl, and zoning laws have discouraged density. Therefore, for this study I will investigate how these choices can positively or negatively influence a city’s environmental footprint.\nI extended the work of (Wu and Plantinga 2003) using R and certain equation modififications to investigate how the addition of a light rail line would influence a city. First, I tried to replicate their city without any parks using their parameters. Second, I made some modifications to get the city to a scale that I could represent graphically. Third, I modeled the light rail as an amenity to see the influence it has on the city. Finally, I modeled the light rail so that it reduced travel costs for the citizens close to it instead of providing an amenity value.\rThe parameters I used where nearly identical to the (Wu and Plantinga 2003) parameters; however I did have to make some minor modifications. The given utility produced a much larger area then was graphically tractable, so I increased it to 6,000 for all the models excluding the original monocentric model which uses the original utility value. The transport cost for the rail is set to half of the normal transport costs (t¬¬rail=$500). The original parameters are shown in Table 1.\nWu, Jun Jie, and Andrew J. Plantinga. 2003. “The Influence of Public Open Space on Urban Spatial Structure.” Journal of Environmental Economics and Management 46 (2): 288–309. https://doi.org/10.1016/S0095-0696(03)00023-8.\nrequire(ggplot2)\r## Loading required package: ggplot2\r## Warning: package \u0026#39;ggplot2\u0026#39; was built under R version 4.0.2\rrequire(grid)\r## Loading required package: grid\rrequire(gridExtra)\r## Loading required package: gridExtra\rrequire(RColorBrewer)\r## Loading required package: RColorBrewer\rrequire(viridis)\r## Loading required package: viridis\r## Warning: package \u0026#39;viridis\u0026#39; was built under R version 4.0.2\r## Loading required package: viridisLite\r#budget #median income per capita Austin https://www.deptofnumbers.com/income/texas/austin/\ry \u0026lt;- 40000\ru \u0026lt;- c(0:150)\rv \u0026lt;- c(0:150)\r#Loop to give 15 miles worth of u and v\ri \u0026lt;- 0\rj \u0026lt;- 0\rii \u0026lt;- 1\rwhile(i \u0026lt; 151){\rj \u0026lt;- 0\rwhile(j \u0026lt; 151){\ru[ii] \u0026lt;- i/5 - 15\rv[ii] \u0026lt;- j/5 - 15\rj \u0026lt;- j+1\rii \u0026lt;- ii+1\r}\ri \u0026lt;- i +1\r}\r#distance from center\rx \u0026lt;- sqrt(u^2+v^2)\r#transportation cost 50 cents a mile by 320 days\rt \u0026lt;- 1000\r#housing price per sqft vector\rp \u0026lt;- c(0:150)\r#housing consumption (sqft) by mile vector\rq \u0026lt;- c(0:150)\r#general good\rg \u0026lt;- c(0:150)\r#utility level\rV \u0026lt;- 4200\r#alpha for Cobb Douglas\ral \u0026lt;- .5\r#beta for development cobb-douglas\rbt \u0026lt;- 4/3\r#capital c0 \u0026lt;- 0\r#amentiy\rad \u0026lt;- 0.16\rng \u0026lt;- 1\rd \u0026lt;- 0\r#gamma for amenity\rgm \u0026lt;- 0.5\r#z distance to amentiy\rz \u0026lt;- sqrt((x-d)^2)\r#land rent/acre\rr \u0026lt;- c(0:150)\r#Housing floor space / acre\rs \u0026lt;- c(0:150)\r#ag rent\r#Ausitn is about 8000 https://heritagelandbank.com/announcements/news-events/how-much-average-price-land-texas\rag \u0026lt;- 8000\r#Multiplier values\rtm1 \u0026lt;- 1 - 0\rtm2 \u0026lt;- 1 - 0\rtm3 \u0026lt;- 1 - 0\rtm4 \u0026lt;- 1 - 0\rim1 \u0026lt;- 1 + 0\rim2 \u0026lt;- 1 + 0\rim3 \u0026lt;- 1 + 0\rim4 \u0026lt;- 1 + 0\ram1 \u0026lt;- 1 + 0\ram2 \u0026lt;- 1 + 0\ram3 \u0026lt;- 1 + 0\ram4 \u0026lt;- 1 + 0\r#monocentric original model parameters, Iterations to determine Utility Value (V) that gives start of about 100k\rV \u0026lt;- 4000\ri \u0026lt;- 1\rNN \u0026lt;- c(1:10)\rwhile(i \u0026lt;= 10){\r#finding x for various u,v\rx \u0026lt;- sqrt(u^2+v^2)\r#z distance to amentiy\rz \u0026lt;- sqrt((x-d)^2)\r#amentiy distribution\ram \u0026lt;- 1 + ad*(exp(-ng*z))\r#finding the price for various u,v\rp \u0026lt;- (al^al*(1-al)^(1-al)*am^gm*(y-t*x)/V)^(1/al)\r#optimal q\rq \u0026lt;- al*(y-t*x)/p\r#optimal g\rg \u0026lt;- (1-al)*(y-t*x)\r#theta some funciton of beta\rph \u0026lt;- ((bt-1)^((bt-1)/bt))/bt\r#optimal r\rr \u0026lt;- (ph*p)^(bt/(bt-1))\rr1 \u0026lt;- ((ph*al)^al * (1-al)^(1-al) * (y-t*x)/V)^(bt/(al*(bt-1)))\r#optimal s\rs \u0026lt;- (p/bt)^(1/(bt-1))\rs1 \u0026lt;- (bt-1)^(-1/bt) * (r)^(1/bt)\r#population n s(floorspaceperacre/ floorspace per household * (size of square (sqmi)) * acres/sqmi * fraction of housing in area)\rn \u0026lt;- s/q * (.2*.2) * 640 * .25 #s \u0026lt;- n*q /(1 * 640 * .25 )\r#q \u0026lt;- s/(n*(1 * 640 * .25 ))\r#Utility Value\rU \u0026lt;- q^al*g^(1-al)\rdfsc \u0026lt;- data.frame(u,v,x,p,g,q,s,r,U,n)\r#delete values where ag rent exceeds land rent\rdfsc1 \u0026lt;- dfsc[(dfsc$r \u0026gt; ag),]\r#total population\rNN[i] \u0026lt;- sum(dfsc1$n)\rprint(V)\rV \u0026lt;- V + 50\ri \u0026lt;- i + 1\r}\r## [1] 4000\r## [1] 4050\r## [1] 4100\r## [1] 4150\r## [1] 4200\r## [1] 4250\r## [1] 4300\r## [1] 4350\r## [1] 4400\r## [1] 4450\rdfsc1\r## u v x p g q s r\r## 8531 -3.8 -0.2 3.8052595 16.59795 18097.37 1090.3376 1929.067 8004.640\r## 8532 -3.8 0.0 3.8000000 16.60309 18100.00 1090.1587 1930.858 8014.550\r## 8533 -3.8 0.2 3.8052595 16.59795 18097.37 1090.3376 1929.067 8004.640\r## 8677 -3.6 -1.2 3.7947332 16.60823 18102.63 1089.9796 1932.653 8024.487\r## 8678 -3.6 -1.0 3.7363083 16.66547 18131.85 1087.9889 1952.704 8135.684\r## 8679 -3.6 -0.8 3.6878178 16.71322 18156.09 1086.3309 1969.539 8229.335\r## 8680 -3.6 -0.6 3.6496575 16.75097 18175.17 1085.0221 1982.913 8303.926\r## 8681 -3.6 -0.4 3.6221541 16.77826 18188.92 1084.0766 1992.622 8358.184\r## 8682 -3.6 -0.2 3.6055513 16.79478 18197.22 1083.5048 1998.512 8391.142\r## 8683 -3.6 0.0 3.6000000 16.80031 18200.00 1083.3134 2000.486 8402.197\r## 8684 -3.6 0.2 3.6055513 16.79478 18197.22 1083.5048 1998.512 8391.142\r## 8685 -3.6 0.4 3.6221541 16.77826 18188.92 1084.0766 1992.622 8358.184\r## 8686 -3.6 0.6 3.6496575 16.75097 18175.17 1085.0221 1982.913 8303.926\r## 8687 -3.6 0.8 3.6878178 16.71322 18156.09 1086.3309 1969.539 8229.335\r## 8688 -3.6 1.0 3.7363083 16.66547 18131.85 1087.9889 1952.704 8135.684\r## 8689 -3.6 1.2 3.7947332 16.60823 18102.63 1089.9796 1932.653 8024.487\r## 8826 -3.4 -1.6 3.7576588 16.64452 18121.17 1088.7172 1945.348 8094.844\r## 8827 -3.4 -1.4 3.6769553 16.72395 18161.52 1085.9587 1973.334 8250.487\r## 8828 -3.4 -1.2 3.6055513 16.79478 18197.22 1083.5048 1998.512 8391.142\r## 8829 -3.4 -1.0 3.5440090 16.85626 18228.00 1081.3786 2020.539 8514.682\r## 8830 -3.4 -0.8 3.4928498 16.90768 18253.58 1079.6024 2039.089 8619.067\r## 8831 -3.4 -0.6 3.4525353 16.94842 18273.73 1078.1967 2053.864 8702.437\r## 8832 -3.4 -0.4 3.4234486 16.97794 18288.28 1077.1790 2064.612 8763.212\r## 8833 -3.4 -0.2 3.4058773 16.99581 18297.06 1076.5628 2071.141 8800.184\r## 8834 -3.4 0.0 3.4000000 17.00180 18300.00 1076.3564 2073.332 8812.595\r## 8835 -3.4 0.2 3.4058773 16.99581 18297.06 1076.5628 2071.141 8800.184\r## 8836 -3.4 0.4 3.4234486 16.97794 18288.28 1077.1790 2064.612 8763.212\r## 8837 -3.4 0.6 3.4525353 16.94842 18273.73 1078.1967 2053.864 8702.437\r## 8838 -3.4 0.8 3.4928498 16.90768 18253.58 1079.6024 2039.089 8619.067\r## 8839 -3.4 1.0 3.5440090 16.85626 18228.00 1081.3786 2020.539 8514.682\r## 8840 -3.4 1.2 3.6055513 16.79478 18197.22 1083.5048 1998.512 8391.142\r## 8841 -3.4 1.4 3.6769553 16.72395 18161.52 1085.9587 1973.334 8250.487\r## 8842 -3.4 1.6 3.7576588 16.64452 18121.17 1088.7172 1945.348 8094.844\r## 8975 -3.2 -2.0 3.7735925 16.62891 18113.20 1089.2601 1939.880 8064.520\r## 8976 -3.2 -1.8 3.6715120 16.72933 18164.24 1085.7721 1975.240 8261.110\r## 8977 -3.2 -1.6 3.5777088 16.82254 18211.15 1082.5442 2008.439 8446.763\r## 8978 -3.2 -1.4 3.4928498 16.90768 18253.58 1079.6024 2039.089 8619.067\r## 8979 -3.2 -1.2 3.4176015 16.98388 18291.20 1076.9741 2066.782 8775.493\r## 8980 -3.2 -1.0 3.3526109 17.05025 18323.69 1074.6875 2091.107 8913.477\r## 8981 -3.2 -0.8 3.2984845 17.10595 18350.76 1072.7704 2111.667 9030.518\r## 8982 -3.2 -0.6 3.2557641 17.15019 18372.12 1071.2484 2128.094 9124.307\r## 8983 -3.2 -0.4 3.2249031 17.18231 18387.55 1070.1439 2140.074 9192.856\r## 8984 -3.2 -0.2 3.2062439 17.20180 18396.88 1069.4738 2147.364 9234.634\r## 8985 -3.2 0.0 3.2000000 17.20834 18400.00 1069.2492 2149.812 9248.670\r## 8986 -3.2 0.2 3.2062439 17.20180 18396.88 1069.4738 2147.364 9234.634\r## 8987 -3.2 0.4 3.2249031 17.18231 18387.55 1070.1439 2140.074 9192.856\r## 8988 -3.2 0.6 3.2557641 17.15019 18372.12 1071.2484 2128.094 9124.307\r## 8989 -3.2 0.8 3.2984845 17.10595 18350.76 1072.7704 2111.667 9030.518\r## 8990 -3.2 1.0 3.3526109 17.05025 18323.69 1074.6875 2091.107 8913.477\r## 8991 -3.2 1.2 3.4176015 16.98388 18291.20 1076.9741 2066.782 8775.493\r## 8992 -3.2 1.4 3.4928498 16.90768 18253.58 1079.6024 2039.089 8619.067\r## 8993 -3.2 1.6 3.5777088 16.82254 18211.15 1082.5442 2008.439 8446.763\r## 8994 -3.2 1.8 3.6715120 16.72933 18164.24 1085.7721 1975.240 8261.110\r## 8995 -3.2 2.0 3.7735925 16.62891 18113.20 1089.2601 1939.880 8064.520\r## 9125 -3.0 -2.2 3.7202150 16.68129 18139.89 1087.4392 1958.272 8166.627\r## 9126 -3.0 -2.0 3.6055513 16.79478 18197.22 1083.5048 1998.512 8391.142\r## 9127 -3.0 -1.8 3.4985711 16.90192 18250.71 1079.8014 2037.003 8607.315\r## 9128 -3.0 -1.6 3.4000000 17.00180 18300.00 1076.3564 2073.332 8812.595\r## 9129 -3.0 -1.4 3.3105891 17.09346 18344.71 1073.2002 2107.045 9004.172\r## 9130 -3.0 -1.2 3.2310989 17.17585 18384.45 1070.3660 2137.661 9179.040\r## 9131 -3.0 -1.0 3.1622777 17.24793 18418.86 1067.8883 2164.685 9334.081\r## 9132 -3.0 -0.8 3.1048349 17.30864 18447.58 1065.8018 2187.625 9466.205\r## 9133 -3.0 -0.6 3.0594117 17.35703 18470.29 1064.1390 2206.023 9572.504\r## 9134 -3.0 -0.4 3.0265492 17.39225 18486.73 1062.9286 2219.481 9650.444\r## 9135 -3.0 -0.2 3.0066593 17.41366 18496.67 1062.1929 2227.688 9698.051\r## 9136 -3.0 0.0 3.0000000 17.42085 18500.00 1061.9460 2230.446 9714.064\r## 9137 -3.0 0.2 3.0066593 17.41366 18496.67 1062.1929 2227.688 9698.051\r## 9138 -3.0 0.4 3.0265492 17.39225 18486.73 1062.9286 2219.481 9650.444\r## 9139 -3.0 0.6 3.0594117 17.35703 18470.29 1064.1390 2206.023 9572.504\r## 9140 -3.0 0.8 3.1048349 17.30864 18447.58 1065.8018 2187.625 9466.205\r## 9141 -3.0 1.0 3.1622777 17.24793 18418.86 1067.8883 2164.685 9334.081\r## 9142 -3.0 1.2 3.2310989 17.17585 18384.45 1070.3660 2137.661 9179.040\r## 9143 -3.0 1.4 3.3105891 17.09346 18344.71 1073.2002 2107.045 9004.172\r## 9144 -3.0 1.6 3.4000000 17.00180 18300.00 1076.3564 2073.332 8812.595\r## 9145 -3.0 1.8 3.4985711 16.90192 18250.71 1079.8014 2037.003 8607.315\r## 9146 -3.0 2.0 3.6055513 16.79478 18197.22 1083.5048 1998.512 8391.142\r## 9147 -3.0 2.2 3.7202150 16.68129 18139.89 1087.4392 1958.272 8166.627\r## 9275 -2.8 -2.4 3.6878178 16.71322 18156.09 1086.3309 1969.539 8229.335\r## 9276 -2.8 -2.2 3.5608988 16.83934 18219.55 1081.9632 2014.463 8480.560\r## 9277 -2.8 -2.0 3.4409301 16.96019 18279.53 1077.7910 2058.143 8726.622\r## 9278 -2.8 -1.8 3.3286634 17.07485 18335.67 1073.8408 2100.169 8965.018\r## 9279 -2.8 -1.6 3.2249031 17.18231 18387.55 1070.1439 2140.074 9192.856\r## 9280 -2.8 -1.4 3.1304952 17.28146 18434.75 1066.7360 2177.333 9406.871\r## 9281 -2.8 -1.2 3.0463092 17.37105 18476.85 1063.6572 2211.374 9603.473\r## 9282 -2.8 -1.0 2.9732137 17.44982 18513.39 1060.9501 2241.594 9778.855\r## 9283 -2.8 -0.8 2.9120440 17.51649 18543.98 1058.6583 2267.384 9929.151\r## 9284 -2.8 -0.6 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662\r## 9285 -2.8 -0.4 2.8284271 17.60880 18585.79 1055.4831 2303.418 10140.104\r## 9286 -2.8 -0.2 2.8071338 17.63253 18596.43 1054.6662 2312.745 10194.884\r## 9287 -2.8 0.0 2.8000000 17.64050 18600.00 1054.3917 2315.883 10213.336\r## 9288 -2.8 0.2 2.8071338 17.63253 18596.43 1054.6662 2312.745 10194.884\r## 9289 -2.8 0.4 2.8284271 17.60880 18585.79 1055.4831 2303.418 10140.104\r## 9290 -2.8 0.6 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662\r## 9291 -2.8 0.8 2.9120440 17.51649 18543.98 1058.6583 2267.384 9929.151\r## 9292 -2.8 1.0 2.9732137 17.44982 18513.39 1060.9501 2241.594 9778.855\r## 9293 -2.8 1.2 3.0463092 17.37105 18476.85 1063.6572 2211.374 9603.473\r## 9294 -2.8 1.4 3.1304952 17.28146 18434.75 1066.7360 2177.333 9406.871\r## 9295 -2.8 1.6 3.2249031 17.18231 18387.55 1070.1439 2140.074 9192.856\r## 9296 -2.8 1.8 3.3286634 17.07485 18335.67 1073.8408 2100.169 8965.018\r## 9297 -2.8 2.0 3.4409301 16.96019 18279.53 1077.7910 2058.143 8726.622\r## 9298 -2.8 2.2 3.5608988 16.83934 18219.55 1081.9632 2014.463 8480.560\r## 9299 -2.8 2.4 3.6878178 16.71322 18156.09 1086.3309 1969.539 8229.335\r## 9425 -2.6 -2.6 3.6769553 16.72395 18161.52 1085.9587 1973.334 8250.487\r## 9426 -2.6 -2.4 3.5383612 16.86192 18230.82 1081.1829 2022.576 8526.130\r## 9427 -2.6 -2.2 3.4058773 16.99581 18297.06 1076.5628 2071.141 8800.184\r## 9428 -2.6 -2.0 3.2802439 17.12481 18359.88 1072.1215 2118.659 9070.409\r## 9429 -2.6 -1.8 3.1622777 17.24793 18418.86 1067.8883 2164.685 9334.081\r## 9430 -2.6 -1.6 3.0528675 17.36403 18473.57 1063.8985 2208.693 9587.954\r## 9431 -2.6 -1.4 2.9529646 17.47181 18523.52 1060.1942 2250.079 9828.243\r## 9432 -2.6 -1.2 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662\r## 9433 -2.6 -1.0 2.7856777 17.65654 18607.16 1053.8394 2322.206 10250.534\r## 9434 -2.6 -0.8 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987\r## 9435 -2.6 -0.6 2.6683328 17.78969 18665.83 1049.2501 2375.138 10563.243\r## 9436 -2.6 -0.4 2.6305893 17.83321 18684.71 1047.7480 2392.611 10666.981\r## 9437 -2.6 -0.2 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732\r## 9438 -2.6 0.0 2.6000000 17.86874 18700.00 1046.5206 2406.940 10752.243\r## 9439 -2.6 0.2 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732\r## 9440 -2.6 0.4 2.6305893 17.83321 18684.71 1047.7480 2392.611 10666.981\r## 9441 -2.6 0.6 2.6683328 17.78969 18665.83 1049.2501 2375.138 10563.243\r## 9442 -2.6 0.8 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987\r## 9443 -2.6 1.0 2.7856777 17.65654 18607.16 1053.8394 2322.206 10250.534\r## 9444 -2.6 1.2 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662\r## 9445 -2.6 1.4 2.9529646 17.47181 18523.52 1060.1942 2250.079 9828.243\r## 9446 -2.6 1.6 3.0528675 17.36403 18473.57 1063.8985 2208.693 9587.954\r## 9447 -2.6 1.8 3.1622777 17.24793 18418.86 1067.8883 2164.685 9334.081\r## 9448 -2.6 2.0 3.2802439 17.12481 18359.88 1072.1215 2118.659 9070.409\r## 9449 -2.6 2.2 3.4058773 16.99581 18297.06 1076.5628 2071.141 8800.184\r## 9450 -2.6 2.4 3.5383612 16.86192 18230.82 1081.1829 2022.576 8526.130\r## 9451 -2.6 2.6 3.6769553 16.72395 18161.52 1085.9587 1973.334 8250.487\r## 9575 -2.4 -2.8 3.6878178 16.71322 18156.09 1086.3309 1969.539 8229.335\r## 9576 -2.4 -2.6 3.5383612 16.86192 18230.82 1081.1829 2022.576 8526.130\r## 9577 -2.4 -2.4 3.3941125 17.00781 18302.94 1076.1495 2075.529 8825.049\r## 9578 -2.4 -2.2 3.2557641 17.15019 18372.12 1071.2484 2128.094 9124.307\r## 9579 -2.4 -2.0 3.1240999 17.28822 18437.95 1066.5035 2179.891 9421.611\r## 9580 -2.4 -1.8 3.0000000 17.42085 18500.00 1061.9460 2230.446 9714.064\r## 9581 -2.4 -1.6 2.8844410 17.54681 18557.78 1057.6158 2279.177 9998.070\r## 9582 -2.4 -1.4 2.7784888 17.66461 18610.76 1053.5616 2325.391 10269.282\r## 9583 -2.4 -1.2 2.6832816 17.77255 18658.36 1049.8414 2368.280 10522.594\r## 9584 -2.4 -1.0 2.6000000 17.86874 18700.00 1046.5206 2406.940 10752.243\r## 9585 -2.4 -0.8 2.5298221 17.95117 18735.09 1043.6695 2440.406 10952.036\r## 9586 -2.4 -0.6 2.4738634 18.01787 18763.07 1041.3588 2467.711 11115.723\r## 9587 -2.4 -0.4 2.4331050 18.06702 18783.45 1039.6536 2487.962 11237.516\r## 9588 -2.4 -0.2 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680\r## 9589 -2.4 0.0 2.4000000 18.10732 18800.00 1038.2543 2504.644 11338.097\r## 9590 -2.4 0.2 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680\r## 9591 -2.4 0.4 2.4331050 18.06702 18783.45 1039.6536 2487.962 11237.516\r## 9592 -2.4 0.6 2.4738634 18.01787 18763.07 1041.3588 2467.711 11115.723\r## 9593 -2.4 0.8 2.5298221 17.95117 18735.09 1043.6695 2440.406 10952.036\r## 9594 -2.4 1.0 2.6000000 17.86874 18700.00 1046.5206 2406.940 10752.243\r## 9595 -2.4 1.2 2.6832816 17.77255 18658.36 1049.8414 2368.280 10522.594\r## 9596 -2.4 1.4 2.7784888 17.66461 18610.76 1053.5616 2325.391 10269.282\r## 9597 -2.4 1.6 2.8844410 17.54681 18557.78 1057.6158 2279.177 9998.070\r## 9598 -2.4 1.8 3.0000000 17.42085 18500.00 1061.9460 2230.446 9714.064\r## 9599 -2.4 2.0 3.1240999 17.28822 18437.95 1066.5035 2179.891 9421.611\r## 9600 -2.4 2.2 3.2557641 17.15019 18372.12 1071.2484 2128.094 9124.307\r## 9601 -2.4 2.4 3.3941125 17.00781 18302.94 1076.1495 2075.529 8825.049\r## 9602 -2.4 2.6 3.5383612 16.86192 18230.82 1081.1829 2022.576 8526.130\r## 9603 -2.4 2.8 3.6878178 16.71322 18156.09 1086.3309 1969.539 8229.335\r## 9725 -2.2 -3.0 3.7202150 16.68129 18139.89 1087.4392 1958.272 8166.627\r## 9726 -2.2 -2.8 3.5608988 16.83934 18219.55 1081.9632 2014.463 8480.560\r## 9727 -2.2 -2.6 3.4058773 16.99581 18297.06 1076.5628 2071.141 8800.184\r## 9728 -2.2 -2.4 3.2557641 17.15019 18372.12 1071.2484 2128.094 9124.307\r## 9729 -2.2 -2.2 3.1112698 17.30182 18444.37 1066.0364 2185.037 9451.277\r## 9730 -2.2 -2.0 2.9732137 17.44982 18513.39 1060.9501 2241.594 9778.855\r## 9731 -2.2 -1.8 2.8425341 17.59312 18578.73 1056.0224 2297.273 10104.053\r## 9732 -2.2 -1.6 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987\r## 9733 -2.2 -1.4 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732\r## 9734 -2.2 -1.2 2.5059928 17.97947 18747.00 1042.6897 2451.964 11021.252\r## 9735 -2.2 -1.0 2.4166092 18.08706 18791.70 1038.9580 2496.248 11287.445\r## 9736 -2.2 -0.8 2.3409400 18.18006 18829.53 1035.7245 2534.950 11521.384\r## 9737 -2.2 -0.6 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795\r## 9738 -2.2 -0.4 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785\r## 9739 -2.2 -0.2 2.2090722 18.34673 18895.46 1029.9090 2605.313 11949.745\r## 9740 -2.2 0.0 2.2000000 18.35843 18900.00 1029.4998 2610.300 11980.251\r## 9741 -2.2 0.2 2.2090722 18.34673 18895.46 1029.9090 2605.313 11949.745\r## 9742 -2.2 0.4 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785\r## 9743 -2.2 0.6 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795\r## 9744 -2.2 0.8 2.3409400 18.18006 18829.53 1035.7245 2534.950 11521.384\r## 9745 -2.2 1.0 2.4166092 18.08706 18791.70 1038.9580 2496.248 11287.445\r## 9746 -2.2 1.2 2.5059928 17.97947 18747.00 1042.6897 2451.964 11021.252\r## 9747 -2.2 1.4 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732\r## 9748 -2.2 1.6 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987\r## 9749 -2.2 1.8 2.8425341 17.59312 18578.73 1056.0224 2297.273 10104.053\r## 9750 -2.2 2.0 2.9732137 17.44982 18513.39 1060.9501 2241.594 9778.855\r## 9751 -2.2 2.2 3.1112698 17.30182 18444.37 1066.0364 2185.037 9451.277\r## 9752 -2.2 2.4 3.2557641 17.15019 18372.12 1071.2484 2128.094 9124.307\r## 9753 -2.2 2.6 3.4058773 16.99581 18297.06 1076.5628 2071.141 8800.184\r## 9754 -2.2 2.8 3.5608988 16.83934 18219.55 1081.9632 2014.463 8480.560\r## 9755 -2.2 3.0 3.7202150 16.68129 18139.89 1087.4392 1958.272 8166.627\r## 9875 -2.0 -3.2 3.7735925 16.62891 18113.20 1089.2601 1939.880 8064.520\r## 9876 -2.0 -3.0 3.6055513 16.79478 18197.22 1083.5048 1998.512 8391.142\r## 9877 -2.0 -2.8 3.4409301 16.96019 18279.53 1077.7910 2058.143 8726.622\r## 9878 -2.0 -2.6 3.2802439 17.12481 18359.88 1072.1215 2118.659 9070.409\r## 9879 -2.0 -2.4 3.1240999 17.28822 18437.95 1066.5035 2179.891 9421.611\r## 9880 -2.0 -2.2 2.9732137 17.44982 18513.39 1060.9501 2241.594 9778.855\r## 9881 -2.0 -2.0 2.8284271 17.60880 18585.79 1055.4831 2303.418 10140.104\r## 9882 -2.0 -1.8 2.6907248 17.76404 18654.64 1050.1351 2364.878 10502.445\r## 9883 -2.0 -1.6 2.5612497 17.91409 18719.38 1044.9525 2425.315 10861.828\r## 9884 -2.0 -1.4 2.4413111 18.05709 18779.34 1039.9985 2483.859 11212.816\r## 9885 -2.0 -1.2 2.3323808 18.19069 18833.81 1035.3542 2539.402 11548.369\r## 9886 -2.0 -1.0 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785\r## 9887 -2.0 -0.8 2.1540659 18.41814 18922.97 1027.4091 2635.854 12136.883\r## 9888 -2.0 -0.6 2.0880613 18.50542 18955.97 1024.3466 2673.505 12368.585\r## 9889 -2.0 -0.4 2.0396078 18.57067 18980.20 1022.0526 2701.881 12543.930\r## 9890 -2.0 -0.2 2.0099751 18.61108 18995.01 1020.6295 2719.557 12653.470\r## 9891 -2.0 0.0 2.0000000 18.62477 19000.00 1020.1469 2725.564 12690.750\r## 9892 -2.0 0.2 2.0099751 18.61108 18995.01 1020.6295 2719.557 12653.470\r## 9893 -2.0 0.4 2.0396078 18.57067 18980.20 1022.0526 2701.881 12543.930\r## 9894 -2.0 0.6 2.0880613 18.50542 18955.97 1024.3466 2673.505 12368.585\r## 9895 -2.0 0.8 2.1540659 18.41814 18922.97 1027.4091 2635.854 12136.883\r## 9896 -2.0 1.0 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785\r## 9897 -2.0 1.2 2.3323808 18.19069 18833.81 1035.3542 2539.402 11548.369\r## 9898 -2.0 1.4 2.4413111 18.05709 18779.34 1039.9985 2483.859 11212.816\r## 9899 -2.0 1.6 2.5612497 17.91409 18719.38 1044.9525 2425.315 10861.828\r## 9900 -2.0 1.8 2.6907248 17.76404 18654.64 1050.1351 2364.878 10502.445\r## 9901 -2.0 2.0 2.8284271 17.60880 18585.79 1055.4831 2303.418 10140.104\r## 9902 -2.0 2.2 2.9732137 17.44982 18513.39 1060.9501 2241.594 9778.855\r## 9903 -2.0 2.4 3.1240999 17.28822 18437.95 1066.5035 2179.891 9421.611\r## 9904 -2.0 2.6 3.2802439 17.12481 18359.88 1072.1215 2118.659 9070.409\r## 9905 -2.0 2.8 3.4409301 16.96019 18279.53 1077.7910 2058.143 8726.622\r## 9906 -2.0 3.0 3.6055513 16.79478 18197.22 1083.5048 1998.512 8391.142\r## 9907 -2.0 3.2 3.7735925 16.62891 18113.20 1089.2601 1939.880 8064.520\r## 10026 -1.8 -3.2 3.6715120 16.72933 18164.24 1085.7721 1975.240 8261.110\r## 10027 -1.8 -3.0 3.4985711 16.90192 18250.71 1079.8014 2037.003 8607.315\r## 10028 -1.8 -2.8 3.3286634 17.07485 18335.67 1073.8408 2100.169 8965.018\r## 10029 -1.8 -2.6 3.1622777 17.24793 18418.86 1067.8883 2164.685 9334.081\r## 10030 -1.8 -2.4 3.0000000 17.42085 18500.00 1061.9460 2230.446 9714.064\r## 10031 -1.8 -2.2 2.8425341 17.59312 18578.73 1056.0224 2297.273 10104.053\r## 10032 -1.8 -2.0 2.6907248 17.76404 18654.64 1050.1351 2364.878 10502.445\r## 10033 -1.8 -1.8 2.5455844 17.93254 18727.21 1044.3143 2432.816 10906.641\r## 10034 -1.8 -1.6 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680\r## 10035 -1.8 -1.4 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795\r## 10036 -1.8 -1.2 2.1633308 18.40603 18918.33 1027.8334 2630.658 12104.994\r## 10037 -1.8 -1.0 2.0591260 18.54426 18970.44 1022.9815 2690.373 12472.744\r## 10038 -1.8 -0.8 1.9697716 18.66655 19015.11 1018.6735 2743.946 12805.000\r## 10039 -1.8 -0.6 1.8973666 18.76841 19051.32 1015.0737 2789.113 13086.800\r## 10040 -1.8 -0.4 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655\r## 10041 -1.8 -0.2 1.8110770 18.89333 19094.46 1010.6459 2845.175 13438.704\r## 10042 -1.8 0.0 1.8000000 18.90965 19100.00 1010.0661 2852.559 13485.224\r## 10043 -1.8 0.2 1.8110770 18.89333 19094.46 1010.6459 2845.175 13438.704\r## 10044 -1.8 0.4 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655\r## 10045 -1.8 0.6 1.8973666 18.76841 19051.32 1015.0737 2789.113 13086.800\r## 10046 -1.8 0.8 1.9697716 18.66655 19015.11 1018.6735 2743.946 12805.000\r## 10047 -1.8 1.0 2.0591260 18.54426 18970.44 1022.9815 2690.373 12472.744\r## 10048 -1.8 1.2 2.1633308 18.40603 18918.33 1027.8334 2630.658 12104.994\r## 10049 -1.8 1.4 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795\r## 10050 -1.8 1.6 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680\r## 10051 -1.8 1.8 2.5455844 17.93254 18727.21 1044.3143 2432.816 10906.641\r## 10052 -1.8 2.0 2.6907248 17.76404 18654.64 1050.1351 2364.878 10502.445\r## 10053 -1.8 2.2 2.8425341 17.59312 18578.73 1056.0224 2297.273 10104.053\r## 10054 -1.8 2.4 3.0000000 17.42085 18500.00 1061.9460 2230.446 9714.064\r## 10055 -1.8 2.6 3.1622777 17.24793 18418.86 1067.8883 2164.685 9334.081\r## 10056 -1.8 2.8 3.3286634 17.07485 18335.67 1073.8408 2100.169 8965.018\r## 10057 -1.8 3.0 3.4985711 16.90192 18250.71 1079.8014 2037.003 8607.315\r## 10058 -1.8 3.2 3.6715120 16.72933 18164.24 1085.7721 1975.240 8261.110\r## 10176 -1.6 -3.4 3.7576588 16.64452 18121.17 1088.7172 1945.348 8094.844\r## 10177 -1.6 -3.2 3.5777088 16.82254 18211.15 1082.5442 2008.439 8446.763\r## 10178 -1.6 -3.0 3.4000000 17.00180 18300.00 1076.3564 2073.332 8812.595\r## 10179 -1.6 -2.8 3.2249031 17.18231 18387.55 1070.1439 2140.074 9192.856\r## 10180 -1.6 -2.6 3.0528675 17.36403 18473.57 1063.8985 2208.693 9587.954\r## 10181 -1.6 -2.4 2.8844410 17.54681 18557.78 1057.6158 2279.177 9998.070\r## 10182 -1.6 -2.2 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987\r## 10183 -1.6 -2.0 2.5612497 17.91409 18719.38 1044.9525 2425.315 10861.828\r## 10184 -1.6 -1.8 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680\r## 10185 -1.6 -1.6 2.2627417 18.27815 18868.63 1032.3051 2576.207 11772.074\r## 10186 -1.6 -1.4 2.1260292 18.45500 18936.99 1026.1168 2651.709 12234.324\r## 10187 -1.6 -1.2 2.0000000 18.62477 19000.00 1020.1469 2725.564 12690.750\r## 10188 -1.6 -1.0 1.8867962 18.78350 19056.60 1014.5396 2795.846 13128.941\r## 10189 -1.6 -0.8 1.7888544 18.92615 19105.57 1009.4799 2860.032 13532.353\r## 10190 -1.6 -0.6 1.7088007 19.04680 19145.60 1005.1872 2915.076 13880.715\r## 10191 -1.6 -0.4 1.6492423 19.13911 19175.38 1001.8949 2957.666 14151.773\r## 10192 -1.6 -0.2 1.6124515 19.19729 19193.77 999.8169 2984.720 14324.632\r## 10193 -1.6 0.0 1.6000000 19.21719 19200.00 999.1057 2994.010 14384.112\r## 10194 -1.6 0.2 1.6124515 19.19729 19193.77 999.8169 2984.720 14324.632\r## 10195 -1.6 0.4 1.6492423 19.13911 19175.38 1001.8949 2957.666 14151.773\r## 10196 -1.6 0.6 1.7088007 19.04680 19145.60 1005.1872 2915.076 13880.715\r## 10197 -1.6 0.8 1.7888544 18.92615 19105.57 1009.4799 2860.032 13532.353\r## 10198 -1.6 1.0 1.8867962 18.78350 19056.60 1014.5396 2795.846 13128.941\r## 10199 -1.6 1.2 2.0000000 18.62477 19000.00 1020.1469 2725.564 12690.750\r## 10200 -1.6 1.4 2.1260292 18.45500 18936.99 1026.1168 2651.709 12234.324\r## 10201 -1.6 1.6 2.2627417 18.27815 18868.63 1032.3051 2576.207 11772.074\r## 10202 -1.6 1.8 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680\r## 10203 -1.6 2.0 2.5612497 17.91409 18719.38 1044.9525 2425.315 10861.828\r## 10204 -1.6 2.2 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987\r## 10205 -1.6 2.4 2.8844410 17.54681 18557.78 1057.6158 2279.177 9998.070\r## 10206 -1.6 2.6 3.0528675 17.36403 18473.57 1063.8985 2208.693 9587.954\r## 10207 -1.6 2.8 3.2249031 17.18231 18387.55 1070.1439 2140.074 9192.856\r## 10208 -1.6 3.0 3.4000000 17.00180 18300.00 1076.3564 2073.332 8812.595\r## 10209 -1.6 3.2 3.5777088 16.82254 18211.15 1082.5442 2008.439 8446.763\r## 10210 -1.6 3.4 3.7576588 16.64452 18121.17 1088.7172 1945.348 8094.844\r## 10327 -1.4 -3.4 3.6769553 16.72395 18161.52 1085.9587 1973.334 8250.487\r## 10328 -1.4 -3.2 3.4928498 16.90768 18253.58 1079.6024 2039.089 8619.067\r## 10329 -1.4 -3.0 3.3105891 17.09346 18344.71 1073.2002 2107.045 9004.172\r## 10330 -1.4 -2.8 3.1304952 17.28146 18434.75 1066.7360 2177.333 9406.871\r## 10331 -1.4 -2.6 2.9529646 17.47181 18523.52 1060.1942 2250.079 9828.243\r## 10332 -1.4 -2.4 2.7784888 17.66461 18610.76 1053.5616 2325.391 10269.282\r## 10333 -1.4 -2.2 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732\r## 10334 -1.4 -2.0 2.4413111 18.05709 18779.34 1039.9985 2483.859 11212.816\r## 10335 -1.4 -1.8 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795\r## 10336 -1.4 -1.6 2.1260292 18.45500 18936.99 1026.1168 2651.709 12234.324\r## 10337 -1.4 -1.4 1.9798990 18.65250 19010.05 1019.1690 2737.758 12766.506\r## 10338 -1.4 -1.2 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655\r## 10339 -1.4 -1.0 1.7204651 19.02898 19139.77 1005.8220 2906.902 13828.847\r## 10340 -1.4 -0.8 1.6124515 19.19729 19193.77 999.8169 2984.720 14324.632\r## 10341 -1.4 -0.6 1.5231546 19.34240 19238.42 994.6242 3052.918 14762.692\r## 10342 -1.4 -0.4 1.4560220 19.45539 19271.99 990.5733 3106.730 15110.660\r## 10343 -1.4 -0.2 1.4142136 19.52756 19292.89 987.9830 3141.431 15336.115\r## 10344 -1.4 0.0 1.4000000 19.55242 19300.00 987.0901 3153.445 15414.371\r## 10345 -1.4 0.2 1.4142136 19.52756 19292.89 987.9830 3141.431 15336.115\r## 10346 -1.4 0.4 1.4560220 19.45539 19271.99 990.5733 3106.730 15110.660\r## 10347 -1.4 0.6 1.5231546 19.34240 19238.42 994.6242 3052.918 14762.692\r## 10348 -1.4 0.8 1.6124515 19.19729 19193.77 999.8169 2984.720 14324.632\r## 10349 -1.4 1.0 1.7204651 19.02898 19139.77 1005.8220 2906.902 13828.847\r## 10350 -1.4 1.2 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655\r## 10351 -1.4 1.4 1.9798990 18.65250 19010.05 1019.1690 2737.758 12766.506\r## 10352 -1.4 1.6 2.1260292 18.45500 18936.99 1026.1168 2651.709 12234.324\r## 10353 -1.4 1.8 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795\r## 10354 -1.4 2.0 2.4413111 18.05709 18779.34 1039.9985 2483.859 11212.816\r## 10355 -1.4 2.2 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732\r## 10356 -1.4 2.4 2.7784888 17.66461 18610.76 1053.5616 2325.391 10269.282\r## 10357 -1.4 2.6 2.9529646 17.47181 18523.52 1060.1942 2250.079 9828.243\r## 10358 -1.4 2.8 3.1304952 17.28146 18434.75 1066.7360 2177.333 9406.871\r## 10359 -1.4 3.0 3.3105891 17.09346 18344.71 1073.2002 2107.045 9004.172\r## 10360 -1.4 3.2 3.4928498 16.90768 18253.58 1079.6024 2039.089 8619.067\r## 10361 -1.4 3.4 3.6769553 16.72395 18161.52 1085.9587 1973.334 8250.487\r## 10477 -1.2 -3.6 3.7947332 16.60823 18102.63 1089.9796 1932.653 8024.487\r## 10478 -1.2 -3.4 3.6055513 16.79478 18197.22 1083.5048 1998.512 8391.142\r## 10479 -1.2 -3.2 3.4176015 16.98388 18291.20 1076.9741 2066.782 8775.493\r## 10480 -1.2 -3.0 3.2310989 17.17585 18384.45 1070.3660 2137.661 9179.040\r## 10481 -1.2 -2.8 3.0463092 17.37105 18476.85 1063.6572 2211.374 9603.473\r## 10482 -1.2 -2.6 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662\r## 10483 -1.2 -2.4 2.6832816 17.77255 18658.36 1049.8414 2368.280 10522.594\r## 10484 -1.2 -2.2 2.5059928 17.97947 18747.00 1042.6897 2451.964 11021.252\r## 10485 -1.2 -2.0 2.3323808 18.19069 18833.81 1035.3542 2539.402 11548.369\r## 10486 -1.2 -1.8 2.1633308 18.40603 18918.33 1027.8334 2630.658 12104.994\r## 10487 -1.2 -1.6 2.0000000 18.62477 19000.00 1020.1469 2725.564 12690.750\r## 10488 -1.2 -1.4 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655\r## 10489 -1.2 -1.2 1.6970563 19.06482 19151.47 1004.5449 2923.360 13933.335\r## 10490 -1.2 -1.0 1.5620499 19.27850 19218.98 996.9126 3022.757 14568.551\r## 10491 -1.2 -0.8 1.4422205 19.47905 19278.89 989.7241 3118.081 15184.319\r## 10492 -1.2 -0.6 1.3416408 19.65632 19329.18 983.3569 3203.986 15744.646\r## 10493 -1.2 -0.4 1.2649111 19.79761 19367.54 978.2767 3273.575 16202.244\r## 10494 -1.2 -0.2 1.2165525 19.88957 19391.72 974.9696 3319.402 16505.369\r## 10495 -1.2 0.0 1.2000000 19.92159 19400.00 973.8181 3335.458 16611.903\r## 10496 -1.2 0.2 1.2165525 19.88957 19391.72 974.9696 3319.402 16505.369\r## 10497 -1.2 0.4 1.2649111 19.79761 19367.54 978.2767 3273.575 16202.244\r## 10498 -1.2 0.6 1.3416408 19.65632 19329.18 983.3569 3203.986 15744.646\r## 10499 -1.2 0.8 1.4422205 19.47905 19278.89 989.7241 3118.081 15184.319\r## 10500 -1.2 1.0 1.5620499 19.27850 19218.98 996.9126 3022.757 14568.551\r## 10501 -1.2 1.2 1.6970563 19.06482 19151.47 1004.5449 2923.360 13933.335\r## 10502 -1.2 1.4 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655\r## 10503 -1.2 1.6 2.0000000 18.62477 19000.00 1020.1469 2725.564 12690.750\r## 10504 -1.2 1.8 2.1633308 18.40603 18918.33 1027.8334 2630.658 12104.994\r## 10505 -1.2 2.0 2.3323808 18.19069 18833.81 1035.3542 2539.402 11548.369\r## 10506 -1.2 2.2 2.5059928 17.97947 18747.00 1042.6897 2451.964 11021.252\r## 10507 -1.2 2.4 2.6832816 17.77255 18658.36 1049.8414 2368.280 10522.594\r## 10508 -1.2 2.6 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662\r## 10509 -1.2 2.8 3.0463092 17.37105 18476.85 1063.6572 2211.374 9603.473\r## 10510 -1.2 3.0 3.2310989 17.17585 18384.45 1070.3660 2137.661 9179.040\r## 10511 -1.2 3.2 3.4176015 16.98388 18291.20 1076.9741 2066.782 8775.493\r## 10512 -1.2 3.4 3.6055513 16.79478 18197.22 1083.5048 1998.512 8391.142\r## 10513 -1.2 3.6 3.7947332 16.60823 18102.63 1089.9796 1932.653 8024.487\r## 10628 -1.0 -3.6 3.7363083 16.66547 18131.85 1087.9889 1952.704 8135.684\r## 10629 -1.0 -3.4 3.5440090 16.85626 18228.00 1081.3786 2020.539 8514.682\r## 10630 -1.0 -3.2 3.3526109 17.05025 18323.69 1074.6875 2091.107 8913.477\r## 10631 -1.0 -3.0 3.1622777 17.24793 18418.86 1067.8883 2164.685 9334.081\r## 10632 -1.0 -2.8 2.9732137 17.44982 18513.39 1060.9501 2241.594 9778.855\r## 10633 -1.0 -2.6 2.7856777 17.65654 18607.16 1053.8394 2322.206 10250.534\r## 10634 -1.0 -2.4 2.6000000 17.86874 18700.00 1046.5206 2406.940 10752.243\r## 10635 -1.0 -2.2 2.4166092 18.08706 18791.70 1038.9580 2496.248 11287.445\r## 10636 -1.0 -2.0 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785\r## 10637 -1.0 -1.8 2.0591260 18.54426 18970.44 1022.9815 2690.373 12472.744\r## 10638 -1.0 -1.6 1.8867962 18.78350 19056.60 1014.5396 2795.846 13128.941\r## 10639 -1.0 -1.4 1.7204651 19.02898 19139.77 1005.8220 2906.902 13828.847\r## 10640 -1.0 -1.2 1.5620499 19.27850 19218.98 996.9126 3022.757 14568.551\r## 10641 -1.0 -1.0 1.4142136 19.52756 19292.89 987.9830 3141.431 15336.115\r## 10642 -1.0 -0.8 1.2806248 19.76823 19359.69 979.3335 3259.019 16106.259\r## 10643 -1.0 -0.6 1.1661904 19.98787 19416.90 971.4344 3368.863 16834.098\r## 10644 -1.0 -0.4 1.0770330 20.16866 19461.48 964.9367 3461.108 17451.478\r## 10645 -1.0 -0.2 1.0198039 20.28959 19490.10 960.5961 3523.736 17873.788\r## 10646 -1.0 0.0 1.0000000 20.33237 19500.00 959.0618 3546.075 18025.028\r## 10647 -1.0 0.2 1.0198039 20.28959 19490.10 960.5961 3523.736 17873.788\r## 10648 -1.0 0.4 1.0770330 20.16866 19461.48 964.9367 3461.108 17451.478\r## 10649 -1.0 0.6 1.1661904 19.98787 19416.90 971.4344 3368.863 16834.098\r## 10650 -1.0 0.8 1.2806248 19.76823 19359.69 979.3335 3259.019 16106.259\r## 10651 -1.0 1.0 1.4142136 19.52756 19292.89 987.9830 3141.431 15336.115\r## 10652 -1.0 1.2 1.5620499 19.27850 19218.98 996.9126 3022.757 14568.551\r## 10653 -1.0 1.4 1.7204651 19.02898 19139.77 1005.8220 2906.902 13828.847\r## 10654 -1.0 1.6 1.8867962 18.78350 19056.60 1014.5396 2795.846 13128.941\r## 10655 -1.0 1.8 2.0591260 18.54426 18970.44 1022.9815 2690.373 12472.744\r## 10656 -1.0 2.0 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785\r## 10657 -1.0 2.2 2.4166092 18.08706 18791.70 1038.9580 2496.248 11287.445\r## 10658 -1.0 2.4 2.6000000 17.86874 18700.00 1046.5206 2406.940 10752.243\r## 10659 -1.0 2.6 2.7856777 17.65654 18607.16 1053.8394 2322.206 10250.534\r## 10660 -1.0 2.8 2.9732137 17.44982 18513.39 1060.9501 2241.594 9778.855\r## 10661 -1.0 3.0 3.1622777 17.24793 18418.86 1067.8883 2164.685 9334.081\r## 10662 -1.0 3.2 3.3526109 17.05025 18323.69 1074.6875 2091.107 8913.477\r## 10663 -1.0 3.4 3.5440090 16.85626 18228.00 1081.3786 2020.539 8514.682\r## 10664 -1.0 3.6 3.7363083 16.66547 18131.85 1087.9889 1952.704 8135.684\r## 10779 -0.8 -3.6 3.6878178 16.71322 18156.09 1086.3309 1969.539 8229.335\r## 10780 -0.8 -3.4 3.4928498 16.90768 18253.58 1079.6024 2039.089 8619.067\r## 10781 -0.8 -3.2 3.2984845 17.10595 18350.76 1072.7704 2111.667 9030.518\r## 10782 -0.8 -3.0 3.1048349 17.30864 18447.58 1065.8018 2187.625 9466.205\r## 10783 -0.8 -2.8 2.9120440 17.51649 18543.98 1058.6583 2267.384 9929.151\r## 10784 -0.8 -2.6 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987\r## 10785 -0.8 -2.4 2.5298221 17.95117 18735.09 1043.6695 2440.406 10952.036\r## 10786 -0.8 -2.2 2.3409400 18.18006 18829.53 1035.7245 2534.950 11521.384\r## 10787 -0.8 -2.0 2.1540659 18.41814 18922.97 1027.4091 2635.854 12136.883\r## 10788 -0.8 -1.8 1.9697716 18.66655 19015.11 1018.6735 2743.946 12805.000\r## 10789 -0.8 -1.6 1.7888544 18.92615 19105.57 1009.4799 2860.032 13532.353\r## 10790 -0.8 -1.4 1.6124515 19.19729 19193.77 999.8169 2984.720 14324.632\r## 10791 -0.8 -1.2 1.4422205 19.47905 19278.89 989.7241 3118.081 15184.319\r## 10792 -0.8 -1.0 1.2806248 19.76823 19359.69 979.3335 3259.019 16106.259\r## 10793 -0.8 -0.8 1.1313708 20.05742 19434.31 968.9341 3404.151 17069.619\r## 10794 -0.8 -0.6 1.0000000 20.33237 19500.00 959.0618 3546.075 18025.028\r## 10795 -0.8 -0.4 0.8944272 20.56913 19552.79 950.5888 3671.400 18879.377\r## 10796 -0.8 -0.2 0.8246211 20.73427 19587.69 944.7013 3760.537 19492.994\r## 10797 -0.8 0.0 0.8000000 20.79426 19600.00 942.5679 3793.272 19719.569\r## 10798 -0.8 0.2 0.8246211 20.73427 19587.69 944.7013 3760.537 19492.994\r## 10799 -0.8 0.4 0.8944272 20.56913 19552.79 950.5888 3671.400 18879.377\r## 10800 -0.8 0.6 1.0000000 20.33237 19500.00 959.0618 3546.075 18025.028\r## 10801 -0.8 0.8 1.1313708 20.05742 19434.31 968.9341 3404.151 17069.619\r## 10802 -0.8 1.0 1.2806248 19.76823 19359.69 979.3335 3259.019 16106.259\r## 10803 -0.8 1.2 1.4422205 19.47905 19278.89 989.7241 3118.081 15184.319\r## 10804 -0.8 1.4 1.6124515 19.19729 19193.77 999.8169 2984.720 14324.632\r## 10805 -0.8 1.6 1.7888544 18.92615 19105.57 1009.4799 2860.032 13532.353\r## 10806 -0.8 1.8 1.9697716 18.66655 19015.11 1018.6735 2743.946 12805.000\r## 10807 -0.8 2.0 2.1540659 18.41814 18922.97 1027.4091 2635.854 12136.883\r## 10808 -0.8 2.2 2.3409400 18.18006 18829.53 1035.7245 2534.950 11521.384\r## 10809 -0.8 2.4 2.5298221 17.95117 18735.09 1043.6695 2440.406 10952.036\r## 10810 -0.8 2.6 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987\r## 10811 -0.8 2.8 2.9120440 17.51649 18543.98 1058.6583 2267.384 9929.151\r## 10812 -0.8 3.0 3.1048349 17.30864 18447.58 1065.8018 2187.625 9466.205\r## 10813 -0.8 3.2 3.2984845 17.10595 18350.76 1072.7704 2111.667 9030.518\r## 10814 -0.8 3.4 3.4928498 16.90768 18253.58 1079.6024 2039.089 8619.067\r## 10815 -0.8 3.6 3.6878178 16.71322 18156.09 1086.3309 1969.539 8229.335\r## 10930 -0.6 -3.6 3.6496575 16.75097 18175.17 1085.0221 1982.913 8303.926\r## 10931 -0.6 -3.4 3.4525353 16.94842 18273.73 1078.1967 2053.864 8702.437\r## 10932 -0.6 -3.2 3.2557641 17.15019 18372.12 1071.2484 2128.094 9124.307\r## 10933 -0.6 -3.0 3.0594117 17.35703 18470.29 1064.1390 2206.023 9572.504\r## 10934 -0.6 -2.8 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662\r## 10935 -0.6 -2.6 2.6683328 17.78969 18665.83 1049.2501 2375.138 10563.243\r## 10936 -0.6 -2.4 2.4738634 18.01787 18763.07 1041.3588 2467.711 11115.723\r## 10937 -0.6 -2.2 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795\r## 10938 -0.6 -2.0 2.0880613 18.50542 18955.97 1024.3466 2673.505 12368.585\r## 10939 -0.6 -1.8 1.8973666 18.76841 19051.32 1015.0737 2789.113 13086.800\r## 10940 -0.6 -1.6 1.7088007 19.04680 19145.60 1005.1872 2915.076 13880.715\r## 10941 -0.6 -1.4 1.5231546 19.34240 19238.42 994.6242 3052.918 14762.692\r## 10942 -0.6 -1.2 1.3416408 19.65632 19329.18 983.3569 3203.986 15744.646\r## 10943 -0.6 -1.0 1.1661904 19.98787 19416.90 971.4344 3368.863 16834.098\r## 10944 -0.6 -0.8 1.0000000 20.33237 19500.00 959.0618 3546.075 18025.028\r## 10945 -0.6 -0.6 0.8485281 20.67690 19575.74 946.7442 3729.410 19278.163\r## 10946 -0.6 -0.4 0.7211103 20.99298 19639.44 935.5243 3903.069 20484.262\r## 10947 -0.6 -0.2 0.6324555 21.22896 19683.77 927.2133 4036.173 21420.936\r## 10948 -0.6 0.0 0.6000000 21.31893 19700.00 924.0613 4087.710 21786.401\r## 10949 -0.6 0.2 0.6324555 21.22896 19683.77 927.2133 4036.173 21420.936\r## 10950 -0.6 0.4 0.7211103 20.99298 19639.44 935.5243 3903.069 20484.262\r## 10951 -0.6 0.6 0.8485281 20.67690 19575.74 946.7442 3729.410 19278.163\r## 10952 -0.6 0.8 1.0000000 20.33237 19500.00 959.0618 3546.075 18025.028\r## 10953 -0.6 1.0 1.1661904 19.98787 19416.90 971.4344 3368.863 16834.098\r## 10954 -0.6 1.2 1.3416408 19.65632 19329.18 983.3569 3203.986 15744.646\r## 10955 -0.6 1.4 1.5231546 19.34240 19238.42 994.6242 3052.918 14762.692\r## 10956 -0.6 1.6 1.7088007 19.04680 19145.60 1005.1872 2915.076 13880.715\r## 10957 -0.6 1.8 1.8973666 18.76841 19051.32 1015.0737 2789.113 13086.800\r## 10958 -0.6 2.0 2.0880613 18.50542 18955.97 1024.3466 2673.505 12368.585\r## 10959 -0.6 2.2 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795\r## 10960 -0.6 2.4 2.4738634 18.01787 18763.07 1041.3588 2467.711 11115.723\r## 10961 -0.6 2.6 2.6683328 17.78969 18665.83 1049.2501 2375.138 10563.243\r## 10962 -0.6 2.8 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662\r## 10963 -0.6 3.0 3.0594117 17.35703 18470.29 1064.1390 2206.023 9572.504\r## 10964 -0.6 3.2 3.2557641 17.15019 18372.12 1071.2484 2128.094 9124.307\r## 10965 -0.6 3.4 3.4525353 16.94842 18273.73 1078.1967 2053.864 8702.437\r## 10966 -0.6 3.6 3.6496575 16.75097 18175.17 1085.0221 1982.913 8303.926\r## 11081 -0.4 -3.6 3.6221541 16.77826 18188.92 1084.0766 1992.622 8358.184\r## 11082 -0.4 -3.4 3.4234486 16.97794 18288.28 1077.1790 2064.612 8763.212\r## 11083 -0.4 -3.2 3.2249031 17.18231 18387.55 1070.1439 2140.074 9192.856\r## 11084 -0.4 -3.0 3.0265492 17.39225 18486.73 1062.9286 2219.481 9650.444\r## 11085 -0.4 -2.8 2.8284271 17.60880 18585.79 1055.4831 2303.418 10140.104\r## 11086 -0.4 -2.6 2.6305893 17.83321 18684.71 1047.7480 2392.611 10666.981\r## 11087 -0.4 -2.4 2.4331050 18.06702 18783.45 1039.6536 2487.962 11237.516\r## 11088 -0.4 -2.2 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785\r## 11089 -0.4 -2.0 2.0396078 18.57067 18980.20 1022.0526 2701.881 12543.930\r## 11090 -0.4 -1.8 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655\r## 11091 -0.4 -1.6 1.6492423 19.13911 19175.38 1001.8949 2957.666 14151.773\r## 11092 -0.4 -1.4 1.4560220 19.45539 19271.99 990.5733 3106.730 15110.660\r## 11093 -0.4 -1.2 1.2649111 19.79761 19367.54 978.2767 3273.575 16202.244\r## 11094 -0.4 -1.0 1.0770330 20.16866 19461.48 964.9367 3461.108 17451.478\r## 11095 -0.4 -0.8 0.8944272 20.56913 19552.79 950.5888 3671.400 18879.377\r## 11096 -0.4 -0.6 0.7211103 20.99298 19639.44 935.5243 3903.069 20484.262\r## 11097 -0.4 -0.4 0.5656854 21.41626 19717.16 920.6628 4143.953 22187.000\r## 11098 -0.4 -0.2 0.4472136 21.77088 19776.39 908.3874 4353.232 23693.422\r## 11099 -0.4 0.0 0.4000000 21.92081 19800.00 903.2515 4443.788 24352.855\r## 11100 -0.4 0.2 0.4472136 21.77088 19776.39 908.3874 4353.232 23693.422\r## 11101 -0.4 0.4 0.5656854 21.41626 19717.16 920.6628 4143.953 22187.000\r## 11102 -0.4 0.6 0.7211103 20.99298 19639.44 935.5243 3903.069 20484.262\r## 11103 -0.4 0.8 0.8944272 20.56913 19552.79 950.5888 3671.400 18879.377\r## 11104 -0.4 1.0 1.0770330 20.16866 19461.48 964.9367 3461.108 17451.478\r## 11105 -0.4 1.2 1.2649111 19.79761 19367.54 978.2767 3273.575 16202.244\r## 11106 -0.4 1.4 1.4560220 19.45539 19271.99 990.5733 3106.730 15110.660\r## 11107 -0.4 1.6 1.6492423 19.13911 19175.38 1001.8949 2957.666 14151.773\r## 11108 -0.4 1.8 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655\r## 11109 -0.4 2.0 2.0396078 18.57067 18980.20 1022.0526 2701.881 12543.930\r## 11110 -0.4 2.2 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785\r## 11111 -0.4 2.4 2.4331050 18.06702 18783.45 1039.6536 2487.962 11237.516\r## 11112 -0.4 2.6 2.6305893 17.83321 18684.71 1047.7480 2392.611 10666.981\r## 11113 -0.4 2.8 2.8284271 17.60880 18585.79 1055.4831 2303.418 10140.104\r## 11114 -0.4 3.0 3.0265492 17.39225 18486.73 1062.9286 2219.481 9650.444\r## 11115 -0.4 3.2 3.2249031 17.18231 18387.55 1070.1439 2140.074 9192.856\r## 11116 -0.4 3.4 3.4234486 16.97794 18288.28 1077.1790 2064.612 8763.212\r## 11117 -0.4 3.6 3.6221541 16.77826 18188.92 1084.0766 1992.622 8358.184\r## 11231 -0.2 -3.8 3.8052595 16.59795 18097.37 1090.3376 1929.067 8004.640\r## 11232 -0.2 -3.6 3.6055513 16.79478 18197.22 1083.5048 1998.512 8391.142\r## 11233 -0.2 -3.4 3.4058773 16.99581 18297.06 1076.5628 2071.141 8800.184\r## 11234 -0.2 -3.2 3.2062439 17.20180 18396.88 1069.4738 2147.364 9234.634\r## 11235 -0.2 -3.0 3.0066593 17.41366 18496.67 1062.1929 2227.688 9698.051\r## 11236 -0.2 -2.8 2.8071338 17.63253 18596.43 1054.6662 2312.745 10194.884\r## 11237 -0.2 -2.6 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732\r## 11238 -0.2 -2.4 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680\r## 11239 -0.2 -2.2 2.2090722 18.34673 18895.46 1029.9090 2605.313 11949.745\r## 11240 -0.2 -2.0 2.0099751 18.61108 18995.01 1020.6295 2719.557 12653.470\r## 11241 -0.2 -1.8 1.8110770 18.89333 19094.46 1010.6459 2845.175 13438.704\r## 11242 -0.2 -1.6 1.6124515 19.19729 19193.77 999.8169 2984.720 14324.632\r## 11243 -0.2 -1.4 1.4142136 19.52756 19292.89 987.9830 3141.431 15336.115\r## 11244 -0.2 -1.2 1.2165525 19.88957 19391.72 974.9696 3319.402 16505.369\r## 11245 -0.2 -1.0 1.0198039 20.28959 19490.10 960.5961 3523.736 17873.788\r## 11246 -0.2 -0.8 0.8246211 20.73427 19587.69 944.7013 3760.537 19492.994\r## 11247 -0.2 -0.6 0.6324555 21.22896 19683.77 927.2133 4036.173 21420.936\r## 11248 -0.2 -0.4 0.4472136 21.77088 19776.39 908.3874 4353.232 23693.422\r## 11249 -0.2 -0.2 0.2828427 22.31619 19858.58 889.8733 4688.606 26157.954\r## 11250 -0.2 0.0 0.2000000 22.61765 19900.00 879.8437 4881.198 27600.313\r## 11251 -0.2 0.2 0.2828427 22.31619 19858.58 889.8733 4688.606 26157.954\r## 11252 -0.2 0.4 0.4472136 21.77088 19776.39 908.3874 4353.232 23693.422\r## 11253 -0.2 0.6 0.6324555 21.22896 19683.77 927.2133 4036.173 21420.936\r## 11254 -0.2 0.8 0.8246211 20.73427 19587.69 944.7013 3760.537 19492.994\r## 11255 -0.2 1.0 1.0198039 20.28959 19490.10 960.5961 3523.736 17873.788\r## 11256 -0.2 1.2 1.2165525 19.88957 19391.72 974.9696 3319.402 16505.369\r## 11257 -0.2 1.4 1.4142136 19.52756 19292.89 987.9830 3141.431 15336.115\r## 11258 -0.2 1.6 1.6124515 19.19729 19193.77 999.8169 2984.720 14324.632\r## 11259 -0.2 1.8 1.8110770 18.89333 19094.46 1010.6459 2845.175 13438.704\r## 11260 -0.2 2.0 2.0099751 18.61108 18995.01 1020.6295 2719.557 12653.470\r## 11261 -0.2 2.2 2.2090722 18.34673 18895.46 1029.9090 2605.313 11949.745\r## 11262 -0.2 2.4 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680\r## 11263 -0.2 2.6 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732\r## 11264 -0.2 2.8 2.8071338 17.63253 18596.43 1054.6662 2312.745 10194.884\r## 11265 -0.2 3.0 3.0066593 17.41366 18496.67 1062.1929 2227.688 9698.051\r## 11266 -0.2 3.2 3.2062439 17.20180 18396.88 1069.4738 2147.364 9234.634\r## 11267 -0.2 3.4 3.4058773 16.99581 18297.06 1076.5628 2071.141 8800.184\r## 11268 -0.2 3.6 3.6055513 16.79478 18197.22 1083.5048 1998.512 8391.142\r## 11269 -0.2 3.8 3.8052595 16.59795 18097.37 1090.3376 1929.067 8004.640\r## 11382 0.0 -3.8 3.8000000 16.60309 18100.00 1090.1587 1930.858 8014.550\r## 11383 0.0 -3.6 3.6000000 16.80031 18200.00 1083.3134 2000.486 8402.197\r## 11384 0.0 -3.4 3.4000000 17.00180 18300.00 1076.3564 2073.332 8812.595\r## 11385 0.0 -3.2 3.2000000 17.20834 18400.00 1069.2492 2149.812 9248.670\r## 11386 0.0 -3.0 3.0000000 17.42085 18500.00 1061.9460 2230.446 9714.064\r## 11387 0.0 -2.8 2.8000000 17.64050 18600.00 1054.3917 2315.883 10213.336\r## 11388 0.0 -2.6 2.6000000 17.86874 18700.00 1046.5206 2406.940 10752.243\r## 11389 0.0 -2.4 2.4000000 18.10732 18800.00 1038.2543 2504.644 11338.097\r## 11390 0.0 -2.2 2.2000000 18.35843 18900.00 1029.4998 2610.300 11980.251\r## 11391 0.0 -2.0 2.0000000 18.62477 19000.00 1020.1469 2725.564 12690.750\r## 11392 0.0 -1.8 1.8000000 18.90965 19100.00 1010.0661 2852.559 13485.224\r## 11393 0.0 -1.6 1.6000000 19.21719 19200.00 999.1057 2994.010 14384.112\r## 11394 0.0 -1.4 1.4000000 19.55242 19300.00 987.0901 3153.445 15414.371\r## 11395 0.0 -1.2 1.2000000 19.92159 19400.00 973.8181 3335.458 16611.903\r## 11396 0.0 -1.0 1.0000000 20.33237 19500.00 959.0618 3546.075 18025.028\r## 11397 0.0 -0.8 0.8000000 20.79426 19600.00 942.5679 3793.272 19719.569\r## 11398 0.0 -0.6 0.6000000 21.31893 19700.00 924.0613 4087.710 21786.401\r## 11399 0.0 -0.4 0.4000000 21.92081 19800.00 903.2515 4443.788 24352.855\r## 11400 0.0 -0.2 0.2000000 22.61765 19900.00 879.8437 4881.198 27600.313\r## 11401 0.0 0.0 0.0000000 23.43138 20000.00 853.5560 5427.223 31791.838\r## 11402 0.0 0.2 0.2000000 22.61765 19900.00 879.8437 4881.198 27600.313\r## 11403 0.0 0.4 0.4000000 21.92081 19800.00 903.2515 4443.788 24352.855\r## 11404 0.0 0.6 0.6000000 21.31893 19700.00 924.0613 4087.710 21786.401\r## 11405 0.0 0.8 0.8000000 20.79426 19600.00 942.5679 3793.272 19719.569\r## 11406 0.0 1.0 1.0000000 20.33237 19500.00 959.0618 3546.075 18025.028\r## 11407 0.0 1.2 1.2000000 19.92159 19400.00 973.8181 3335.458 16611.903\r## 11408 0.0 1.4 1.4000000 19.55242 19300.00 987.0901 3153.445 15414.371\r## 11409 0.0 1.6 1.6000000 19.21719 19200.00 999.1057 2994.010 14384.112\r## 11410 0.0 1.8 1.8000000 18.90965 19100.00 1010.0661 2852.559 13485.224\r## 11411 0.0 2.0 2.0000000 18.62477 19000.00 1020.1469 2725.564 12690.750\r## 11412 0.0 2.2 2.2000000 18.35843 18900.00 1029.4998 2610.300 11980.251\r## 11413 0.0 2.4 2.4000000 18.10732 18800.00 1038.2543 2504.644 11338.097\r## 11414 0.0 2.6 2.6000000 17.86874 18700.00 1046.5206 2406.940 10752.243\r## 11415 0.0 2.8 2.8000000 17.64050 18600.00 1054.3917 2315.883 10213.336\r## 11416 0.0 3.0 3.0000000 17.42085 18500.00 1061.9460 2230.446 9714.064\r## 11417 0.0 3.2 3.2000000 17.20834 18400.00 1069.2492 2149.812 9248.670\r## 11418 0.0 3.4 3.4000000 17.00180 18300.00 1076.3564 2073.332 8812.595\r## 11419 0.0 3.6 3.6000000 16.80031 18200.00 1083.3134 2000.486 8402.197\r## 11420 0.0 3.8 3.8000000 16.60309 18100.00 1090.1587 1930.858 8014.550\r## 11533 0.2 -3.8 3.8052595 16.59795 18097.37 1090.3376 1929.067 8004.640\r## 11534 0.2 -3.6 3.6055513 16.79478 18197.22 1083.5048 1998.512 8391.142\r## 11535 0.2 -3.4 3.4058773 16.99581 18297.06 1076.5628 2071.141 8800.184\r## 11536 0.2 -3.2 3.2062439 17.20180 18396.88 1069.4738 2147.364 9234.634\r## 11537 0.2 -3.0 3.0066593 17.41366 18496.67 1062.1929 2227.688 9698.051\r## 11538 0.2 -2.8 2.8071338 17.63253 18596.43 1054.6662 2312.745 10194.884\r## 11539 0.2 -2.6 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732\r## 11540 0.2 -2.4 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680\r## 11541 0.2 -2.2 2.2090722 18.34673 18895.46 1029.9090 2605.313 11949.745\r## 11542 0.2 -2.0 2.0099751 18.61108 18995.01 1020.6295 2719.557 12653.470\r## 11543 0.2 -1.8 1.8110770 18.89333 19094.46 1010.6459 2845.175 13438.704\r## 11544 0.2 -1.6 1.6124515 19.19729 19193.77 999.8169 2984.720 14324.632\r## 11545 0.2 -1.4 1.4142136 19.52756 19292.89 987.9830 3141.431 15336.115\r## 11546 0.2 -1.2 1.2165525 19.88957 19391.72 974.9696 3319.402 16505.369\r## 11547 0.2 -1.0 1.0198039 20.28959 19490.10 960.5961 3523.736 17873.788\r## 11548 0.2 -0.8 0.8246211 20.73427 19587.69 944.7013 3760.537 19492.994\r## 11549 0.2 -0.6 0.6324555 21.22896 19683.77 927.2133 4036.173 21420.936\r## 11550 0.2 -0.4 0.4472136 21.77088 19776.39 908.3874 4353.232 23693.422\r## 11551 0.2 -0.2 0.2828427 22.31619 19858.58 889.8733 4688.606 26157.954\r## 11552 0.2 0.0 0.2000000 22.61765 19900.00 879.8437 4881.198 27600.313\r## 11553 0.2 0.2 0.2828427 22.31619 19858.58 889.8733 4688.606 26157.954\r## 11554 0.2 0.4 0.4472136 21.77088 19776.39 908.3874 4353.232 23693.422\r## 11555 0.2 0.6 0.6324555 21.22896 19683.77 927.2133 4036.173 21420.936\r## 11556 0.2 0.8 0.8246211 20.73427 19587.69 944.7013 3760.537 19492.994\r## 11557 0.2 1.0 1.0198039 20.28959 19490.10 960.5961 3523.736 17873.788\r## 11558 0.2 1.2 1.2165525 19.88957 19391.72 974.9696 3319.402 16505.369\r## 11559 0.2 1.4 1.4142136 19.52756 19292.89 987.9830 3141.431 15336.115\r## 11560 0.2 1.6 1.6124515 19.19729 19193.77 999.8169 2984.720 14324.632\r## 11561 0.2 1.8 1.8110770 18.89333 19094.46 1010.6459 2845.175 13438.704\r## 11562 0.2 2.0 2.0099751 18.61108 18995.01 1020.6295 2719.557 12653.470\r## 11563 0.2 2.2 2.2090722 18.34673 18895.46 1029.9090 2605.313 11949.745\r## 11564 0.2 2.4 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680\r## 11565 0.2 2.6 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732\r## 11566 0.2 2.8 2.8071338 17.63253 18596.43 1054.6662 2312.745 10194.884\r## 11567 0.2 3.0 3.0066593 17.41366 18496.67 1062.1929 2227.688 9698.051\r## 11568 0.2 3.2 3.2062439 17.20180 18396.88 1069.4738 2147.364 9234.634\r## 11569 0.2 3.4 3.4058773 16.99581 18297.06 1076.5628 2071.141 8800.184\r## 11570 0.2 3.6 3.6055513 16.79478 18197.22 1083.5048 1998.512 8391.142\r## 11571 0.2 3.8 3.8052595 16.59795 18097.37 1090.3376 1929.067 8004.640\r## 11685 0.4 -3.6 3.6221541 16.77826 18188.92 1084.0766 1992.622 8358.184\r## 11686 0.4 -3.4 3.4234486 16.97794 18288.28 1077.1790 2064.612 8763.212\r## 11687 0.4 -3.2 3.2249031 17.18231 18387.55 1070.1439 2140.074 9192.856\r## 11688 0.4 -3.0 3.0265492 17.39225 18486.73 1062.9286 2219.481 9650.444\r## 11689 0.4 -2.8 2.8284271 17.60880 18585.79 1055.4831 2303.418 10140.104\r## 11690 0.4 -2.6 2.6305893 17.83321 18684.71 1047.7480 2392.611 10666.981\r## 11691 0.4 -2.4 2.4331050 18.06702 18783.45 1039.6536 2487.962 11237.516\r## 11692 0.4 -2.2 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785\r## 11693 0.4 -2.0 2.0396078 18.57067 18980.20 1022.0526 2701.881 12543.930\r## 11694 0.4 -1.8 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655\r## 11695 0.4 -1.6 1.6492423 19.13911 19175.38 1001.8949 2957.666 14151.773\r## 11696 0.4 -1.4 1.4560220 19.45539 19271.99 990.5733 3106.730 15110.660\r## 11697 0.4 -1.2 1.2649111 19.79761 19367.54 978.2767 3273.575 16202.244\r## 11698 0.4 -1.0 1.0770330 20.16866 19461.48 964.9367 3461.108 17451.478\r## 11699 0.4 -0.8 0.8944272 20.56913 19552.79 950.5888 3671.400 18879.377\r## 11700 0.4 -0.6 0.7211103 20.99298 19639.44 935.5243 3903.069 20484.262\r## 11701 0.4 -0.4 0.5656854 21.41626 19717.16 920.6628 4143.953 22187.000\r## 11702 0.4 -0.2 0.4472136 21.77088 19776.39 908.3874 4353.232 23693.422\r## 11703 0.4 0.0 0.4000000 21.92081 19800.00 903.2515 4443.788 24352.855\r## 11704 0.4 0.2 0.4472136 21.77088 19776.39 908.3874 4353.232 23693.422\r## 11705 0.4 0.4 0.5656854 21.41626 19717.16 920.6628 4143.953 22187.000\r## 11706 0.4 0.6 0.7211103 20.99298 19639.44 935.5243 3903.069 20484.262\r## 11707 0.4 0.8 0.8944272 20.56913 19552.79 950.5888 3671.400 18879.377\r## 11708 0.4 1.0 1.0770330 20.16866 19461.48 964.9367 3461.108 17451.478\r## 11709 0.4 1.2 1.2649111 19.79761 19367.54 978.2767 3273.575 16202.244\r## 11710 0.4 1.4 1.4560220 19.45539 19271.99 990.5733 3106.730 15110.660\r## 11711 0.4 1.6 1.6492423 19.13911 19175.38 1001.8949 2957.666 14151.773\r## 11712 0.4 1.8 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655\r## 11713 0.4 2.0 2.0396078 18.57067 18980.20 1022.0526 2701.881 12543.930\r## 11714 0.4 2.2 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785\r## 11715 0.4 2.4 2.4331050 18.06702 18783.45 1039.6536 2487.962 11237.516\r## 11716 0.4 2.6 2.6305893 17.83321 18684.71 1047.7480 2392.611 10666.981\r## 11717 0.4 2.8 2.8284271 17.60880 18585.79 1055.4831 2303.418 10140.104\r## 11718 0.4 3.0 3.0265492 17.39225 18486.73 1062.9286 2219.481 9650.444\r## 11719 0.4 3.2 3.2249031 17.18231 18387.55 1070.1439 2140.074 9192.856\r## 11720 0.4 3.4 3.4234486 16.97794 18288.28 1077.1790 2064.612 8763.212\r## 11721 0.4 3.6 3.6221541 16.77826 18188.92 1084.0766 1992.622 8358.184\r## 11836 0.6 -3.6 3.6496575 16.75097 18175.17 1085.0221 1982.913 8303.926\r## 11837 0.6 -3.4 3.4525353 16.94842 18273.73 1078.1967 2053.864 8702.437\r## 11838 0.6 -3.2 3.2557641 17.15019 18372.12 1071.2484 2128.094 9124.307\r## 11839 0.6 -3.0 3.0594117 17.35703 18470.29 1064.1390 2206.023 9572.504\r## 11840 0.6 -2.8 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662\r## 11841 0.6 -2.6 2.6683328 17.78969 18665.83 1049.2501 2375.138 10563.243\r## 11842 0.6 -2.4 2.4738634 18.01787 18763.07 1041.3588 2467.711 11115.723\r## 11843 0.6 -2.2 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795\r## 11844 0.6 -2.0 2.0880613 18.50542 18955.97 1024.3466 2673.505 12368.585\r## 11845 0.6 -1.8 1.8973666 18.76841 19051.32 1015.0737 2789.113 13086.800\r## 11846 0.6 -1.6 1.7088007 19.04680 19145.60 1005.1872 2915.076 13880.715\r## 11847 0.6 -1.4 1.5231546 19.34240 19238.42 994.6242 3052.918 14762.692\r## 11848 0.6 -1.2 1.3416408 19.65632 19329.18 983.3569 3203.986 15744.646\r## 11849 0.6 -1.0 1.1661904 19.98787 19416.90 971.4344 3368.863 16834.098\r## 11850 0.6 -0.8 1.0000000 20.33237 19500.00 959.0618 3546.075 18025.028\r## 11851 0.6 -0.6 0.8485281 20.67690 19575.74 946.7442 3729.410 19278.163\r## 11852 0.6 -0.4 0.7211103 20.99298 19639.44 935.5243 3903.069 20484.262\r## 11853 0.6 -0.2 0.6324555 21.22896 19683.77 927.2133 4036.173 21420.936\r## 11854 0.6 0.0 0.6000000 21.31893 19700.00 924.0613 4087.710 21786.401\r## 11855 0.6 0.2 0.6324555 21.22896 19683.77 927.2133 4036.173 21420.936\r## 11856 0.6 0.4 0.7211103 20.99298 19639.44 935.5243 3903.069 20484.262\r## 11857 0.6 0.6 0.8485281 20.67690 19575.74 946.7442 3729.410 19278.163\r## 11858 0.6 0.8 1.0000000 20.33237 19500.00 959.0618 3546.075 18025.028\r## 11859 0.6 1.0 1.1661904 19.98787 19416.90 971.4344 3368.863 16834.098\r## 11860 0.6 1.2 1.3416408 19.65632 19329.18 983.3569 3203.986 15744.646\r## 11861 0.6 1.4 1.5231546 19.34240 19238.42 994.6242 3052.918 14762.692\r## 11862 0.6 1.6 1.7088007 19.04680 19145.60 1005.1872 2915.076 13880.715\r## 11863 0.6 1.8 1.8973666 18.76841 19051.32 1015.0737 2789.113 13086.800\r## 11864 0.6 2.0 2.0880613 18.50542 18955.97 1024.3466 2673.505 12368.585\r## 11865 0.6 2.2 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795\r## 11866 0.6 2.4 2.4738634 18.01787 18763.07 1041.3588 2467.711 11115.723\r## 11867 0.6 2.6 2.6683328 17.78969 18665.83 1049.2501 2375.138 10563.243\r## 11868 0.6 2.8 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662\r## 11869 0.6 3.0 3.0594117 17.35703 18470.29 1064.1390 2206.023 9572.504\r## 11870 0.6 3.2 3.2557641 17.15019 18372.12 1071.2484 2128.094 9124.307\r## 11871 0.6 3.4 3.4525353 16.94842 18273.73 1078.1967 2053.864 8702.437\r## 11872 0.6 3.6 3.6496575 16.75097 18175.17 1085.0221 1982.913 8303.926\r## 11987 0.8 -3.6 3.6878178 16.71322 18156.09 1086.3309 1969.539 8229.335\r## 11988 0.8 -3.4 3.4928498 16.90768 18253.58 1079.6024 2039.089 8619.067\r## 11989 0.8 -3.2 3.2984845 17.10595 18350.76 1072.7704 2111.667 9030.518\r## 11990 0.8 -3.0 3.1048349 17.30864 18447.58 1065.8018 2187.625 9466.205\r## 11991 0.8 -2.8 2.9120440 17.51649 18543.98 1058.6583 2267.384 9929.151\r## 11992 0.8 -2.6 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987\r## 11993 0.8 -2.4 2.5298221 17.95117 18735.09 1043.6695 2440.406 10952.036\r## 11994 0.8 -2.2 2.3409400 18.18006 18829.53 1035.7245 2534.950 11521.384\r## 11995 0.8 -2.0 2.1540659 18.41814 18922.97 1027.4091 2635.854 12136.883\r## 11996 0.8 -1.8 1.9697716 18.66655 19015.11 1018.6735 2743.946 12805.000\r## 11997 0.8 -1.6 1.7888544 18.92615 19105.57 1009.4799 2860.032 13532.353\r## 11998 0.8 -1.4 1.6124515 19.19729 19193.77 999.8169 2984.720 14324.632\r## 11999 0.8 -1.2 1.4422205 19.47905 19278.89 989.7241 3118.081 15184.319\r## 12000 0.8 -1.0 1.2806248 19.76823 19359.69 979.3335 3259.019 16106.259\r## 12001 0.8 -0.8 1.1313708 20.05742 19434.31 968.9341 3404.151 17069.619\r## 12002 0.8 -0.6 1.0000000 20.33237 19500.00 959.0618 3546.075 18025.028\r## 12003 0.8 -0.4 0.8944272 20.56913 19552.79 950.5888 3671.400 18879.377\r## 12004 0.8 -0.2 0.8246211 20.73427 19587.69 944.7013 3760.537 19492.994\r## 12005 0.8 0.0 0.8000000 20.79426 19600.00 942.5679 3793.272 19719.569\r## 12006 0.8 0.2 0.8246211 20.73427 19587.69 944.7013 3760.537 19492.994\r## 12007 0.8 0.4 0.8944272 20.56913 19552.79 950.5888 3671.400 18879.377\r## 12008 0.8 0.6 1.0000000 20.33237 19500.00 959.0618 3546.075 18025.028\r## 12009 0.8 0.8 1.1313708 20.05742 19434.31 968.9341 3404.151 17069.619\r## 12010 0.8 1.0 1.2806248 19.76823 19359.69 979.3335 3259.019 16106.259\r## 12011 0.8 1.2 1.4422205 19.47905 19278.89 989.7241 3118.081 15184.319\r## 12012 0.8 1.4 1.6124515 19.19729 19193.77 999.8169 2984.720 14324.632\r## 12013 0.8 1.6 1.7888544 18.92615 19105.57 1009.4799 2860.032 13532.353\r## 12014 0.8 1.8 1.9697716 18.66655 19015.11 1018.6735 2743.946 12805.000\r## 12015 0.8 2.0 2.1540659 18.41814 18922.97 1027.4091 2635.854 12136.883\r## 12016 0.8 2.2 2.3409400 18.18006 18829.53 1035.7245 2534.950 11521.384\r## 12017 0.8 2.4 2.5298221 17.95117 18735.09 1043.6695 2440.406 10952.036\r## 12018 0.8 2.6 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987\r## 12019 0.8 2.8 2.9120440 17.51649 18543.98 1058.6583 2267.384 9929.151\r## 12020 0.8 3.0 3.1048349 17.30864 18447.58 1065.8018 2187.625 9466.205\r## 12021 0.8 3.2 3.2984845 17.10595 18350.76 1072.7704 2111.667 9030.518\r## 12022 0.8 3.4 3.4928498 16.90768 18253.58 1079.6024 2039.089 8619.067\r## 12023 0.8 3.6 3.6878178 16.71322 18156.09 1086.3309 1969.539 8229.335\r## 12138 1.0 -3.6 3.7363083 16.66547 18131.85 1087.9889 1952.704 8135.684\r## 12139 1.0 -3.4 3.5440090 16.85626 18228.00 1081.3786 2020.539 8514.682\r## 12140 1.0 -3.2 3.3526109 17.05025 18323.69 1074.6875 2091.107 8913.477\r## 12141 1.0 -3.0 3.1622777 17.24793 18418.86 1067.8883 2164.685 9334.081\r## 12142 1.0 -2.8 2.9732137 17.44982 18513.39 1060.9501 2241.594 9778.855\r## 12143 1.0 -2.6 2.7856777 17.65654 18607.16 1053.8394 2322.206 10250.534\r## 12144 1.0 -2.4 2.6000000 17.86874 18700.00 1046.5206 2406.940 10752.243\r## 12145 1.0 -2.2 2.4166092 18.08706 18791.70 1038.9580 2496.248 11287.445\r## 12146 1.0 -2.0 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785\r## 12147 1.0 -1.8 2.0591260 18.54426 18970.44 1022.9815 2690.373 12472.744\r## 12148 1.0 -1.6 1.8867962 18.78350 19056.60 1014.5396 2795.846 13128.941\r## 12149 1.0 -1.4 1.7204651 19.02898 19139.77 1005.8220 2906.902 13828.847\r## 12150 1.0 -1.2 1.5620499 19.27850 19218.98 996.9126 3022.757 14568.551\r## 12151 1.0 -1.0 1.4142136 19.52756 19292.89 987.9830 3141.431 15336.115\r## 12152 1.0 -0.8 1.2806248 19.76823 19359.69 979.3335 3259.019 16106.259\r## 12153 1.0 -0.6 1.1661904 19.98787 19416.90 971.4344 3368.863 16834.098\r## 12154 1.0 -0.4 1.0770330 20.16866 19461.48 964.9367 3461.108 17451.478\r## 12155 1.0 -0.2 1.0198039 20.28959 19490.10 960.5961 3523.736 17873.788\r## 12156 1.0 0.0 1.0000000 20.33237 19500.00 959.0618 3546.075 18025.028\r## 12157 1.0 0.2 1.0198039 20.28959 19490.10 960.5961 3523.736 17873.788\r## 12158 1.0 0.4 1.0770330 20.16866 19461.48 964.9367 3461.108 17451.478\r## 12159 1.0 0.6 1.1661904 19.98787 19416.90 971.4344 3368.863 16834.098\r## 12160 1.0 0.8 1.2806248 19.76823 19359.69 979.3335 3259.019 16106.259\r## 12161 1.0 1.0 1.4142136 19.52756 19292.89 987.9830 3141.431 15336.115\r## 12162 1.0 1.2 1.5620499 19.27850 19218.98 996.9126 3022.757 14568.551\r## 12163 1.0 1.4 1.7204651 19.02898 19139.77 1005.8220 2906.902 13828.847\r## 12164 1.0 1.6 1.8867962 18.78350 19056.60 1014.5396 2795.846 13128.941\r## 12165 1.0 1.8 2.0591260 18.54426 18970.44 1022.9815 2690.373 12472.744\r## 12166 1.0 2.0 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785\r## 12167 1.0 2.2 2.4166092 18.08706 18791.70 1038.9580 2496.248 11287.445\r## 12168 1.0 2.4 2.6000000 17.86874 18700.00 1046.5206 2406.940 10752.243\r## 12169 1.0 2.6 2.7856777 17.65654 18607.16 1053.8394 2322.206 10250.534\r## 12170 1.0 2.8 2.9732137 17.44982 18513.39 1060.9501 2241.594 9778.855\r## 12171 1.0 3.0 3.1622777 17.24793 18418.86 1067.8883 2164.685 9334.081\r## 12172 1.0 3.2 3.3526109 17.05025 18323.69 1074.6875 2091.107 8913.477\r## 12173 1.0 3.4 3.5440090 16.85626 18228.00 1081.3786 2020.539 8514.682\r## 12174 1.0 3.6 3.7363083 16.66547 18131.85 1087.9889 1952.704 8135.684\r## 12289 1.2 -3.6 3.7947332 16.60823 18102.63 1089.9796 1932.653 8024.487\r## 12290 1.2 -3.4 3.6055513 16.79478 18197.22 1083.5048 1998.512 8391.142\r## 12291 1.2 -3.2 3.4176015 16.98388 18291.20 1076.9741 2066.782 8775.493\r## 12292 1.2 -3.0 3.2310989 17.17585 18384.45 1070.3660 2137.661 9179.040\r## 12293 1.2 -2.8 3.0463092 17.37105 18476.85 1063.6572 2211.374 9603.473\r## 12294 1.2 -2.6 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662\r## 12295 1.2 -2.4 2.6832816 17.77255 18658.36 1049.8414 2368.280 10522.594\r## 12296 1.2 -2.2 2.5059928 17.97947 18747.00 1042.6897 2451.964 11021.252\r## 12297 1.2 -2.0 2.3323808 18.19069 18833.81 1035.3542 2539.402 11548.369\r## 12298 1.2 -1.8 2.1633308 18.40603 18918.33 1027.8334 2630.658 12104.994\r## 12299 1.2 -1.6 2.0000000 18.62477 19000.00 1020.1469 2725.564 12690.750\r## 12300 1.2 -1.4 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655\r## 12301 1.2 -1.2 1.6970563 19.06482 19151.47 1004.5449 2923.360 13933.335\r## 12302 1.2 -1.0 1.5620499 19.27850 19218.98 996.9126 3022.757 14568.551\r## 12303 1.2 -0.8 1.4422205 19.47905 19278.89 989.7241 3118.081 15184.319\r## 12304 1.2 -0.6 1.3416408 19.65632 19329.18 983.3569 3203.986 15744.646\r## 12305 1.2 -0.4 1.2649111 19.79761 19367.54 978.2767 3273.575 16202.244\r## 12306 1.2 -0.2 1.2165525 19.88957 19391.72 974.9696 3319.402 16505.369\r## 12307 1.2 0.0 1.2000000 19.92159 19400.00 973.8181 3335.458 16611.903\r## 12308 1.2 0.2 1.2165525 19.88957 19391.72 974.9696 3319.402 16505.369\r## 12309 1.2 0.4 1.2649111 19.79761 19367.54 978.2767 3273.575 16202.244\r## 12310 1.2 0.6 1.3416408 19.65632 19329.18 983.3569 3203.986 15744.646\r## 12311 1.2 0.8 1.4422205 19.47905 19278.89 989.7241 3118.081 15184.319\r## 12312 1.2 1.0 1.5620499 19.27850 19218.98 996.9126 3022.757 14568.551\r## 12313 1.2 1.2 1.6970563 19.06482 19151.47 1004.5449 2923.360 13933.335\r## 12314 1.2 1.4 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655\r## 12315 1.2 1.6 2.0000000 18.62477 19000.00 1020.1469 2725.564 12690.750\r## 12316 1.2 1.8 2.1633308 18.40603 18918.33 1027.8334 2630.658 12104.994\r## 12317 1.2 2.0 2.3323808 18.19069 18833.81 1035.3542 2539.402 11548.369\r## 12318 1.2 2.2 2.5059928 17.97947 18747.00 1042.6897 2451.964 11021.252\r## 12319 1.2 2.4 2.6832816 17.77255 18658.36 1049.8414 2368.280 10522.594\r## 12320 1.2 2.6 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662\r## 12321 1.2 2.8 3.0463092 17.37105 18476.85 1063.6572 2211.374 9603.473\r## 12322 1.2 3.0 3.2310989 17.17585 18384.45 1070.3660 2137.661 9179.040\r## 12323 1.2 3.2 3.4176015 16.98388 18291.20 1076.9741 2066.782 8775.493\r## 12324 1.2 3.4 3.6055513 16.79478 18197.22 1083.5048 1998.512 8391.142\r## 12325 1.2 3.6 3.7947332 16.60823 18102.63 1089.9796 1932.653 8024.487\r## 12441 1.4 -3.4 3.6769553 16.72395 18161.52 1085.9587 1973.334 8250.487\r## 12442 1.4 -3.2 3.4928498 16.90768 18253.58 1079.6024 2039.089 8619.067\r## 12443 1.4 -3.0 3.3105891 17.09346 18344.71 1073.2002 2107.045 9004.172\r## 12444 1.4 -2.8 3.1304952 17.28146 18434.75 1066.7360 2177.333 9406.871\r## 12445 1.4 -2.6 2.9529646 17.47181 18523.52 1060.1942 2250.079 9828.243\r## 12446 1.4 -2.4 2.7784888 17.66461 18610.76 1053.5616 2325.391 10269.282\r## 12447 1.4 -2.2 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732\r## 12448 1.4 -2.0 2.4413111 18.05709 18779.34 1039.9985 2483.859 11212.816\r## 12449 1.4 -1.8 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795\r## 12450 1.4 -1.6 2.1260292 18.45500 18936.99 1026.1168 2651.709 12234.324\r## 12451 1.4 -1.4 1.9798990 18.65250 19010.05 1019.1690 2737.758 12766.506\r## 12452 1.4 -1.2 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655\r## 12453 1.4 -1.0 1.7204651 19.02898 19139.77 1005.8220 2906.902 13828.847\r## 12454 1.4 -0.8 1.6124515 19.19729 19193.77 999.8169 2984.720 14324.632\r## 12455 1.4 -0.6 1.5231546 19.34240 19238.42 994.6242 3052.918 14762.692\r## 12456 1.4 -0.4 1.4560220 19.45539 19271.99 990.5733 3106.730 15110.660\r## 12457 1.4 -0.2 1.4142136 19.52756 19292.89 987.9830 3141.431 15336.115\r## 12458 1.4 0.0 1.4000000 19.55242 19300.00 987.0901 3153.445 15414.371\r## 12459 1.4 0.2 1.4142136 19.52756 19292.89 987.9830 3141.431 15336.115\r## 12460 1.4 0.4 1.4560220 19.45539 19271.99 990.5733 3106.730 15110.660\r## 12461 1.4 0.6 1.5231546 19.34240 19238.42 994.6242 3052.918 14762.692\r## 12462 1.4 0.8 1.6124515 19.19729 19193.77 999.8169 2984.720 14324.632\r## 12463 1.4 1.0 1.7204651 19.02898 19139.77 1005.8220 2906.902 13828.847\r## 12464 1.4 1.2 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655\r## 12465 1.4 1.4 1.9798990 18.65250 19010.05 1019.1690 2737.758 12766.506\r## 12466 1.4 1.6 2.1260292 18.45500 18936.99 1026.1168 2651.709 12234.324\r## 12467 1.4 1.8 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795\r## 12468 1.4 2.0 2.4413111 18.05709 18779.34 1039.9985 2483.859 11212.816\r## 12469 1.4 2.2 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732\r## 12470 1.4 2.4 2.7784888 17.66461 18610.76 1053.5616 2325.391 10269.282\r## 12471 1.4 2.6 2.9529646 17.47181 18523.52 1060.1942 2250.079 9828.243\r## 12472 1.4 2.8 3.1304952 17.28146 18434.75 1066.7360 2177.333 9406.871\r## 12473 1.4 3.0 3.3105891 17.09346 18344.71 1073.2002 2107.045 9004.172\r## 12474 1.4 3.2 3.4928498 16.90768 18253.58 1079.6024 2039.089 8619.067\r## 12475 1.4 3.4 3.6769553 16.72395 18161.52 1085.9587 1973.334 8250.487\r## 12592 1.6 -3.4 3.7576588 16.64452 18121.17 1088.7172 1945.348 8094.844\r## 12593 1.6 -3.2 3.5777088 16.82254 18211.15 1082.5442 2008.439 8446.763\r## 12594 1.6 -3.0 3.4000000 17.00180 18300.00 1076.3564 2073.332 8812.595\r## 12595 1.6 -2.8 3.2249031 17.18231 18387.55 1070.1439 2140.074 9192.856\r## 12596 1.6 -2.6 3.0528675 17.36403 18473.57 1063.8985 2208.693 9587.954\r## 12597 1.6 -2.4 2.8844410 17.54681 18557.78 1057.6158 2279.177 9998.070\r## 12598 1.6 -2.2 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987\r## 12599 1.6 -2.0 2.5612497 17.91409 18719.38 1044.9525 2425.315 10861.828\r## 12600 1.6 -1.8 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680\r## 12601 1.6 -1.6 2.2627417 18.27815 18868.63 1032.3051 2576.207 11772.074\r## 12602 1.6 -1.4 2.1260292 18.45500 18936.99 1026.1168 2651.709 12234.324\r## 12603 1.6 -1.2 2.0000000 18.62477 19000.00 1020.1469 2725.564 12690.750\r## 12604 1.6 -1.0 1.8867962 18.78350 19056.60 1014.5396 2795.846 13128.941\r## 12605 1.6 -0.8 1.7888544 18.92615 19105.57 1009.4799 2860.032 13532.353\r## 12606 1.6 -0.6 1.7088007 19.04680 19145.60 1005.1872 2915.076 13880.715\r## 12607 1.6 -0.4 1.6492423 19.13911 19175.38 1001.8949 2957.666 14151.773\r## 12608 1.6 -0.2 1.6124515 19.19729 19193.77 999.8169 2984.720 14324.632\r## 12609 1.6 0.0 1.6000000 19.21719 19200.00 999.1057 2994.010 14384.112\r## 12610 1.6 0.2 1.6124515 19.19729 19193.77 999.8169 2984.720 14324.632\r## 12611 1.6 0.4 1.6492423 19.13911 19175.38 1001.8949 2957.666 14151.773\r## 12612 1.6 0.6 1.7088007 19.04680 19145.60 1005.1872 2915.076 13880.715\r## 12613 1.6 0.8 1.7888544 18.92615 19105.57 1009.4799 2860.032 13532.353\r## 12614 1.6 1.0 1.8867962 18.78350 19056.60 1014.5396 2795.846 13128.941\r## 12615 1.6 1.2 2.0000000 18.62477 19000.00 1020.1469 2725.564 12690.750\r## 12616 1.6 1.4 2.1260292 18.45500 18936.99 1026.1168 2651.709 12234.324\r## 12617 1.6 1.6 2.2627417 18.27815 18868.63 1032.3051 2576.207 11772.074\r## 12618 1.6 1.8 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680\r## 12619 1.6 2.0 2.5612497 17.91409 18719.38 1044.9525 2425.315 10861.828\r## 12620 1.6 2.2 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987\r## 12621 1.6 2.4 2.8844410 17.54681 18557.78 1057.6158 2279.177 9998.070\r## 12622 1.6 2.6 3.0528675 17.36403 18473.57 1063.8985 2208.693 9587.954\r## 12623 1.6 2.8 3.2249031 17.18231 18387.55 1070.1439 2140.074 9192.856\r## 12624 1.6 3.0 3.4000000 17.00180 18300.00 1076.3564 2073.332 8812.595\r## 12625 1.6 3.2 3.5777088 16.82254 18211.15 1082.5442 2008.439 8446.763\r## 12626 1.6 3.4 3.7576588 16.64452 18121.17 1088.7172 1945.348 8094.844\r## 12744 1.8 -3.2 3.6715120 16.72933 18164.24 1085.7721 1975.240 8261.110\r## 12745 1.8 -3.0 3.4985711 16.90192 18250.71 1079.8014 2037.003 8607.315\r## 12746 1.8 -2.8 3.3286634 17.07485 18335.67 1073.8408 2100.169 8965.018\r## 12747 1.8 -2.6 3.1622777 17.24793 18418.86 1067.8883 2164.685 9334.081\r## 12748 1.8 -2.4 3.0000000 17.42085 18500.00 1061.9460 2230.446 9714.064\r## 12749 1.8 -2.2 2.8425341 17.59312 18578.73 1056.0224 2297.273 10104.053\r## 12750 1.8 -2.0 2.6907248 17.76404 18654.64 1050.1351 2364.878 10502.445\r## 12751 1.8 -1.8 2.5455844 17.93254 18727.21 1044.3143 2432.816 10906.641\r## 12752 1.8 -1.6 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680\r## 12753 1.8 -1.4 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795\r## 12754 1.8 -1.2 2.1633308 18.40603 18918.33 1027.8334 2630.658 12104.994\r## 12755 1.8 -1.0 2.0591260 18.54426 18970.44 1022.9815 2690.373 12472.744\r## 12756 1.8 -0.8 1.9697716 18.66655 19015.11 1018.6735 2743.946 12805.000\r## 12757 1.8 -0.6 1.8973666 18.76841 19051.32 1015.0737 2789.113 13086.800\r## 12758 1.8 -0.4 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655\r## 12759 1.8 -0.2 1.8110770 18.89333 19094.46 1010.6459 2845.175 13438.704\r## 12760 1.8 0.0 1.8000000 18.90965 19100.00 1010.0661 2852.559 13485.224\r## 12761 1.8 0.2 1.8110770 18.89333 19094.46 1010.6459 2845.175 13438.704\r## 12762 1.8 0.4 1.8439089 18.84533 19078.05 1012.3490 2823.545 13302.655\r## 12763 1.8 0.6 1.8973666 18.76841 19051.32 1015.0737 2789.113 13086.800\r## 12764 1.8 0.8 1.9697716 18.66655 19015.11 1018.6735 2743.946 12805.000\r## 12765 1.8 1.0 2.0591260 18.54426 18970.44 1022.9815 2690.373 12472.744\r## 12766 1.8 1.2 2.1633308 18.40603 18918.33 1027.8334 2630.658 12104.994\r## 12767 1.8 1.4 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795\r## 12768 1.8 1.6 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680\r## 12769 1.8 1.8 2.5455844 17.93254 18727.21 1044.3143 2432.816 10906.641\r## 12770 1.8 2.0 2.6907248 17.76404 18654.64 1050.1351 2364.878 10502.445\r## 12771 1.8 2.2 2.8425341 17.59312 18578.73 1056.0224 2297.273 10104.053\r## 12772 1.8 2.4 3.0000000 17.42085 18500.00 1061.9460 2230.446 9714.064\r## 12773 1.8 2.6 3.1622777 17.24793 18418.86 1067.8883 2164.685 9334.081\r## 12774 1.8 2.8 3.3286634 17.07485 18335.67 1073.8408 2100.169 8965.018\r## 12775 1.8 3.0 3.4985711 16.90192 18250.71 1079.8014 2037.003 8607.315\r## 12776 1.8 3.2 3.6715120 16.72933 18164.24 1085.7721 1975.240 8261.110\r## 12895 2.0 -3.2 3.7735925 16.62891 18113.20 1089.2601 1939.880 8064.520\r## 12896 2.0 -3.0 3.6055513 16.79478 18197.22 1083.5048 1998.512 8391.142\r## 12897 2.0 -2.8 3.4409301 16.96019 18279.53 1077.7910 2058.143 8726.622\r## 12898 2.0 -2.6 3.2802439 17.12481 18359.88 1072.1215 2118.659 9070.409\r## 12899 2.0 -2.4 3.1240999 17.28822 18437.95 1066.5035 2179.891 9421.611\r## 12900 2.0 -2.2 2.9732137 17.44982 18513.39 1060.9501 2241.594 9778.855\r## 12901 2.0 -2.0 2.8284271 17.60880 18585.79 1055.4831 2303.418 10140.104\r## 12902 2.0 -1.8 2.6907248 17.76404 18654.64 1050.1351 2364.878 10502.445\r## 12903 2.0 -1.6 2.5612497 17.91409 18719.38 1044.9525 2425.315 10861.828\r## 12904 2.0 -1.4 2.4413111 18.05709 18779.34 1039.9985 2483.859 11212.816\r## 12905 2.0 -1.2 2.3323808 18.19069 18833.81 1035.3542 2539.402 11548.369\r## 12906 2.0 -1.0 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785\r## 12907 2.0 -0.8 2.1540659 18.41814 18922.97 1027.4091 2635.854 12136.883\r## 12908 2.0 -0.6 2.0880613 18.50542 18955.97 1024.3466 2673.505 12368.585\r## 12909 2.0 -0.4 2.0396078 18.57067 18980.20 1022.0526 2701.881 12543.930\r## 12910 2.0 -0.2 2.0099751 18.61108 18995.01 1020.6295 2719.557 12653.470\r## 12911 2.0 0.0 2.0000000 18.62477 19000.00 1020.1469 2725.564 12690.750\r## 12912 2.0 0.2 2.0099751 18.61108 18995.01 1020.6295 2719.557 12653.470\r## 12913 2.0 0.4 2.0396078 18.57067 18980.20 1022.0526 2701.881 12543.930\r## 12914 2.0 0.6 2.0880613 18.50542 18955.97 1024.3466 2673.505 12368.585\r## 12915 2.0 0.8 2.1540659 18.41814 18922.97 1027.4091 2635.854 12136.883\r## 12916 2.0 1.0 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785\r## 12917 2.0 1.2 2.3323808 18.19069 18833.81 1035.3542 2539.402 11548.369\r## 12918 2.0 1.4 2.4413111 18.05709 18779.34 1039.9985 2483.859 11212.816\r## 12919 2.0 1.6 2.5612497 17.91409 18719.38 1044.9525 2425.315 10861.828\r## 12920 2.0 1.8 2.6907248 17.76404 18654.64 1050.1351 2364.878 10502.445\r## 12921 2.0 2.0 2.8284271 17.60880 18585.79 1055.4831 2303.418 10140.104\r## 12922 2.0 2.2 2.9732137 17.44982 18513.39 1060.9501 2241.594 9778.855\r## 12923 2.0 2.4 3.1240999 17.28822 18437.95 1066.5035 2179.891 9421.611\r## 12924 2.0 2.6 3.2802439 17.12481 18359.88 1072.1215 2118.659 9070.409\r## 12925 2.0 2.8 3.4409301 16.96019 18279.53 1077.7910 2058.143 8726.622\r## 12926 2.0 3.0 3.6055513 16.79478 18197.22 1083.5048 1998.512 8391.142\r## 12927 2.0 3.2 3.7735925 16.62891 18113.20 1089.2601 1939.880 8064.520\r## 13047 2.2 -3.0 3.7202150 16.68129 18139.89 1087.4392 1958.272 8166.627\r## 13048 2.2 -2.8 3.5608988 16.83934 18219.55 1081.9632 2014.463 8480.560\r## 13049 2.2 -2.6 3.4058773 16.99581 18297.06 1076.5628 2071.141 8800.184\r## 13050 2.2 -2.4 3.2557641 17.15019 18372.12 1071.2484 2128.094 9124.307\r## 13051 2.2 -2.2 3.1112698 17.30182 18444.37 1066.0364 2185.037 9451.277\r## 13052 2.2 -2.0 2.9732137 17.44982 18513.39 1060.9501 2241.594 9778.855\r## 13053 2.2 -1.8 2.8425341 17.59312 18578.73 1056.0224 2297.273 10104.053\r## 13054 2.2 -1.6 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987\r## 13055 2.2 -1.4 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732\r## 13056 2.2 -1.2 2.5059928 17.97947 18747.00 1042.6897 2451.964 11021.252\r## 13057 2.2 -1.0 2.4166092 18.08706 18791.70 1038.9580 2496.248 11287.445\r## 13058 2.2 -0.8 2.3409400 18.18006 18829.53 1035.7245 2534.950 11521.384\r## 13059 2.2 -0.6 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795\r## 13060 2.2 -0.4 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785\r## 13061 2.2 -0.2 2.2090722 18.34673 18895.46 1029.9090 2605.313 11949.745\r## 13062 2.2 0.0 2.2000000 18.35843 18900.00 1029.4998 2610.300 11980.251\r## 13063 2.2 0.2 2.2090722 18.34673 18895.46 1029.9090 2605.313 11949.745\r## 13064 2.2 0.4 2.2360680 18.31210 18881.97 1031.1194 2590.589 11859.785\r## 13065 2.2 0.6 2.2803509 18.25588 18859.82 1033.0823 2566.800 11714.795\r## 13066 2.2 0.8 2.3409400 18.18006 18829.53 1035.7245 2534.950 11521.384\r## 13067 2.2 1.0 2.4166092 18.08706 18791.70 1038.9580 2496.248 11287.445\r## 13068 2.2 1.2 2.5059928 17.97947 18747.00 1042.6897 2451.964 11021.252\r## 13069 2.2 1.4 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732\r## 13070 2.2 1.6 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987\r## 13071 2.2 1.8 2.8425341 17.59312 18578.73 1056.0224 2297.273 10104.053\r## 13072 2.2 2.0 2.9732137 17.44982 18513.39 1060.9501 2241.594 9778.855\r## 13073 2.2 2.2 3.1112698 17.30182 18444.37 1066.0364 2185.037 9451.277\r## 13074 2.2 2.4 3.2557641 17.15019 18372.12 1071.2484 2128.094 9124.307\r## 13075 2.2 2.6 3.4058773 16.99581 18297.06 1076.5628 2071.141 8800.184\r## 13076 2.2 2.8 3.5608988 16.83934 18219.55 1081.9632 2014.463 8480.560\r## 13077 2.2 3.0 3.7202150 16.68129 18139.89 1087.4392 1958.272 8166.627\r## 13199 2.4 -2.8 3.6878178 16.71322 18156.09 1086.3309 1969.539 8229.335\r## 13200 2.4 -2.6 3.5383612 16.86192 18230.82 1081.1829 2022.576 8526.130\r## 13201 2.4 -2.4 3.3941125 17.00781 18302.94 1076.1495 2075.529 8825.049\r## 13202 2.4 -2.2 3.2557641 17.15019 18372.12 1071.2484 2128.094 9124.307\r## 13203 2.4 -2.0 3.1240999 17.28822 18437.95 1066.5035 2179.891 9421.611\r## 13204 2.4 -1.8 3.0000000 17.42085 18500.00 1061.9460 2230.446 9714.064\r## 13205 2.4 -1.6 2.8844410 17.54681 18557.78 1057.6158 2279.177 9998.070\r## 13206 2.4 -1.4 2.7784888 17.66461 18610.76 1053.5616 2325.391 10269.282\r## 13207 2.4 -1.2 2.6832816 17.77255 18658.36 1049.8414 2368.280 10522.594\r## 13208 2.4 -1.0 2.6000000 17.86874 18700.00 1046.5206 2406.940 10752.243\r## 13209 2.4 -0.8 2.5298221 17.95117 18735.09 1043.6695 2440.406 10952.036\r## 13210 2.4 -0.6 2.4738634 18.01787 18763.07 1041.3588 2467.711 11115.723\r## 13211 2.4 -0.4 2.4331050 18.06702 18783.45 1039.6536 2487.962 11237.516\r## 13212 2.4 -0.2 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680\r## 13213 2.4 0.0 2.4000000 18.10732 18800.00 1038.2543 2504.644 11338.097\r## 13214 2.4 0.2 2.4083189 18.09716 18795.84 1038.6072 2500.432 11312.680\r## 13215 2.4 0.4 2.4331050 18.06702 18783.45 1039.6536 2487.962 11237.516\r## 13216 2.4 0.6 2.4738634 18.01787 18763.07 1041.3588 2467.711 11115.723\r## 13217 2.4 0.8 2.5298221 17.95117 18735.09 1043.6695 2440.406 10952.036\r## 13218 2.4 1.0 2.6000000 17.86874 18700.00 1046.5206 2406.940 10752.243\r## 13219 2.4 1.2 2.6832816 17.77255 18658.36 1049.8414 2368.280 10522.594\r## 13220 2.4 1.4 2.7784888 17.66461 18610.76 1053.5616 2325.391 10269.282\r## 13221 2.4 1.6 2.8844410 17.54681 18557.78 1057.6158 2279.177 9998.070\r## 13222 2.4 1.8 3.0000000 17.42085 18500.00 1061.9460 2230.446 9714.064\r## 13223 2.4 2.0 3.1240999 17.28822 18437.95 1066.5035 2179.891 9421.611\r## 13224 2.4 2.2 3.2557641 17.15019 18372.12 1071.2484 2128.094 9124.307\r## 13225 2.4 2.4 3.3941125 17.00781 18302.94 1076.1495 2075.529 8825.049\r## 13226 2.4 2.6 3.5383612 16.86192 18230.82 1081.1829 2022.576 8526.130\r## 13227 2.4 2.8 3.6878178 16.71322 18156.09 1086.3309 1969.539 8229.335\r## 13351 2.6 -2.6 3.6769553 16.72395 18161.52 1085.9587 1973.334 8250.487\r## 13352 2.6 -2.4 3.5383612 16.86192 18230.82 1081.1829 2022.576 8526.130\r## 13353 2.6 -2.2 3.4058773 16.99581 18297.06 1076.5628 2071.141 8800.184\r## 13354 2.6 -2.0 3.2802439 17.12481 18359.88 1072.1215 2118.659 9070.409\r## 13355 2.6 -1.8 3.1622777 17.24793 18418.86 1067.8883 2164.685 9334.081\r## 13356 2.6 -1.6 3.0528675 17.36403 18473.57 1063.8985 2208.693 9587.954\r## 13357 2.6 -1.4 2.9529646 17.47181 18523.52 1060.1942 2250.079 9828.243\r## 13358 2.6 -1.2 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662\r## 13359 2.6 -1.0 2.7856777 17.65654 18607.16 1053.8394 2322.206 10250.534\r## 13360 2.6 -0.8 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987\r## 13361 2.6 -0.6 2.6683328 17.78969 18665.83 1049.2501 2375.138 10563.243\r## 13362 2.6 -0.4 2.6305893 17.83321 18684.71 1047.7480 2392.611 10666.981\r## 13363 2.6 -0.2 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732\r## 13364 2.6 0.0 2.6000000 17.86874 18700.00 1046.5206 2406.940 10752.243\r## 13365 2.6 0.2 2.6076810 17.85979 18696.16 1046.8296 2403.328 10730.732\r## 13366 2.6 0.4 2.6305893 17.83321 18684.71 1047.7480 2392.611 10666.981\r## 13367 2.6 0.6 2.6683328 17.78969 18665.83 1049.2501 2375.138 10563.243\r## 13368 2.6 0.8 2.7202941 17.73034 18639.85 1051.2969 2351.446 10422.987\r## 13369 2.6 1.0 2.7856777 17.65654 18607.16 1053.8394 2322.206 10250.534\r## 13370 2.6 1.2 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662\r## 13371 2.6 1.4 2.9529646 17.47181 18523.52 1060.1942 2250.079 9828.243\r## 13372 2.6 1.6 3.0528675 17.36403 18473.57 1063.8985 2208.693 9587.954\r## 13373 2.6 1.8 3.1622777 17.24793 18418.86 1067.8883 2164.685 9334.081\r## 13374 2.6 2.0 3.2802439 17.12481 18359.88 1072.1215 2118.659 9070.409\r## 13375 2.6 2.2 3.4058773 16.99581 18297.06 1076.5628 2071.141 8800.184\r## 13376 2.6 2.4 3.5383612 16.86192 18230.82 1081.1829 2022.576 8526.130\r## 13377 2.6 2.6 3.6769553 16.72395 18161.52 1085.9587 1973.334 8250.487\r## 13503 2.8 -2.4 3.6878178 16.71322 18156.09 1086.3309 1969.539 8229.335\r## 13504 2.8 -2.2 3.5608988 16.83934 18219.55 1081.9632 2014.463 8480.560\r## 13505 2.8 -2.0 3.4409301 16.96019 18279.53 1077.7910 2058.143 8726.622\r## 13506 2.8 -1.8 3.3286634 17.07485 18335.67 1073.8408 2100.169 8965.018\r## 13507 2.8 -1.6 3.2249031 17.18231 18387.55 1070.1439 2140.074 9192.856\r## 13508 2.8 -1.4 3.1304952 17.28146 18434.75 1066.7360 2177.333 9406.871\r## 13509 2.8 -1.2 3.0463092 17.37105 18476.85 1063.6572 2211.374 9603.473\r## 13510 2.8 -1.0 2.9732137 17.44982 18513.39 1060.9501 2241.594 9778.855\r## 13511 2.8 -0.8 2.9120440 17.51649 18543.98 1058.6583 2267.384 9929.151\r## 13512 2.8 -0.6 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662\r## 13513 2.8 -0.4 2.8284271 17.60880 18585.79 1055.4831 2303.418 10140.104\r## 13514 2.8 -0.2 2.8071338 17.63253 18596.43 1054.6662 2312.745 10194.884\r## 13515 2.8 0.0 2.8000000 17.64050 18600.00 1054.3917 2315.883 10213.336\r## 13516 2.8 0.2 2.8071338 17.63253 18596.43 1054.6662 2312.745 10194.884\r## 13517 2.8 0.4 2.8284271 17.60880 18585.79 1055.4831 2303.418 10140.104\r## 13518 2.8 0.6 2.8635642 17.56984 18568.22 1056.8236 2288.163 10050.662\r## 13519 2.8 0.8 2.9120440 17.51649 18543.98 1058.6583 2267.384 9929.151\r## 13520 2.8 1.0 2.9732137 17.44982 18513.39 1060.9501 2241.594 9778.855\r## 13521 2.8 1.2 3.0463092 17.37105 18476.85 1063.6572 2211.374 9603.473\r## 13522 2.8 1.4 3.1304952 17.28146 18434.75 1066.7360 2177.333 9406.871\r## 13523 2.8 1.6 3.2249031 17.18231 18387.55 1070.1439 2140.074 9192.856\r## 13524 2.8 1.8 3.3286634 17.07485 18335.67 1073.8408 2100.169 8965.018\r## 13525 2.8 2.0 3.4409301 16.96019 18279.53 1077.7910 2058.143 8726.622\r## 13526 2.8 2.2 3.5608988 16.83934 18219.55 1081.9632 2014.463 8480.560\r## 13527 2.8 2.4 3.6878178 16.71322 18156.09 1086.3309 1969.539 8229.335\r## 13655 3.0 -2.2 3.7202150 16.68129 18139.89 1087.4392 1958.272 8166.627\r## 13656 3.0 -2.0 3.6055513 16.79478 18197.22 1083.5048 1998.512 8391.142\r## 13657 3.0 -1.8 3.4985711 16.90192 18250.71 1079.8014 2037.003 8607.315\r## 13658 3.0 -1.6 3.4000000 17.00180 18300.00 1076.3564 2073.332 8812.595\r## 13659 3.0 -1.4 3.3105891 17.09346 18344.71 1073.2002 2107.045 9004.172\r## 13660 3.0 -1.2 3.2310989 17.17585 18384.45 1070.3660 2137.661 9179.040\r## 13661 3.0 -1.0 3.1622777 17.24793 18418.86 1067.8883 2164.685 9334.081\r## 13662 3.0 -0.8 3.1048349 17.30864 18447.58 1065.8018 2187.625 9466.205\r## 13663 3.0 -0.6 3.0594117 17.35703 18470.29 1064.1390 2206.023 9572.504\r## 13664 3.0 -0.4 3.0265492 17.39225 18486.73 1062.9286 2219.481 9650.444\r## 13665 3.0 -0.2 3.0066593 17.41366 18496.67 1062.1929 2227.688 9698.051\r## 13666 3.0 0.0 3.0000000 17.42085 18500.00 1061.9460 2230.446 9714.064\r## 13667 3.0 0.2 3.0066593 17.41366 18496.67 1062.1929 2227.688 9698.051\r## 13668 3.0 0.4 3.0265492 17.39225 18486.73 1062.9286 2219.481 9650.444\r## 13669 3.0 0.6 3.0594117 17.35703 18470.29 1064.1390 2206.023 9572.504\r## 13670 3.0 0.8 3.1048349 17.30864 18447.58 1065.8018 2187.625 9466.205\r## 13671 3.0 1.0 3.1622777 17.24793 18418.86 1067.8883 2164.685 9334.081\r## 13672 3.0 1.2 3.2310989 17.17585 18384.45 1070.3660 2137.661 9179.040\r## 13673 3.0 1.4 3.3105891 17.09346 18344.71 1073.2002 2107.045 9004.172\r## 13674 3.0 1.6 3.4000000 17.00180 18300.00 1076.3564 2073.332 8812.595\r## 13675 3.0 1.8 3.4985711 16.90192 18250.71 1079.8014 2037.003 8607.315\r## 13676 3.0 2.0 3.6055513 16.79478 18197.22 1083.5048 1998.512 8391.142\r## 13677 3.0 2.2 3.7202150 16.68129 18139.89 1087.4392 1958.272 8166.627\r## 13807 3.2 -2.0 3.7735925 16.62891 18113.20 1089.2601 1939.880 8064.520\r## 13808 3.2 -1.8 3.6715120 16.72933 18164.24 1085.7721 1975.240 8261.110\r## 13809 3.2 -1.6 3.5777088 16.82254 18211.15 1082.5442 2008.439 8446.763\r## 13810 3.2 -1.4 3.4928498 16.90768 18253.58 1079.6024 2039.089 8619.067\r## 13811 3.2 -1.2 3.4176015 16.98388 18291.20 1076.9741 2066.782 8775.493\r## 13812 3.2 -1.0 3.3526109 17.05025 18323.69 1074.6875 2091.107 8913.477\r## 13813 3.2 -0.8 3.2984845 17.10595 18350.76 1072.7704 2111.667 9030.518\r## 13814 3.2 -0.6 3.2557641 17.15019 18372.12 1071.2484 2128.094 9124.307\r## 13815 3.2 -0.4 3.2249031 17.18231 18387.55 1070.1439 2140.074 9192.856\r## 13816 3.2 -0.2 3.2062439 17.20180 18396.88 1069.4738 2147.364 9234.634\r## 13817 3.2 0.0 3.2000000 17.20834 18400.00 1069.2492 2149.812 9248.670\r## 13818 3.2 0.2 3.2062439 17.20180 18396.88 1069.4738 2147.364 9234.634\r## 13819 3.2 0.4 3.2249031 17.18231 18387.55 1070.1439 2140.074 9192.856\r## 13820 3.2 0.6 3.2557641 17.15019 18372.12 1071.2484 2128.094 9124.307\r## 13821 3.2 0.8 3.2984845 17.10595 18350.76 1072.7704 2111.667 9030.518\r## 13822 3.2 1.0 3.3526109 17.05025 18323.69 1074.6875 2091.107 8913.477\r## 13823 3.2 1.2 3.4176015 16.98388 18291.20 1076.9741 2066.782 8775.493\r## 13824 3.2 1.4 3.4928498 16.90768 18253.58 1079.6024 2039.089 8619.067\r## 13825 3.2 1.6 3.5777088 16.82254 18211.15 1082.5442 2008.439 8446.763\r## 13826 3.2 1.8 3.6715120 16.72933 18164.24 1085.7721 1975.240 8261.110\r## 13827 3.2 2.0 3.7735925 16.62891 18113.20 1089.2601 1939.880 8064.520\r## 13960 3.4 -1.6 3.7576588 16.64452 18121.17 1088.7172 1945.348 8094.844\r## 13961 3.4 -1.4 3.6769553 16.72395 18161.52 1085.9587 1973.334 8250.487\r## 13962 3.4 -1.2 3.6055513 16.79478 18197.22 1083.5048 1998.512 8391.142\r## 13963 3.4 -1.0 3.5440090 16.85626 18228.00 1081.3786 2020.539 8514.682\r## 13964 3.4 -0.8 3.4928498 16.90768 18253.58 1079.6024 2039.089 8619.067\r## 13965 3.4 -0.6 3.4525353 16.94842 18273.73 1078.1967 2053.864 8702.437\r## 13966 3.4 -0.4 3.4234486 16.97794 18288.28 1077.1790 2064.612 8763.212\r## 13967 3.4 -0.2 3.4058773 16.99581 18297.06 1076.5628 2071.141 8800.184\r## 13968 3.4 0.0 3.4000000 17.00180 18300.00 1076.3564 2073.332 8812.595\r## 13969 3.4 0.2 3.4058773 16.99581 18297.06 1076.5628 2071.141 8800.184\r## 13970 3.4 0.4 3.4234486 16.97794 18288.28 1077.1790 2064.612 8763.212\r## 13971 3.4 0.6 3.4525353 16.94842 18273.73 1078.1967 2053.864 8702.437\r## 13972 3.4 0.8 3.4928498 16.90768 18253.58 1079.6024 2039.089 8619.067\r## 13973 3.4 1.0 3.5440090 16.85626 18228.00 1081.3786 2020.539 8514.682\r## 13974 3.4 1.2 3.6055513 16.79478 18197.22 1083.5048 1998.512 8391.142\r## 13975 3.4 1.4 3.6769553 16.72395 18161.52 1085.9587 1973.334 8250.487\r## 13976 3.4 1.6 3.7576588 16.64452 18121.17 1088.7172 1945.348 8094.844\r## 14113 3.6 -1.2 3.7947332 16.60823 18102.63 1089.9796 1932.653 8024.487\r## 14114 3.6 -1.0 3.7363083 16.66547 18131.85 1087.9889 1952.704 8135.684\r## 14115 3.6 -0.8 3.6878178 16.71322 18156.09 1086.3309 1969.539 8229.335\r## 14116 3.6 -0.6 3.6496575 16.75097 18175.17 1085.0221 1982.913 8303.926\r## 14117 3.6 -0.4 3.6221541 16.77826 18188.92 1084.0766 1992.622 8358.184\r## 14118 3.6 -0.2 3.6055513 16.79478 18197.22 1083.5048 1998.512 8391.142\r## 14119 3.6 0.0 3.6000000 16.80031 18200.00 1083.3134 2000.486 8402.197\r## 14120 3.6 0.2 3.6055513 16.79478 18197.22 1083.5048 1998.512 8391.142\r## 14121 3.6 0.4 3.6221541 16.77826 18188.92 1084.0766 1992.622 8358.184\r## 14122 3.6 0.6 3.6496575 16.75097 18175.17 1085.0221 1982.913 8303.926\r## 14123 3.6 0.8 3.6878178 16.71322 18156.09 1086.3309 1969.539 8229.335\r## 14124 3.6 1.0 3.7363083 16.66547 18131.85 1087.9889 1952.704 8135.684\r## 14125 3.6 1.2 3.7947332 16.60823 18102.63 1089.9796 1932.653 8024.487\r## 14269 3.8 -0.2 3.8052595 16.59795 18097.37 1090.3376 1929.067 8004.640\r## 14270 3.8 0.0 3.8000000 16.60309 18100.00 1090.1587 1930.858 8014.550\r## 14271 3.8 0.2 3.8052595 16.59795 18097.37 1090.3376 1929.067 8004.640\r## U n\r## 8531 4442.099 11.32312\r## 8532 4442.057 11.33550\r## 8533 4442.099 11.32312\r## 8677 4442.015 11.34790\r## 8678 4441.536 11.48661\r## 8679 4441.117 11.60332\r## 8680 4440.773 11.69620\r## 8681 4440.516 11.76373\r## 8682 4440.358 11.80473\r## 8683 4440.305 11.81847\r## 8684 4440.358 11.80473\r## 8685 4440.516 11.76373\r## 8686 4440.773 11.69620\r## 8687 4441.117 11.60332\r## 8688 4441.536 11.48661\r## 8689 4442.015 11.34790\r## 8826 4441.715 11.43568\r## 8827 4441.020 11.62967\r## 8828 4440.358 11.80473\r## 8829 4439.748 11.95830\r## 8830 4439.212 12.08794\r## 8831 4438.770 12.19140\r## 8832 4438.440 12.26678\r## 8833 4438.236 12.31262\r## 8834 4438.166 12.32800\r## 8835 4438.236 12.31262\r## 8836 4438.440 12.26678\r## 8837 4438.770 12.19140\r## 8838 4439.212 12.08794\r## 8839 4439.748 11.95830\r## 8840 4440.358 11.80473\r## 8841 4441.020 11.62967\r## 8842 4441.715 11.43568\r## 8975 4441.845 11.39786\r## 8976 4440.972 11.64290\r## 8977 4440.087 11.87389\r## 8978 4439.212 12.08794\r## 8979 4438.372 12.28201\r## 8980 4437.595 12.45300\r## 8981 4436.908 12.59791\r## 8982 4436.339 12.71395\r## 8983 4435.913 12.79872\r## 8984 4435.649 12.85037\r## 8985 4435.559 12.86772\r## 8986 4435.649 12.85037\r## 8987 4435.913 12.79872\r## 8988 4436.339 12.71395\r## 8989 4436.908 12.59791\r## 8990 4437.595 12.45300\r## 8991 4438.372 12.28201\r## 8992 4439.212 12.08794\r## 8993 4440.087 11.87389\r## 8994 4440.972 11.64290\r## 8995 4441.845 11.39786\r## 9125 4441.400 11.52519\r## 9126 4440.358 11.80473\r## 9127 4439.273 12.07335\r## 9128 4438.166 12.32800\r## 9129 4437.065 12.56530\r## 9130 4435.999 12.78164\r## 9131 4435.007 12.97325\r## 9132 4434.125 13.13640\r## 9133 4433.392 13.26758\r## 9134 4432.840 13.36372\r## 9135 4432.497 13.42242\r## 9136 4432.381 13.44216\r## 9137 4432.497 13.42242\r## 9138 4432.840 13.36372\r## 9139 4433.392 13.26758\r## 9140 4434.125 13.13640\r## 9141 4435.007 12.97325\r## 9142 4435.999 12.78164\r## 9143 4437.065 12.56530\r## 9144 4438.166 12.32800\r## 9145 4439.273 12.07335\r## 9146 4440.358 11.80473\r## 9147 4441.400 11.52519\r## 9275 4441.117 11.60332\r## 9276 4439.919 11.91590\r## 9277 4438.639 12.22140\r## 9278 4437.295 12.51683\r## 9279 4435.913 12.79872\r## 9280 4434.525 13.06315\r## 9281 4433.174 13.30578\r## 9282 4431.906 13.52203\r## 9283 4430.772 13.70721\r## 9284 4429.823 13.85685\r## 9285 4429.106 13.96695\r## 9286 4428.660 14.03436\r## 9287 4428.508 14.05707\r## 9288 4428.660 14.03436\r## 9289 4429.106 13.96695\r## 9290 4429.823 13.85685\r## 9291 4430.772 13.70721\r## 9292 4431.906 13.52203\r## 9293 4433.174 13.30578\r## 9294 4434.525 13.06315\r## 9295 4435.913 12.79872\r## 9296 4437.295 12.51683\r## 9297 4438.639 12.22140\r## 9298 4439.919 11.91590\r## 9299 4441.117 11.60332\r## 9425 4441.020 11.62967\r## 9426 4439.690 11.97252\r## 9427 4438.236 12.31262\r## 9428 4436.668 12.64728\r## 9429 4435.007 12.97325\r## 9430 4433.283 13.28664\r## 9431 4431.538 13.58290\r## 9432 4429.823 13.85685\r## 9433 4428.201 14.10283\r## 9434 4426.739 14.31495\r## 9435 4425.509 14.48738\r## 9436 4424.575 14.61488\r## 9437 4423.991 14.69322\r## 9438 4423.792 14.71965\r## 9439 4423.991 14.69322\r## 9440 4424.575 14.61488\r## 9441 4425.509 14.48738\r## 9442 4426.739 14.31495\r## 9443 4428.201 14.10283\r## 9444 4429.823 13.85685\r## 9445 4431.538 13.58290\r## 9446 4433.283 13.28664\r## 9447 4435.007 12.97325\r## 9448 4436.668 12.64728\r## 9449 4438.236 12.31262\r## 9450 4439.690 11.97252\r## 9451 4441.020 11.62967\r## 9575 4441.117 11.60332\r## 9576 4439.690 11.97252\r## 9577 4438.097 12.34344\r## 9578 4436.339 12.71395\r## 9579 4434.427 13.08135\r## 9580 4432.381 13.44216\r## 9581 4430.237 13.79209\r## 9582 4428.044 14.12590\r## 9583 4425.869 14.43741\r## 9584 4423.792 14.71965\r## 9585 4421.905 14.96508\r## 9586 4420.304 15.16610\r## 9587 4419.081 15.31563\r## 9588 4418.314 15.40791\r## 9589 4418.052 15.43911\r## 9590 4418.314 15.40791\r## 9591 4419.081 15.31563\r## 9592 4420.304 15.16610\r## 9593 4421.905 14.96508\r## 9594 4423.792 14.71965\r## 9595 4425.869 14.43741\r## 9596 4428.044 14.12590\r## 9597 4430.237 13.79209\r## 9598 4432.381 13.44216\r## 9599 4434.427 13.08135\r## 9600 4436.339 12.71395\r## 9601 4438.097 12.34344\r## 9602 4439.690 11.97252\r## 9603 4441.117 11.60332\r## 9725 4441.400 11.52519\r## 9726 4439.919 11.91590\r## 9727 4438.236 12.31262\r## 9728 4436.339 12.71395\r## 9729 4434.226 13.11797\r## 9730 4431.906 13.52203\r## 9731 4429.397 13.92257\r## 9732 4426.739 14.31495\r## 9733 4423.991 14.69322\r## 9734 4421.234 15.05009\r## 9735 4418.572 15.37693\r## 9736 4416.130 15.66409\r## 9737 4414.040 15.90146\r## 9738 4412.433 16.07939\r## 9739 4411.418 16.18978\r## 9740 4411.071 16.22722\r## 9741 4411.418 16.18978\r## 9742 4412.433 16.07939\r## 9743 4414.040 15.90146\r## 9744 4416.130 15.66409\r## 9745 4418.572 15.37693\r## 9746 4421.234 15.05009\r## 9747 4423.991 14.69322\r## 9748 4426.739 14.31495\r## 9749 4429.397 13.92257\r## 9750 4431.906 13.52203\r## 9751 4434.226 13.11797\r## 9752 4436.339 12.71395\r## 9753 4438.236 12.31262\r## 9754 4439.919 11.91590\r## 9755 4441.400 11.52519\r## 9875 4441.845 11.39786\r## 9876 4440.358 11.80473\r## 9877 4438.639 12.22140\r## 9878 4436.668 12.64728\r## 9879 4434.427 13.08135\r## 9880 4431.906 13.52203\r## 9881 4429.106 13.96695\r## 9882 4426.047 14.41264\r## 9883 4422.766 14.85428\r## 9884 4419.331 15.28531\r## 9885 4415.842 15.69721\r## 9886 4412.433 16.07939\r## 9887 4409.266 16.41942\r## 9888 4406.527 16.70375\r## 9889 4404.402 16.91893\r## 9890 4403.052 17.05336\r## 9891 4402.589 17.09912\r## 9892 4403.052 17.05336\r## 9893 4404.402 16.91893\r## 9894 4406.527 16.70375\r## 9895 4409.266 16.41942\r## 9896 4412.433 16.07939\r## 9897 4415.842 15.69721\r## 9898 4419.331 15.28531\r## 9899 4422.766 14.85428\r## 9900 4426.047 14.41264\r## 9901 4429.106 13.96695\r## 9902 4431.906 13.52203\r## 9903 4434.427 13.08135\r## 9904 4436.668 12.64728\r## 9905 4438.639 12.22140\r## 9906 4440.358 11.80473\r## 9907 4441.845 11.39786\r## 10026 4440.972 11.64290\r## 10027 4439.273 12.07335\r## 10028 4437.295 12.51683\r## 10029 4435.007 12.97325\r## 10030 4432.381 13.44216\r## 10031 4429.397 13.92257\r## 10032 4426.047 14.41264\r## 10033 4422.340 14.90932\r## 10034 4418.314 15.40791\r## 10035 4414.040 15.90146\r## 10036 4409.637 16.38029\r## 10037 4405.270 16.83157\r## 10038 4401.158 17.23934\r## 10039 4397.555 17.58525\r## 10040 4394.729 17.85025\r## 10041 4392.919 18.01731\r## 10042 4392.296 18.07444\r## 10043 4392.919 18.01731\r## 10044 4394.729 17.85025\r## 10045 4397.555 17.58525\r## 10046 4401.158 17.23934\r## 10047 4405.270 16.83157\r## 10048 4409.637 16.38029\r## 10049 4414.040 15.90146\r## 10050 4418.314 15.40791\r## 10051 4422.340 14.90932\r## 10052 4426.047 14.41264\r## 10053 4429.397 13.92257\r## 10054 4432.381 13.44216\r## 10055 4435.007 12.97325\r## 10056 4437.295 12.51683\r## 10057 4439.273 12.07335\r## 10058 4440.972 11.64290\r## 10176 4441.715 11.43568\r## 10177 4440.087 11.87389\r## 10178 4438.166 12.32800\r## 10179 4435.913 12.79872\r## 10180 4433.283 13.28664\r## 10181 4430.237 13.79209\r## 10182 4426.739 14.31495\r## 10183 4422.766 14.85428\r## 10184 4418.314 15.40791\r## 10185 4413.409 15.97175\r## 10186 4408.124 16.53899\r## 10187 4402.589 17.09912\r## 10188 4397.008 17.63698\r## 10189 4391.662 18.13231\r## 10190 4386.902 18.56021\r## 10191 4383.117 18.89326\r## 10192 4380.669 19.10570\r## 10193 4379.821 19.17882\r## 10194 4380.669 19.10570\r## 10195 4383.117 18.89326\r## 10196 4386.902 18.56021\r## 10197 4391.662 18.13231\r## 10198 4397.008 17.63698\r## 10199 4402.589 17.09912\r## 10200 4408.124 16.53899\r## 10201 4413.409 15.97175\r## 10202 4418.314 15.40791\r## 10203 4422.766 14.85428\r## 10204 4426.739 14.31495\r## 10205 4430.237 13.79209\r## 10206 4433.283 13.28664\r## 10207 4435.913 12.79872\r## 10208 4438.166 12.32800\r## 10209 4440.087 11.87389\r## 10210 4441.715 11.43568\r## 10327 4441.020 11.62967\r## 10328 4439.212 12.08794\r## 10329 4437.065 12.56530\r## 10330 4434.525 13.06315\r## 10331 4431.538 13.58290\r## 10332 4428.044 14.12590\r## 10333 4423.991 14.69322\r## 10334 4419.331 15.28531\r## 10335 4414.040 15.90146\r## 10336 4408.124 16.53899\r## 10337 4401.642 17.19209\r## 10338 4394.729 17.85025\r## 10339 4387.619 18.49649\r## 10340 4380.669 19.10570\r## 10341 4374.357 19.64428\r## 10342 4369.247 20.07229\r## 10343 4365.896 20.34970\r## 10344 4364.727 20.44601\r## 10345 4365.896 20.34970\r## 10346 4369.247 20.07229\r## 10347 4374.357 19.64428\r## 10348 4380.669 19.10570\r## 10349 4387.619 18.49649\r## 10350 4394.729 17.85025\r## 10351 4401.642 17.19209\r## 10352 4408.124 16.53899\r## 10353 4414.040 15.90146\r## 10354 4419.331 15.28531\r## 10355 4423.991 14.69322\r## 10356 4428.044 14.12590\r## 10357 4431.538 13.58290\r## 10358 4434.525 13.06315\r## 10359 4437.065 12.56530\r## 10360 4439.212 12.08794\r## 10361 4441.020 11.62967\r## 10477 4442.015 11.34790\r## 10478 4440.358 11.80473\r## 10479 4438.372 12.28201\r## 10480 4435.999 12.78164\r## 10481 4433.174 13.30578\r## 10482 4429.823 13.85685\r## 10483 4425.869 14.43741\r## 10484 4421.234 15.05009\r## 10485 4415.842 15.69721\r## 10486 4409.637 16.38029\r## 10487 4402.589 17.09912\r## 10488 4394.729 17.85025\r## 10489 4386.173 18.62485\r## 10490 4377.172 19.40556\r## 10491 4368.155 20.16291\r## 10492 4359.757 20.85256\r## 10493 4352.794 21.41611\r## 10494 4348.142 21.78958\r## 10495 4346.501 21.92086\r## 10496 4348.142 21.78958\r## 10497 4352.794 21.41611\r## 10498 4359.757 20.85256\r## 10499 4368.155 20.16291\r## 10500 4377.172 19.40556\r## 10501 4386.173 18.62485\r## 10502 4394.729 17.85025\r## 10503 4402.589 17.09912\r## 10504 4409.637 16.38029\r## 10505 4415.842 15.69721\r## 10506 4421.234 15.05009\r## 10507 4425.869 14.43741\r## 10508 4429.823 13.85685\r## 10509 4433.174 13.30578\r## 10510 4435.999 12.78164\r## 10511 4438.372 12.28201\r## 10512 4440.358 11.80473\r## 10513 4442.015 11.34790\r## 10628 4441.536 11.48661\r## 10629 4439.748 11.95830\r## 10630 4437.595 12.45300\r## 10631 4435.007 12.97325\r## 10632 4431.906 13.52203\r## 10633 4428.201 14.10283\r## 10634 4423.792 14.71965\r## 10635 4418.572 15.37693\r## 10636 4412.433 16.07939\r## 10637 4405.270 16.83157\r## 10638 4397.008 17.63698\r## 10639 4387.619 18.49649\r## 10640 4377.172 19.40556\r## 10641 4365.896 20.34970\r## 10642 4354.261 21.29788\r## 10643 4343.069 22.19473\r## 10644 4333.486 22.95600\r## 10645 4326.906 23.47700\r## 10646 4324.547 23.66363\r## 10647 4326.906 23.47700\r## 10648 4333.486 22.95600\r## 10649 4343.069 22.19473\r## 10650 4354.261 21.29788\r## 10651 4365.896 20.34970\r## 10652 4377.172 19.40556\r## 10653 4387.619 18.49649\r## 10654 4397.008 17.63698\r## 10655 4405.270 16.83157\r## 10656 4412.433 16.07939\r## 10657 4418.572 15.37693\r## 10658 4423.792 14.71965\r## 10659 4428.201 14.10283\r## 10660 4431.906 13.52203\r## 10661 4435.007 12.97325\r## 10662 4437.595 12.45300\r## 10663 4439.748 11.95830\r## 10664 4441.536 11.48661\r## 10779 4441.117 11.60332\r## 10780 4439.212 12.08794\r## 10781 4436.908 12.59791\r## 10782 4434.125 13.13640\r## 10783 4430.772 13.70721\r## 10784 4426.739 14.31495\r## 10785 4421.905 14.96508\r## 10786 4416.130 15.66409\r## 10787 4409.266 16.41942\r## 10788 4401.158 17.23934\r## 10789 4391.662 18.13231\r## 10790 4380.669 19.10570\r## 10791 4368.155 20.16291\r## 10792 4354.261 21.29788\r## 10793 4339.420 22.48509\r## 10794 4324.547 23.66363\r## 10795 4311.225 24.71832\r## 10796 4301.688 25.47624\r## 10797 4298.178 25.75617\r## 10798 4301.688 25.47624\r## 10799 4311.225 24.71832\r## 10800 4324.547 23.66363\r## 10801 4339.420 22.48509\r## 10802 4354.261 21.29788\r## 10803 4368.155 20.16291\r## 10804 4380.669 19.10570\r## 10805 4391.662 18.13231\r## 10806 4401.158 17.23934\r## 10807 4409.266 16.41942\r## 10808 4416.130 15.66409\r## 10809 4421.905 14.96508\r## 10810 4426.739 14.31495\r## 10811 4430.772 13.70721\r## 10812 4434.125 13.13640\r## 10813 4436.908 12.59791\r## 10814 4439.212 12.08794\r## 10815 4441.117 11.60332\r## 10930 4440.773 11.69620\r## 10931 4438.770 12.19140\r## 10932 4436.339 12.71395\r## 10933 4433.392 13.26758\r## 10934 4429.823 13.85685\r## 10935 4425.509 14.48738\r## 10936 4420.304 15.16610\r## 10937 4414.040 15.90146\r## 10938 4406.527 16.70375\r## 10939 4397.555 17.58525\r## 10940 4386.902 18.56021\r## 10941 4374.357 19.64428\r## 10942 4359.757 20.85256\r## 10943 4343.069 22.19473\r## 10944 4324.547 23.66363\r## 10945 4305.022 25.21085\r## 10946 4286.395 26.70122\r## 10947 4272.125 27.85929\r## 10948 4266.616 28.31126\r## 10949 4272.125 27.85929\r## 10950 4286.395 26.70122\r## 10951 4305.022 25.21085\r## 10952 4324.547 23.66363\r## 10953 4343.069 22.19473\r## 10954 4359.757 20.85256\r## 10955 4374.357 19.64428\r## 10956 4386.902 18.56021\r## 10957 4397.555 17.58525\r## 10958 4406.527 16.70375\r## 10959 4414.040 15.90146\r## 10960 4420.304 15.16610\r## 10961 4425.509 14.48738\r## 10962 4429.823 13.85685\r## 10963 4433.392 13.26758\r## 10964 4436.339 12.71395\r## 10965 4438.770 12.19140\r## 10966 4440.773 11.69620\r## 11081 4440.516 11.76373\r## 11082 4438.440 12.26678\r## 11083 4435.913 12.79872\r## 11084 4432.840 13.36372\r## 11085 4429.106 13.96695\r## 11086 4424.575 14.61488\r## 11087 4419.081 15.31563\r## 11088 4412.433 16.07939\r## 11089 4404.402 16.91893\r## 11090 4394.729 17.85025\r## 11091 4383.117 18.89326\r## 11092 4369.247 20.07229\r## 11093 4352.794 21.41611\r## 11094 4333.486 22.95600\r## 11095 4311.225 24.71832\r## 11096 4286.395 26.70122\r## 11097 4260.617 28.80675\r## 11098 4238.470 30.67049\r## 11099 4228.993 31.48652\r## 11100 4238.470 30.67049\r## 11101 4260.617 28.80675\r## 11102 4286.395 26.70122\r## 11103 4311.225 24.71832\r## 11104 4333.486 22.95600\r## 11105 4352.794 21.41611\r## 11106 4369.247 20.07229\r## 11107 4383.117 18.89326\r## 11108 4394.729 17.85025\r## 11109 4404.402 16.91893\r## 11110 4412.433 16.07939\r## 11111 4419.081 15.31563\r## 11112 4424.575 14.61488\r## 11113 4429.106 13.96695\r## 11114 4432.840 13.36372\r## 11115 4435.913 12.79872\r## 11116 4438.440 12.26678\r## 11117 4440.516 11.76373\r## 11231 4442.099 11.32312\r## 11232 4440.358 11.80473\r## 11233 4438.236 12.31262\r## 11234 4435.649 12.85037\r## 11235 4432.497 13.42242\r## 11236 4428.660 14.03436\r## 11237 4423.991 14.69322\r## 11238 4418.314 15.40791\r## 11239 4411.418 16.18978\r## 11240 4403.052 17.05336\r## 11241 4392.919 18.01731\r## 11242 4380.669 19.10570\r## 11243 4365.896 20.34970\r## 11244 4348.142 21.78958\r## 11245 4326.906 23.47700\r## 11246 4301.688 25.47624\r## 11247 4272.125 27.85929\r## 11248 4238.470 30.67049\r## 11249 4203.762 33.72062\r## 11250 4184.362 35.50593\r## 11251 4203.762 33.72062\r## 11252 4238.470 30.67049\r## 11253 4272.125 27.85929\r## 11254 4301.688 25.47624\r## 11255 4326.906 23.47700\r## 11256 4348.142 21.78958\r## 11257 4365.896 20.34970\r## 11258 4380.669 19.10570\r## 11259 4392.919 18.01731\r## 11260 4403.052 17.05336\r## 11261 4411.418 16.18978\r## 11262 4418.314 15.40791\r## 11263 4423.991 14.69322\r## 11264 4428.660 14.03436\r## 11265 4432.497 13.42242\r## 11266 4435.649 12.85037\r## 11267 4438.236 12.31262\r## 11268 4440.358 11.80473\r## 11269 4442.099 11.32312\r## 11382 4442.057 11.33550\r## 11383 4440.305 11.81847\r## 11384 4438.166 12.32800\r## 11385 4435.559 12.86772\r## 11386 4432.381 13.44216\r## 11387 4428.508 14.05707\r## 11388 4423.792 14.71965\r## 11389 4418.052 15.43911\r## 11390 4411.071 16.22722\r## 11391 4402.589 17.09912\r## 11392 4392.296 18.07444\r## 11393 4379.821 19.17882\r## 11394 4364.727 20.44601\r## 11395 4346.501 21.92086\r## 11396 4324.547 23.66363\r## 11397 4298.178 25.75617\r## 11398 4266.616 28.31126\r## 11399 4228.993 31.48652\r## 11400 4184.362 35.50593\r## 11401 4131.721 40.69355\r## 11402 4184.362 35.50593\r## 11403 4228.993 31.48652\r## 11404 4266.616 28.31126\r## 11405 4298.178 25.75617\r## 11406 4324.547 23.66363\r## 11407 4346.501 21.92086\r## 11408 4364.727 20.44601\r## 11409 4379.821 19.17882\r## 11410 4392.296 18.07444\r## 11411 4402.589 17.09912\r## 11412 4411.071 16.22722\r## 11413 4418.052 15.43911\r## 11414 4423.792 14.71965\r## 11415 4428.508 14.05707\r## 11416 4432.381 13.44216\r## 11417 4435.559 12.86772\r## 11418 4438.166 12.32800\r## 11419 4440.305 11.81847\r## 11420 4442.057 11.33550\r## 11533 4442.099 11.32312\r## 11534 4440.358 11.80473\r## 11535 4438.236 12.31262\r## 11536 4435.649 12.85037\r## 11537 4432.497 13.42242\r## 11538 4428.660 14.03436\r## 11539 4423.991 14.69322\r## 11540 4418.314 15.40791\r## 11541 4411.418 16.18978\r## 11542 4403.052 17.05336\r## 11543 4392.919 18.01731\r## 11544 4380.669 19.10570\r## 11545 4365.896 20.34970\r## 11546 4348.142 21.78958\r## 11547 4326.906 23.47700\r## 11548 4301.688 25.47624\r## 11549 4272.125 27.85929\r## 11550 4238.470 30.67049\r## 11551 4203.762 33.72062\r## 11552 4184.362 35.50593\r## 11553 4203.762 33.72062\r## 11554 4238.470 30.67049\r## 11555 4272.125 27.85929\r## 11556 4301.688 25.47624\r## 11557 4326.906 23.47700\r## 11558 4348.142 21.78958\r## 11559 4365.896 20.34970\r## 11560 4380.669 19.10570\r## 11561 4392.919 18.01731\r## 11562 4403.052 17.05336\r## 11563 4411.418 16.18978\r## 11564 4418.314 15.40791\r## 11565 4423.991 14.69322\r## 11566 4428.660 14.03436\r## 11567 4432.497 13.42242\r## 11568 4435.649 12.85037\r## 11569 4438.236 12.31262\r## 11570 4440.358 11.80473\r## 11571 4442.099 11.32312\r## 11685 4440.516 11.76373\r## 11686 4438.440 12.26678\r## 11687 4435.913 12.79872\r## 11688 4432.840 13.36372\r## 11689 4429.106 13.96695\r## 11690 4424.575 14.61488\r## 11691 4419.081 15.31563\r## 11692 4412.433 16.07939\r## 11693 4404.402 16.91893\r## 11694 4394.729 17.85025\r## 11695 4383.117 18.89326\r## 11696 4369.247 20.07229\r## 11697 4352.794 21.41611\r## 11698 4333.486 22.95600\r## 11699 4311.225 24.71832\r## 11700 4286.395 26.70122\r## 11701 4260.617 28.80675\r## 11702 4238.470 30.67049\r## 11703 4228.993 31.48652\r## 11704 4238.470 30.67049\r## 11705 4260.617 28.80675\r## 11706 4286.395 26.70122\r## 11707 4311.225 24.71832\r## 11708 4333.486 22.95600\r## 11709 4352.794 21.41611\r## 11710 4369.247 20.07229\r## 11711 4383.117 18.89326\r## 11712 4394.729 17.85025\r## 11713 4404.402 16.91893\r## 11714 4412.433 16.07939\r## 11715 4419.081 15.31563\r## 11716 4424.575 14.61488\r## 11717 4429.106 13.96695\r## 11718 4432.840 13.36372\r## 11719 4435.913 12.79872\r## 11720 4438.440 12.26678\r## 11721 4440.516 11.76373\r## 11836 4440.773 11.69620\r## 11837 4438.770 12.19140\r## 11838 4436.339 12.71395\r## 11839 4433.392 13.26758\r## 11840 4429.823 13.85685\r## 11841 4425.509 14.48738\r## 11842 4420.304 15.16610\r## 11843 4414.040 15.90146\r## 11844 4406.527 16.70375\r## 11845 4397.555 17.58525\r## 11846 4386.902 18.56021\r## 11847 4374.357 19.64428\r## 11848 4359.757 20.85256\r## 11849 4343.069 22.19473\r## 11850 4324.547 23.66363\r## 11851 4305.022 25.21085\r## 11852 4286.395 26.70122\r## 11853 4272.125 27.85929\r## 11854 4266.616 28.31126\r## 11855 4272.125 27.85929\r## 11856 4286.395 26.70122\r## 11857 4305.022 25.21085\r## 11858 4324.547 23.66363\r## 11859 4343.069 22.19473\r## 11860 4359.757 20.85256\r## 11861 4374.357 19.64428\r## 11862 4386.902 18.56021\r## 11863 4397.555 17.58525\r## 11864 4406.527 16.70375\r## 11865 4414.040 15.90146\r## 11866 4420.304 15.16610\r## 11867 4425.509 14.48738\r## 11868 4429.823 13.85685\r## 11869 4433.392 13.26758\r## 11870 4436.339 12.71395\r## 11871 4438.770 12.19140\r## 11872 4440.773 11.69620\r## 11987 4441.117 11.60332\r## 11988 4439.212 12.08794\r## 11989 4436.908 12.59791\r## 11990 4434.125 13.13640\r## 11991 4430.772 13.70721\r## 11992 4426.739 14.31495\r## 11993 4421.905 14.96508\r## 11994 4416.130 15.66409\r## 11995 4409.266 16.41942\r## 11996 4401.158 17.23934\r## 11997 4391.662 18.13231\r## 11998 4380.669 19.10570\r## 11999 4368.155 20.16291\r## 12000 4354.261 21.29788\r## 12001 4339.420 22.48509\r## 12002 4324.547 23.66363\r## 12003 4311.225 24.71832\r## 12004 4301.688 25.47624\r## 12005 4298.178 25.75617\r## 12006 4301.688 25.47624\r## 12007 4311.225 24.71832\r## 12008 4324.547 23.66363\r## 12009 4339.420 22.48509\r## 12010 4354.261 21.29788\r## 12011 4368.155 20.16291\r## 12012 4380.669 19.10570\r## 12013 4391.662 18.13231\r## 12014 4401.158 17.23934\r## 12015 4409.266 16.41942\r## 12016 4416.130 15.66409\r## 12017 4421.905 14.96508\r## 12018 4426.739 14.31495\r## 12019 4430.772 13.70721\r## 12020 4434.125 13.13640\r## 12021 4436.908 12.59791\r## 12022 4439.212 12.08794\r## 12023 4441.117 11.60332\r## 12138 4441.536 11.48661\r## 12139 4439.748 11.95830\r## 12140 4437.595 12.45300\r## 12141 4435.007 12.97325\r## 12142 4431.906 13.52203\r## 12143 4428.201 14.10283\r## 12144 4423.792 14.71965\r## 12145 4418.572 15.37693\r## 12146 4412.433 16.07939\r## 12147 4405.270 16.83157\r## 12148 4397.008 17.63698\r## 12149 4387.619 18.49649\r## 12150 4377.172 19.40556\r## 12151 4365.896 20.34970\r## 12152 4354.261 21.29788\r## 12153 4343.069 22.19473\r## 12154 4333.486 22.95600\r## 12155 4326.906 23.47700\r## 12156 4324.547 23.66363\r## 12157 4326.906 23.47700\r## 12158 4333.486 22.95600\r## 12159 4343.069 22.19473\r## 12160 4354.261 21.29788\r## 12161 4365.896 20.34970\r## 12162 4377.172 19.40556\r## 12163 4387.619 18.49649\r## 12164 4397.008 17.63698\r## 12165 4405.270 16.83157\r## 12166 4412.433 16.07939\r## 12167 4418.572 15.37693\r## 12168 4423.792 14.71965\r## 12169 4428.201 14.10283\r## 12170 4431.906 13.52203\r## 12171 4435.007 12.97325\r## 12172 4437.595 12.45300\r## 12173 4439.748 11.95830\r## 12174 4441.536 11.48661\r## 12289 4442.015 11.34790\r## 12290 4440.358 11.80473\r## 12291 4438.372 12.28201\r## 12292 4435.999 12.78164\r## 12293 4433.174 13.30578\r## 12294 4429.823 13.85685\r## 12295 4425.869 14.43741\r## 12296 4421.234 15.05009\r## 12297 4415.842 15.69721\r## 12298 4409.637 16.38029\r## 12299 4402.589 17.09912\r## 12300 4394.729 17.85025\r## 12301 4386.173 18.62485\r## 12302 4377.172 19.40556\r## 12303 4368.155 20.16291\r## 12304 4359.757 20.85256\r## 12305 4352.794 21.41611\r## 12306 4348.142 21.78958\r## 12307 4346.501 21.92086\r## 12308 4348.142 21.78958\r## 12309 4352.794 21.41611\r## 12310 4359.757 20.85256\r## 12311 4368.155 20.16291\r## 12312 4377.172 19.40556\r## 12313 4386.173 18.62485\r## 12314 4394.729 17.85025\r## 12315 4402.589 17.09912\r## 12316 4409.637 16.38029\r## 12317 4415.842 15.69721\r## 12318 4421.234 15.05009\r## 12319 4425.869 14.43741\r## 12320 4429.823 13.85685\r## 12321 4433.174 13.30578\r## 12322 4435.999 12.78164\r## 12323 4438.372 12.28201\r## 12324 4440.358 11.80473\r## 12325 4442.015 11.34790\r## 12441 4441.020 11.62967\r## 12442 4439.212 12.08794\r## 12443 4437.065 12.56530\r## 12444 4434.525 13.06315\r## 12445 4431.538 13.58290\r## 12446 4428.044 14.12590\r## 12447 4423.991 14.69322\r## 12448 4419.331 15.28531\r## 12449 4414.040 15.90146\r## 12450 4408.124 16.53899\r## 12451 4401.642 17.19209\r## 12452 4394.729 17.85025\r## 12453 4387.619 18.49649\r## 12454 4380.669 19.10570\r## 12455 4374.357 19.64428\r## 12456 4369.247 20.07229\r## 12457 4365.896 20.34970\r## 12458 4364.727 20.44601\r## 12459 4365.896 20.34970\r## 12460 4369.247 20.07229\r## 12461 4374.357 19.64428\r## 12462 4380.669 19.10570\r## 12463 4387.619 18.49649\r## 12464 4394.729 17.85025\r## 12465 4401.642 17.19209\r## 12466 4408.124 16.53899\r## 12467 4414.040 15.90146\r## 12468 4419.331 15.28531\r## 12469 4423.991 14.69322\r## 12470 4428.044 14.12590\r## 12471 4431.538 13.58290\r## 12472 4434.525 13.06315\r## 12473 4437.065 12.56530\r## 12474 4439.212 12.08794\r## 12475 4441.020 11.62967\r## 12592 4441.715 11.43568\r## 12593 4440.087 11.87389\r## 12594 4438.166 12.32800\r## 12595 4435.913 12.79872\r## 12596 4433.283 13.28664\r## 12597 4430.237 13.79209\r## 12598 4426.739 14.31495\r## 12599 4422.766 14.85428\r## 12600 4418.314 15.40791\r## 12601 4413.409 15.97175\r## 12602 4408.124 16.53899\r## 12603 4402.589 17.09912\r## 12604 4397.008 17.63698\r## 12605 4391.662 18.13231\r## 12606 4386.902 18.56021\r## 12607 4383.117 18.89326\r## 12608 4380.669 19.10570\r## 12609 4379.821 19.17882\r## 12610 4380.669 19.10570\r## 12611 4383.117 18.89326\r## 12612 4386.902 18.56021\r## 12613 4391.662 18.13231\r## 12614 4397.008 17.63698\r## 12615 4402.589 17.09912\r## 12616 4408.124 16.53899\r## 12617 4413.409 15.97175\r## 12618 4418.314 15.40791\r## 12619 4422.766 14.85428\r## 12620 4426.739 14.31495\r## 12621 4430.237 13.79209\r## 12622 4433.283 13.28664\r## 12623 4435.913 12.79872\r## 12624 4438.166 12.32800\r## 12625 4440.087 11.87389\r## 12626 4441.715 11.43568\r## 12744 4440.972 11.64290\r## 12745 4439.273 12.07335\r## 12746 4437.295 12.51683\r## 12747 4435.007 12.97325\r## 12748 4432.381 13.44216\r## 12749 4429.397 13.92257\r## 12750 4426.047 14.41264\r## 12751 4422.340 14.90932\r## 12752 4418.314 15.40791\r## 12753 4414.040 15.90146\r## 12754 4409.637 16.38029\r## 12755 4405.270 16.83157\r## 12756 4401.158 17.23934\r## 12757 4397.555 17.58525\r## 12758 4394.729 17.85025\r## 12759 4392.919 18.01731\r## 12760 4392.296 18.07444\r## 12761 4392.919 18.01731\r## 12762 4394.729 17.85025\r## 12763 4397.555 17.58525\r## 12764 4401.158 17.23934\r## 12765 4405.270 16.83157\r## 12766 4409.637 16.38029\r## 12767 4414.040 15.90146\r## 12768 4418.314 15.40791\r## 12769 4422.340 14.90932\r## 12770 4426.047 14.41264\r## 12771 4429.397 13.92257\r## 12772 4432.381 13.44216\r## 12773 4435.007 12.97325\r## 12774 4437.295 12.51683\r## 12775 4439.273 12.07335\r## 12776 4440.972 11.64290\r## 12895 4441.845 11.39786\r## 12896 4440.358 11.80473\r## 12897 4438.639 12.22140\r## 12898 4436.668 12.64728\r## 12899 4434.427 13.08135\r## 12900 4431.906 13.52203\r## 12901 4429.106 13.96695\r## 12902 4426.047 14.41264\r## 12903 4422.766 14.85428\r## 12904 4419.331 15.28531\r## 12905 4415.842 15.69721\r## 12906 4412.433 16.07939\r## 12907 4409.266 16.41942\r## 12908 4406.527 16.70375\r## 12909 4404.402 16.91893\r## 12910 4403.052 17.05336\r## 12911 4402.589 17.09912\r## 12912 4403.052 17.05336\r## 12913 4404.402 16.91893\r## 12914 4406.527 16.70375\r## 12915 4409.266 16.41942\r## 12916 4412.433 16.07939\r## 12917 4415.842 15.69721\r## 12918 4419.331 15.28531\r## 12919 4422.766 14.85428\r## 12920 4426.047 14.41264\r## 12921 4429.106 13.96695\r## 12922 4431.906 13.52203\r## 12923 4434.427 13.08135\r## 12924 4436.668 12.64728\r## 12925 4438.639 12.22140\r## 12926 4440.358 11.80473\r## 12927 4441.845 11.39786\r## 13047 4441.400 11.52519\r## 13048 4439.919 11.91590\r## 13049 4438.236 12.31262\r## 13050 4436.339 12.71395\r## 13051 4434.226 13.11797\r## 13052 4431.906 13.52203\r## 13053 4429.397 13.92257\r## 13054 4426.739 14.31495\r## 13055 4423.991 14.69322\r## 13056 4421.234 15.05009\r## 13057 4418.572 15.37693\r## 13058 4416.130 15.66409\r## 13059 4414.040 15.90146\r## 13060 4412.433 16.07939\r## 13061 4411.418 16.18978\r## 13062 4411.071 16.22722\r## 13063 4411.418 16.18978\r## 13064 4412.433 16.07939\r## 13065 4414.040 15.90146\r## 13066 4416.130 15.66409\r## 13067 4418.572 15.37693\r## 13068 4421.234 15.05009\r## 13069 4423.991 14.69322\r## 13070 4426.739 14.31495\r## 13071 4429.397 13.92257\r## 13072 4431.906 13.52203\r## 13073 4434.226 13.11797\r## 13074 4436.339 12.71395\r## 13075 4438.236 12.31262\r## 13076 4439.919 11.91590\r## 13077 4441.400 11.52519\r## 13199 4441.117 11.60332\r## 13200 4439.690 11.97252\r## 13201 4438.097 12.34344\r## 13202 4436.339 12.71395\r## 13203 4434.427 13.08135\r## 13204 4432.381 13.44216\r## 13205 4430.237 13.79209\r## 13206 4428.044 14.12590\r## 13207 4425.869 14.43741\r## 13208 4423.792 14.71965\r## 13209 4421.905 14.96508\r## 13210 4420.304 15.16610\r## 13211 4419.081 15.31563\r## 13212 4418.314 15.40791\r## 13213 4418.052 15.43911\r## 13214 4418.314 15.40791\r## 13215 4419.081 15.31563\r## 13216 4420.304 15.16610\r## 13217 4421.905 14.96508\r## 13218 4423.792 14.71965\r## 13219 4425.869 14.43741\r## 13220 4428.044 14.12590\r## 13221 4430.237 13.79209\r## 13222 4432.381 13.44216\r## 13223 4434.427 13.08135\r## 13224 4436.339 12.71395\r## 13225 4438.097 12.34344\r## 13226 4439.690 11.97252\r## 13227 4441.117 11.60332\r## 13351 4441.020 11.62967\r## 13352 4439.690 11.97252\r## 13353 4438.236 12.31262\r## 13354 4436.668 12.64728\r## 13355 4435.007 12.97325\r## 13356 4433.283 13.28664\r## 13357 4431.538 13.58290\r## 13358 4429.823 13.85685\r## 13359 4428.201 14.10283\r## 13360 4426.739 14.31495\r## 13361 4425.509 14.48738\r## 13362 4424.575 14.61488\r## 13363 4423.991 14.69322\r## 13364 4423.792 14.71965\r## 13365 4423.991 14.69322\r## 13366 4424.575 14.61488\r## 13367 4425.509 14.48738\r## 13368 4426.739 14.31495\r## 13369 4428.201 14.10283\r## 13370 4429.823 13.85685\r## 13371 4431.538 13.58290\r## 13372 4433.283 13.28664\r## 13373 4435.007 12.97325\r## 13374 4436.668 12.64728\r## 13375 4438.236 12.31262\r## 13376 4439.690 11.97252\r## 13377 4441.020 11.62967\r## 13503 4441.117 11.60332\r## 13504 4439.919 11.91590\r## 13505 4438.639 12.22140\r## 13506 4437.295 12.51683\r## 13507 4435.913 12.79872\r## 13508 4434.525 13.06315\r## 13509 4433.174 13.30578\r## 13510 4431.906 13.52203\r## 13511 4430.772 13.70721\r## 13512 4429.823 13.85685\r## 13513 4429.106 13.96695\r## 13514 4428.660 14.03436\r## 13515 4428.508 14.05707\r## 13516 4428.660 14.03436\r## 13517 4429.106 13.96695\r## 13518 4429.823 13.85685\r## 13519 4430.772 13.70721\r## 13520 4431.906 13.52203\r## 13521 4433.174 13.30578\r## 13522 4434.525 13.06315\r## 13523 4435.913 12.79872\r## 13524 4437.295 12.51683\r## 13525 4438.639 12.22140\r## 13526 4439.919 11.91590\r## 13527 4441.117 11.60332\r## 13655 4441.400 11.52519\r## 13656 4440.358 11.80473\r## 13657 4439.273 12.07335\r## 13658 4438.166 12.32800\r## 13659 4437.065 12.56530\r## 13660 4435.999 12.78164\r## 13661 4435.007 12.97325\r## 13662 4434.125 13.13640\r## 13663 4433.392 13.26758\r## 13664 4432.840 13.36372\r## 13665 4432.497 13.42242\r## 13666 4432.381 13.44216\r## 13667 4432.497 13.42242\r## 13668 4432.840 13.36372\r## 13669 4433.392 13.26758\r## 13670 4434.125 13.13640\r## 13671 4435.007 12.97325\r## 13672 4435.999 12.78164\r## 13673 4437.065 12.56530\r## 13674 4438.166 12.32800\r## 13675 4439.273 12.07335\r## 13676 4440.358 11.80473\r## 13677 4441.400 11.52519\r## 13807 4441.845 11.39786\r## 13808 4440.972 11.64290\r## 13809 4440.087 11.87389\r## 13810 4439.212 12.08794\r## 13811 4438.372 12.28201\r## 13812 4437.595 12.45300\r## 13813 4436.908 12.59791\r## 13814 4436.339 12.71395\r## 13815 4435.913 12.79872\r## 13816 4435.649 12.85037\r## 13817 4435.559 12.86772\r## 13818 4435.649 12.85037\r## 13819 4435.913 12.79872\r## 13820 4436.339 12.71395\r## 13821 4436.908 12.59791\r## 13822 4437.595 12.45300\r## 13823 4438.372 12.28201\r## 13824 4439.212 12.08794\r## 13825 4440.087 11.87389\r## 13826 4440.972 11.64290\r## 13827 4441.845 11.39786\r## 13960 4441.715 11.43568\r## 13961 4441.020 11.62967\r## 13962 4440.358 11.80473\r## 13963 4439.748 11.95830\r## 13964 4439.212 12.08794\r## 13965 4438.770 12.19140\r## 13966 4438.440 12.26678\r## 13967 4438.236 12.31262\r## 13968 4438.166 12.32800\r## 13969 4438.236 12.31262\r## 13970 4438.440 12.26678\r## 13971 4438.770 12.19140\r## 13972 4439.212 12.08794\r## 13973 4439.748 11.95830\r## 13974 4440.358 11.80473\r## 13975 4441.020 11.62967\r## 13976 4441.715 11.43568\r## 14113 4442.015 11.34790\r## 14114 4441.536 11.48661\r## 14115 4441.117 11.60332\r## 14116 4440.773 11.69620\r## 14117 4440.516 11.76373\r## 14118 4440.358 11.80473\r## 14119 4440.305 11.81847\r## 14120 4440.358 11.80473\r## 14121 4440.516 11.76373\r## 14122 4440.773 11.69620\r## 14123 4441.117 11.60332\r## 14124 4441.536 11.48661\r## 14125 4442.015 11.34790\r## 14269 4442.099 11.32312\r## 14270 4442.057 11.33550\r## 14271 4442.099 11.32312\rnrow(dfsc1$n)\r## NULL\rsum(dfsc1$n)\r## [1] 17997.98\rNN\r## [1] 99500.53 84673.14 71395.90 60045.24 50182.63 41877.02 34273.63 27997.58\r## [9] 22468.26 17997.98\r#Reseting Parameters for All Cities\rV \u0026lt;- 4000\r#housing price per sqft vector\rp \u0026lt;- c(0:150)\r#housing consumption (sqft) by mile vector\rq \u0026lt;- c(0:150)\r#general good\rg \u0026lt;- c(0:150)\r#land rent/acre\rr \u0026lt;- c(0:150)\r#Housing floor space / acre\rs \u0026lt;- c(0:150)\r#City 1\r#new t,y,and ad multiplication factors\rt \u0026lt;- 1000*tm1\ry \u0026lt;- 40000*im1\rad \u0026lt;- 0.16*am1\r#finding x for various u,v\rx \u0026lt;- sqrt(u^2+v^2)\r#finding distance to rail\rz \u0026lt;- sqrt((x-d)^2)\r#amentiy distribution\ram \u0026lt;- 1 + ad*(exp(-ng*z))\r#finding the price for various u,v\rp \u0026lt;- (al^al*(1-al)^(1-al)*am^gm*(y-t*x)/V)^(1/al)\r#optimal q\rq \u0026lt;- al*(y-t*x)/p\r#optimal g\rg \u0026lt;- (1-al)*(y-t*x)\r#theta some funciton of beta\rph \u0026lt;- ((bt-1)^((bt-1)/bt))/bt\r#optimal r\rr \u0026lt;- (ph*p)^(bt/(bt-1))\rr1 \u0026lt;- ((ph*al)^al * (1-al)^(1-al) * (y-t*x)/V)^(bt/(al*(bt-1)))\r#optimal s\rs \u0026lt;- (p/bt)^(1/(bt-1))\rs1 \u0026lt;- (bt-1)^(-1/bt) * (r)^(1/bt)\r#Utility Value\rU \u0026lt;- q^al*g^(1-al)\r#population n s(floorspaceperacre/ floorspace per household * (size of square (sqmi)) * acres/sqmi * fraction of housing in area)\rn \u0026lt;- s/q * (.2*.2) * 640 * .25 nn \u0026lt;- s/q\rdfscm \u0026lt;- data.frame(u,v,t,x,p,g,q,s,r,U,n,nn)\r#delete values where ag rent exceeds land rent\rdfscm1 \u0026lt;- dfscm[(dfscm$r \u0026gt; ag),]\rhead(dfscm1)\r## u v t x p g q s r\r## 5812 -7.4 -0.4 1000 7.410803 16.59623 16294.60 981.8255 1928.466 8001.313\r## 5813 -7.4 -0.2 1000 7.402702 16.60449 16298.65 981.5807 1931.348 8017.263\r## 5814 -7.4 0.0 1000 7.400000 16.60725 16300.00 981.4991 1932.310 8022.590\r## 5815 -7.4 0.2 1000 7.402702 16.60449 16298.65 981.5807 1931.348 8017.263\r## 5816 -7.4 0.4 1000 7.410803 16.59623 16294.60 981.8255 1928.466 8001.313\r## 5957 -7.2 -1.6 1000 7.375636 16.63212 16312.18 980.7637 1941.006 8070.760\r## U n nn\r## 5812 3999.807 12.57064 1.964163\r## 5813 3999.805 12.59257 1.967590\r## 5814 3999.804 12.59990 1.968734\r## 5815 3999.805 12.59257 1.967590\r## 5816 3999.807 12.57064 1.964163\r## 5957 3999.800 12.66608 1.979076\r#Total Land Area of the City\rprint(\u0026#39;Land Area\u0026#39;)\r## [1] \u0026quot;Land Area\u0026quot;\rnrow(dfscm1)*(.2*.2)\r## [1] 172.68\rmax(dfscm1$u)\r## [1] 7.4\rmax(dfscm1$v)\r## [1] 7.4\r#Total Population\rprint(\u0026#39;Population\u0026#39;)\r## [1] \u0026quot;Population\u0026quot;\rround(sum(dfscm1$n),0)\r## [1] 99501\rp1\u0026lt;-ggplot(dfscm1, aes(x = u, y = v, color = n)) +\rgeom_point(size = 2, shape = 7) +\rscale_color_viridis(limits = c(5,150), direction = -1) +\rlims(x=c(-15,15),y=c(-15,15)) +\rcoord_fixed() + theme_minimal()+\rgeom_vline(xintercept = 0) + geom_hline(yintercept = 0) +\rlabs(title = \u0026#39;City 1\u0026#39;)\r#City 2\r#new t,y,and ad multiplication factors\rt \u0026lt;- 1000*tm2\ry \u0026lt;- 40000*im2\rad \u0026lt;- 0.16*am2\r#finding x for various u,v\rx \u0026lt;- sqrt(u^2+v^2)\r#finding distance to rail\rz \u0026lt;- sqrt((x-d)^2)\r#amentiy distribution\ram \u0026lt;- 1 + ad*(exp(-ng*z))\r#finding the price for various u,v\rp \u0026lt;- (al^al*(1-al)^(1-al)*am^gm*(y-t*x)/V)^(1/al)\r#optimal q\rq \u0026lt;- al*(y-t*x)/p\r#optimal g\rg \u0026lt;- (1-al)*(y-t*x)\r#theta some funciton of beta\rph \u0026lt;- ((bt-1)^((bt-1)/bt))/bt\r#optimal r\rr \u0026lt;- (ph*p)^(bt/(bt-1))\rr1 \u0026lt;- ((ph*al)^al * (1-al)^(1-al) * (y-t*x)/V)^(bt/(al*(bt-1)))\r#optimal s\rs \u0026lt;- (p/bt)^(1/(bt-1))\rs1 \u0026lt;- (bt-1)^(-1/bt) * (r)^(1/bt)\r#Utility Value\rU \u0026lt;- q^al*g^(1-al)\r#population n s(floorspaceperacre/ floorspace per household * (size of square (sqmi)) * acres/sqmi * fraction of housing in area)\rn \u0026lt;- s/q * (.2*.2) * 640 * .25 nn \u0026lt;- s/q\rdfscm \u0026lt;- data.frame(u,v,t,x,p,g,q,s,r,U,n,nn)\r#delete values where ag rent exceeds land rent\rdfscm2 \u0026lt;- dfscm[(dfscm$r \u0026gt; ag),]\rhead(dfscm2)\r## u v t x p g q s r\r## 5812 -7.4 -0.4 1000 7.410803 16.59623 16294.60 981.8255 1928.466 8001.313\r## 5813 -7.4 -0.2 1000 7.402702 16.60449 16298.65 981.5807 1931.348 8017.263\r## 5814 -7.4 0.0 1000 7.400000 16.60725 16300.00 981.4991 1932.310 8022.590\r## 5815 -7.4 0.2 1000 7.402702 16.60449 16298.65 981.5807 1931.348 8017.263\r## 5816 -7.4 0.4 1000 7.410803 16.59623 16294.60 981.8255 1928.466 8001.313\r## 5957 -7.2 -1.6 1000 7.375636 16.63212 16312.18 980.7637 1941.006 8070.760\r## U n nn\r## 5812 3999.807 12.57064 1.964163\r## 5813 3999.805 12.59257 1.967590\r## 5814 3999.804 12.59990 1.968734\r## 5815 3999.805 12.59257 1.967590\r## 5816 3999.807 12.57064 1.964163\r## 5957 3999.800 12.66608 1.979076\r#Total Land Area of the City\rprint(\u0026#39;Land Area\u0026#39;)\r## [1] \u0026quot;Land Area\u0026quot;\rnrow(dfscm2)*(.2*.2)\r## [1] 172.68\rmax(dfscm2$u)\r## [1] 7.4\rmax(dfscm2$v)\r## [1] 7.4\r#Total Population\rprint(\u0026#39;Population\u0026#39;)\r## [1] \u0026quot;Population\u0026quot;\rround(sum(dfscm2$n),0)\r## [1] 99501\rp2\u0026lt;-ggplot(dfscm2, aes(x = u, y = v, color = n)) +\rgeom_point(size = 2, shape = 7) +\rscale_color_viridis(limits = c(5,150), direction = -1) +\rlims(x=c(-15,15),y=c(-15,15)) +\rcoord_fixed() + theme_minimal()+\rgeom_vline(xintercept = 0) + geom_hline(yintercept = 0) +\rlabs(title = \u0026#39;City 2\u0026#39;)\r#City 3\r#new t,y,and ad multiplication factors\rt \u0026lt;- 1000*tm3\ry \u0026lt;- 40000*im3\rad \u0026lt;- 0.16*am3\r#finding x for various u,v\rx \u0026lt;- sqrt(u^2+v^2)\r#finding distance to rail\rz \u0026lt;- sqrt((x-d)^2)\r#amentiy distribution\ram \u0026lt;- 1 + ad*(exp(-ng*z))\r#finding the price for various u,v\rp \u0026lt;- (al^al*(1-al)^(1-al)*am^gm*(y-t*x)/V)^(1/al)\r#optimal q\rq \u0026lt;- al*(y-t*x)/p\r#optimal g\rg \u0026lt;- (1-al)*(y-t*x)\r#theta some funciton of beta\rph \u0026lt;- ((bt-1)^((bt-1)/bt))/bt\r#optimal r\rr \u0026lt;- (ph*p)^(bt/(bt-1))\rr1 \u0026lt;- ((ph*al)^al * (1-al)^(1-al) * (y-t*x)/V)^(bt/(al*(bt-1)))\r#optimal s\rs \u0026lt;- (p/bt)^(1/(bt-1))\rs1 \u0026lt;- (bt-1)^(-1/bt) * (r)^(1/bt)\r#Utility Value\rU \u0026lt;- q^al*g^(1-al)\r#population n s(floorspaceperacre/ floorspace per household * (size of square (sqmi)) * acres/sqmi * fraction of housing in area)\rn \u0026lt;- s/q * (.2*.2) * 640 * .25 nn \u0026lt;- s/q\rdfscm \u0026lt;- data.frame(u,v,t,x,p,g,q,s,r,U,n,nn)\r#delete values where ag rent exceeds land rent\rdfscm3 \u0026lt;- dfscm[(dfscm$r \u0026gt; ag),]\rhead(dfscm3)\r## u v t x p g q s r\r## 5812 -7.4 -0.4 1000 7.410803 16.59623 16294.60 981.8255 1928.466 8001.313\r## 5813 -7.4 -0.2 1000 7.402702 16.60449 16298.65 981.5807 1931.348 8017.263\r## 5814 -7.4 0.0 1000 7.400000 16.60725 16300.00 981.4991 1932.310 8022.590\r## 5815 -7.4 0.2 1000 7.402702 16.60449 16298.65 981.5807 1931.348 8017.263\r## 5816 -7.4 0.4 1000 7.410803 16.59623 16294.60 981.8255 1928.466 8001.313\r## 5957 -7.2 -1.6 1000 7.375636 16.63212 16312.18 980.7637 1941.006 8070.760\r## U n nn\r## 5812 3999.807 12.57064 1.964163\r## 5813 3999.805 12.59257 1.967590\r## 5814 3999.804 12.59990 1.968734\r## 5815 3999.805 12.59257 1.967590\r## 5816 3999.807 12.57064 1.964163\r## 5957 3999.800 12.66608 1.979076\r#Total Land Area of the City\rprint(\u0026#39;Land Area\u0026#39;)\r## [1] \u0026quot;Land Area\u0026quot;\rnrow(dfscm3)*(.2*.2)\r## [1] 172.68\rmax(dfscm3$u)\r## [1] 7.4\rmax(dfscm3$v)\r## [1] 7.4\r#Total Population\rprint(\u0026#39;Population\u0026#39;)\r## [1] \u0026quot;Population\u0026quot;\rround(sum(dfscm3$n),0)\r## [1] 99501\rp3 \u0026lt;- ggplot(dfscm3, aes(x = u, y = v, color = n)) +\rgeom_point(size = 2, shape = 7) +\rscale_color_viridis(limits = c(5,150), direction = -1) +\rlims(x=c(-15,15),y=c(-15,15)) +\rcoord_fixed() + theme_minimal()+\rgeom_vline(xintercept = 0) + geom_hline(yintercept = 0) +\rlabs(title = \u0026#39;City 3\u0026#39;)\r#City 4\r#new t,y,and ad multiplication factors\rt \u0026lt;- 1000*tm4\ry \u0026lt;- 40000*im4\rad \u0026lt;- 0.16*am4\r#finding x for various u,v\rx \u0026lt;- sqrt(u^2+v^2)\r#finding distance to rail\rz \u0026lt;- sqrt((x-d)^2)\r#amentiy distribution\ram \u0026lt;- 1 + ad*(exp(-ng*z))\r#finding the price for various u,v\rp \u0026lt;- (al^al*(1-al)^(1-al)*am^gm*(y-t*x)/V)^(1/al)\r#optimal q\rq \u0026lt;- al*(y-t*x)/p\r#optimal g\rg \u0026lt;- (1-al)*(y-t*x)\r#theta some funciton of beta\rph \u0026lt;- ((bt-1)^((bt-1)/bt))/bt\r#optimal r\rr \u0026lt;- (ph*p)^(bt/(bt-1))\rr1 \u0026lt;- ((ph*al)^al * (1-al)^(1-al) * (y-t*x)/V)^(bt/(al*(bt-1)))\r#optimal s\rs \u0026lt;- (p/bt)^(1/(bt-1))\rs1 \u0026lt;- (bt-1)^(-1/bt) * (r)^(1/bt)\r#Utility Value\rU \u0026lt;- q^al*g^(1-al)\r#population n s(floorspaceperacre/ floorspace per household * (size of square (sqmi)) * acres/sqmi * fraction of housing in area)\rn \u0026lt;- s/q * (.2*.2) * 640 * .25 nn \u0026lt;- s/q\rdfscm \u0026lt;- data.frame(u,v,t,x,p,g,q,s,r,U,n,nn)\r#delete values where ag rent exceeds land rent\rdfscm4 \u0026lt;- dfscm[(dfscm$r \u0026gt; ag),]\rhead(dfscm4)\r## u v t x p g q s r\r## 5812 -7.4 -0.4 1000 7.410803 16.59623 16294.60 981.8255 1928.466 8001.313\r## 5813 -7.4 -0.2 1000 7.402702 16.60449 16298.65 981.5807 1931.348 8017.263\r## 5814 -7.4 0.0 1000 7.400000 16.60725 16300.00 981.4991 1932.310 8022.590\r## 5815 -7.4 0.2 1000 7.402702 16.60449 16298.65 981.5807 1931.348 8017.263\r## 5816 -7.4 0.4 1000 7.410803 16.59623 16294.60 981.8255 1928.466 8001.313\r## 5957 -7.2 -1.6 1000 7.375636 16.63212 16312.18 980.7637 1941.006 8070.760\r## U n nn\r## 5812 3999.807 12.57064 1.964163\r## 5813 3999.805 12.59257 1.967590\r## 5814 3999.804 12.59990 1.968734\r## 5815 3999.805 12.59257 1.967590\r## 5816 3999.807 12.57064 1.964163\r## 5957 3999.800 12.66608 1.979076\r#Total Land Area of the City\rprint(\u0026#39;Land Area\u0026#39;)\r## [1] \u0026quot;Land Area\u0026quot;\rnrow(dfscm4)*(.2*.2)\r## [1] 172.68\rmax(dfscm4$u)\r## [1] 7.4\rmax(dfscm4$v)\r## [1] 7.4\r#Total Population\rprint(\u0026#39;Population\u0026#39;)\r## [1] \u0026quot;Population\u0026quot;\rround(sum(dfscm4$n),0)\r## [1] 99501\rp4 \u0026lt;- ggplot(dfscm4, aes(x = u, y = v, color = n)) +\rgeom_point(size = 2, shape = 7) +\rscale_color_viridis(limits = c(5,150), direction = -1) +\rlims(x=c(-15,15),y=c(-15,15)) +\rcoord_fixed() + theme_minimal()+\rgeom_vline(xintercept = 0) + geom_hline(yintercept = 0) +\rlabs(title = \u0026#39;City 4\u0026#39;)\r# Displaying all graphs and Saving All Graphs\r#Population Density Across Urban Areas\rpop_den \u0026lt;- grid.arrange(p1,p2,p3,p4, ncol=2, nrow = 2)\r#Land and Population Table\rlnda \u0026lt;- c(nrow(dfscm1)*(0.2*0.2),nrow(dfscm2)*(0.2*0.2),nrow(dfscm3)*(0.2*0.2),nrow(dfscm4)*(0.2*0.2))\rpopg \u0026lt;- c(sum(dfscm1$n),sum(dfscm2$n),sum(dfscm3$n),sum(dfscm4$n))\rlap \u0026lt;- data.frame(Land_Area = lnda, Population = round(popg), Population_Density = round(popg/lnda))\rrownames(lap) \u0026lt;- c(\u0026#39;City 1\u0026#39;, \u0026#39;City 2\u0026#39;, \u0026#39;City 3\u0026#39;, \u0026#39;City 4\u0026#39;)\rlap\r## Land_Area Population Population_Density\r## City 1 172.68 99501 576\r## City 2 172.68 99501 576\r## City 3 172.68 99501 576\r## City 4 172.68 99501 576\r# Multiplier Table\rmtable \u0026lt;- data.frame(Income_Multiplier = c(im1, im2, im3, im4), Traffic_Multiplier = c(tm1, tm2, tm3, tm4), Amenity_Multiplier = c(am1, am2, am3, am4) )\rrownames(mtable) \u0026lt;- c(\u0026#39;City 1\u0026#39;, \u0026#39;City 2\u0026#39;, \u0026#39;City 3\u0026#39;, \u0026#39;City 4\u0026#39;)\rmtable\r## Income_Multiplier Traffic_Multiplier Amenity_Multiplier\r## City 1 1 1 1\r## City 2 1 1 1\r## City 3 1 1 1\r## City 4 1 1 1\r#Saving files as Pdfs\r# pdf(\u0026quot;land_pop.pdf\u0026quot;, height =2, width = 8.5)\r# grid.table(lap)\r# dev.off()\r# ggsave(filename = \u0026quot;pop_den.pdf\u0026quot;, pop_den)\rAdd a new chunk by clicking the Insert Chunk button on the toolbar or by pressing Ctrl+Alt+I.\nWhen you save the notebook, an HTML file containing the code and output will be saved alongside it (click the Preview button or press Ctrl+Shift+K to preview the HTML file).\nThe preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike Knit, Preview does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.\n","date":1556841600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556841600,"objectID":"098b7c2d0575b1fc8515b3f4b1c3bb8f","permalink":"/post/orie/sci_res_city2/","publishdate":"2019-05-03T00:00:00Z","relpermalink":"/post/orie/sci_res_city2/","section":"post","summary":"I extended the work of (Wu and Plantinga 2003) using R and certain equation modififications to investigate how the addition of a light rail line would influence a city.","tags":["Systems Modeling","Simulation","cities"],"title":"Sim CCS City","type":"post"},{"authors":null,"categories":["Systems Modeling"],"content":"\r\rI extended the work of (Wu and Plantinga 2003) using R and certain equation modififications to investigate how the addition of a light rail line would influence a city.\nCities have housed most of the human race since 2004 and as a result influence most of the individual, commercial, and industrial energy and GHG patterns. However, city designs, have placed amenities in isolated suburban pockets, the abundance of roads have encouraged sprawl, and zoning laws have discouraged density. Therefore, for this study I will investigate how these choices can positively or negatively influence a city’s environmental footprint.\nI extended the work of (Wu and Plantinga 2003) using R and certain equation modififications to investigate how the addition of a light rail line would influence a city. First, I tried to replicate their city without any parks using their parameters. Second, I made some modifications to get the city to a scale that I could represent graphically. Third, I modeled the light rail as an amenity to see the influence it has on the city. Finally, I modeled the light rail so that it reduced travel costs for the citizens close to it instead of providing an amenity value.\rThe parameters I used where nearly identical to the (Wu and Plantinga 2003) parameters; however I did have to make some minor modifications. The given utility produced a much larger area then was graphically tractable, so I increased it to 6,000 for all the models excluding the original monocentric model which uses the original utility value. The transport cost for the rail is set to half of the normal transport costs (t¬¬rail=$500). The original parameters are shown in Table 1.\nWu, Jun Jie, and Andrew J. Plantinga. 2003. “The Influence of Public Open Space on Urban Spatial Structure.” Journal of Environmental Economics and Management 46 (2): 288–309. https://doi.org/10.1016/S0095-0696(03)00023-8.\nThis is an R Markdown Notebook. When you execute code within the notebook, the results appear beneath the code.\nTry executing this chunk by clicking the Run button within the chunk or by placing your cursor inside it and pressing Ctrl+Shift+Enter.\nlibrary(\u0026quot;nleqslv\u0026quot;)\r#library(circlize)\r#budget y \u0026lt;- 40000\r#distance from center (miles) vector\rx \u0026lt;- c(0:25)\r#transportation cost 50 cents a mile by 320 days\rt \u0026lt;- 1000\r#housing price per sqft vector\rp \u0026lt;- c(0:25)\r#housing consumption (sqft) by mile vector\rq \u0026lt;- c(0:25)\r#general good\rg \u0026lt;- c(0:25)\r#utility level\rV \u0026lt;- 2702\r#alpha for Cobb Douglas\ral \u0026lt;- .5\r#beta for development cobb-douglas\rbt \u0026lt;- 4/3\r#capital c0 \u0026lt;- 0\r#land acres\rl \u0026lt;- .5\r#interest\ri \u0026lt;- .03\r#land rent/acre\rr \u0026lt;- c(0:25)\r#Housing floor space / acre\rs \u0026lt;- c(0:25)\r#ag rent\rag \u0026lt;- 1000\rThe equations are also nearly identical to the (Wu and Plantinga 2003) equations. I used the equations and the given parameters to calculate the optimal values at each point (u,v) for housing price (p), housing consumption (q), good consumption (g), land rent (r), housing floor space per area (s), and amenity. These optimal equations naturally satisfy the equilibrium conditions : no house moves because house prices are bid up to their maximum, no business profits because land rents are bid up to the max, the price that households are willing to pay is equal to the price businesses are willing to accept, and the floor space equals the total supply. The final equilibrium conditions that the land rent is equal to the agriculture rent at the city boundary is solved for numerically in the model.\n#monocentric original model parameters\ru \u0026lt;- c(1:50)\rv \u0026lt;- c(1:50)\r#new u,v\ri \u0026lt;- 0\rj \u0026lt;- 0\rii \u0026lt;- 1\rwhile(i \u0026lt; 51){\rj \u0026lt;- 0\rwhile(j \u0026lt; 51){\ru[ii] \u0026lt;- i - 25\rv[ii] \u0026lt;- j - 25\rj \u0026lt;- j+1\rii \u0026lt;- ii+1\r}\ri \u0026lt;- i +1\r}\r#finding x for various u,v\rx \u0026lt;- sqrt(u^2+v^2)\r#finding the price for various x\rp \u0026lt;- (al^al*(1-al)^(1-al)*(y-t*x)/V)^(1/al)\r#optimal q\rq \u0026lt;- al*(y-t*x)/p\r#optimal g\rg \u0026lt;- (1-al)*(y-t*x)\r#theta some funciton of beta\rph \u0026lt;- ((bt-1)^((bt-1)/bt))/bt\r#optimal r\rr \u0026lt;- (ph*p)^(bt/(bt-1))\rr1 \u0026lt;- ((ph*al)^al * (1-al)^(1-al) * (y-t*x)/V)^(bt/(al*(bt-1)))\r#optimal s\rs \u0026lt;- (p/bt)^(1/(bt-1))\rs1 \u0026lt;- (bt-1)^(-1/bt) * (r)^(1/bt)\r#Utility Value\rU \u0026lt;- q^al*g^(1-al)\r#population n s(floorspaceperacre/ floorspace per household * (size of square (sqmi)) * acres/sqmi * fraction of housing in area)\rn \u0026lt;- s/q * 1 * 640 * .25 dfsc \u0026lt;- data.frame(u,v,x,p,g,q,s,r,U,n)\r#delete values where ag rent exceeds land rent\rdfsc1 \u0026lt;- dfsc[(dfsc$r \u0026gt; ag),]\rdfsc1\r## u v x p g q s r U\r## 127 -23 -1 23.021729 9.870889 8489.136 860.0174 405.7444 1001.264 2702\r## 128 -23 0 23.000000 9.896170 8500.000 858.9181 408.8700 1011.562 2702\r## 129 -23 1 23.021729 9.870889 8489.136 860.0174 405.7444 1001.264 2702\r## 173 -22 -6 22.803509 10.126259 8598.246 849.1039 438.0572 1108.970 2702\r## 174 -22 -5 22.561028 10.413844 8719.486 837.2975 476.4496 1240.418 2702\r## 175 -22 -4 22.360680 10.654498 8819.660 827.7875 510.2498 1359.114 2702\r## 176 -22 -3 22.203603 10.845098 8898.198 820.4811 538.1263 1459.008 2702\r## 177 -22 -2 22.090722 10.983114 8954.639 815.3097 558.9336 1534.708 2702\r## 178 -22 -1 22.022716 11.066684 8988.642 812.2255 571.7897 1581.954 2702\r## 179 -22 0 22.000000 11.094668 9000.000 811.2004 576.1383 1598.016 2702\r## 180 -22 1 22.022716 11.066684 8988.642 812.2255 571.7897 1581.954 2702\r## 181 -22 2 22.090722 10.983114 8954.639 815.3097 558.9336 1534.708 2702\r## 182 -22 3 22.203603 10.845098 8898.198 820.4811 538.1263 1459.008 2702\r## 183 -22 4 22.360680 10.654498 8819.660 827.7875 510.2498 1359.114 2702\r## 184 -22 5 22.561028 10.413844 8719.486 837.2975 476.4496 1240.418 2702\r## 185 -22 6 22.803509 10.126259 8598.246 849.1039 438.0572 1108.970 2702\r## 221 -21 -9 22.847319 10.074728 8576.340 851.2727 431.4036 1086.568 2702\r## 222 -21 -8 22.472205 10.520197 8763.897 833.0545 491.1967 1291.872 2702\r## 223 -21 -7 22.135944 10.927718 8932.028 817.3736 550.5189 1503.979 2702\r## 224 -21 -6 21.840330 11.292374 9079.835 804.0679 607.4905 1715.002 2702\r## 225 -21 -5 21.587033 11.609589 9206.483 793.0068 660.1375 1915.981 2702\r## 226 -21 -4 21.377558 11.875245 9311.221 784.0867 706.4989 2097.462 2702\r## 227 -21 -3 21.213203 12.085783 9393.398 777.2271 744.7459 2250.209 2702\r## 228 -21 -2 21.095023 12.238315 9452.488 772.3685 773.3011 2365.976 2702\r## 229 -21 -1 21.023796 12.330708 9488.102 769.4694 790.9477 2438.236 2702\r## 230 -21 0 21.000000 12.361652 9500.000 768.5057 796.9175 2462.804 2702\r## 231 -21 1 21.023796 12.330708 9488.102 769.4694 790.9477 2438.236 2702\r## 232 -21 2 21.095023 12.238315 9452.488 772.3685 773.3011 2365.976 2702\r## 233 -21 3 21.213203 12.085783 9393.398 777.2271 744.7459 2250.209 2702\r## 234 -21 4 21.377558 11.875245 9311.221 784.0867 706.4989 2097.462 2702\r## 235 -21 5 21.587033 11.609589 9206.483 793.0068 660.1375 1915.981 2702\r## 236 -21 6 21.840330 11.292374 9079.835 804.0679 607.4905 1715.002 2702\r## 237 -21 7 22.135944 10.927718 8932.028 817.3736 550.5189 1503.979 2702\r## 238 -21 8 22.472205 10.520197 8763.897 833.0545 491.1967 1291.872 2702\r## 239 -21 9 22.847319 10.074728 8576.340 851.2727 431.4036 1086.568 2702\r## 270 -20 -11 22.825424 10.100464 8587.288 850.1874 434.7182 1097.714 2702\r## 271 -20 -10 22.360680 10.654498 8819.660 827.7875 510.2498 1359.114 2702\r## 272 -20 -9 21.931712 11.179009 9034.144 808.1346 589.3778 1647.165 2702\r## 273 -20 -8 21.540659 11.668142 9229.670 791.0146 670.1760 1954.927 2702\r## 274 -20 -7 21.189620 12.116145 9405.190 776.2527 750.3729 2272.907 2702\r## 275 -20 -6 20.880613 12.517490 9559.693 763.7069 827.4381 2589.362 2702\r## 276 -20 -5 20.615528 12.866999 9692.236 753.2631 898.7017 2890.899 2702\r## 277 -20 -4 20.396078 13.159981 9801.961 744.8310 961.5005 3163.332 2702\r## 278 -20 -3 20.223748 13.392365 9888.126 738.3405 1013.3410 3392.758 2702\r## 279 -20 -2 20.099751 13.560832 9950.124 733.7400 1052.0655 3566.721 2702\r## 280 -20 -1 20.024984 13.662922 9987.508 730.9936 1076.0056 3675.345 2702\r## 281 -20 0 20.000000 13.697122 10000.000 730.0804 1084.1059 3712.283 2702\r## 282 -20 1 20.024984 13.662922 9987.508 730.9936 1076.0056 3675.345 2702\r## 283 -20 2 20.099751 13.560832 9950.124 733.7400 1052.0655 3566.721 2702\r## 284 -20 3 20.223748 13.392365 9888.126 738.3405 1013.3410 3392.758 2702\r## 285 -20 4 20.396078 13.159981 9801.961 744.8310 961.5005 3163.332 2702\r## 286 -20 5 20.615528 12.866999 9692.236 753.2631 898.7017 2890.899 2702\r## 287 -20 6 20.880613 12.517490 9559.693 763.7069 827.4381 2589.362 2702\r## 288 -20 7 21.189620 12.116145 9405.190 776.2527 750.3729 2272.907 2702\r## 289 -20 8 21.540659 11.668142 9229.670 791.0146 670.1760 1954.927 2702\r## 290 -20 9 21.931712 11.179009 9034.144 808.1346 589.3778 1647.165 2702\r## 291 -20 10 22.360680 10.654498 8819.660 827.7875 510.2498 1359.114 2702\r## 292 -20 11 22.825424 10.100464 8587.288 850.1874 434.7182 1097.714 2702\r## 319 -19 -13 23.021729 9.870889 8489.136 860.0174 405.7444 1001.264 2702\r## 320 -19 -12 22.472205 10.520197 8763.897 833.0545 491.1967 1291.872 2702\r## 321 -19 -11 21.954498 11.150831 9022.751 809.1550 584.9322 1630.620 2702\r## 322 -19 -10 21.470911 11.756484 9264.545 788.0370 685.5138 2014.808 2702\r## 323 -19 -9 21.023796 12.330708 9488.102 769.4694 790.9477 2438.236 2702\r## 324 -19 -8 20.615528 12.866999 9692.236 753.2631 898.7017 2890.899 2702\r## 325 -19 -7 20.248457 13.358921 9875.772 739.2642 1005.7683 3358.995 2702\r## 326 -19 -6 19.924859 13.800237 10037.571 727.3477 1108.7749 3825.339 2702\r## 327 -19 -5 19.646883 14.185060 10176.559 717.4138 1204.1410 4270.203 2702\r## 328 -19 -4 19.416488 14.508024 10291.756 709.3837 1288.2752 4672.582 2702\r## 329 -19 -3 19.235384 14.764445 10382.308 703.1966 1357.7980 5011.783 2702\r## 330 -19 -2 19.104973 14.950482 10447.513 698.8078 1409.7735 5269.198 2702\r## 331 -19 -1 19.026298 15.063279 10486.851 696.1865 1441.9240 5430.026 2702\r## 332 -19 0 19.000000 15.101077 10500.000 695.3147 1452.8056 5484.732 2702\r## 333 -19 1 19.026298 15.063279 10486.851 696.1865 1441.9240 5430.026 2702\r## 334 -19 2 19.104973 14.950482 10447.513 698.8078 1409.7735 5269.198 2702\r## 335 -19 3 19.235384 14.764445 10382.308 703.1966 1357.7980 5011.783 2702\r## 336 -19 4 19.416488 14.508024 10291.756 709.3837 1288.2752 4672.582 2702\r## 337 -19 5 19.646883 14.185060 10176.559 717.4138 1204.1410 4270.203 2702\r## 338 -19 6 19.924859 13.800237 10037.571 727.3477 1108.7749 3825.339 2702\r## 339 -19 7 20.248457 13.358921 9875.772 739.2642 1005.7683 3358.995 2702\r## 340 -19 8 20.615528 12.866999 9692.236 753.2631 898.7017 2890.899 2702\r## 341 -19 9 21.023796 12.330708 9488.102 769.4694 790.9477 2438.236 2702\r## 342 -19 10 21.470911 11.756484 9264.545 788.0370 685.5138 2014.808 2702\r## 343 -19 11 21.954498 11.150831 9022.751 809.1550 584.9322 1630.620 2702\r## 344 -19 12 22.472205 10.520197 8763.897 833.0545 491.1967 1291.872 2702\r## 345 -19 13 23.021729 9.870889 8489.136 860.0174 405.7444 1001.264 2702\r## 369 -18 -14 22.803509 10.126259 8598.246 849.1039 438.0572 1108.970 2702\r## 370 -18 -13 22.203603 10.845098 8898.198 820.4811 538.1263 1459.008 2702\r## 371 -18 -12 21.633308 11.551310 9183.346 795.0048 650.2457 1877.797 2702\r## 372 -18 -11 21.095023 12.238315 9452.488 772.3685 773.3011 2365.976 2702\r## 373 -18 -10 20.591260 12.899236 9704.370 752.3213 905.4735 2919.979 2702\r## 374 -18 -9 20.124612 13.526971 9937.694 734.6578 1044.2043 3531.230 2702\r## 375 -18 -8 19.697716 14.114293 10151.142 719.2101 1186.2089 4185.625 2702\r## 376 -18 -7 19.313208 14.653981 10343.396 705.8421 1327.5493 4863.470 2702\r## 377 -18 -6 18.973666 15.138974 10513.167 694.4438 1463.7709 5539.997 2702\r## 378 -18 -5 18.681542 15.562555 10659.229 684.9280 1590.1076 6186.534 2702\r## 379 -18 -4 18.439089 15.918551 10780.456 677.2259 1701.7447 6772.327 2702\r## 380 -18 -3 18.248288 16.201537 10875.856 671.2854 1794.1240 7266.892 2702\r## 381 -18 -2 18.110770 16.407042 10944.615 667.0682 1863.2650 7642.667 2702\r## 382 -18 -1 18.027756 16.531723 10986.122 664.5479 1906.0671 7877.643 2702\r## 383 -18 0 18.000000 16.573517 11000.000 663.7095 1920.5598 7957.608 2702\r## 384 -18 1 18.027756 16.531723 10986.122 664.5479 1906.0671 7877.643 2702\r## 385 -18 2 18.110770 16.407042 10944.615 667.0682 1863.2650 7642.667 2702\r## 386 -18 3 18.248288 16.201537 10875.856 671.2854 1794.1240 7266.892 2702\r## 387 -18 4 18.439089 15.918551 10780.456 677.2259 1701.7447 6772.327 2702\r## 388 -18 5 18.681542 15.562555 10659.229 684.9280 1590.1076 6186.534 2702\r## 389 -18 6 18.973666 15.138974 10513.167 694.4438 1463.7709 5539.997 2702\r## 390 -18 7 19.313208 14.653981 10343.396 705.8421 1327.5493 4863.470 2702\r## 391 -18 8 19.697716 14.114293 10151.142 719.2101 1186.2089 4185.625 2702\r## 392 -18 9 20.124612 13.526971 9937.694 734.6578 1044.2043 3531.230 2702\r## 393 -18 10 20.591260 12.899236 9704.370 752.3213 905.4735 2919.979 2702\r## 394 -18 11 21.095023 12.238315 9452.488 772.3685 773.3011 2365.976 2702\r## 395 -18 12 21.633308 11.551310 9183.346 795.0048 650.2457 1877.797 2702\r## 396 -18 13 22.203603 10.845098 8898.198 820.4811 538.1263 1459.008 2702\r## 397 -18 14 22.803509 10.126259 8598.246 849.1039 438.0572 1108.970 2702\r## 419 -17 -15 22.671568 10.282243 8664.216 842.6387 458.6140 1178.895 2702\r## 420 -17 -14 22.022716 11.066684 8988.642 812.2255 571.7897 1581.954 2702\r## 421 -17 -13 21.400935 11.845450 9299.533 785.0721 701.1945 2076.491 2702\r## 422 -17 -12 20.808652 12.611893 9595.674 760.8433 846.3006 2668.363 2702\r## 423 -17 -11 20.248457 13.358921 9875.772 739.2642 1005.7683 3358.995 2702\r## 424 -17 -10 19.723083 14.079044 10138.459 720.1099 1177.3438 4143.969 2702\r## 425 -17 -9 19.235384 14.764445 10382.308 703.1966 1357.7980 5011.783 2702\r## 426 -17 -8 18.788294 15.407086 10605.853 688.3750 1542.9268 5943.001 2702\r## 427 -17 -7 18.384776 15.998851 10807.612 675.5243 1727.6277 6910.014 2702\r## 428 -17 -6 18.027756 16.531723 10986.122 664.5479 1906.0671 7877.643 2702\r## 429 -17 -5 17.720045 16.998004 11139.977 655.3697 2071.9420 8804.720 2702\r## 430 -17 -4 17.464249 17.390553 11267.875 647.9308 2218.8295 9646.668 2702\r## 431 -17 -3 17.262677 17.703046 11368.662 642.1868 2340.6032 10358.952 2702\r## 432 -17 -2 17.117243 17.930237 11441.379 638.1053 2431.8785 10901.039 2702\r## 433 -17 -1 17.029386 18.068184 11485.307 635.6647 2488.4409 11240.402 2702\r## 434 -17 0 17.000000 18.114443 11500.000 634.8525 2507.6029 11355.958 2702\r## 435 -17 1 17.029386 18.068184 11485.307 635.6647 2488.4409 11240.402 2702\r## 436 -17 2 17.117243 17.930237 11441.379 638.1053 2431.8785 10901.039 2702\r## 437 -17 3 17.262677 17.703046 11368.662 642.1868 2340.6032 10358.952 2702\r## 438 -17 4 17.464249 17.390553 11267.875 647.9308 2218.8295 9646.668 2702\r## 439 -17 5 17.720045 16.998004 11139.977 655.3697 2071.9420 8804.720 2702\r## 440 -17 6 18.027756 16.531723 10986.122 664.5479 1906.0671 7877.643 2702\r## 441 -17 7 18.384776 15.998851 10807.612 675.5243 1727.6277 6910.014 2702\r## 442 -17 8 18.788294 15.407086 10605.853 688.3750 1542.9268 5943.001 2702\r## 443 -17 9 19.235384 14.764445 10382.308 703.1966 1357.7980 5011.783 2702\r## 444 -17 10 19.723083 14.079044 10138.459 720.1099 1177.3438 4143.969 2702\r## 445 -17 11 20.248457 13.358921 9875.772 739.2642 1005.7683 3358.995 2702\r## 446 -17 12 20.808652 12.611893 9595.674 760.8433 846.3006 2668.363 2702\r## 447 -17 13 21.400935 11.845450 9299.533 785.0721 701.1945 2076.491 2702\r## 448 -17 14 22.022716 11.066684 8988.642 812.2255 571.7897 1581.954 2702\r## 449 -17 15 22.671568 10.282243 8664.216 842.6387 458.6140 1178.895 2702\r## 469 -16 -16 22.627417 10.334706 8686.292 840.4972 465.6698 1203.140 2702\r## 470 -16 -15 21.931712 11.179009 9034.144 808.1346 589.3778 1647.165 2702\r## 471 -16 -14 21.260292 12.025274 9369.854 779.1801 733.6159 2205.483 2702\r## 472 -16 -13 20.615528 12.866999 9692.236 753.2631 898.7017 2890.899 2702\r## 473 -16 -12 20.000000 13.697122 10000.000 730.0804 1084.1059 3712.283 2702\r## 474 -16 -11 19.416488 14.508024 10291.756 709.3837 1288.2752 4672.582 2702\r## 475 -16 -10 18.867962 15.291570 10566.019 690.9702 1508.4816 5766.763 2702\r## 476 -16 -9 18.357560 16.039166 10821.220 674.6748 1740.7208 6979.927 2702\r## 477 -16 -8 17.888544 16.741872 11055.728 660.3639 1979.6837 8285.903 2702\r## 478 -16 -7 17.464249 17.390553 11267.875 647.9308 2218.8295 9646.668 2702\r## 479 -16 -6 17.088007 17.976082 11455.996 637.2911 2450.5801 11012.957 2702\r## 480 -16 -5 16.763055 18.489595 11618.473 628.3790 2666.6497 12326.318 2702\r## 481 -16 -4 16.492423 18.922786 11753.789 621.1447 2858.5053 13522.721 2702\r## 482 -16 -3 16.278821 19.268232 11860.590 615.5515 3017.9318 14537.553 2702\r## 483 -16 -2 16.124515 19.519726 11937.742 611.5733 3137.6530 15311.531 2702\r## 484 -16 -1 16.031220 19.672574 11984.390 609.1928 3211.9396 15796.780 2702\r## 485 -16 0 16.000000 19.723855 12000.000 608.4003 3237.1230 15962.136 2702\r## 486 -16 1 16.031220 19.672574 11984.390 609.1928 3211.9396 15796.780 2702\r## 487 -16 2 16.124515 19.519726 11937.742 611.5733 3137.6530 15311.531 2702\r## 488 -16 3 16.278821 19.268232 11860.590 615.5515 3017.9318 14537.553 2702\r## 489 -16 4 16.492423 18.922786 11753.789 621.1447 2858.5053 13522.721 2702\r## 490 -16 5 16.763055 18.489595 11618.473 628.3790 2666.6497 12326.318 2702\r## 491 -16 6 17.088007 17.976082 11455.996 637.2911 2450.5801 11012.957 2702\r## 492 -16 7 17.464249 17.390553 11267.875 647.9308 2218.8295 9646.668 2702\r## 493 -16 8 17.888544 16.741872 11055.728 660.3639 1979.6837 8285.903 2702\r## 494 -16 9 18.357560 16.039166 10821.220 674.6748 1740.7208 6979.927 2702\r## 495 -16 10 18.867962 15.291570 10566.019 690.9702 1508.4816 5766.763 2702\r## 496 -16 11 19.416488 14.508024 10291.756 709.3837 1288.2752 4672.582 2702\r## 497 -16 12 20.000000 13.697122 10000.000 730.0804 1084.1059 3712.283 2702\r## 498 -16 13 20.615528 12.866999 9692.236 753.2631 898.7017 2890.899 2702\r## 499 -16 14 21.260292 12.025274 9369.854 779.1801 733.6159 2205.483 2702\r## 500 -16 15 21.931712 11.179009 9034.144 808.1346 589.3778 1647.165 2702\r## 501 -16 16 22.627417 10.334706 8686.292 840.4972 465.6698 1203.140 2702\r## 519 -15 -17 22.671568 10.282243 8664.216 842.6387 458.6140 1178.895 2702\r## 520 -15 -16 21.931712 11.179009 9034.144 808.1346 589.3778 1647.165 2702\r## 521 -15 -15 21.213203 12.085783 9393.398 777.2271 744.7459 2250.209 2702\r## 522 -15 -14 20.518285 12.996419 9740.858 749.5032 926.0937 3008.975 2702\r## 523 -15 -13 19.849433 13.904131 10075.283 724.6252 1134.0060 3941.842 2702\r## 524 -15 -12 19.209373 14.801458 10395.314 702.3169 1368.0353 5062.229 2702\r## 525 -15 -11 18.601075 15.680259 10699.462 682.3524 1626.4603 6375.829 2702\r## 526 -15 -10 18.027756 16.531723 10986.122 664.5479 1906.0671 7877.643 2702\r## 527 -15 -9 17.492856 17.346430 11253.572 648.7544 2201.9838 9549.140 2702\r## 528 -15 -8 17.000000 18.114443 11500.000 634.8525 2507.6029 11355.958 2702\r## 529 -15 -7 16.552945 18.825474 11723.527 622.7481 2814.6314 13246.692 2702\r## 530 -15 -6 16.155494 19.469104 11922.253 612.3678 3113.3051 15153.315 2702\r## 531 -15 -5 15.811388 20.035086 12094.306 603.6563 3392.7933 16993.726 2702\r## 532 -15 -4 15.524175 20.513700 12237.913 596.5727 3641.7977 18676.687 2702\r## 533 -15 -3 15.297059 20.896168 12351.471 591.0878 3849.3178 20108.998 2702\r## 534 -15 -2 15.132746 21.175076 12433.627 587.1822 4005.5184 21204.290 2702\r## 535 -15 -1 15.033296 21.344782 12483.352 584.8432 4102.5982 21892.266 2702\r## 536 -15 0 15.000000 21.401752 12500.000 584.0643 4135.5359 22126.929 2702\r## 537 -15 1 15.033296 21.344782 12483.352 584.8432 4102.5982 21892.266 2702\r## 538 -15 2 15.132746 21.175076 12433.627 587.1822 4005.5184 21204.290 2702\r## 539 -15 3 15.297059 20.896168 12351.471 591.0878 3849.3178 20108.998 2702\r## 540 -15 4 15.524175 20.513700 12237.913 596.5727 3641.7977 18676.687 2702\r## 541 -15 5 15.811388 20.035086 12094.306 603.6563 3392.7933 16993.726 2702\r## 542 -15 6 16.155494 19.469104 11922.253 612.3678 3113.3051 15153.315 2702\r## 543 -15 7 16.552945 18.825474 11723.527 622.7481 2814.6314 13246.692 2702\r## 544 -15 8 17.000000 18.114443 11500.000 634.8525 2507.6029 11355.958 2702\r## 545 -15 9 17.492856 17.346430 11253.572 648.7544 2201.9838 9549.140 2702\r## 546 -15 10 18.027756 16.531723 10986.122 664.5479 1906.0671 7877.643 2702\r## 547 -15 11 18.601075 15.680259 10699.462 682.3524 1626.4603 6375.829 2702\r## 548 -15 12 19.209373 14.801458 10395.314 702.3169 1368.0353 5062.229 2702\r## 549 -15 13 19.849433 13.904131 10075.283 724.6252 1134.0060 3941.842 2702\r## 550 -15 14 20.518285 12.996419 9740.858 749.5032 926.0937 3008.975 2702\r## 551 -15 15 21.213203 12.085783 9393.398 777.2271 744.7459 2250.209 2702\r## 552 -15 16 21.931712 11.179009 9034.144 808.1346 589.3778 1647.165 2702\r## 553 -15 17 22.671568 10.282243 8664.216 842.6387 458.6140 1178.895 2702\r## 569 -14 -18 22.803509 10.126259 8598.246 849.1039 438.0572 1108.970 2702\r## 570 -14 -17 22.022716 11.066684 8988.642 812.2255 571.7897 1581.954 2702\r## 571 -14 -16 21.260292 12.025274 9369.854 779.1801 733.6159 2205.483 2702\r## 572 -14 -15 20.518285 12.996419 9740.858 749.5032 926.0937 3008.975 2702\r## 573 -14 -14 19.798990 13.973831 10100.505 722.8157 1151.1456 4021.479 2702\r## 574 -14 -13 19.104973 14.950482 10447.513 698.8078 1409.7735 5269.198 2702\r## 575 -14 -12 18.439089 15.918551 10780.456 677.2259 1701.7447 6772.327 2702\r## 576 -14 -11 17.804494 16.869392 11097.753 657.8633 2025.2660 8541.251 2702\r## 577 -14 -10 17.204651 17.793518 11397.675 640.5521 2376.6721 10572.340 2702\r## 578 -14 -9 16.643317 18.680636 11678.342 625.1576 2750.1650 12843.708 2702\r## 579 -14 -8 16.124515 19.519726 11937.742 611.5733 3137.6530 15311.531 2702\r## 580 -14 -7 15.652476 20.299200 12173.762 599.7163 3528.7475 17907.688 2702\r## 581 -14 -6 15.231546 21.007149 12384.227 589.5244 3910.9758 20539.612 2702\r## 582 -14 -5 14.866069 21.631676 12566.966 580.9520 4270.2597 23093.218 2702\r## 583 -14 -4 14.560220 22.161341 12719.890 573.9675 4591.6828 25439.462 2702\r## 584 -14 -3 14.317821 22.585674 12841.089 568.5502 4860.5224 27444.544 2702\r## 585 -14 -2 14.142136 22.895737 12928.932 564.6873 5063.4633 28982.931 2702\r## 586 -14 -1 14.035669 23.084666 12982.166 562.3718 5189.8474 29951.473 2702\r## 587 -14 0 14.000000 23.148135 13000.000 561.6003 5232.7723 30282.230 2702\r## 588 -14 1 14.035669 23.084666 12982.166 562.3718 5189.8474 29951.473 2702\r## 589 -14 2 14.142136 22.895737 12928.932 564.6873 5063.4633 28982.931 2702\r## 590 -14 3 14.317821 22.585674 12841.089 568.5502 4860.5224 27444.544 2702\r## 591 -14 4 14.560220 22.161341 12719.890 573.9675 4591.6828 25439.462 2702\r## 592 -14 5 14.866069 21.631676 12566.966 580.9520 4270.2597 23093.218 2702\r## 593 -14 6 15.231546 21.007149 12384.227 589.5244 3910.9758 20539.612 2702\r## 594 -14 7 15.652476 20.299200 12173.762 599.7163 3528.7475 17907.688 2702\r## 595 -14 8 16.124515 19.519726 11937.742 611.5733 3137.6530 15311.531 2702\r## 596 -14 9 16.643317 18.680636 11678.342 625.1576 2750.1650 12843.708 2702\r## 597 -14 10 17.204651 17.793518 11397.675 640.5521 2376.6721 10572.340 2702\r## 598 -14 11 17.804494 16.869392 11097.753 657.8633 2025.2660 8541.251 2702\r## 599 -14 12 18.439089 15.918551 10780.456 677.2259 1701.7447 6772.327 2702\r## 600 -14 13 19.104973 14.950482 10447.513 698.8078 1409.7735 5269.198 2702\r## 601 -14 14 19.798990 13.973831 10100.505 722.8157 1151.1456 4021.479 2702\r## 602 -14 15 20.518285 12.996419 9740.858 749.5032 926.0937 3008.975 2702\r## 603 -14 16 21.260292 12.025274 9369.854 779.1801 733.6159 2205.483 2702\r## 604 -14 17 22.022716 11.066684 8988.642 812.2255 571.7897 1581.954 2702\r## 605 -14 18 22.803509 10.126259 8598.246 849.1039 438.0572 1108.970 2702\r## 619 -13 -19 23.021729 9.870889 8489.136 860.0174 405.7444 1001.264 2702\r## 620 -13 -18 22.203603 10.845098 8898.198 820.4811 538.1263 1459.008 2702\r## 621 -13 -17 21.400935 11.845450 9299.533 785.0721 701.1945 2076.491 2702\r## 622 -13 -16 20.615528 12.866999 9692.236 753.2631 898.7017 2890.899 2702\r## 623 -13 -15 19.849433 13.904131 10075.283 724.6252 1134.0060 3941.842 2702\r## 624 -13 -14 19.104973 14.950482 10447.513 698.8078 1409.7735 5269.198 2702\r## 625 -13 -13 18.384776 15.998851 10807.612 675.5243 1727.6277 6910.014 2702\r## 626 -13 -12 17.691806 17.041120 11154.097 654.5401 2087.7487 8894.394 2702\r## 627 -13 -11 17.029386 18.068184 11485.307 635.6647 2488.4409 11240.402 2702\r## 628 -13 -10 16.401219 19.069901 11799.390 618.7442 2925.6955 13948.181 2702\r## 629 -13 -9 15.811388 20.035086 12094.306 603.6563 3392.7933 16993.726 2702\r## 630 -13 -8 15.264338 20.951562 12367.831 590.3059 3880.0116 20323.076 2702\r## 631 -13 -7 14.764823 21.806302 12617.588 578.6212 4374.5146 23847.997 2702\r## 632 -13 -6 14.317821 22.585674 12841.089 568.5502 4860.5224 27444.544 2702\r## 633 -13 -5 13.928388 23.275825 13035.806 560.0577 5319.8456 30955.948 2702\r## 634 -13 -4 13.601471 23.863206 13199.265 553.1220 5732.8445 34201.012 2702\r## 635 -13 -3 13.341664 24.335226 13329.168 547.7314 6079.8094 36988.385 2702\r## 636 -13 -2 13.152946 24.680990 13423.527 543.8812 6342.6613 39135.790 2702\r## 637 -13 -1 13.038405 24.892040 13480.798 541.5706 6506.7669 40491.675 2702\r## 638 -13 0 13.000000 24.963004 13500.000 540.8003 6562.5758 40955.402 2702\r## 639 -13 1 13.038405 24.892040 13480.798 541.5706 6506.7669 40491.675 2702\r## 640 -13 2 13.152946 24.680990 13423.527 543.8812 6342.6613 39135.790 2702\r## 641 -13 3 13.341664 24.335226 13329.168 547.7314 6079.8094 36988.385 2702\r## 642 -13 4 13.601471 23.863206 13199.265 553.1220 5732.8445 34201.012 2702\r## 643 -13 5 13.928388 23.275825 13035.806 560.0577 5319.8456 30955.948 2702\r## 644 -13 6 14.317821 22.585674 12841.089 568.5502 4860.5224 27444.544 2702\r## 645 -13 7 14.764823 21.806302 12617.588 578.6212 4374.5146 23847.997 2702\r## 646 -13 8 15.264338 20.951562 12367.831 590.3059 3880.0116 20323.076 2702\r## 647 -13 9 15.811388 20.035086 12094.306 603.6563 3392.7933 16993.726 2702\r## 648 -13 10 16.401219 19.069901 11799.390 618.7442 2925.6955 13948.181 2702\r## 649 -13 11 17.029386 18.068184 11485.307 635.6647 2488.4409 11240.402 2702\r## 650 -13 12 17.691806 17.041120 11154.097 654.5401 2087.7487 8894.394 2702\r## 651 -13 13 18.384776 15.998851 10807.612 675.5243 1727.6277 6910.014 2702\r## 652 -13 14 19.104973 14.950482 10447.513 698.8078 1409.7735 5269.198 2702\r## 653 -13 15 19.849433 13.904131 10075.283 724.6252 1134.0060 3941.842 2702\r## 654 -13 16 20.615528 12.866999 9692.236 753.2631 898.7017 2890.899 2702\r## 655 -13 17 21.400935 11.845450 9299.533 785.0721 701.1945 2076.491 2702\r## 656 -13 18 22.203603 10.845098 8898.198 820.4811 538.1263 1459.008 2702\r## 657 -13 19 23.021729 9.870889 8489.136 860.0174 405.7444 1001.264 2702\r## 670 -12 -19 22.472205 10.520197 8763.897 833.0545 491.1967 1291.872 2702\r## 671 -12 -18 21.633308 11.551310 9183.346 795.0048 650.2457 1877.797 2702\r## 672 -12 -17 20.808652 12.611893 9595.674 760.8433 846.3006 2668.363 2702\r## 673 -12 -16 20.000000 13.697122 10000.000 730.0804 1084.1059 3712.283 2702\r## 674 -12 -15 19.209373 14.801458 10395.314 702.3169 1368.0353 5062.229 2702\r## 675 -12 -14 18.439089 15.918551 10780.456 677.2259 1701.7447 6772.327 2702\r## 676 -12 -13 17.691806 17.041120 11154.097 654.5401 2087.7487 8894.394 2702\r## 677 -12 -12 16.970563 18.160842 11514.719 634.0410 2526.9212 11472.754 2702\r## 678 -12 -11 16.278821 19.268232 11860.590 615.5515 3017.9318 14537.553 2702\r## 679 -12 -10 15.620499 20.352555 12189.750 598.9297 3556.6455 18096.706 2702\r## 680 -12 -9 15.000000 21.401752 12500.000 584.0643 4135.5359 22126.929 2702\r## 681 -12 -8 14.422205 22.402450 12788.897 570.8705 4743.1881 26564.759 2702\r## 682 -12 -7 13.892444 23.340049 13053.778 559.2867 5364.0036 31299.026 2702\r## 683 -12 -6 13.416408 24.198957 13291.796 549.2714 5978.2454 36166.826 2702\r## 684 -12 -5 13.000000 24.963004 13500.000 540.8003 6562.5758 40955.402 2702\r## 685 -12 -4 12.649111 25.616054 13675.445 533.8623 7091.2119 45412.216 2702\r## 686 -12 -3 12.369317 26.142828 13815.342 528.4563 7537.7457 49264.497 2702\r## 687 -12 -2 12.165525 26.529886 13917.237 524.5872 7877.5279 52247.479 2702\r## 688 -12 -1 12.041595 26.766656 13979.203 522.2618 8090.3282 54137.757 2702\r## 689 -12 0 12.000000 26.846358 14000.000 521.4860 8162.8147 54785.462 2702\r## 690 -12 1 12.041595 26.766656 13979.203 522.2618 8090.3282 54137.757 2702\r## 691 -12 2 12.165525 26.529886 13917.237 524.5872 7877.5279 52247.479 2702\r## 692 -12 3 12.369317 26.142828 13815.342 528.4563 7537.7457 49264.497 2702\r## 693 -12 4 12.649111 25.616054 13675.445 533.8623 7091.2119 45412.216 2702\r## 694 -12 5 13.000000 24.963004 13500.000 540.8003 6562.5758 40955.402 2702\r## 695 -12 6 13.416408 24.198957 13291.796 549.2714 5978.2454 36166.826 2702\r## 696 -12 7 13.892444 23.340049 13053.778 559.2867 5364.0036 31299.026 2702\r## 697 -12 8 14.422205 22.402450 12788.897 570.8705 4743.1881 26564.759 2702\r## 698 -12 9 15.000000 21.401752 12500.000 584.0643 4135.5359 22126.929 2702\r## 699 -12 10 15.620499 20.352555 12189.750 598.9297 3556.6455 18096.706 2702\r## 700 -12 11 16.278821 19.268232 11860.590 615.5515 3017.9318 14537.553 2702\r## 701 -12 12 16.970563 18.160842 11514.719 634.0410 2526.9212 11472.754 2702\r## 702 -12 13 17.691806 17.041120 11154.097 654.5401 2087.7487 8894.394 2702\r## 703 -12 14 18.439089 15.918551 10780.456 677.2259 1701.7447 6772.327 2702\r## 704 -12 15 19.209373 14.801458 10395.314 702.3169 1368.0353 5062.229 2702\r## 705 -12 16 20.000000 13.697122 10000.000 730.0804 1084.1059 3712.283 2702\r## 706 -12 17 20.808652 12.611893 9595.674 760.8433 846.3006 2668.363 2702\r## 707 -12 18 21.633308 11.551310 9183.346 795.0048 650.2457 1877.797 2702\r## 708 -12 19 22.472205 10.520197 8763.897 833.0545 491.1967 1291.872 2702\r## 720 -11 -20 22.825424 10.100464 8587.288 850.1874 434.7182 1097.714 2702\r## 721 -11 -19 21.954498 11.150831 9022.751 809.1550 584.9322 1630.620 2702\r## 722 -11 -18 21.095023 12.238315 9452.488 772.3685 773.3011 2365.976 2702\r## 723 -11 -17 20.248457 13.358921 9875.772 739.2642 1005.7683 3358.995 2702\r## 724 -11 -16 19.416488 14.508024 10291.756 709.3837 1288.2752 4672.582 2702\r## 725 -11 -15 18.601075 15.680259 10699.462 682.3524 1626.4603 6375.829 2702\r## 726 -11 -14 17.804494 16.869392 11097.753 657.8633 2025.2660 8541.251 2702\r## 727 -11 -13 17.029386 18.068184 11485.307 635.6647 2488.4409 11240.402 2702\r## 728 -11 -12 16.278821 19.268232 11860.590 615.5515 3017.9318 14537.553 2702\r## 729 -11 -11 15.556349 20.459804 12221.825 597.3579 3613.1682 18481.178 2702\r## 730 -11 -10 14.866069 21.631676 12566.966 580.9520 4270.2597 23093.218 2702\r## 731 -11 -9 14.212670 22.770998 12893.665 566.2319 4981.1541 28356.462 2702\r## 732 -11 -8 13.601471 23.863206 13199.265 553.1220 5732.8445 34201.012 2702\r## 733 -11 -7 13.038405 24.892040 13480.798 541.5706 6506.7669 40491.675 2702\r## 734 -11 -6 12.529964 25.839718 13735.018 531.5467 7278.5876 47019.163 2702\r## 735 -11 -5 12.083046 26.687346 13958.477 523.0373 8018.6256 53498.958 2702\r## 736 -11 -4 11.704700 27.415611 14147.650 516.0436 8693.1580 59582.059 2702\r## 737 -11 -3 11.401754 28.005808 14299.123 510.5771 9266.7642 64880.805 2702\r## 738 -11 -2 11.180340 28.441142 14409.830 506.6544 9705.6556 69009.982 2702\r## 739 -11 -1 11.045361 28.708178 14477.319 504.2925 9981.6118 71638.471 2702\r## 740 -11 0 11.000000 28.798198 14500.000 503.5037 10075.8046 72541.254 2702\r## 741 -11 1 11.045361 28.708178 14477.319 504.2925 9981.6118 71638.471 2702\r## 742 -11 2 11.180340 28.441142 14409.830 506.6544 9705.6556 69009.982 2702\r## 743 -11 3 11.401754 28.005808 14299.123 510.5771 9266.7642 64880.805 2702\r## 744 -11 4 11.704700 27.415611 14147.650 516.0436 8693.1580 59582.059 2702\r## 745 -11 5 12.083046 26.687346 13958.477 523.0373 8018.6256 53498.958 2702\r## 746 -11 6 12.529964 25.839718 13735.018 531.5467 7278.5876 47019.163 2702\r## 747 -11 7 13.038405 24.892040 13480.798 541.5706 6506.7669 40491.675 2702\r## 748 -11 8 13.601471 23.863206 13199.265 553.1220 5732.8445 34201.012 2702\r## 749 -11 9 14.212670 22.770998 12893.665 566.2319 4981.1541 28356.462 2702\r## 750 -11 10 14.866069 21.631676 12566.966 580.9520 4270.2597 23093.218 2702\r## 751 -11 11 15.556349 20.459804 12221.825 597.3579 3613.1682 18481.178 2702\r## 752 -11 12 16.278821 19.268232 11860.590 615.5515 3017.9318 14537.553 2702\r## 753 -11 13 17.029386 18.068184 11485.307 635.6647 2488.4409 11240.402 2702\r## 754 -11 14 17.804494 16.869392 11097.753 657.8633 2025.2660 8541.251 2702\r## 755 -11 15 18.601075 15.680259 10699.462 682.3524 1626.4603 6375.829 2702\r## 756 -11 16 19.416488 14.508024 10291.756 709.3837 1288.2752 4672.582 2702\r## 757 -11 17 20.248457 13.358921 9875.772 739.2642 1005.7683 3358.995 2702\r## 758 -11 18 21.095023 12.238315 9452.488 772.3685 773.3011 2365.976 2702\r## 759 -11 19 21.954498 11.150831 9022.751 809.1550 584.9322 1630.620 2702\r## 760 -11 20 22.825424 10.100464 8587.288 850.1874 434.7182 1097.714 2702\r## 771 -10 -20 22.360680 10.654498 8819.660 827.7875 510.2498 1359.114 2702\r## 772 -10 -19 21.470911 11.756484 9264.545 788.0370 685.5138 2014.808 2702\r## 773 -10 -18 20.591260 12.899236 9704.370 752.3213 905.4735 2919.979 2702\r## 774 -10 -17 19.723083 14.079044 10138.459 720.1099 1177.3438 4143.969 2702\r## 775 -10 -16 18.867962 15.291570 10566.019 690.9702 1508.4816 5766.763 2702\r## 776 -10 -15 18.027756 16.531723 10986.122 664.5479 1906.0671 7877.643 2702\r## 777 -10 -14 17.204651 17.793518 11397.675 640.5521 2376.6721 10572.340 2702\r## 778 -10 -13 16.401219 19.069901 11799.390 618.7442 2925.6955 13948.181 2702\r## 779 -10 -12 15.620499 20.352555 12189.750 598.9297 3556.6455 18096.706 2702\r## 780 -10 -11 14.866069 21.631676 12566.966 580.9520 4270.2597 23093.218 2702\r## 781 -10 -10 14.142136 22.895737 12928.932 564.6873 5063.4633 28982.931 2702\r## 782 -10 -9 13.453624 24.131249 13273.188 550.0415 5928.2047 35763.746 2702\r## 783 -10 -8 12.806248 25.322558 13596.876 536.9472 6850.2512 43366.470 2702\r## 784 -10 -7 12.206556 26.451729 13896.722 525.3616 7808.1110 51634.508 2702\r## 785 -10 -6 11.661904 27.498605 14169.048 515.2643 8772.3464 60306.822 2702\r## 786 -10 -5 11.180340 28.441142 14409.830 506.6544 9705.6556 69009.982 2702\r## 787 -10 -4 10.770330 29.256149 14614.835 499.5475 10564.1670 77266.710 2702\r## 788 -10 -3 10.440307 29.920522 14779.847 493.9702 11300.3347 84527.979 2702\r## 789 -10 -2 10.198039 30.412982 14900.980 489.9546 11867.5426 90231.839 2702\r## 790 -10 -1 10.049876 30.716136 14975.062 487.5308 12225.9757 93883.683 2702\r## 791 -10 0 10.000000 30.818524 15000.000 486.7203 12348.6442 95141.745 2702\r## 792 -10 1 10.049876 30.716136 14975.062 487.5308 12225.9757 93883.683 2702\r## 793 -10 2 10.198039 30.412982 14900.980 489.9546 11867.5426 90231.839 2702\r## 794 -10 3 10.440307 29.920522 14779.847 493.9702 11300.3347 84527.979 2702\r## 795 -10 4 10.770330 29.256149 14614.835 499.5475 10564.1670 77266.710 2702\r## 796 -10 5 11.180340 28.441142 14409.830 506.6544 9705.6556 69009.982 2702\r## 797 -10 6 11.661904 27.498605 14169.048 515.2643 8772.3464 60306.822 2702\r## 798 -10 7 12.206556 26.451729 13896.722 525.3616 7808.1110 51634.508 2702\r## 799 -10 8 12.806248 25.322558 13596.876 536.9472 6850.2512 43366.470 2702\r## 800 -10 9 13.453624 24.131249 13273.188 550.0415 5928.2047 35763.746 2702\r## 801 -10 10 14.142136 22.895737 12928.932 564.6873 5063.4633 28982.931 2702\r## 802 -10 11 14.866069 21.631676 12566.966 580.9520 4270.2597 23093.218 2702\r## 803 -10 12 15.620499 20.352555 12189.750 598.9297 3556.6455 18096.706 2702\r## 804 -10 13 16.401219 19.069901 11799.390 618.7442 2925.6955 13948.181 2702\r## 805 -10 14 17.204651 17.793518 11397.675 640.5521 2376.6721 10572.340 2702\r## 806 -10 15 18.027756 16.531723 10986.122 664.5479 1906.0671 7877.643 2702\r## 807 -10 16 18.867962 15.291570 10566.019 690.9702 1508.4816 5766.763 2702\r## 808 -10 17 19.723083 14.079044 10138.459 720.1099 1177.3438 4143.969 2702\r## 809 -10 18 20.591260 12.899236 9704.370 752.3213 905.4735 2919.979 2702\r## 810 -10 19 21.470911 11.756484 9264.545 788.0370 685.5138 2014.808 2702\r## 811 -10 20 22.360680 10.654498 8819.660 827.7875 510.2498 1359.114 2702\r## 821 -9 -21 22.847319 10.074728 8576.340 851.2727 431.4036 1086.568 2702\r## 822 -9 -20 21.931712 11.179009 9034.144 808.1346 589.3778 1647.165 2702\r## 823 -9 -19 21.023796 12.330708 9488.102 769.4694 790.9477 2438.236 2702\r## 824 -9 -18 20.124612 13.526971 9937.694 734.6578 1044.2043 3531.230 2702\r## 825 -9 -17 19.235384 14.764445 10382.308 703.1966 1357.7980 5011.783 2702\r## 826 -9 -16 18.357560 16.039166 10821.220 674.6748 1740.7208 6979.927 2702\r## 827 -9 -15 17.492856 17.346430 11253.572 648.7544 2201.9838 9549.140 2702\r## 828 -9 -14 16.643317 18.680636 11678.342 625.1576 2750.1650 12843.708 2702\r## 829 -9 -13 15.811388 20.035086 12094.306 603.6563 3392.7933 16993.726 2702\r## 830 -9 -12 15.000000 21.401752 12500.000 584.0643 4135.5359 22126.929 2702\r## 831 -9 -11 14.212670 22.770998 12893.665 566.2319 4981.1541 28356.462 2702\r## 832 -9 -10 13.453624 24.131249 13273.188 550.0415 5928.2047 35763.746 2702\r## 833 -9 -9 12.727922 25.468641 13636.039 535.4050 6969.4920 44375.873 2702\r## 834 -9 -8 12.041595 26.766656 13979.203 522.2618 8090.3282 54137.757 2702\r## 835 -9 -7 11.401754 28.005808 14299.123 510.5771 9266.7642 64880.805 2702\r## 836 -9 -6 10.816654 29.163490 14591.673 500.3404 10464.1093 76292.487 2702\r## 837 -9 -5 10.295630 30.214124 14852.185 491.5643 11636.2706 87894.930 2702\r## 838 -9 -4 9.848858 31.129838 15075.571 484.2804 12726.6576 99044.697 2702\r## 839 -9 -3 9.486833 31.881878 15256.584 478.5347 13671.4779 108968.097 2702\r## 840 -9 -2 9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702\r## 841 -9 -1 9.055385 32.789854 15472.307 471.8627 14873.1254 121921.902 2702\r## 842 -9 0 9.000000 32.907335 15500.000 471.0196 15033.5626 123678.619 2702\r## 843 -9 1 9.055385 32.789854 15472.307 471.8627 14873.1254 121921.902 2702\r## 844 -9 2 9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702\r## 845 -9 3 9.486833 31.881878 15256.584 478.5347 13671.4779 108968.097 2702\r## 846 -9 4 9.848858 31.129838 15075.571 484.2804 12726.6576 99044.697 2702\r## 847 -9 5 10.295630 30.214124 14852.185 491.5643 11636.2706 87894.930 2702\r## 848 -9 6 10.816654 29.163490 14591.673 500.3404 10464.1093 76292.487 2702\r## 849 -9 7 11.401754 28.005808 14299.123 510.5771 9266.7642 64880.805 2702\r## 850 -9 8 12.041595 26.766656 13979.203 522.2618 8090.3282 54137.757 2702\r## 851 -9 9 12.727922 25.468641 13636.039 535.4050 6969.4920 44375.873 2702\r## 852 -9 10 13.453624 24.131249 13273.188 550.0415 5928.2047 35763.746 2702\r## 853 -9 11 14.212670 22.770998 12893.665 566.2319 4981.1541 28356.462 2702\r## 854 -9 12 15.000000 21.401752 12500.000 584.0643 4135.5359 22126.929 2702\r## 855 -9 13 15.811388 20.035086 12094.306 603.6563 3392.7933 16993.726 2702\r## 856 -9 14 16.643317 18.680636 11678.342 625.1576 2750.1650 12843.708 2702\r## 857 -9 15 17.492856 17.346430 11253.572 648.7544 2201.9838 9549.140 2702\r## 858 -9 16 18.357560 16.039166 10821.220 674.6748 1740.7208 6979.927 2702\r## 859 -9 17 19.235384 14.764445 10382.308 703.1966 1357.7980 5011.783 2702\r## 860 -9 18 20.124612 13.526971 9937.694 734.6578 1044.2043 3531.230 2702\r## 861 -9 19 21.023796 12.330708 9488.102 769.4694 790.9477 2438.236 2702\r## 862 -9 20 21.931712 11.179009 9034.144 808.1346 589.3778 1647.165 2702\r## 863 -9 21 22.847319 10.074728 8576.340 851.2727 431.4036 1086.568 2702\r## 872 -8 -21 22.472205 10.520197 8763.897 833.0545 491.1967 1291.872 2702\r## 873 -8 -20 21.540659 11.668142 9229.670 791.0146 670.1760 1954.927 2702\r## 874 -8 -19 20.615528 12.866999 9692.236 753.2631 898.7017 2890.899 2702\r## 875 -8 -18 19.697716 14.114293 10151.142 719.2101 1186.2089 4185.625 2702\r## 876 -8 -17 18.788294 15.407086 10605.853 688.3750 1542.9268 5943.001 2702\r## 877 -8 -16 17.888544 16.741872 11055.728 660.3639 1979.6837 8285.903 2702\r## 878 -8 -15 17.000000 18.114443 11500.000 634.8525 2507.6029 11355.958 2702\r## 879 -8 -14 16.124515 19.519726 11937.742 611.5733 3137.6530 15311.531 2702\r## 880 -8 -13 15.264338 20.951562 12367.831 590.3059 3880.0116 20323.076 2702\r## 881 -8 -12 14.422205 22.402450 12788.897 570.8705 4743.1881 26564.759 2702\r## 882 -8 -11 13.601471 23.863206 13199.265 553.1220 5732.8445 34201.012 2702\r## 883 -8 -10 12.806248 25.322558 13596.876 536.9472 6850.2512 43366.470 2702\r## 884 -8 -9 12.041595 26.766656 13979.203 522.2618 8090.3282 54137.757 2702\r## 885 -8 -8 11.313708 28.178517 14343.146 509.0100 9439.2653 66496.124 2702\r## 886 -8 -7 10.630146 29.537443 14684.927 497.1631 10871.8259 80281.485 2702\r## 887 -8 -6 10.000000 30.818524 15000.000 486.7203 12348.6442 95141.745 2702\r## 888 -8 -5 9.433981 31.992419 15283.009 477.7072 13814.1768 110487.231 2702\r## 889 -8 -4 8.944272 33.025755 15527.864 470.1744 15196.4464 125468.527 2702\r## 890 -8 -3 8.544004 33.882559 15727.998 464.1916 16410.1449 139004.427 2702\r## 891 -8 -2 8.246211 34.527125 15876.894 459.8383 17364.6109 149887.524 2702\r## 892 -8 -1 8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702\r## 893 -8 0 8.000000 35.064631 16000.000 456.3002 18188.2794 159441.328 2702\r## 894 -8 1 8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702\r## 895 -8 2 8.246211 34.527125 15876.894 459.8383 17364.6109 149887.524 2702\r## 896 -8 3 8.544004 33.882559 15727.998 464.1916 16410.1449 139004.427 2702\r## 897 -8 4 8.944272 33.025755 15527.864 470.1744 15196.4464 125468.527 2702\r## 898 -8 5 9.433981 31.992419 15283.009 477.7072 13814.1768 110487.231 2702\r## 899 -8 6 10.000000 30.818524 15000.000 486.7203 12348.6442 95141.745 2702\r## 900 -8 7 10.630146 29.537443 14684.927 497.1631 10871.8259 80281.485 2702\r## 901 -8 8 11.313708 28.178517 14343.146 509.0100 9439.2653 66496.124 2702\r## 902 -8 9 12.041595 26.766656 13979.203 522.2618 8090.3282 54137.757 2702\r## 903 -8 10 12.806248 25.322558 13596.876 536.9472 6850.2512 43366.470 2702\r## 904 -8 11 13.601471 23.863206 13199.265 553.1220 5732.8445 34201.012 2702\r## 905 -8 12 14.422205 22.402450 12788.897 570.8705 4743.1881 26564.759 2702\r## 906 -8 13 15.264338 20.951562 12367.831 590.3059 3880.0116 20323.076 2702\r## 907 -8 14 16.124515 19.519726 11937.742 611.5733 3137.6530 15311.531 2702\r## 908 -8 15 17.000000 18.114443 11500.000 634.8525 2507.6029 11355.958 2702\r## 909 -8 16 17.888544 16.741872 11055.728 660.3639 1979.6837 8285.903 2702\r## 910 -8 17 18.788294 15.407086 10605.853 688.3750 1542.9268 5943.001 2702\r## 911 -8 18 19.697716 14.114293 10151.142 719.2101 1186.2089 4185.625 2702\r## 912 -8 19 20.615528 12.866999 9692.236 753.2631 898.7017 2890.899 2702\r## 913 -8 20 21.540659 11.668142 9229.670 791.0146 670.1760 1954.927 2702\r## 914 -8 21 22.472205 10.520197 8763.897 833.0545 491.1967 1291.872 2702\r## 923 -7 -21 22.135944 10.927718 8932.028 817.3736 550.5189 1503.979 2702\r## 924 -7 -20 21.189620 12.116145 9405.190 776.2527 750.3729 2272.907 2702\r## 925 -7 -19 20.248457 13.358921 9875.772 739.2642 1005.7683 3358.995 2702\r## 926 -7 -18 19.313208 14.653981 10343.396 705.8421 1327.5493 4863.470 2702\r## 927 -7 -17 18.384776 15.998851 10807.612 675.5243 1727.6277 6910.014 2702\r## 928 -7 -16 17.464249 17.390553 11267.875 647.9308 2218.8295 9646.668 2702\r## 929 -7 -15 16.552945 18.825474 11723.527 622.7481 2814.6314 13246.692 2702\r## 930 -7 -14 15.652476 20.299200 12173.762 599.7163 3528.7475 17907.688 2702\r## 931 -7 -13 14.764823 21.806302 12617.588 578.6212 4374.5146 23847.997 2702\r## 932 -7 -12 13.892444 23.340049 13053.778 559.2867 5364.0036 31299.026 2702\r## 933 -7 -11 13.038405 24.892040 13480.798 541.5706 6506.7669 40491.675 2702\r## 934 -7 -10 12.206556 26.451729 13896.722 525.3616 7808.1110 51634.508 2702\r## 935 -7 -9 11.401754 28.005808 14299.123 510.5771 9266.7642 64880.805 2702\r## 936 -7 -8 10.630146 29.537443 14684.927 497.1631 10871.8259 80281.485 2702\r## 937 -7 -7 9.899495 31.025364 15050.253 485.0951 12598.9527 97721.773 2702\r## 938 -7 -6 9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702\r## 939 -7 -5 8.602325 33.757035 15698.837 465.0538 16228.4359 136955.969 2702\r## 940 -7 -4 8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702\r## 941 -7 -3 7.615773 35.911735 16192.113 450.8864 19538.5779 175416.057 2702\r## 942 -7 -2 7.280110 36.660045 16359.945 446.2609 20785.6096 190500.345 2702\r## 943 -7 -1 7.071068 37.129971 16464.466 443.4279 21595.2201 200457.476 2702\r## 944 -7 0 7.000000 37.290413 16500.000 442.4730 21876.3764 203944.781 2702\r## 945 -7 1 7.071068 37.129971 16464.466 443.4279 21595.2201 200457.476 2702\r## 946 -7 2 7.280110 36.660045 16359.945 446.2609 20785.6096 190500.345 2702\r## 947 -7 3 7.615773 35.911735 16192.113 450.8864 19538.5779 175416.057 2702\r## 948 -7 4 8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702\r## 949 -7 5 8.602325 33.757035 15698.837 465.0538 16228.4359 136955.969 2702\r## 950 -7 6 9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702\r## 951 -7 7 9.899495 31.025364 15050.253 485.0951 12598.9527 97721.773 2702\r## 952 -7 8 10.630146 29.537443 14684.927 497.1631 10871.8259 80281.485 2702\r## 953 -7 9 11.401754 28.005808 14299.123 510.5771 9266.7642 64880.805 2702\r## 954 -7 10 12.206556 26.451729 13896.722 525.3616 7808.1110 51634.508 2702\r## 955 -7 11 13.038405 24.892040 13480.798 541.5706 6506.7669 40491.675 2702\r## 956 -7 12 13.892444 23.340049 13053.778 559.2867 5364.0036 31299.026 2702\r## 957 -7 13 14.764823 21.806302 12617.588 578.6212 4374.5146 23847.997 2702\r## 958 -7 14 15.652476 20.299200 12173.762 599.7163 3528.7475 17907.688 2702\r## 959 -7 15 16.552945 18.825474 11723.527 622.7481 2814.6314 13246.692 2702\r## 960 -7 16 17.464249 17.390553 11267.875 647.9308 2218.8295 9646.668 2702\r## 961 -7 17 18.384776 15.998851 10807.612 675.5243 1727.6277 6910.014 2702\r## 962 -7 18 19.313208 14.653981 10343.396 705.8421 1327.5493 4863.470 2702\r## 963 -7 19 20.248457 13.358921 9875.772 739.2642 1005.7683 3358.995 2702\r## 964 -7 20 21.189620 12.116145 9405.190 776.2527 750.3729 2272.907 2702\r## 965 -7 21 22.135944 10.927718 8932.028 817.3736 550.5189 1503.979 2702\r## 973 -6 -22 22.803509 10.126259 8598.246 849.1039 438.0572 1108.970 2702\r## 974 -6 -21 21.840330 11.292374 9079.835 804.0679 607.4905 1715.002 2702\r## 975 -6 -20 20.880613 12.517490 9559.693 763.7069 827.4381 2589.362 2702\r## 976 -6 -19 19.924859 13.800237 10037.571 727.3477 1108.7749 3825.339 2702\r## 977 -6 -18 18.973666 15.138974 10513.167 694.4438 1463.7709 5539.997 2702\r## 978 -6 -17 18.027756 16.531723 10986.122 664.5479 1906.0671 7877.643 2702\r## 979 -6 -16 17.088007 17.976082 11455.996 637.2911 2450.5801 11012.957 2702\r## 980 -6 -15 16.155494 19.469104 11922.253 612.3678 3113.3051 15153.315 2702\r## 981 -6 -14 15.231546 21.007149 12384.227 589.5244 3910.9758 20539.612 2702\r## 982 -6 -13 14.317821 22.585674 12841.089 568.5502 4860.5224 27444.544 2702\r## 983 -6 -12 13.416408 24.198957 13291.796 549.2714 5978.2454 36166.826 2702\r## 984 -6 -11 12.529964 25.839718 13735.018 531.5467 7278.5876 47019.163 2702\r## 985 -6 -10 11.661904 27.498605 14169.048 515.2643 8772.3464 60306.822 2702\r## 986 -6 -9 10.816654 29.163490 14591.673 500.3404 10464.1093 76292.487 2702\r## 987 -6 -8 10.000000 30.818524 15000.000 486.7203 12348.6442 95141.745 2702\r## 988 -6 -7 9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702\r## 989 -6 -6 8.485281 34.009182 15757.359 463.3266 16594.8126 141094.001 2702\r## 990 -6 -5 7.810250 35.481709 16094.875 453.6105 18845.0545 167163.687 2702\r## 991 -6 -4 7.211103 36.814842 16394.449 445.3217 21050.0256 193738.344 2702\r## 992 -6 -3 6.708204 37.952796 16645.898 438.5948 23062.9630 218825.980 2702\r## 993 -6 -2 6.324555 38.832558 16837.722 433.5981 24704.2562 239832.365 2702\r## 994 -6 -1 6.082763 39.392202 16958.619 430.5070 25787.8171 253959.728 2702\r## 995 -6 0 6.000000 39.584681 17000.000 429.4591 26167.6818 258959.837 2702\r## 996 -6 1 6.082763 39.392202 16958.619 430.5070 25787.8171 253959.728 2702\r## 997 -6 2 6.324555 38.832558 16837.722 433.5981 24704.2562 239832.365 2702\r## 998 -6 3 6.708204 37.952796 16645.898 438.5948 23062.9630 218825.980 2702\r## 999 -6 4 7.211103 36.814842 16394.449 445.3217 21050.0256 193738.344 2702\r## 1000 -6 5 7.810250 35.481709 16094.875 453.6105 18845.0545 167163.687 2702\r## 1001 -6 6 8.485281 34.009182 15757.359 463.3266 16594.8126 141094.001 2702\r## 1002 -6 7 9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702\r## 1003 -6 8 10.000000 30.818524 15000.000 486.7203 12348.6442 95141.745 2702\r## 1004 -6 9 10.816654 29.163490 14591.673 500.3404 10464.1093 76292.487 2702\r## 1005 -6 10 11.661904 27.498605 14169.048 515.2643 8772.3464 60306.822 2702\r## 1006 -6 11 12.529964 25.839718 13735.018 531.5467 7278.5876 47019.163 2702\r## 1007 -6 12 13.416408 24.198957 13291.796 549.2714 5978.2454 36166.826 2702\r## 1008 -6 13 14.317821 22.585674 12841.089 568.5502 4860.5224 27444.544 2702\r## 1009 -6 14 15.231546 21.007149 12384.227 589.5244 3910.9758 20539.612 2702\r## 1010 -6 15 16.155494 19.469104 11922.253 612.3678 3113.3051 15153.315 2702\r## 1011 -6 16 17.088007 17.976082 11455.996 637.2911 2450.5801 11012.957 2702\r## 1012 -6 17 18.027756 16.531723 10986.122 664.5479 1906.0671 7877.643 2702\r## 1013 -6 18 18.973666 15.138974 10513.167 694.4438 1463.7709 5539.997 2702\r## 1014 -6 19 19.924859 13.800237 10037.571 727.3477 1108.7749 3825.339 2702\r## 1015 -6 20 20.880613 12.517490 9559.693 763.7069 827.4381 2589.362 2702\r## 1016 -6 21 21.840330 11.292374 9079.835 804.0679 607.4905 1715.002 2702\r## 1017 -6 22 22.803509 10.126259 8598.246 849.1039 438.0572 1108.970 2702\r## 1024 -5 -22 22.561028 10.413844 8719.486 837.2975 476.4496 1240.418 2702\r## 1025 -5 -21 21.587033 11.609589 9206.483 793.0068 660.1375 1915.981 2702\r## 1026 -5 -20 20.615528 12.866999 9692.236 753.2631 898.7017 2890.899 2702\r## 1027 -5 -19 19.646883 14.185060 10176.559 717.4138 1204.1410 4270.203 2702\r## 1028 -5 -18 18.681542 15.562555 10659.229 684.9280 1590.1076 6186.534 2702\r## 1029 -5 -17 17.720045 16.998004 11139.977 655.3697 2071.9420 8804.720 2702\r## 1030 -5 -16 16.763055 18.489595 11618.473 628.3790 2666.6497 12326.318 2702\r## 1031 -5 -15 15.811388 20.035086 12094.306 603.6563 3392.7933 16993.726 2702\r## 1032 -5 -14 14.866069 21.631676 12566.966 580.9520 4270.2597 23093.218 2702\r## 1033 -5 -13 13.928388 23.275825 13035.806 560.0577 5319.8456 30955.948 2702\r## 1034 -5 -12 13.000000 24.963004 13500.000 540.8003 6562.5758 40955.402 2702\r## 1035 -5 -11 12.083046 26.687346 13958.477 523.0373 8018.6256 53498.958 2702\r## 1036 -5 -10 11.180340 28.441142 14409.830 506.6544 9705.6556 69009.982 2702\r## 1037 -5 -9 10.295630 30.214124 14852.185 491.5643 11636.2706 87894.930 2702\r## 1038 -5 -8 9.433981 31.992419 15283.009 477.7072 13814.1768 110487.231 2702\r## 1039 -5 -7 8.602325 33.757035 15698.837 465.0538 16228.4359 136955.969 2702\r## 1040 -5 -6 7.810250 35.481709 16094.875 453.6105 18845.0545 167163.687 2702\r## 1041 -5 -5 7.071068 37.129971 16464.466 443.4279 21595.2201 200457.476 2702\r## 1042 -5 -4 6.403124 38.651567 16798.438 434.6121 24360.4389 235392.284 2702\r## 1043 -5 -3 5.830952 39.979290 17084.524 427.3344 26958.0844 269441.271 2702\r## 1044 -5 -2 5.385165 41.029276 17307.418 421.8309 29138.3770 298881.629 2702\r## 1045 -5 -1 5.099020 41.710421 17450.490 418.3724 30613.8194 319228.825 2702\r## 1046 -5 0 5.000000 41.947435 17500.000 417.1888 31138.6668 326546.799 2702\r## 1047 -5 1 5.099020 41.710421 17450.490 418.3724 30613.8194 319228.825 2702\r## 1048 -5 2 5.385165 41.029276 17307.418 421.8309 29138.3770 298881.629 2702\r## 1049 -5 3 5.830952 39.979290 17084.524 427.3344 26958.0844 269441.271 2702\r## 1050 -5 4 6.403124 38.651567 16798.438 434.6121 24360.4389 235392.284 2702\r## 1051 -5 5 7.071068 37.129971 16464.466 443.4279 21595.2201 200457.476 2702\r## 1052 -5 6 7.810250 35.481709 16094.875 453.6105 18845.0545 167163.687 2702\r## 1053 -5 7 8.602325 33.757035 15698.837 465.0538 16228.4359 136955.969 2702\r## 1054 -5 8 9.433981 31.992419 15283.009 477.7072 13814.1768 110487.231 2702\r## 1055 -5 9 10.295630 30.214124 14852.185 491.5643 11636.2706 87894.930 2702\r## 1056 -5 10 11.180340 28.441142 14409.830 506.6544 9705.6556 69009.982 2702\r## 1057 -5 11 12.083046 26.687346 13958.477 523.0373 8018.6256 53498.958 2702\r## 1058 -5 12 13.000000 24.963004 13500.000 540.8003 6562.5758 40955.402 2702\r## 1059 -5 13 13.928388 23.275825 13035.806 560.0577 5319.8456 30955.948 2702\r## 1060 -5 14 14.866069 21.631676 12566.966 580.9520 4270.2597 23093.218 2702\r## 1061 -5 15 15.811388 20.035086 12094.306 603.6563 3392.7933 16993.726 2702\r## 1062 -5 16 16.763055 18.489595 11618.473 628.3790 2666.6497 12326.318 2702\r## 1063 -5 17 17.720045 16.998004 11139.977 655.3697 2071.9420 8804.720 2702\r## 1064 -5 18 18.681542 15.562555 10659.229 684.9280 1590.1076 6186.534 2702\r## 1065 -5 19 19.646883 14.185060 10176.559 717.4138 1204.1410 4270.203 2702\r## 1066 -5 20 20.615528 12.866999 9692.236 753.2631 898.7017 2890.899 2702\r## 1067 -5 21 21.587033 11.609589 9206.483 793.0068 660.1375 1915.981 2702\r## 1068 -5 22 22.561028 10.413844 8719.486 837.2975 476.4496 1240.418 2702\r## 1075 -4 -22 22.360680 10.654498 8819.660 827.7875 510.2498 1359.114 2702\r## 1076 -4 -21 21.377558 11.875245 9311.221 784.0867 706.4989 2097.462 2702\r## 1077 -4 -20 20.396078 13.159981 9801.961 744.8310 961.5005 3163.332 2702\r## 1078 -4 -19 19.416488 14.508024 10291.756 709.3837 1288.2752 4672.582 2702\r## 1079 -4 -18 18.439089 15.918551 10780.456 677.2259 1701.7447 6772.327 2702\r## 1080 -4 -17 17.464249 17.390553 11267.875 647.9308 2218.8295 9646.668 2702\r## 1081 -4 -16 16.492423 18.922786 11753.789 621.1447 2858.5053 13522.721 2702\r## 1082 -4 -15 15.524175 20.513700 12237.913 596.5727 3641.7977 18676.687 2702\r## 1083 -4 -14 14.560220 22.161341 12719.890 573.9675 4591.6828 25439.462 2702\r## 1084 -4 -13 13.601471 23.863206 13199.265 553.1220 5732.8445 34201.012 2702\r## 1085 -4 -12 12.649111 25.616054 13675.445 533.8623 7091.2119 45412.216 2702\r## 1086 -4 -11 11.704700 27.415611 14147.650 516.0436 8693.1580 59582.059 2702\r## 1087 -4 -10 10.770330 29.256149 14614.835 499.5475 10564.1670 77266.710 2702\r## 1088 -4 -9 9.848858 31.129838 15075.571 484.2804 12726.6576 99044.697 2702\r## 1089 -4 -8 8.944272 33.025755 15527.864 470.1744 15196.4464 125468.527 2702\r## 1090 -4 -7 8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702\r## 1091 -4 -6 7.211103 36.814842 16394.449 445.3217 21050.0256 193738.344 2702\r## 1092 -4 -5 6.403124 38.651567 16798.438 434.6121 24360.4389 235392.284 2702\r## 1093 -4 -4 5.656854 40.387732 17171.573 425.1680 27792.7926 280621.964 2702\r## 1094 -4 -3 5.000000 41.947435 17500.000 417.1888 31138.6668 326546.799 2702\r## 1095 -4 -2 4.472136 43.222264 17763.932 410.9903 34064.8388 368089.867 2702\r## 1096 -4 -1 4.123106 44.075678 17938.447 406.9920 36122.7496 398033.671 2702\r## 1097 -4 0 4.000000 44.378674 18000.000 405.6002 36872.8539 409092.090 2702\r## 1098 -4 1 4.123106 44.075678 17938.447 406.9920 36122.7496 398033.671 2702\r## 1099 -4 2 4.472136 43.222264 17763.932 410.9903 34064.8388 368089.867 2702\r## 1100 -4 3 5.000000 41.947435 17500.000 417.1888 31138.6668 326546.799 2702\r## 1101 -4 4 5.656854 40.387732 17171.573 425.1680 27792.7926 280621.964 2702\r## 1102 -4 5 6.403124 38.651567 16798.438 434.6121 24360.4389 235392.284 2702\r## 1103 -4 6 7.211103 36.814842 16394.449 445.3217 21050.0256 193738.344 2702\r## 1104 -4 7 8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702\r## 1105 -4 8 8.944272 33.025755 15527.864 470.1744 15196.4464 125468.527 2702\r## 1106 -4 9 9.848858 31.129838 15075.571 484.2804 12726.6576 99044.697 2702\r## 1107 -4 10 10.770330 29.256149 14614.835 499.5475 10564.1670 77266.710 2702\r## 1108 -4 11 11.704700 27.415611 14147.650 516.0436 8693.1580 59582.059 2702\r## 1109 -4 12 12.649111 25.616054 13675.445 533.8623 7091.2119 45412.216 2702\r## 1110 -4 13 13.601471 23.863206 13199.265 553.1220 5732.8445 34201.012 2702\r## 1111 -4 14 14.560220 22.161341 12719.890 573.9675 4591.6828 25439.462 2702\r## 1112 -4 15 15.524175 20.513700 12237.913 596.5727 3641.7977 18676.687 2702\r## 1113 -4 16 16.492423 18.922786 11753.789 621.1447 2858.5053 13522.721 2702\r## 1114 -4 17 17.464249 17.390553 11267.875 647.9308 2218.8295 9646.668 2702\r## 1115 -4 18 18.439089 15.918551 10780.456 677.2259 1701.7447 6772.327 2702\r## 1116 -4 19 19.416488 14.508024 10291.756 709.3837 1288.2752 4672.582 2702\r## 1117 -4 20 20.396078 13.159981 9801.961 744.8310 961.5005 3163.332 2702\r## 1118 -4 21 21.377558 11.875245 9311.221 784.0867 706.4989 2097.462 2702\r## 1119 -4 22 22.360680 10.654498 8819.660 827.7875 510.2498 1359.114 2702\r## 1126 -3 -22 22.203603 10.845098 8898.198 820.4811 538.1263 1459.008 2702\r## 1127 -3 -21 21.213203 12.085783 9393.398 777.2271 744.7459 2250.209 2702\r## 1128 -3 -20 20.223748 13.392365 9888.126 738.3405 1013.3410 3392.758 2702\r## 1129 -3 -19 19.235384 14.764445 10382.308 703.1966 1357.7980 5011.783 2702\r## 1130 -3 -18 18.248288 16.201537 10875.856 671.2854 1794.1240 7266.892 2702\r## 1131 -3 -17 17.262677 17.703046 11368.662 642.1868 2340.6032 10358.952 2702\r## 1132 -3 -16 16.278821 19.268232 11860.590 615.5515 3017.9318 14537.553 2702\r## 1133 -3 -15 15.297059 20.896168 12351.471 591.0878 3849.3178 20108.998 2702\r## 1134 -3 -14 14.317821 22.585674 12841.089 568.5502 4860.5224 27444.544 2702\r## 1135 -3 -13 13.341664 24.335226 13329.168 547.7314 6079.8094 36988.385 2702\r## 1136 -3 -12 12.369317 26.142828 13815.342 528.4563 7537.7457 49264.497 2702\r## 1137 -3 -11 11.401754 28.005808 14299.123 510.5771 9266.7642 64880.805 2702\r## 1138 -3 -10 10.440307 29.920522 14779.847 493.9702 11300.3347 84527.979 2702\r## 1139 -3 -9 9.486833 31.881878 15256.584 478.5347 13671.4779 108968.097 2702\r## 1140 -3 -8 8.544004 33.882559 15727.998 464.1916 16410.1449 139004.427 2702\r## 1141 -3 -7 7.615773 35.911735 16192.113 450.8864 19538.5779 175416.057 2702\r## 1142 -3 -6 6.708204 37.952796 16645.898 438.5948 23062.9630 218825.980 2702\r## 1143 -3 -5 5.830952 39.979290 17084.524 427.3344 26958.0844 269441.271 2702\r## 1144 -3 -4 5.000000 41.947435 17500.000 417.1888 31138.6668 326546.799 2702\r## 1145 -3 -3 4.242641 43.782464 17878.680 408.3525 35406.6126 387547.183 2702\r## 1146 -3 -2 3.605551 45.356508 18197.224 401.2043 39364.3079 446356.886 2702\r## 1147 -3 -1 3.162278 46.468094 18418.861 396.3765 42330.0098 491748.719 2702\r## 1148 -3 0 3.000000 46.878399 18500.000 394.6381 43461.2379 509348.309 2702\r## 1149 -3 1 3.162278 46.468094 18418.861 396.3765 42330.0098 491748.719 2702\r## 1150 -3 2 3.605551 45.356508 18197.224 401.2043 39364.3079 446356.886 2702\r## 1151 -3 3 4.242641 43.782464 17878.680 408.3525 35406.6126 387547.183 2702\r## 1152 -3 4 5.000000 41.947435 17500.000 417.1888 31138.6668 326546.799 2702\r## 1153 -3 5 5.830952 39.979290 17084.524 427.3344 26958.0844 269441.271 2702\r## 1154 -3 6 6.708204 37.952796 16645.898 438.5948 23062.9630 218825.980 2702\r## 1155 -3 7 7.615773 35.911735 16192.113 450.8864 19538.5779 175416.057 2702\r## 1156 -3 8 8.544004 33.882559 15727.998 464.1916 16410.1449 139004.427 2702\r## 1157 -3 9 9.486833 31.881878 15256.584 478.5347 13671.4779 108968.097 2702\r## 1158 -3 10 10.440307 29.920522 14779.847 493.9702 11300.3347 84527.979 2702\r## 1159 -3 11 11.401754 28.005808 14299.123 510.5771 9266.7642 64880.805 2702\r## 1160 -3 12 12.369317 26.142828 13815.342 528.4563 7537.7457 49264.497 2702\r## 1161 -3 13 13.341664 24.335226 13329.168 547.7314 6079.8094 36988.385 2702\r## 1162 -3 14 14.317821 22.585674 12841.089 568.5502 4860.5224 27444.544 2702\r## 1163 -3 15 15.297059 20.896168 12351.471 591.0878 3849.3178 20108.998 2702\r## 1164 -3 16 16.278821 19.268232 11860.590 615.5515 3017.9318 14537.553 2702\r## 1165 -3 17 17.262677 17.703046 11368.662 642.1868 2340.6032 10358.952 2702\r## 1166 -3 18 18.248288 16.201537 10875.856 671.2854 1794.1240 7266.892 2702\r## 1167 -3 19 19.235384 14.764445 10382.308 703.1966 1357.7980 5011.783 2702\r## 1168 -3 20 20.223748 13.392365 9888.126 738.3405 1013.3410 3392.758 2702\r## 1169 -3 21 21.213203 12.085783 9393.398 777.2271 744.7459 2250.209 2702\r## 1170 -3 22 22.203603 10.845098 8898.198 820.4811 538.1263 1459.008 2702\r## 1177 -2 -22 22.090722 10.983114 8954.639 815.3097 558.9336 1534.708 2702\r## 1178 -2 -21 21.095023 12.238315 9452.488 772.3685 773.3011 2365.976 2702\r## 1179 -2 -20 20.099751 13.560832 9950.124 733.7400 1052.0655 3566.721 2702\r## 1180 -2 -19 19.104973 14.950482 10447.513 698.8078 1409.7735 5269.198 2702\r## 1181 -2 -18 18.110770 16.407042 10944.615 667.0682 1863.2650 7642.667 2702\r## 1182 -2 -17 17.117243 17.930237 11441.379 638.1053 2431.8785 10901.039 2702\r## 1183 -2 -16 16.124515 19.519726 11937.742 611.5733 3137.6530 15311.531 2702\r## 1184 -2 -15 15.132746 21.175076 12433.627 587.1822 4005.5184 21204.290 2702\r## 1185 -2 -14 14.142136 22.895737 12928.932 564.6873 5063.4633 28982.931 2702\r## 1186 -2 -13 13.152946 24.680990 13423.527 543.8812 6342.6613 39135.790 2702\r## 1187 -2 -12 12.165525 26.529886 13917.237 524.5872 7877.5279 52247.479 2702\r## 1188 -2 -11 11.180340 28.441142 14409.830 506.6544 9705.6556 69009.982 2702\r## 1189 -2 -10 10.198039 30.412982 14900.980 489.9546 11867.5426 90231.839 2702\r## 1190 -2 -9 9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702\r## 1191 -2 -8 8.246211 34.527125 15876.894 459.8383 17364.6109 149887.524 2702\r## 1192 -2 -7 7.280110 36.660045 16359.945 446.2609 20785.6096 190500.345 2702\r## 1193 -2 -6 6.324555 38.832558 16837.722 433.5981 24704.2562 239832.365 2702\r## 1194 -2 -5 5.385165 41.029276 17307.418 421.8309 29138.3770 298881.629 2702\r## 1195 -2 -4 4.472136 43.222264 17763.932 410.9903 34064.8388 368089.867 2702\r## 1196 -2 -3 3.605551 45.356508 18197.224 401.2043 39364.3079 446356.886 2702\r## 1197 -2 -2 2.828427 47.314167 18585.786 392.8165 44684.5488 528553.048 2702\r## 1198 -2 -1 2.236068 48.834161 18881.966 386.6549 49130.9307 599816.949 2702\r## 1199 -2 0 2.000000 49.446609 19000.000 384.2528 51002.7188 630477.872 2702\r## 1200 -2 1 2.236068 48.834161 18881.966 386.6549 49130.9307 599816.949 2702\r## 1201 -2 2 2.828427 47.314167 18585.786 392.8165 44684.5488 528553.048 2702\r## 1202 -2 3 3.605551 45.356508 18197.224 401.2043 39364.3079 446356.886 2702\r## 1203 -2 4 4.472136 43.222264 17763.932 410.9903 34064.8388 368089.867 2702\r## 1204 -2 5 5.385165 41.029276 17307.418 421.8309 29138.3770 298881.629 2702\r## 1205 -2 6 6.324555 38.832558 16837.722 433.5981 24704.2562 239832.365 2702\r## 1206 -2 7 7.280110 36.660045 16359.945 446.2609 20785.6096 190500.345 2702\r## 1207 -2 8 8.246211 34.527125 15876.894 459.8383 17364.6109 149887.524 2702\r## 1208 -2 9 9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702\r## 1209 -2 10 10.198039 30.412982 14900.980 489.9546 11867.5426 90231.839 2702\r## 1210 -2 11 11.180340 28.441142 14409.830 506.6544 9705.6556 69009.982 2702\r## 1211 -2 12 12.165525 26.529886 13917.237 524.5872 7877.5279 52247.479 2702\r## 1212 -2 13 13.152946 24.680990 13423.527 543.8812 6342.6613 39135.790 2702\r## 1213 -2 14 14.142136 22.895737 12928.932 564.6873 5063.4633 28982.931 2702\r## 1214 -2 15 15.132746 21.175076 12433.627 587.1822 4005.5184 21204.290 2702\r## 1215 -2 16 16.124515 19.519726 11937.742 611.5733 3137.6530 15311.531 2702\r## 1216 -2 17 17.117243 17.930237 11441.379 638.1053 2431.8785 10901.039 2702\r## 1217 -2 18 18.110770 16.407042 10944.615 667.0682 1863.2650 7642.667 2702\r## 1218 -2 19 19.104973 14.950482 10447.513 698.8078 1409.7735 5269.198 2702\r## 1219 -2 20 20.099751 13.560832 9950.124 733.7400 1052.0655 3566.721 2702\r## 1220 -2 21 21.095023 12.238315 9452.488 772.3685 773.3011 2365.976 2702\r## 1221 -2 22 22.090722 10.983114 8954.639 815.3097 558.9336 1534.708 2702\r## 1227 -1 -23 23.021729 9.870889 8489.136 860.0174 405.7444 1001.264 2702\r## 1228 -1 -22 22.022716 11.066684 8988.642 812.2255 571.7897 1581.954 2702\r## 1229 -1 -21 21.023796 12.330708 9488.102 769.4694 790.9477 2438.236 2702\r## 1230 -1 -20 20.024984 13.662922 9987.508 730.9936 1076.0056 3675.345 2702\r## 1231 -1 -19 19.026298 15.063279 10486.851 696.1865 1441.9240 5430.026 2702\r## 1232 -1 -18 18.027756 16.531723 10986.122 664.5479 1906.0671 7877.643 2702\r## 1233 -1 -17 17.029386 18.068184 11485.307 635.6647 2488.4409 11240.402 2702\r## 1234 -1 -16 16.031220 19.672574 11984.390 609.1928 3211.9396 15796.780 2702\r## 1235 -1 -15 15.033296 21.344782 12483.352 584.8432 4102.5982 21892.266 2702\r## 1236 -1 -14 14.035669 23.084666 12982.166 562.3718 5189.8474 29951.473 2702\r## 1237 -1 -13 13.038405 24.892040 13480.798 541.5706 6506.7669 40491.675 2702\r## 1238 -1 -12 12.041595 26.766656 13979.203 522.2618 8090.3282 54137.757 2702\r## 1239 -1 -11 11.045361 28.708178 14477.319 504.2925 9981.6118 71638.471 2702\r## 1240 -1 -10 10.049876 30.716136 14975.062 487.5308 12225.9757 93883.683 2702\r## 1241 -1 -9 9.055385 32.789854 15472.307 471.8627 14873.1254 121921.902 2702\r## 1242 -1 -8 8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702\r## 1243 -1 -7 7.071068 37.129971 16464.466 443.4279 21595.2201 200457.476 2702\r## 1244 -1 -6 6.082763 39.392202 16958.619 430.5070 25787.8171 253959.728 2702\r## 1245 -1 -5 5.099020 41.710421 17450.490 418.3724 30613.8194 319228.825 2702\r## 1246 -1 -4 4.123106 44.075678 17938.447 406.9920 36122.7496 398033.671 2702\r## 1247 -1 -3 3.162278 46.468094 18418.861 396.3765 42330.0098 491748.719 2702\r## 1248 -1 -2 2.236068 48.834161 18881.966 386.6549 49130.9307 599816.949 2702\r## 1249 -1 -1 1.414214 50.982841 19292.893 378.4193 55905.6737 712557.517 2702\r## 1250 -1 0 1.000000 52.083305 19500.000 374.4002 59604.5468 776100.445 2702\r## 1251 -1 1 1.414214 50.982841 19292.893 378.4193 55905.6737 712557.517 2702\r## 1252 -1 2 2.236068 48.834161 18881.966 386.6549 49130.9307 599816.949 2702\r## 1253 -1 3 3.162278 46.468094 18418.861 396.3765 42330.0098 491748.719 2702\r## 1254 -1 4 4.123106 44.075678 17938.447 406.9920 36122.7496 398033.671 2702\r## 1255 -1 5 5.099020 41.710421 17450.490 418.3724 30613.8194 319228.825 2702\r## 1256 -1 6 6.082763 39.392202 16958.619 430.5070 25787.8171 253959.728 2702\r## 1257 -1 7 7.071068 37.129971 16464.466 443.4279 21595.2201 200457.476 2702\r## 1258 -1 8 8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702\r## 1259 -1 9 9.055385 32.789854 15472.307 471.8627 14873.1254 121921.902 2702\r## 1260 -1 10 10.049876 30.716136 14975.062 487.5308 12225.9757 93883.683 2702\r## 1261 -1 11 11.045361 28.708178 14477.319 504.2925 9981.6118 71638.471 2702\r## 1262 -1 12 12.041595 26.766656 13979.203 522.2618 8090.3282 54137.757 2702\r## 1263 -1 13 13.038405 24.892040 13480.798 541.5706 6506.7669 40491.675 2702\r## 1264 -1 14 14.035669 23.084666 12982.166 562.3718 5189.8474 29951.473 2702\r## 1265 -1 15 15.033296 21.344782 12483.352 584.8432 4102.5982 21892.266 2702\r## 1266 -1 16 16.031220 19.672574 11984.390 609.1928 3211.9396 15796.780 2702\r## 1267 -1 17 17.029386 18.068184 11485.307 635.6647 2488.4409 11240.402 2702\r## 1268 -1 18 18.027756 16.531723 10986.122 664.5479 1906.0671 7877.643 2702\r## 1269 -1 19 19.026298 15.063279 10486.851 696.1865 1441.9240 5430.026 2702\r## 1270 -1 20 20.024984 13.662922 9987.508 730.9936 1076.0056 3675.345 2702\r## 1271 -1 21 21.023796 12.330708 9488.102 769.4694 790.9477 2438.236 2702\r## 1272 -1 22 22.022716 11.066684 8988.642 812.2255 571.7897 1581.954 2702\r## 1273 -1 23 23.021729 9.870889 8489.136 860.0174 405.7444 1001.264 2702\r## 1278 0 -23 23.000000 9.896170 8500.000 858.9181 408.8700 1011.562 2702\r## 1279 0 -22 22.000000 11.094668 9000.000 811.2004 576.1383 1598.016 2702\r## 1280 0 -21 21.000000 12.361652 9500.000 768.5057 796.9175 2462.804 2702\r## 1281 0 -20 20.000000 13.697122 10000.000 730.0804 1084.1059 3712.283 2702\r## 1282 0 -19 19.000000 15.101077 10500.000 695.3147 1452.8056 5484.732 2702\r## 1283 0 -18 18.000000 16.573517 11000.000 663.7095 1920.5598 7957.608 2702\r## 1284 0 -17 17.000000 18.114443 11500.000 634.8525 2507.6029 11355.958 2702\r## 1285 0 -16 16.000000 19.723855 12000.000 608.4003 3237.1230 15962.136 2702\r## 1286 0 -15 15.000000 21.401752 12500.000 584.0643 4135.5359 22126.929 2702\r## 1287 0 -14 14.000000 23.148135 13000.000 561.6003 5232.7723 30282.230 2702\r## 1288 0 -13 13.000000 24.963004 13500.000 540.8003 6562.5758 40955.402 2702\r## 1289 0 -12 12.000000 26.846358 14000.000 521.4860 8162.8147 54785.462 2702\r## 1290 0 -11 11.000000 28.798198 14500.000 503.5037 10075.8046 72541.254 2702\r## 1291 0 -10 10.000000 30.818524 15000.000 486.7203 12348.6442 95141.745 2702\r## 1292 0 -9 9.000000 32.907335 15500.000 471.0196 15033.5626 123678.619 2702\r## 1293 0 -8 8.000000 35.064631 16000.000 456.3002 18188.2794 159441.328 2702\r## 1294 0 -7 7.000000 37.290413 16500.000 442.4730 21876.3764 203944.781 2702\r## 1295 0 -6 6.000000 39.584681 17000.000 429.4591 26167.6818 258959.837 2702\r## 1296 0 -5 5.000000 41.947435 17500.000 417.1888 31138.6668 326546.799 2702\r## 1297 0 -4 4.000000 44.378674 18000.000 405.6002 36872.8539 409092.090 2702\r## 1298 0 -3 3.000000 46.878399 18500.000 394.6381 43461.2379 509348.309 2702\r## 1299 0 -2 2.000000 49.446609 19000.000 384.2528 51002.7188 630477.872 2702\r## 1300 0 -1 1.000000 52.083305 19500.000 374.4002 59604.5468 776100.445 2702\r## 1301 0 0 0.000000 54.788486 20000.000 365.0402 69382.7798 950344.371 2702\r## 1302 0 1 1.000000 52.083305 19500.000 374.4002 59604.5468 776100.445 2702\r## 1303 0 2 2.000000 49.446609 19000.000 384.2528 51002.7188 630477.872 2702\r## 1304 0 3 3.000000 46.878399 18500.000 394.6381 43461.2379 509348.309 2702\r## 1305 0 4 4.000000 44.378674 18000.000 405.6002 36872.8539 409092.090 2702\r## 1306 0 5 5.000000 41.947435 17500.000 417.1888 31138.6668 326546.799 2702\r## 1307 0 6 6.000000 39.584681 17000.000 429.4591 26167.6818 258959.837 2702\r## 1308 0 7 7.000000 37.290413 16500.000 442.4730 21876.3764 203944.781 2702\r## 1309 0 8 8.000000 35.064631 16000.000 456.3002 18188.2794 159441.328 2702\r## 1310 0 9 9.000000 32.907335 15500.000 471.0196 15033.5626 123678.619 2702\r## 1311 0 10 10.000000 30.818524 15000.000 486.7203 12348.6442 95141.745 2702\r## 1312 0 11 11.000000 28.798198 14500.000 503.5037 10075.8046 72541.254 2702\r## 1313 0 12 12.000000 26.846358 14000.000 521.4860 8162.8147 54785.462 2702\r## 1314 0 13 13.000000 24.963004 13500.000 540.8003 6562.5758 40955.402 2702\r## 1315 0 14 14.000000 23.148135 13000.000 561.6003 5232.7723 30282.230 2702\r## 1316 0 15 15.000000 21.401752 12500.000 584.0643 4135.5359 22126.929 2702\r## 1317 0 16 16.000000 19.723855 12000.000 608.4003 3237.1230 15962.136 2702\r## 1318 0 17 17.000000 18.114443 11500.000 634.8525 2507.6029 11355.958 2702\r## 1319 0 18 18.000000 16.573517 11000.000 663.7095 1920.5598 7957.608 2702\r## 1320 0 19 19.000000 15.101077 10500.000 695.3147 1452.8056 5484.732 2702\r## 1321 0 20 20.000000 13.697122 10000.000 730.0804 1084.1059 3712.283 2702\r## 1322 0 21 21.000000 12.361652 9500.000 768.5057 796.9175 2462.804 2702\r## 1323 0 22 22.000000 11.094668 9000.000 811.2004 576.1383 1598.016 2702\r## 1324 0 23 23.000000 9.896170 8500.000 858.9181 408.8700 1011.562 2702\r## 1329 1 -23 23.021729 9.870889 8489.136 860.0174 405.7444 1001.264 2702\r## 1330 1 -22 22.022716 11.066684 8988.642 812.2255 571.7897 1581.954 2702\r## 1331 1 -21 21.023796 12.330708 9488.102 769.4694 790.9477 2438.236 2702\r## 1332 1 -20 20.024984 13.662922 9987.508 730.9936 1076.0056 3675.345 2702\r## 1333 1 -19 19.026298 15.063279 10486.851 696.1865 1441.9240 5430.026 2702\r## 1334 1 -18 18.027756 16.531723 10986.122 664.5479 1906.0671 7877.643 2702\r## 1335 1 -17 17.029386 18.068184 11485.307 635.6647 2488.4409 11240.402 2702\r## 1336 1 -16 16.031220 19.672574 11984.390 609.1928 3211.9396 15796.780 2702\r## 1337 1 -15 15.033296 21.344782 12483.352 584.8432 4102.5982 21892.266 2702\r## 1338 1 -14 14.035669 23.084666 12982.166 562.3718 5189.8474 29951.473 2702\r## 1339 1 -13 13.038405 24.892040 13480.798 541.5706 6506.7669 40491.675 2702\r## 1340 1 -12 12.041595 26.766656 13979.203 522.2618 8090.3282 54137.757 2702\r## 1341 1 -11 11.045361 28.708178 14477.319 504.2925 9981.6118 71638.471 2702\r## 1342 1 -10 10.049876 30.716136 14975.062 487.5308 12225.9757 93883.683 2702\r## 1343 1 -9 9.055385 32.789854 15472.307 471.8627 14873.1254 121921.902 2702\r## 1344 1 -8 8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702\r## 1345 1 -7 7.071068 37.129971 16464.466 443.4279 21595.2201 200457.476 2702\r## 1346 1 -6 6.082763 39.392202 16958.619 430.5070 25787.8171 253959.728 2702\r## 1347 1 -5 5.099020 41.710421 17450.490 418.3724 30613.8194 319228.825 2702\r## 1348 1 -4 4.123106 44.075678 17938.447 406.9920 36122.7496 398033.671 2702\r## 1349 1 -3 3.162278 46.468094 18418.861 396.3765 42330.0098 491748.719 2702\r## 1350 1 -2 2.236068 48.834161 18881.966 386.6549 49130.9307 599816.949 2702\r## 1351 1 -1 1.414214 50.982841 19292.893 378.4193 55905.6737 712557.517 2702\r## 1352 1 0 1.000000 52.083305 19500.000 374.4002 59604.5468 776100.445 2702\r## 1353 1 1 1.414214 50.982841 19292.893 378.4193 55905.6737 712557.517 2702\r## 1354 1 2 2.236068 48.834161 18881.966 386.6549 49130.9307 599816.949 2702\r## 1355 1 3 3.162278 46.468094 18418.861 396.3765 42330.0098 491748.719 2702\r## 1356 1 4 4.123106 44.075678 17938.447 406.9920 36122.7496 398033.671 2702\r## 1357 1 5 5.099020 41.710421 17450.490 418.3724 30613.8194 319228.825 2702\r## 1358 1 6 6.082763 39.392202 16958.619 430.5070 25787.8171 253959.728 2702\r## 1359 1 7 7.071068 37.129971 16464.466 443.4279 21595.2201 200457.476 2702\r## 1360 1 8 8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702\r## 1361 1 9 9.055385 32.789854 15472.307 471.8627 14873.1254 121921.902 2702\r## 1362 1 10 10.049876 30.716136 14975.062 487.5308 12225.9757 93883.683 2702\r## 1363 1 11 11.045361 28.708178 14477.319 504.2925 9981.6118 71638.471 2702\r## 1364 1 12 12.041595 26.766656 13979.203 522.2618 8090.3282 54137.757 2702\r## 1365 1 13 13.038405 24.892040 13480.798 541.5706 6506.7669 40491.675 2702\r## 1366 1 14 14.035669 23.084666 12982.166 562.3718 5189.8474 29951.473 2702\r## 1367 1 15 15.033296 21.344782 12483.352 584.8432 4102.5982 21892.266 2702\r## 1368 1 16 16.031220 19.672574 11984.390 609.1928 3211.9396 15796.780 2702\r## 1369 1 17 17.029386 18.068184 11485.307 635.6647 2488.4409 11240.402 2702\r## 1370 1 18 18.027756 16.531723 10986.122 664.5479 1906.0671 7877.643 2702\r## 1371 1 19 19.026298 15.063279 10486.851 696.1865 1441.9240 5430.026 2702\r## 1372 1 20 20.024984 13.662922 9987.508 730.9936 1076.0056 3675.345 2702\r## 1373 1 21 21.023796 12.330708 9488.102 769.4694 790.9477 2438.236 2702\r## 1374 1 22 22.022716 11.066684 8988.642 812.2255 571.7897 1581.954 2702\r## 1375 1 23 23.021729 9.870889 8489.136 860.0174 405.7444 1001.264 2702\r## 1381 2 -22 22.090722 10.983114 8954.639 815.3097 558.9336 1534.708 2702\r## 1382 2 -21 21.095023 12.238315 9452.488 772.3685 773.3011 2365.976 2702\r## 1383 2 -20 20.099751 13.560832 9950.124 733.7400 1052.0655 3566.721 2702\r## 1384 2 -19 19.104973 14.950482 10447.513 698.8078 1409.7735 5269.198 2702\r## 1385 2 -18 18.110770 16.407042 10944.615 667.0682 1863.2650 7642.667 2702\r## 1386 2 -17 17.117243 17.930237 11441.379 638.1053 2431.8785 10901.039 2702\r## 1387 2 -16 16.124515 19.519726 11937.742 611.5733 3137.6530 15311.531 2702\r## 1388 2 -15 15.132746 21.175076 12433.627 587.1822 4005.5184 21204.290 2702\r## 1389 2 -14 14.142136 22.895737 12928.932 564.6873 5063.4633 28982.931 2702\r## 1390 2 -13 13.152946 24.680990 13423.527 543.8812 6342.6613 39135.790 2702\r## 1391 2 -12 12.165525 26.529886 13917.237 524.5872 7877.5279 52247.479 2702\r## 1392 2 -11 11.180340 28.441142 14409.830 506.6544 9705.6556 69009.982 2702\r## 1393 2 -10 10.198039 30.412982 14900.980 489.9546 11867.5426 90231.839 2702\r## 1394 2 -9 9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702\r## 1395 2 -8 8.246211 34.527125 15876.894 459.8383 17364.6109 149887.524 2702\r## 1396 2 -7 7.280110 36.660045 16359.945 446.2609 20785.6096 190500.345 2702\r## 1397 2 -6 6.324555 38.832558 16837.722 433.5981 24704.2562 239832.365 2702\r## 1398 2 -5 5.385165 41.029276 17307.418 421.8309 29138.3770 298881.629 2702\r## 1399 2 -4 4.472136 43.222264 17763.932 410.9903 34064.8388 368089.867 2702\r## 1400 2 -3 3.605551 45.356508 18197.224 401.2043 39364.3079 446356.886 2702\r## 1401 2 -2 2.828427 47.314167 18585.786 392.8165 44684.5488 528553.048 2702\r## 1402 2 -1 2.236068 48.834161 18881.966 386.6549 49130.9307 599816.949 2702\r## 1403 2 0 2.000000 49.446609 19000.000 384.2528 51002.7188 630477.872 2702\r## 1404 2 1 2.236068 48.834161 18881.966 386.6549 49130.9307 599816.949 2702\r## 1405 2 2 2.828427 47.314167 18585.786 392.8165 44684.5488 528553.048 2702\r## 1406 2 3 3.605551 45.356508 18197.224 401.2043 39364.3079 446356.886 2702\r## 1407 2 4 4.472136 43.222264 17763.932 410.9903 34064.8388 368089.867 2702\r## 1408 2 5 5.385165 41.029276 17307.418 421.8309 29138.3770 298881.629 2702\r## 1409 2 6 6.324555 38.832558 16837.722 433.5981 24704.2562 239832.365 2702\r## 1410 2 7 7.280110 36.660045 16359.945 446.2609 20785.6096 190500.345 2702\r## 1411 2 8 8.246211 34.527125 15876.894 459.8383 17364.6109 149887.524 2702\r## 1412 2 9 9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702\r## 1413 2 10 10.198039 30.412982 14900.980 489.9546 11867.5426 90231.839 2702\r## 1414 2 11 11.180340 28.441142 14409.830 506.6544 9705.6556 69009.982 2702\r## 1415 2 12 12.165525 26.529886 13917.237 524.5872 7877.5279 52247.479 2702\r## 1416 2 13 13.152946 24.680990 13423.527 543.8812 6342.6613 39135.790 2702\r## 1417 2 14 14.142136 22.895737 12928.932 564.6873 5063.4633 28982.931 2702\r## 1418 2 15 15.132746 21.175076 12433.627 587.1822 4005.5184 21204.290 2702\r## 1419 2 16 16.124515 19.519726 11937.742 611.5733 3137.6530 15311.531 2702\r## 1420 2 17 17.117243 17.930237 11441.379 638.1053 2431.8785 10901.039 2702\r## 1421 2 18 18.110770 16.407042 10944.615 667.0682 1863.2650 7642.667 2702\r## 1422 2 19 19.104973 14.950482 10447.513 698.8078 1409.7735 5269.198 2702\r## 1423 2 20 20.099751 13.560832 9950.124 733.7400 1052.0655 3566.721 2702\r## 1424 2 21 21.095023 12.238315 9452.488 772.3685 773.3011 2365.976 2702\r## 1425 2 22 22.090722 10.983114 8954.639 815.3097 558.9336 1534.708 2702\r## 1432 3 -22 22.203603 10.845098 8898.198 820.4811 538.1263 1459.008 2702\r## 1433 3 -21 21.213203 12.085783 9393.398 777.2271 744.7459 2250.209 2702\r## 1434 3 -20 20.223748 13.392365 9888.126 738.3405 1013.3410 3392.758 2702\r## 1435 3 -19 19.235384 14.764445 10382.308 703.1966 1357.7980 5011.783 2702\r## 1436 3 -18 18.248288 16.201537 10875.856 671.2854 1794.1240 7266.892 2702\r## 1437 3 -17 17.262677 17.703046 11368.662 642.1868 2340.6032 10358.952 2702\r## 1438 3 -16 16.278821 19.268232 11860.590 615.5515 3017.9318 14537.553 2702\r## 1439 3 -15 15.297059 20.896168 12351.471 591.0878 3849.3178 20108.998 2702\r## 1440 3 -14 14.317821 22.585674 12841.089 568.5502 4860.5224 27444.544 2702\r## 1441 3 -13 13.341664 24.335226 13329.168 547.7314 6079.8094 36988.385 2702\r## 1442 3 -12 12.369317 26.142828 13815.342 528.4563 7537.7457 49264.497 2702\r## 1443 3 -11 11.401754 28.005808 14299.123 510.5771 9266.7642 64880.805 2702\r## 1444 3 -10 10.440307 29.920522 14779.847 493.9702 11300.3347 84527.979 2702\r## 1445 3 -9 9.486833 31.881878 15256.584 478.5347 13671.4779 108968.097 2702\r## 1446 3 -8 8.544004 33.882559 15727.998 464.1916 16410.1449 139004.427 2702\r## 1447 3 -7 7.615773 35.911735 16192.113 450.8864 19538.5779 175416.057 2702\r## 1448 3 -6 6.708204 37.952796 16645.898 438.5948 23062.9630 218825.980 2702\r## 1449 3 -5 5.830952 39.979290 17084.524 427.3344 26958.0844 269441.271 2702\r## 1450 3 -4 5.000000 41.947435 17500.000 417.1888 31138.6668 326546.799 2702\r## 1451 3 -3 4.242641 43.782464 17878.680 408.3525 35406.6126 387547.183 2702\r## 1452 3 -2 3.605551 45.356508 18197.224 401.2043 39364.3079 446356.886 2702\r## 1453 3 -1 3.162278 46.468094 18418.861 396.3765 42330.0098 491748.719 2702\r## 1454 3 0 3.000000 46.878399 18500.000 394.6381 43461.2379 509348.309 2702\r## 1455 3 1 3.162278 46.468094 18418.861 396.3765 42330.0098 491748.719 2702\r## 1456 3 2 3.605551 45.356508 18197.224 401.2043 39364.3079 446356.886 2702\r## 1457 3 3 4.242641 43.782464 17878.680 408.3525 35406.6126 387547.183 2702\r## 1458 3 4 5.000000 41.947435 17500.000 417.1888 31138.6668 326546.799 2702\r## 1459 3 5 5.830952 39.979290 17084.524 427.3344 26958.0844 269441.271 2702\r## 1460 3 6 6.708204 37.952796 16645.898 438.5948 23062.9630 218825.980 2702\r## 1461 3 7 7.615773 35.911735 16192.113 450.8864 19538.5779 175416.057 2702\r## 1462 3 8 8.544004 33.882559 15727.998 464.1916 16410.1449 139004.427 2702\r## 1463 3 9 9.486833 31.881878 15256.584 478.5347 13671.4779 108968.097 2702\r## 1464 3 10 10.440307 29.920522 14779.847 493.9702 11300.3347 84527.979 2702\r## 1465 3 11 11.401754 28.005808 14299.123 510.5771 9266.7642 64880.805 2702\r## 1466 3 12 12.369317 26.142828 13815.342 528.4563 7537.7457 49264.497 2702\r## 1467 3 13 13.341664 24.335226 13329.168 547.7314 6079.8094 36988.385 2702\r## 1468 3 14 14.317821 22.585674 12841.089 568.5502 4860.5224 27444.544 2702\r## 1469 3 15 15.297059 20.896168 12351.471 591.0878 3849.3178 20108.998 2702\r## 1470 3 16 16.278821 19.268232 11860.590 615.5515 3017.9318 14537.553 2702\r## 1471 3 17 17.262677 17.703046 11368.662 642.1868 2340.6032 10358.952 2702\r## 1472 3 18 18.248288 16.201537 10875.856 671.2854 1794.1240 7266.892 2702\r## 1473 3 19 19.235384 14.764445 10382.308 703.1966 1357.7980 5011.783 2702\r## 1474 3 20 20.223748 13.392365 9888.126 738.3405 1013.3410 3392.758 2702\r## 1475 3 21 21.213203 12.085783 9393.398 777.2271 744.7459 2250.209 2702\r## 1476 3 22 22.203603 10.845098 8898.198 820.4811 538.1263 1459.008 2702\r## 1483 4 -22 22.360680 10.654498 8819.660 827.7875 510.2498 1359.114 2702\r## 1484 4 -21 21.377558 11.875245 9311.221 784.0867 706.4989 2097.462 2702\r## 1485 4 -20 20.396078 13.159981 9801.961 744.8310 961.5005 3163.332 2702\r## 1486 4 -19 19.416488 14.508024 10291.756 709.3837 1288.2752 4672.582 2702\r## 1487 4 -18 18.439089 15.918551 10780.456 677.2259 1701.7447 6772.327 2702\r## 1488 4 -17 17.464249 17.390553 11267.875 647.9308 2218.8295 9646.668 2702\r## 1489 4 -16 16.492423 18.922786 11753.789 621.1447 2858.5053 13522.721 2702\r## 1490 4 -15 15.524175 20.513700 12237.913 596.5727 3641.7977 18676.687 2702\r## 1491 4 -14 14.560220 22.161341 12719.890 573.9675 4591.6828 25439.462 2702\r## 1492 4 -13 13.601471 23.863206 13199.265 553.1220 5732.8445 34201.012 2702\r## 1493 4 -12 12.649111 25.616054 13675.445 533.8623 7091.2119 45412.216 2702\r## 1494 4 -11 11.704700 27.415611 14147.650 516.0436 8693.1580 59582.059 2702\r## 1495 4 -10 10.770330 29.256149 14614.835 499.5475 10564.1670 77266.710 2702\r## 1496 4 -9 9.848858 31.129838 15075.571 484.2804 12726.6576 99044.697 2702\r## 1497 4 -8 8.944272 33.025755 15527.864 470.1744 15196.4464 125468.527 2702\r## 1498 4 -7 8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702\r## 1499 4 -6 7.211103 36.814842 16394.449 445.3217 21050.0256 193738.344 2702\r## 1500 4 -5 6.403124 38.651567 16798.438 434.6121 24360.4389 235392.284 2702\r## 1501 4 -4 5.656854 40.387732 17171.573 425.1680 27792.7926 280621.964 2702\r## 1502 4 -3 5.000000 41.947435 17500.000 417.1888 31138.6668 326546.799 2702\r## 1503 4 -2 4.472136 43.222264 17763.932 410.9903 34064.8388 368089.867 2702\r## 1504 4 -1 4.123106 44.075678 17938.447 406.9920 36122.7496 398033.671 2702\r## 1505 4 0 4.000000 44.378674 18000.000 405.6002 36872.8539 409092.090 2702\r## 1506 4 1 4.123106 44.075678 17938.447 406.9920 36122.7496 398033.671 2702\r## 1507 4 2 4.472136 43.222264 17763.932 410.9903 34064.8388 368089.867 2702\r## 1508 4 3 5.000000 41.947435 17500.000 417.1888 31138.6668 326546.799 2702\r## 1509 4 4 5.656854 40.387732 17171.573 425.1680 27792.7926 280621.964 2702\r## 1510 4 5 6.403124 38.651567 16798.438 434.6121 24360.4389 235392.284 2702\r## 1511 4 6 7.211103 36.814842 16394.449 445.3217 21050.0256 193738.344 2702\r## 1512 4 7 8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702\r## 1513 4 8 8.944272 33.025755 15527.864 470.1744 15196.4464 125468.527 2702\r## 1514 4 9 9.848858 31.129838 15075.571 484.2804 12726.6576 99044.697 2702\r## 1515 4 10 10.770330 29.256149 14614.835 499.5475 10564.1670 77266.710 2702\r## 1516 4 11 11.704700 27.415611 14147.650 516.0436 8693.1580 59582.059 2702\r## 1517 4 12 12.649111 25.616054 13675.445 533.8623 7091.2119 45412.216 2702\r## 1518 4 13 13.601471 23.863206 13199.265 553.1220 5732.8445 34201.012 2702\r## 1519 4 14 14.560220 22.161341 12719.890 573.9675 4591.6828 25439.462 2702\r## 1520 4 15 15.524175 20.513700 12237.913 596.5727 3641.7977 18676.687 2702\r## 1521 4 16 16.492423 18.922786 11753.789 621.1447 2858.5053 13522.721 2702\r## 1522 4 17 17.464249 17.390553 11267.875 647.9308 2218.8295 9646.668 2702\r## 1523 4 18 18.439089 15.918551 10780.456 677.2259 1701.7447 6772.327 2702\r## 1524 4 19 19.416488 14.508024 10291.756 709.3837 1288.2752 4672.582 2702\r## 1525 4 20 20.396078 13.159981 9801.961 744.8310 961.5005 3163.332 2702\r## 1526 4 21 21.377558 11.875245 9311.221 784.0867 706.4989 2097.462 2702\r## 1527 4 22 22.360680 10.654498 8819.660 827.7875 510.2498 1359.114 2702\r## 1534 5 -22 22.561028 10.413844 8719.486 837.2975 476.4496 1240.418 2702\r## 1535 5 -21 21.587033 11.609589 9206.483 793.0068 660.1375 1915.981 2702\r## 1536 5 -20 20.615528 12.866999 9692.236 753.2631 898.7017 2890.899 2702\r## 1537 5 -19 19.646883 14.185060 10176.559 717.4138 1204.1410 4270.203 2702\r## 1538 5 -18 18.681542 15.562555 10659.229 684.9280 1590.1076 6186.534 2702\r## 1539 5 -17 17.720045 16.998004 11139.977 655.3697 2071.9420 8804.720 2702\r## 1540 5 -16 16.763055 18.489595 11618.473 628.3790 2666.6497 12326.318 2702\r## 1541 5 -15 15.811388 20.035086 12094.306 603.6563 3392.7933 16993.726 2702\r## 1542 5 -14 14.866069 21.631676 12566.966 580.9520 4270.2597 23093.218 2702\r## 1543 5 -13 13.928388 23.275825 13035.806 560.0577 5319.8456 30955.948 2702\r## 1544 5 -12 13.000000 24.963004 13500.000 540.8003 6562.5758 40955.402 2702\r## 1545 5 -11 12.083046 26.687346 13958.477 523.0373 8018.6256 53498.958 2702\r## 1546 5 -10 11.180340 28.441142 14409.830 506.6544 9705.6556 69009.982 2702\r## 1547 5 -9 10.295630 30.214124 14852.185 491.5643 11636.2706 87894.930 2702\r## 1548 5 -8 9.433981 31.992419 15283.009 477.7072 13814.1768 110487.231 2702\r## 1549 5 -7 8.602325 33.757035 15698.837 465.0538 16228.4359 136955.969 2702\r## 1550 5 -6 7.810250 35.481709 16094.875 453.6105 18845.0545 167163.687 2702\r## 1551 5 -5 7.071068 37.129971 16464.466 443.4279 21595.2201 200457.476 2702\r## 1552 5 -4 6.403124 38.651567 16798.438 434.6121 24360.4389 235392.284 2702\r## 1553 5 -3 5.830952 39.979290 17084.524 427.3344 26958.0844 269441.271 2702\r## 1554 5 -2 5.385165 41.029276 17307.418 421.8309 29138.3770 298881.629 2702\r## 1555 5 -1 5.099020 41.710421 17450.490 418.3724 30613.8194 319228.825 2702\r## 1556 5 0 5.000000 41.947435 17500.000 417.1888 31138.6668 326546.799 2702\r## 1557 5 1 5.099020 41.710421 17450.490 418.3724 30613.8194 319228.825 2702\r## 1558 5 2 5.385165 41.029276 17307.418 421.8309 29138.3770 298881.629 2702\r## 1559 5 3 5.830952 39.979290 17084.524 427.3344 26958.0844 269441.271 2702\r## 1560 5 4 6.403124 38.651567 16798.438 434.6121 24360.4389 235392.284 2702\r## 1561 5 5 7.071068 37.129971 16464.466 443.4279 21595.2201 200457.476 2702\r## 1562 5 6 7.810250 35.481709 16094.875 453.6105 18845.0545 167163.687 2702\r## 1563 5 7 8.602325 33.757035 15698.837 465.0538 16228.4359 136955.969 2702\r## 1564 5 8 9.433981 31.992419 15283.009 477.7072 13814.1768 110487.231 2702\r## 1565 5 9 10.295630 30.214124 14852.185 491.5643 11636.2706 87894.930 2702\r## 1566 5 10 11.180340 28.441142 14409.830 506.6544 9705.6556 69009.982 2702\r## 1567 5 11 12.083046 26.687346 13958.477 523.0373 8018.6256 53498.958 2702\r## 1568 5 12 13.000000 24.963004 13500.000 540.8003 6562.5758 40955.402 2702\r## 1569 5 13 13.928388 23.275825 13035.806 560.0577 5319.8456 30955.948 2702\r## 1570 5 14 14.866069 21.631676 12566.966 580.9520 4270.2597 23093.218 2702\r## 1571 5 15 15.811388 20.035086 12094.306 603.6563 3392.7933 16993.726 2702\r## 1572 5 16 16.763055 18.489595 11618.473 628.3790 2666.6497 12326.318 2702\r## 1573 5 17 17.720045 16.998004 11139.977 655.3697 2071.9420 8804.720 2702\r## 1574 5 18 18.681542 15.562555 10659.229 684.9280 1590.1076 6186.534 2702\r## 1575 5 19 19.646883 14.185060 10176.559 717.4138 1204.1410 4270.203 2702\r## 1576 5 20 20.615528 12.866999 9692.236 753.2631 898.7017 2890.899 2702\r## 1577 5 21 21.587033 11.609589 9206.483 793.0068 660.1375 1915.981 2702\r## 1578 5 22 22.561028 10.413844 8719.486 837.2975 476.4496 1240.418 2702\r## 1585 6 -22 22.803509 10.126259 8598.246 849.1039 438.0572 1108.970 2702\r## 1586 6 -21 21.840330 11.292374 9079.835 804.0679 607.4905 1715.002 2702\r## 1587 6 -20 20.880613 12.517490 9559.693 763.7069 827.4381 2589.362 2702\r## 1588 6 -19 19.924859 13.800237 10037.571 727.3477 1108.7749 3825.339 2702\r## 1589 6 -18 18.973666 15.138974 10513.167 694.4438 1463.7709 5539.997 2702\r## 1590 6 -17 18.027756 16.531723 10986.122 664.5479 1906.0671 7877.643 2702\r## 1591 6 -16 17.088007 17.976082 11455.996 637.2911 2450.5801 11012.957 2702\r## 1592 6 -15 16.155494 19.469104 11922.253 612.3678 3113.3051 15153.315 2702\r## 1593 6 -14 15.231546 21.007149 12384.227 589.5244 3910.9758 20539.612 2702\r## 1594 6 -13 14.317821 22.585674 12841.089 568.5502 4860.5224 27444.544 2702\r## 1595 6 -12 13.416408 24.198957 13291.796 549.2714 5978.2454 36166.826 2702\r## 1596 6 -11 12.529964 25.839718 13735.018 531.5467 7278.5876 47019.163 2702\r## 1597 6 -10 11.661904 27.498605 14169.048 515.2643 8772.3464 60306.822 2702\r## 1598 6 -9 10.816654 29.163490 14591.673 500.3404 10464.1093 76292.487 2702\r## 1599 6 -8 10.000000 30.818524 15000.000 486.7203 12348.6442 95141.745 2702\r## 1600 6 -7 9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702\r## 1601 6 -6 8.485281 34.009182 15757.359 463.3266 16594.8126 141094.001 2702\r## 1602 6 -5 7.810250 35.481709 16094.875 453.6105 18845.0545 167163.687 2702\r## 1603 6 -4 7.211103 36.814842 16394.449 445.3217 21050.0256 193738.344 2702\r## 1604 6 -3 6.708204 37.952796 16645.898 438.5948 23062.9630 218825.980 2702\r## 1605 6 -2 6.324555 38.832558 16837.722 433.5981 24704.2562 239832.365 2702\r## 1606 6 -1 6.082763 39.392202 16958.619 430.5070 25787.8171 253959.728 2702\r## 1607 6 0 6.000000 39.584681 17000.000 429.4591 26167.6818 258959.837 2702\r## 1608 6 1 6.082763 39.392202 16958.619 430.5070 25787.8171 253959.728 2702\r## 1609 6 2 6.324555 38.832558 16837.722 433.5981 24704.2562 239832.365 2702\r## 1610 6 3 6.708204 37.952796 16645.898 438.5948 23062.9630 218825.980 2702\r## 1611 6 4 7.211103 36.814842 16394.449 445.3217 21050.0256 193738.344 2702\r## 1612 6 5 7.810250 35.481709 16094.875 453.6105 18845.0545 167163.687 2702\r## 1613 6 6 8.485281 34.009182 15757.359 463.3266 16594.8126 141094.001 2702\r## 1614 6 7 9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702\r## 1615 6 8 10.000000 30.818524 15000.000 486.7203 12348.6442 95141.745 2702\r## 1616 6 9 10.816654 29.163490 14591.673 500.3404 10464.1093 76292.487 2702\r## 1617 6 10 11.661904 27.498605 14169.048 515.2643 8772.3464 60306.822 2702\r## 1618 6 11 12.529964 25.839718 13735.018 531.5467 7278.5876 47019.163 2702\r## 1619 6 12 13.416408 24.198957 13291.796 549.2714 5978.2454 36166.826 2702\r## 1620 6 13 14.317821 22.585674 12841.089 568.5502 4860.5224 27444.544 2702\r## 1621 6 14 15.231546 21.007149 12384.227 589.5244 3910.9758 20539.612 2702\r## 1622 6 15 16.155494 19.469104 11922.253 612.3678 3113.3051 15153.315 2702\r## 1623 6 16 17.088007 17.976082 11455.996 637.2911 2450.5801 11012.957 2702\r## 1624 6 17 18.027756 16.531723 10986.122 664.5479 1906.0671 7877.643 2702\r## 1625 6 18 18.973666 15.138974 10513.167 694.4438 1463.7709 5539.997 2702\r## 1626 6 19 19.924859 13.800237 10037.571 727.3477 1108.7749 3825.339 2702\r## 1627 6 20 20.880613 12.517490 9559.693 763.7069 827.4381 2589.362 2702\r## 1628 6 21 21.840330 11.292374 9079.835 804.0679 607.4905 1715.002 2702\r## 1629 6 22 22.803509 10.126259 8598.246 849.1039 438.0572 1108.970 2702\r## 1637 7 -21 22.135944 10.927718 8932.028 817.3736 550.5189 1503.979 2702\r## 1638 7 -20 21.189620 12.116145 9405.190 776.2527 750.3729 2272.907 2702\r## 1639 7 -19 20.248457 13.358921 9875.772 739.2642 1005.7683 3358.995 2702\r## 1640 7 -18 19.313208 14.653981 10343.396 705.8421 1327.5493 4863.470 2702\r## 1641 7 -17 18.384776 15.998851 10807.612 675.5243 1727.6277 6910.014 2702\r## 1642 7 -16 17.464249 17.390553 11267.875 647.9308 2218.8295 9646.668 2702\r## 1643 7 -15 16.552945 18.825474 11723.527 622.7481 2814.6314 13246.692 2702\r## 1644 7 -14 15.652476 20.299200 12173.762 599.7163 3528.7475 17907.688 2702\r## 1645 7 -13 14.764823 21.806302 12617.588 578.6212 4374.5146 23847.997 2702\r## 1646 7 -12 13.892444 23.340049 13053.778 559.2867 5364.0036 31299.026 2702\r## 1647 7 -11 13.038405 24.892040 13480.798 541.5706 6506.7669 40491.675 2702\r## 1648 7 -10 12.206556 26.451729 13896.722 525.3616 7808.1110 51634.508 2702\r## 1649 7 -9 11.401754 28.005808 14299.123 510.5771 9266.7642 64880.805 2702\r## 1650 7 -8 10.630146 29.537443 14684.927 497.1631 10871.8259 80281.485 2702\r## 1651 7 -7 9.899495 31.025364 15050.253 485.0951 12598.9527 97721.773 2702\r## 1652 7 -6 9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702\r## 1653 7 -5 8.602325 33.757035 15698.837 465.0538 16228.4359 136955.969 2702\r## 1654 7 -4 8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702\r## 1655 7 -3 7.615773 35.911735 16192.113 450.8864 19538.5779 175416.057 2702\r## 1656 7 -2 7.280110 36.660045 16359.945 446.2609 20785.6096 190500.345 2702\r## 1657 7 -1 7.071068 37.129971 16464.466 443.4279 21595.2201 200457.476 2702\r## 1658 7 0 7.000000 37.290413 16500.000 442.4730 21876.3764 203944.781 2702\r## 1659 7 1 7.071068 37.129971 16464.466 443.4279 21595.2201 200457.476 2702\r## 1660 7 2 7.280110 36.660045 16359.945 446.2609 20785.6096 190500.345 2702\r## 1661 7 3 7.615773 35.911735 16192.113 450.8864 19538.5779 175416.057 2702\r## 1662 7 4 8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702\r## 1663 7 5 8.602325 33.757035 15698.837 465.0538 16228.4359 136955.969 2702\r## 1664 7 6 9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702\r## 1665 7 7 9.899495 31.025364 15050.253 485.0951 12598.9527 97721.773 2702\r## 1666 7 8 10.630146 29.537443 14684.927 497.1631 10871.8259 80281.485 2702\r## 1667 7 9 11.401754 28.005808 14299.123 510.5771 9266.7642 64880.805 2702\r## 1668 7 10 12.206556 26.451729 13896.722 525.3616 7808.1110 51634.508 2702\r## 1669 7 11 13.038405 24.892040 13480.798 541.5706 6506.7669 40491.675 2702\r## 1670 7 12 13.892444 23.340049 13053.778 559.2867 5364.0036 31299.026 2702\r## 1671 7 13 14.764823 21.806302 12617.588 578.6212 4374.5146 23847.997 2702\r## 1672 7 14 15.652476 20.299200 12173.762 599.7163 3528.7475 17907.688 2702\r## 1673 7 15 16.552945 18.825474 11723.527 622.7481 2814.6314 13246.692 2702\r## 1674 7 16 17.464249 17.390553 11267.875 647.9308 2218.8295 9646.668 2702\r## 1675 7 17 18.384776 15.998851 10807.612 675.5243 1727.6277 6910.014 2702\r## 1676 7 18 19.313208 14.653981 10343.396 705.8421 1327.5493 4863.470 2702\r## 1677 7 19 20.248457 13.358921 9875.772 739.2642 1005.7683 3358.995 2702\r## 1678 7 20 21.189620 12.116145 9405.190 776.2527 750.3729 2272.907 2702\r## 1679 7 21 22.135944 10.927718 8932.028 817.3736 550.5189 1503.979 2702\r## 1688 8 -21 22.472205 10.520197 8763.897 833.0545 491.1967 1291.872 2702\r## 1689 8 -20 21.540659 11.668142 9229.670 791.0146 670.1760 1954.927 2702\r## 1690 8 -19 20.615528 12.866999 9692.236 753.2631 898.7017 2890.899 2702\r## 1691 8 -18 19.697716 14.114293 10151.142 719.2101 1186.2089 4185.625 2702\r## 1692 8 -17 18.788294 15.407086 10605.853 688.3750 1542.9268 5943.001 2702\r## 1693 8 -16 17.888544 16.741872 11055.728 660.3639 1979.6837 8285.903 2702\r## 1694 8 -15 17.000000 18.114443 11500.000 634.8525 2507.6029 11355.958 2702\r## 1695 8 -14 16.124515 19.519726 11937.742 611.5733 3137.6530 15311.531 2702\r## 1696 8 -13 15.264338 20.951562 12367.831 590.3059 3880.0116 20323.076 2702\r## 1697 8 -12 14.422205 22.402450 12788.897 570.8705 4743.1881 26564.759 2702\r## 1698 8 -11 13.601471 23.863206 13199.265 553.1220 5732.8445 34201.012 2702\r## 1699 8 -10 12.806248 25.322558 13596.876 536.9472 6850.2512 43366.470 2702\r## 1700 8 -9 12.041595 26.766656 13979.203 522.2618 8090.3282 54137.757 2702\r## 1701 8 -8 11.313708 28.178517 14343.146 509.0100 9439.2653 66496.124 2702\r## 1702 8 -7 10.630146 29.537443 14684.927 497.1631 10871.8259 80281.485 2702\r## 1703 8 -6 10.000000 30.818524 15000.000 486.7203 12348.6442 95141.745 2702\r## 1704 8 -5 9.433981 31.992419 15283.009 477.7072 13814.1768 110487.231 2702\r## 1705 8 -4 8.944272 33.025755 15527.864 470.1744 15196.4464 125468.527 2702\r## 1706 8 -3 8.544004 33.882559 15727.998 464.1916 16410.1449 139004.427 2702\r## 1707 8 -2 8.246211 34.527125 15876.894 459.8383 17364.6109 149887.524 2702\r## 1708 8 -1 8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702\r## 1709 8 0 8.000000 35.064631 16000.000 456.3002 18188.2794 159441.328 2702\r## 1710 8 1 8.062258 34.928324 15968.871 457.1897 17976.9917 156976.546 2702\r## 1711 8 2 8.246211 34.527125 15876.894 459.8383 17364.6109 149887.524 2702\r## 1712 8 3 8.544004 33.882559 15727.998 464.1916 16410.1449 139004.427 2702\r## 1713 8 4 8.944272 33.025755 15527.864 470.1744 15196.4464 125468.527 2702\r## 1714 8 5 9.433981 31.992419 15283.009 477.7072 13814.1768 110487.231 2702\r## 1715 8 6 10.000000 30.818524 15000.000 486.7203 12348.6442 95141.745 2702\r## 1716 8 7 10.630146 29.537443 14684.927 497.1631 10871.8259 80281.485 2702\r## 1717 8 8 11.313708 28.178517 14343.146 509.0100 9439.2653 66496.124 2702\r## 1718 8 9 12.041595 26.766656 13979.203 522.2618 8090.3282 54137.757 2702\r## 1719 8 10 12.806248 25.322558 13596.876 536.9472 6850.2512 43366.470 2702\r## 1720 8 11 13.601471 23.863206 13199.265 553.1220 5732.8445 34201.012 2702\r## 1721 8 12 14.422205 22.402450 12788.897 570.8705 4743.1881 26564.759 2702\r## 1722 8 13 15.264338 20.951562 12367.831 590.3059 3880.0116 20323.076 2702\r## 1723 8 14 16.124515 19.519726 11937.742 611.5733 3137.6530 15311.531 2702\r## 1724 8 15 17.000000 18.114443 11500.000 634.8525 2507.6029 11355.958 2702\r## 1725 8 16 17.888544 16.741872 11055.728 660.3639 1979.6837 8285.903 2702\r## 1726 8 17 18.788294 15.407086 10605.853 688.3750 1542.9268 5943.001 2702\r## 1727 8 18 19.697716 14.114293 10151.142 719.2101 1186.2089 4185.625 2702\r## 1728 8 19 20.615528 12.866999 9692.236 753.2631 898.7017 2890.899 2702\r## 1729 8 20 21.540659 11.668142 9229.670 791.0146 670.1760 1954.927 2702\r## 1730 8 21 22.472205 10.520197 8763.897 833.0545 491.1967 1291.872 2702\r## 1739 9 -21 22.847319 10.074728 8576.340 851.2727 431.4036 1086.568 2702\r## 1740 9 -20 21.931712 11.179009 9034.144 808.1346 589.3778 1647.165 2702\r## 1741 9 -19 21.023796 12.330708 9488.102 769.4694 790.9477 2438.236 2702\r## 1742 9 -18 20.124612 13.526971 9937.694 734.6578 1044.2043 3531.230 2702\r## 1743 9 -17 19.235384 14.764445 10382.308 703.1966 1357.7980 5011.783 2702\r## 1744 9 -16 18.357560 16.039166 10821.220 674.6748 1740.7208 6979.927 2702\r## 1745 9 -15 17.492856 17.346430 11253.572 648.7544 2201.9838 9549.140 2702\r## 1746 9 -14 16.643317 18.680636 11678.342 625.1576 2750.1650 12843.708 2702\r## 1747 9 -13 15.811388 20.035086 12094.306 603.6563 3392.7933 16993.726 2702\r## 1748 9 -12 15.000000 21.401752 12500.000 584.0643 4135.5359 22126.929 2702\r## 1749 9 -11 14.212670 22.770998 12893.665 566.2319 4981.1541 28356.462 2702\r## 1750 9 -10 13.453624 24.131249 13273.188 550.0415 5928.2047 35763.746 2702\r## 1751 9 -9 12.727922 25.468641 13636.039 535.4050 6969.4920 44375.873 2702\r## 1752 9 -8 12.041595 26.766656 13979.203 522.2618 8090.3282 54137.757 2702\r## 1753 9 -7 11.401754 28.005808 14299.123 510.5771 9266.7642 64880.805 2702\r## 1754 9 -6 10.816654 29.163490 14591.673 500.3404 10464.1093 76292.487 2702\r## 1755 9 -5 10.295630 30.214124 14852.185 491.5643 11636.2706 87894.930 2702\r## 1756 9 -4 9.848858 31.129838 15075.571 484.2804 12726.6576 99044.697 2702\r## 1757 9 -3 9.486833 31.881878 15256.584 478.5347 13671.4779 108968.097 2702\r## 1758 9 -2 9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702\r## 1759 9 -1 9.055385 32.789854 15472.307 471.8627 14873.1254 121921.902 2702\r## 1760 9 0 9.000000 32.907335 15500.000 471.0196 15033.5626 123678.619 2702\r## 1761 9 1 9.055385 32.789854 15472.307 471.8627 14873.1254 121921.902 2702\r## 1762 9 2 9.219544 32.442880 15390.228 474.3792 14405.9534 116842.656 2702\r## 1763 9 3 9.486833 31.881878 15256.584 478.5347 13671.4779 108968.097 2702\r## 1764 9 4 9.848858 31.129838 15075.571 484.2804 12726.6576 99044.697 2702\r## 1765 9 5 10.295630 30.214124 14852.185 491.5643 11636.2706 87894.930 2702\r## 1766 9 6 10.816654 29.163490 14591.673 500.3404 10464.1093 76292.487 2702\r## 1767 9 7 11.401754 28.005808 14299.123 510.5771 9266.7642 64880.805 2702\r## 1768 9 8 12.041595 26.766656 13979.203 522.2618 8090.3282 54137.757 2702\r## 1769 9 9 12.727922 25.468641 13636.039 535.4050 6969.4920 44375.873 2702\r## 1770 9 10 13.453624 24.131249 13273.188 550.0415 5928.2047 35763.746 2702\r## 1771 9 11 14.212670 22.770998 12893.665 566.2319 4981.1541 28356.462 2702\r## 1772 9 12 15.000000 21.401752 12500.000 584.0643 4135.5359 22126.929 2702\r## 1773 9 13 15.811388 20.035086 12094.306 603.6563 3392.7933 16993.726 2702\r## 1774 9 14 16.643317 18.680636 11678.342 625.1576 2750.1650 12843.708 2702\r## 1775 9 15 17.492856 17.346430 11253.572 648.7544 2201.9838 9549.140 2702\r## 1776 9 16 18.357560 16.039166 10821.220 674.6748 1740.7208 6979.927 2702\r## 1777 9 17 19.235384 14.764445 10382.308 703.1966 1357.7980 5011.783 2702\r## 1778 9 18 20.124612 13.526971 9937.694 734.6578 1044.2043 3531.230 2702\r## 1779 9 19 21.023796 12.330708 9488.102 769.4694 790.9477 2438.236 2702\r## 1780 9 20 21.931712 11.179009 9034.144 808.1346 589.3778 1647.165 2702\r## 1781 9 21 22.847319 10.074728 8576.340 851.2727 431.4036 1086.568 2702\r## 1791 10 -20 22.360680 10.654498 8819.660 827.7875 510.2498 1359.114 2702\r## 1792 10 -19 21.470911 11.756484 9264.545 788.0370 685.5138 2014.808 2702\r## 1793 10 -18 20.591260 12.899236 9704.370 752.3213 905.4735 2919.979 2702\r## 1794 10 -17 19.723083 14.079044 10138.459 720.1099 1177.3438 4143.969 2702\r## 1795 10 -16 18.867962 15.291570 10566.019 690.9702 1508.4816 5766.763 2702\r## 1796 10 -15 18.027756 16.531723 10986.122 664.5479 1906.0671 7877.643 2702\r## 1797 10 -14 17.204651 17.793518 11397.675 640.5521 2376.6721 10572.340 2702\r## 1798 10 -13 16.401219 19.069901 11799.390 618.7442 2925.6955 13948.181 2702\r## 1799 10 -12 15.620499 20.352555 12189.750 598.9297 3556.6455 18096.706 2702\r## 1800 10 -11 14.866069 21.631676 12566.966 580.9520 4270.2597 23093.218 2702\r## 1801 10 -10 14.142136 22.895737 12928.932 564.6873 5063.4633 28982.931 2702\r## 1802 10 -9 13.453624 24.131249 13273.188 550.0415 5928.2047 35763.746 2702\r## 1803 10 -8 12.806248 25.322558 13596.876 536.9472 6850.2512 43366.470 2702\r## 1804 10 -7 12.206556 26.451729 13896.722 525.3616 7808.1110 51634.508 2702\r## 1805 10 -6 11.661904 27.498605 14169.048 515.2643 8772.3464 60306.822 2702\r## 1806 10 -5 11.180340 28.441142 14409.830 506.6544 9705.6556 69009.982 2702\r## 1807 10 -4 10.770330 29.256149 14614.835 499.5475 10564.1670 77266.710 2702\r## 1808 10 -3 10.440307 29.920522 14779.847 493.9702 11300.3347 84527.979 2702\r## 1809 10 -2 10.198039 30.412982 14900.980 489.9546 11867.5426 90231.839 2702\r## 1810 10 -1 10.049876 30.716136 14975.062 487.5308 12225.9757 93883.683 2702\r## 1811 10 0 10.000000 30.818524 15000.000 486.7203 12348.6442 95141.745 2702\r## 1812 10 1 10.049876 30.716136 14975.062 487.5308 12225.9757 93883.683 2702\r## 1813 10 2 10.198039 30.412982 14900.980 489.9546 11867.5426 90231.839 2702\r## 1814 10 3 10.440307 29.920522 14779.847 493.9702 11300.3347 84527.979 2702\r## 1815 10 4 10.770330 29.256149 14614.835 499.5475 10564.1670 77266.710 2702\r## 1816 10 5 11.180340 28.441142 14409.830 506.6544 9705.6556 69009.982 2702\r## 1817 10 6 11.661904 27.498605 14169.048 515.2643 8772.3464 60306.822 2702\r## 1818 10 7 12.206556 26.451729 13896.722 525.3616 7808.1110 51634.508 2702\r## 1819 10 8 12.806248 25.322558 13596.876 536.9472 6850.2512 43366.470 2702\r## 1820 10 9 13.453624 24.131249 13273.188 550.0415 5928.2047 35763.746 2702\r## 1821 10 10 14.142136 22.895737 12928.932 564.6873 5063.4633 28982.931 2702\r## 1822 10 11 14.866069 21.631676 12566.966 580.9520 4270.2597 23093.218 2702\r## 1823 10 12 15.620499 20.352555 12189.750 598.9297 3556.6455 18096.706 2702\r## 1824 10 13 16.401219 19.069901 11799.390 618.7442 2925.6955 13948.181 2702\r## 1825 10 14 17.204651 17.793518 11397.675 640.5521 2376.6721 10572.340 2702\r## 1826 10 15 18.027756 16.531723 10986.122 664.5479 1906.0671 7877.643 2702\r## 1827 10 16 18.867962 15.291570 10566.019 690.9702 1508.4816 5766.763 2702\r## 1828 10 17 19.723083 14.079044 10138.459 720.1099 1177.3438 4143.969 2702\r## 1829 10 18 20.591260 12.899236 9704.370 752.3213 905.4735 2919.979 2702\r## 1830 10 19 21.470911 11.756484 9264.545 788.0370 685.5138 2014.808 2702\r## 1831 10 20 22.360680 10.654498 8819.660 827.7875 510.2498 1359.114 2702\r## 1842 11 -20 22.825424 10.100464 8587.288 850.1874 434.7182 1097.714 2702\r## 1843 11 -19 21.954498 11.150831 9022.751 809.1550 584.9322 1630.620 2702\r## 1844 11 -18 21.095023 12.238315 9452.488 772.3685 773.3011 2365.976 2702\r## 1845 11 -17 20.248457 13.358921 9875.772 739.2642 1005.7683 3358.995 2702\r## 1846 11 -16 19.416488 14.508024 10291.756 709.3837 1288.2752 4672.582 2702\r## 1847 11 -15 18.601075 15.680259 10699.462 682.3524 1626.4603 6375.829 2702\r## 1848 11 -14 17.804494 16.869392 11097.753 657.8633 2025.2660 8541.251 2702\r## 1849 11 -13 17.029386 18.068184 11485.307 635.6647 2488.4409 11240.402 2702\r## 1850 11 -12 16.278821 19.268232 11860.590 615.5515 3017.9318 14537.553 2702\r## 1851 11 -11 15.556349 20.459804 12221.825 597.3579 3613.1682 18481.178 2702\r## 1852 11 -10 14.866069 21.631676 12566.966 580.9520 4270.2597 23093.218 2702\r## 1853 11 -9 14.212670 22.770998 12893.665 566.2319 4981.1541 28356.462 2702\r## 1854 11 -8 13.601471 23.863206 13199.265 553.1220 5732.8445 34201.012 2702\r## 1855 11 -7 13.038405 24.892040 13480.798 541.5706 6506.7669 40491.675 2702\r## 1856 11 -6 12.529964 25.839718 13735.018 531.5467 7278.5876 47019.163 2702\r## 1857 11 -5 12.083046 26.687346 13958.477 523.0373 8018.6256 53498.958 2702\r## 1858 11 -4 11.704700 27.415611 14147.650 516.0436 8693.1580 59582.059 2702\r## 1859 11 -3 11.401754 28.005808 14299.123 510.5771 9266.7642 64880.805 2702\r## 1860 11 -2 11.180340 28.441142 14409.830 506.6544 9705.6556 69009.982 2702\r## 1861 11 -1 11.045361 28.708178 14477.319 504.2925 9981.6118 71638.471 2702\r## 1862 11 0 11.000000 28.798198 14500.000 503.5037 10075.8046 72541.254 2702\r## 1863 11 1 11.045361 28.708178 14477.319 504.2925 9981.6118 71638.471 2702\r## 1864 11 2 11.180340 28.441142 14409.830 506.6544 9705.6556 69009.982 2702\r## 1865 11 3 11.401754 28.005808 14299.123 510.5771 9266.7642 64880.805 2702\r## 1866 11 4 11.704700 27.415611 14147.650 516.0436 8693.1580 59582.059 2702\r## 1867 11 5 12.083046 26.687346 13958.477 523.0373 8018.6256 53498.958 2702\r## 1868 11 6 12.529964 25.839718 13735.018 531.5467 7278.5876 47019.163 2702\r## 1869 11 7 13.038405 24.892040 13480.798 541.5706 6506.7669 40491.675 2702\r## 1870 11 8 13.601471 23.863206 13199.265 553.1220 5732.8445 34201.012 2702\r## 1871 11 9 14.212670 22.770998 12893.665 566.2319 4981.1541 28356.462 2702\r## 1872 11 10 14.866069 21.631676 12566.966 580.9520 4270.2597 23093.218 2702\r## 1873 11 11 15.556349 20.459804 12221.825 597.3579 3613.1682 18481.178 2702\r## 1874 11 12 16.278821 19.268232 11860.590 615.5515 3017.9318 14537.553 2702\r## 1875 11 13 17.029386 18.068184 11485.307 635.6647 2488.4409 11240.402 2702\r## 1876 11 14 17.804494 16.869392 11097.753 657.8633 2025.2660 8541.251 2702\r## 1877 11 15 18.601075 15.680259 10699.462 682.3524 1626.4603 6375.829 2702\r## 1878 11 16 19.416488 14.508024 10291.756 709.3837 1288.2752 4672.582 2702\r## 1879 11 17 20.248457 13.358921 9875.772 739.2642 1005.7683 3358.995 2702\r## 1880 11 18 21.095023 12.238315 9452.488 772.3685 773.3011 2365.976 2702\r## 1881 11 19 21.954498 11.150831 9022.751 809.1550 584.9322 1630.620 2702\r## 1882 11 20 22.825424 10.100464 8587.288 850.1874 434.7182 1097.714 2702\r## 1894 12 -19 22.472205 10.520197 8763.897 833.0545 491.1967 1291.872 2702\r## 1895 12 -18 21.633308 11.551310 9183.346 795.0048 650.2457 1877.797 2702\r## 1896 12 -17 20.808652 12.611893 9595.674 760.8433 846.3006 2668.363 2702\r## 1897 12 -16 20.000000 13.697122 10000.000 730.0804 1084.1059 3712.283 2702\r## 1898 12 -15 19.209373 14.801458 10395.314 702.3169 1368.0353 5062.229 2702\r## 1899 12 -14 18.439089 15.918551 10780.456 677.2259 1701.7447 6772.327 2702\r## 1900 12 -13 17.691806 17.041120 11154.097 654.5401 2087.7487 8894.394 2702\r## 1901 12 -12 16.970563 18.160842 11514.719 634.0410 2526.9212 11472.754 2702\r## 1902 12 -11 16.278821 19.268232 11860.590 615.5515 3017.9318 14537.553 2702\r## 1903 12 -10 15.620499 20.352555 12189.750 598.9297 3556.6455 18096.706 2702\r## 1904 12 -9 15.000000 21.401752 12500.000 584.0643 4135.5359 22126.929 2702\r## 1905 12 -8 14.422205 22.402450 12788.897 570.8705 4743.1881 26564.759 2702\r## 1906 12 -7 13.892444 23.340049 13053.778 559.2867 5364.0036 31299.026 2702\r## 1907 12 -6 13.416408 24.198957 13291.796 549.2714 5978.2454 36166.826 2702\r## 1908 12 -5 13.000000 24.963004 13500.000 540.8003 6562.5758 40955.402 2702\r## 1909 12 -4 12.649111 25.616054 13675.445 533.8623 7091.2119 45412.216 2702\r## 1910 12 -3 12.369317 26.142828 13815.342 528.4563 7537.7457 49264.497 2702\r## 1911 12 -2 12.165525 26.529886 13917.237 524.5872 7877.5279 52247.479 2702\r## 1912 12 -1 12.041595 26.766656 13979.203 522.2618 8090.3282 54137.757 2702\r## 1913 12 0 12.000000 26.846358 14000.000 521.4860 8162.8147 54785.462 2702\r## 1914 12 1 12.041595 26.766656 13979.203 522.2618 8090.3282 54137.757 2702\r## 1915 12 2 12.165525 26.529886 13917.237 524.5872 7877.5279 52247.479 2702\r## 1916 12 3 12.369317 26.142828 13815.342 528.4563 7537.7457 49264.497 2702\r## 1917 12 4 12.649111 25.616054 13675.445 533.8623 7091.2119 45412.216 2702\r## 1918 12 5 13.000000 24.963004 13500.000 540.8003 6562.5758 40955.402 2702\r## 1919 12 6 13.416408 24.198957 13291.796 549.2714 5978.2454 36166.826 2702\r## 1920 12 7 13.892444 23.340049 13053.778 559.2867 5364.0036 31299.026 2702\r## 1921 12 8 14.422205 22.402450 12788.897 570.8705 4743.1881 26564.759 2702\r## 1922 12 9 15.000000 21.401752 12500.000 584.0643 4135.5359 22126.929 2702\r## 1923 12 10 15.620499 20.352555 12189.750 598.9297 3556.6455 18096.706 2702\r## 1924 12 11 16.278821 19.268232 11860.590 615.5515 3017.9318 14537.553 2702\r## 1925 12 12 16.970563 18.160842 11514.719 634.0410 2526.9212 11472.754 2702\r## 1926 12 13 17.691806 17.041120 11154.097 654.5401 2087.7487 8894.394 2702\r## 1927 12 14 18.439089 15.918551 10780.456 677.2259 1701.7447 6772.327 2702\r## 1928 12 15 19.209373 14.801458 10395.314 702.3169 1368.0353 5062.229 2702\r## 1929 12 16 20.000000 13.697122 10000.000 730.0804 1084.1059 3712.283 2702\r## 1930 12 17 20.808652 12.611893 9595.674 760.8433 846.3006 2668.363 2702\r## 1931 12 18 21.633308 11.551310 9183.346 795.0048 650.2457 1877.797 2702\r## 1932 12 19 22.472205 10.520197 8763.897 833.0545 491.1967 1291.872 2702\r## 1945 13 -19 23.021729 9.870889 8489.136 860.0174 405.7444 1001.264 2702\r## 1946 13 -18 22.203603 10.845098 8898.198 820.4811 538.1263 1459.008 2702\r## 1947 13 -17 21.400935 11.845450 9299.533 785.0721 701.1945 2076.491 2702\r## 1948 13 -16 20.615528 12.866999 9692.236 753.2631 898.7017 2890.899 2702\r## 1949 13 -15 19.849433 13.904131 10075.283 724.6252 1134.0060 3941.842 2702\r## 1950 13 -14 19.104973 14.950482 10447.513 698.8078 1409.7735 5269.198 2702\r## 1951 13 -13 18.384776 15.998851 10807.612 675.5243 1727.6277 6910.014 2702\r## 1952 13 -12 17.691806 17.041120 11154.097 654.5401 2087.7487 8894.394 2702\r## 1953 13 -11 17.029386 18.068184 11485.307 635.6647 2488.4409 11240.402 2702\r## 1954 13 -10 16.401219 19.069901 11799.390 618.7442 2925.6955 13948.181 2702\r## 1955 13 -9 15.811388 20.035086 12094.306 603.6563 3392.7933 16993.726 2702\r## 1956 13 -8 15.264338 20.951562 12367.831 590.3059 3880.0116 20323.076 2702\r## 1957 13 -7 14.764823 21.806302 12617.588 578.6212 4374.5146 23847.997 2702\r## 1958 13 -6 14.317821 22.585674 12841.089 568.5502 4860.5224 27444.544 2702\r## 1959 13 -5 13.928388 23.275825 13035.806 560.0577 5319.8456 30955.948 2702\r## 1960 13 -4 13.601471 23.863206 13199.265 553.1220 5732.8445 34201.012 2702\r## 1961 13 -3 13.341664 24.335226 13329.168 547.7314 6079.8094 36988.385 2702\r## 1962 13 -2 13.152946 24.680990 13423.527 543.8812 6342.6613 39135.790 2702\r## 1963 13 -1 13.038405 24.892040 13480.798 541.5706 6506.7669 40491.675 2702\r## 1964 13 0 13.000000 24.963004 13500.000 540.8003 6562.5758 40955.402 2702\r## 1965 13 1 13.038405 24.892040 13480.798 541.5706 6506.7669 40491.675 2702\r## 1966 13 2 13.152946 24.680990 13423.527 543.8812 6342.6613 39135.790 2702\r## 1967 13 3 13.341664 24.335226 13329.168 547.7314 6079.8094 36988.385 2702\r## 1968 13 4 13.601471 23.863206 13199.265 553.1220 5732.8445 34201.012 2702\r## 1969 13 5 13.928388 23.275825 13035.806 560.0577 5319.8456 30955.948 2702\r## 1970 13 6 14.317821 22.585674 12841.089 568.5502 4860.5224 27444.544 2702\r## 1971 13 7 14.764823 21.806302 12617.588 578.6212 4374.5146 23847.997 2702\r## 1972 13 8 15.264338 20.951562 12367.831 590.3059 3880.0116 20323.076 2702\r## 1973 13 9 15.811388 20.035086 12094.306 603.6563 3392.7933 16993.726 2702\r## 1974 13 10 16.401219 19.069901 11799.390 618.7442 2925.6955 13948.181 2702\r## 1975 13 11 17.029386 18.068184 11485.307 635.6647 2488.4409 11240.402 2702\r## 1976 13 12 17.691806 17.041120 11154.097 654.5401 2087.7487 8894.394 2702\r## 1977 13 13 18.384776 15.998851 10807.612 675.5243 1727.6277 6910.014 2702\r## 1978 13 14 19.104973 14.950482 10447.513 698.8078 1409.7735 5269.198 2702\r## 1979 13 15 19.849433 13.904131 10075.283 724.6252 1134.0060 3941.842 2702\r## 1980 13 16 20.615528 12.866999 9692.236 753.2631 898.7017 2890.899 2702\r## 1981 13 17 21.400935 11.845450 9299.533 785.0721 701.1945 2076.491 2702\r## 1982 13 18 22.203603 10.845098 8898.198 820.4811 538.1263 1459.008 2702\r## 1983 13 19 23.021729 9.870889 8489.136 860.0174 405.7444 1001.264 2702\r## 1997 14 -18 22.803509 10.126259 8598.246 849.1039 438.0572 1108.970 2702\r## 1998 14 -17 22.022716 11.066684 8988.642 812.2255 571.7897 1581.954 2702\r## 1999 14 -16 21.260292 12.025274 9369.854 779.1801 733.6159 2205.483 2702\r## 2000 14 -15 20.518285 12.996419 9740.858 749.5032 926.0937 3008.975 2702\r## 2001 14 -14 19.798990 13.973831 10100.505 722.8157 1151.1456 4021.479 2702\r## 2002 14 -13 19.104973 14.950482 10447.513 698.8078 1409.7735 5269.198 2702\r## 2003 14 -12 18.439089 15.918551 10780.456 677.2259 1701.7447 6772.327 2702\r## 2004 14 -11 17.804494 16.869392 11097.753 657.8633 2025.2660 8541.251 2702\r## 2005 14 -10 17.204651 17.793518 11397.675 640.5521 2376.6721 10572.340 2702\r## 2006 14 -9 16.643317 18.680636 11678.342 625.1576 2750.1650 12843.708 2702\r## 2007 14 -8 16.124515 19.519726 11937.742 611.5733 3137.6530 15311.531 2702\r## 2008 14 -7 15.652476 20.299200 12173.762 599.7163 3528.7475 17907.688 2702\r## 2009 14 -6 15.231546 21.007149 12384.227 589.5244 3910.9758 20539.612 2702\r## 2010 14 -5 14.866069 21.631676 12566.966 580.9520 4270.2597 23093.218 2702\r## 2011 14 -4 14.560220 22.161341 12719.890 573.9675 4591.6828 25439.462 2702\r## 2012 14 -3 14.317821 22.585674 12841.089 568.5502 4860.5224 27444.544 2702\r## 2013 14 -2 14.142136 22.895737 12928.932 564.6873 5063.4633 28982.931 2702\r## 2014 14 -1 14.035669 23.084666 12982.166 562.3718 5189.8474 29951.473 2702\r## 2015 14 0 14.000000 23.148135 13000.000 561.6003 5232.7723 30282.230 2702\r## 2016 14 1 14.035669 23.084666 12982.166 562.3718 5189.8474 29951.473 2702\r## 2017 14 2 14.142136 22.895737 12928.932 564.6873 5063.4633 28982.931 2702\r## 2018 14 3 14.317821 22.585674 12841.089 568.5502 4860.5224 27444.544 2702\r## 2019 14 4 14.560220 22.161341 12719.890 573.9675 4591.6828 25439.462 2702\r## 2020 14 5 14.866069 21.631676 12566.966 580.9520 4270.2597 23093.218 2702\r## 2021 14 6 15.231546 21.007149 12384.227 589.5244 3910.9758 20539.612 2702\r## 2022 14 7 15.652476 20.299200 12173.762 599.7163 3528.7475 17907.688 2702\r## 2023 14 8 16.124515 19.519726 11937.742 611.5733 3137.6530 15311.531 2702\r## 2024 14 9 16.643317 18.680636 11678.342 625.1576 2750.1650 12843.708 2702\r## 2025 14 10 17.204651 17.793518 11397.675 640.5521 2376.6721 10572.340 2702\r## 2026 14 11 17.804494 16.869392 11097.753 657.8633 2025.2660 8541.251 2702\r## 2027 14 12 18.439089 15.918551 10780.456 677.2259 1701.7447 6772.327 2702\r## 2028 14 13 19.104973 14.950482 10447.513 698.8078 1409.7735 5269.198 2702\r## 2029 14 14 19.798990 13.973831 10100.505 722.8157 1151.1456 4021.479 2702\r## 2030 14 15 20.518285 12.996419 9740.858 749.5032 926.0937 3008.975 2702\r## 2031 14 16 21.260292 12.025274 9369.854 779.1801 733.6159 2205.483 2702\r## 2032 14 17 22.022716 11.066684 8988.642 812.2255 571.7897 1581.954 2702\r## 2033 14 18 22.803509 10.126259 8598.246 849.1039 438.0572 1108.970 2702\r## 2049 15 -17 22.671568 10.282243 8664.216 842.6387 458.6140 1178.895 2702\r## 2050 15 -16 21.931712 11.179009 9034.144 808.1346 589.3778 1647.165 2702\r## 2051 15 -15 21.213203 12.085783 9393.398 777.2271 744.7459 2250.209 2702\r## 2052 15 -14 20.518285 12.996419 9740.858 749.5032 926.0937 3008.975 2702\r## 2053 15 -13 19.849433 13.904131 10075.283 724.6252 1134.0060 3941.842 2702\r## 2054 15 -12 19.209373 14.801458 10395.314 702.3169 1368.0353 5062.229 2702\r## 2055 15 -11 18.601075 15.680259 10699.462 682.3524 1626.4603 6375.829 2702\r## 2056 15 -10 18.027756 16.531723 10986.122 664.5479 1906.0671 7877.643 2702\r## 2057 15 -9 17.492856 17.346430 11253.572 648.7544 2201.9838 9549.140 2702\r## 2058 15 -8 17.000000 18.114443 11500.000 634.8525 2507.6029 11355.958 2702\r## 2059 15 -7 16.552945 18.825474 11723.527 622.7481 2814.6314 13246.692 2702\r## 2060 15 -6 16.155494 19.469104 11922.253 612.3678 3113.3051 15153.315 2702\r## 2061 15 -5 15.811388 20.035086 12094.306 603.6563 3392.7933 16993.726 2702\r## 2062 15 -4 15.524175 20.513700 12237.913 596.5727 3641.7977 18676.687 2702\r## 2063 15 -3 15.297059 20.896168 12351.471 591.0878 3849.3178 20108.998 2702\r## 2064 15 -2 15.132746 21.175076 12433.627 587.1822 4005.5184 21204.290 2702\r## 2065 15 -1 15.033296 21.344782 12483.352 584.8432 4102.5982 21892.266 2702\r## 2066 15 0 15.000000 21.401752 12500.000 584.0643 4135.5359 22126.929 2702\r## 2067 15 1 15.033296 21.344782 12483.352 584.8432 4102.5982 21892.266 2702\r## 2068 15 2 15.132746 21.175076 12433.627 587.1822 4005.5184 21204.290 2702\r## 2069 15 3 15.297059 20.896168 12351.471 591.0878 3849.3178 20108.998 2702\r## 2070 15 4 15.524175 20.513700 12237.913 596.5727 3641.7977 18676.687 2702\r## 2071 15 5 15.811388 20.035086 12094.306 603.6563 3392.7933 16993.726 2702\r## 2072 15 6 16.155494 19.469104 11922.253 612.3678 3113.3051 15153.315 2702\r## 2073 15 7 16.552945 18.825474 11723.527 622.7481 2814.6314 13246.692 2702\r## 2074 15 8 17.000000 18.114443 11500.000 634.8525 2507.6029 11355.958 2702\r## 2075 15 9 17.492856 17.346430 11253.572 648.7544 2201.9838 9549.140 2702\r## 2076 15 10 18.027756 16.531723 10986.122 664.5479 1906.0671 7877.643 2702\r## 2077 15 11 18.601075 15.680259 10699.462 682.3524 1626.4603 6375.829 2702\r## 2078 15 12 19.209373 14.801458 10395.314 702.3169 1368.0353 5062.229 2702\r## 2079 15 13 19.849433 13.904131 10075.283 724.6252 1134.0060 3941.842 2702\r## 2080 15 14 20.518285 12.996419 9740.858 749.5032 926.0937 3008.975 2702\r## 2081 15 15 21.213203 12.085783 9393.398 777.2271 744.7459 2250.209 2702\r## 2082 15 16 21.931712 11.179009 9034.144 808.1346 589.3778 1647.165 2702\r## 2083 15 17 22.671568 10.282243 8664.216 842.6387 458.6140 1178.895 2702\r## 2101 16 -16 22.627417 10.334706 8686.292 840.4972 465.6698 1203.140 2702\r## 2102 16 -15 21.931712 11.179009 9034.144 808.1346 589.3778 1647.165 2702\r## 2103 16 -14 21.260292 12.025274 9369.854 779.1801 733.6159 2205.483 2702\r## 2104 16 -13 20.615528 12.866999 9692.236 753.2631 898.7017 2890.899 2702\r## 2105 16 -12 20.000000 13.697122 10000.000 730.0804 1084.1059 3712.283 2702\r## 2106 16 -11 19.416488 14.508024 10291.756 709.3837 1288.2752 4672.582 2702\r## 2107 16 -10 18.867962 15.291570 10566.019 690.9702 1508.4816 5766.763 2702\r## 2108 16 -9 18.357560 16.039166 10821.220 674.6748 1740.7208 6979.927 2702\r## 2109 16 -8 17.888544 16.741872 11055.728 660.3639 1979.6837 8285.903 2702\r## 2110 16 -7 17.464249 17.390553 11267.875 647.9308 2218.8295 9646.668 2702\r## 2111 16 -6 17.088007 17.976082 11455.996 637.2911 2450.5801 11012.957 2702\r## 2112 16 -5 16.763055 18.489595 11618.473 628.3790 2666.6497 12326.318 2702\r## 2113 16 -4 16.492423 18.922786 11753.789 621.1447 2858.5053 13522.721 2702\r## 2114 16 -3 16.278821 19.268232 11860.590 615.5515 3017.9318 14537.553 2702\r## 2115 16 -2 16.124515 19.519726 11937.742 611.5733 3137.6530 15311.531 2702\r## 2116 16 -1 16.031220 19.672574 11984.390 609.1928 3211.9396 15796.780 2702\r## 2117 16 0 16.000000 19.723855 12000.000 608.4003 3237.1230 15962.136 2702\r## 2118 16 1 16.031220 19.672574 11984.390 609.1928 3211.9396 15796.780 2702\r## 2119 16 2 16.124515 19.519726 11937.742 611.5733 3137.6530 15311.531 2702\r## 2120 16 3 16.278821 19.268232 11860.590 615.5515 3017.9318 14537.553 2702\r## 2121 16 4 16.492423 18.922786 11753.789 621.1447 2858.5053 13522.721 2702\r## 2122 16 5 16.763055 18.489595 11618.473 628.3790 2666.6497 12326.318 2702\r## 2123 16 6 17.088007 17.976082 11455.996 637.2911 2450.5801 11012.957 2702\r## 2124 16 7 17.464249 17.390553 11267.875 647.9308 2218.8295 9646.668 2702\r## 2125 16 8 17.888544 16.741872 11055.728 660.3639 1979.6837 8285.903 2702\r## 2126 16 9 18.357560 16.039166 10821.220 674.6748 1740.7208 6979.927 2702\r## 2127 16 10 18.867962 15.291570 10566.019 690.9702 1508.4816 5766.763 2702\r## 2128 16 11 19.416488 14.508024 10291.756 709.3837 1288.2752 4672.582 2702\r## 2129 16 12 20.000000 13.697122 10000.000 730.0804 1084.1059 3712.283 2702\r## 2130 16 13 20.615528 12.866999 9692.236 753.2631 898.7017 2890.899 2702\r## 2131 16 14 21.260292 12.025274 9369.854 779.1801 733.6159 2205.483 2702\r## 2132 16 15 21.931712 11.179009 9034.144 808.1346 589.3778 1647.165 2702\r## 2133 16 16 22.627417 10.334706 8686.292 840.4972 465.6698 1203.140 2702\r## 2153 17 -15 22.671568 10.282243 8664.216 842.6387 458.6140 1178.895 2702\r## 2154 17 -14 22.022716 11.066684 8988.642 812.2255 571.7897 1581.954 2702\r## 2155 17 -13 21.400935 11.845450 9299.533 785.0721 701.1945 2076.491 2702\r## 2156 17 -12 20.808652 12.611893 9595.674 760.8433 846.3006 2668.363 2702\r## 2157 17 -11 20.248457 13.358921 9875.772 739.2642 1005.7683 3358.995 2702\r## 2158 17 -10 19.723083 14.079044 10138.459 720.1099 1177.3438 4143.969 2702\r## 2159 17 -9 19.235384 14.764445 10382.308 703.1966 1357.7980 5011.783 2702\r## 2160 17 -8 18.788294 15.407086 10605.853 688.3750 1542.9268 5943.001 2702\r## 2161 17 -7 18.384776 15.998851 10807.612 675.5243 1727.6277 6910.014 2702\r## 2162 17 -6 18.027756 16.531723 10986.122 664.5479 1906.0671 7877.643 2702\r## 2163 17 -5 17.720045 16.998004 11139.977 655.3697 2071.9420 8804.720 2702\r## 2164 17 -4 17.464249 17.390553 11267.875 647.9308 2218.8295 9646.668 2702\r## 2165 17 -3 17.262677 17.703046 11368.662 642.1868 2340.6032 10358.952 2702\r## 2166 17 -2 17.117243 17.930237 11441.379 638.1053 2431.8785 10901.039 2702\r## 2167 17 -1 17.029386 18.068184 11485.307 635.6647 2488.4409 11240.402 2702\r## 2168 17 0 17.000000 18.114443 11500.000 634.8525 2507.6029 11355.958 2702\r## 2169 17 1 17.029386 18.068184 11485.307 635.6647 2488.4409 11240.402 2702\r## 2170 17 2 17.117243 17.930237 11441.379 638.1053 2431.8785 10901.039 2702\r## 2171 17 3 17.262677 17.703046 11368.662 642.1868 2340.6032 10358.952 2702\r## 2172 17 4 17.464249 17.390553 11267.875 647.9308 2218.8295 9646.668 2702\r## 2173 17 5 17.720045 16.998004 11139.977 655.3697 2071.9420 8804.720 2702\r## 2174 17 6 18.027756 16.531723 10986.122 664.5479 1906.0671 7877.643 2702\r## 2175 17 7 18.384776 15.998851 10807.612 675.5243 1727.6277 6910.014 2702\r## 2176 17 8 18.788294 15.407086 10605.853 688.3750 1542.9268 5943.001 2702\r## 2177 17 9 19.235384 14.764445 10382.308 703.1966 1357.7980 5011.783 2702\r## 2178 17 10 19.723083 14.079044 10138.459 720.1099 1177.3438 4143.969 2702\r## 2179 17 11 20.248457 13.358921 9875.772 739.2642 1005.7683 3358.995 2702\r## 2180 17 12 20.808652 12.611893 9595.674 760.8433 846.3006 2668.363 2702\r## 2181 17 13 21.400935 11.845450 9299.533 785.0721 701.1945 2076.491 2702\r## 2182 17 14 22.022716 11.066684 8988.642 812.2255 571.7897 1581.954 2702\r## 2183 17 15 22.671568 10.282243 8664.216 842.6387 458.6140 1178.895 2702\r## 2205 18 -14 22.803509 10.126259 8598.246 849.1039 438.0572 1108.970 2702\r## 2206 18 -13 22.203603 10.845098 8898.198 820.4811 538.1263 1459.008 2702\r## 2207 18 -12 21.633308 11.551310 9183.346 795.0048 650.2457 1877.797 2702\r## 2208 18 -11 21.095023 12.238315 9452.488 772.3685 773.3011 2365.976 2702\r## 2209 18 -10 20.591260 12.899236 9704.370 752.3213 905.4735 2919.979 2702\r## 2210 18 -9 20.124612 13.526971 9937.694 734.6578 1044.2043 3531.230 2702\r## 2211 18 -8 19.697716 14.114293 10151.142 719.2101 1186.2089 4185.625 2702\r## 2212 18 -7 19.313208 14.653981 10343.396 705.8421 1327.5493 4863.470 2702\r## 2213 18 -6 18.973666 15.138974 10513.167 694.4438 1463.7709 5539.997 2702\r## 2214 18 -5 18.681542 15.562555 10659.229 684.9280 1590.1076 6186.534 2702\r## 2215 18 -4 18.439089 15.918551 10780.456 677.2259 1701.7447 6772.327 2702\r## 2216 18 -3 18.248288 16.201537 10875.856 671.2854 1794.1240 7266.892 2702\r## 2217 18 -2 18.110770 16.407042 10944.615 667.0682 1863.2650 7642.667 2702\r## 2218 18 -1 18.027756 16.531723 10986.122 664.5479 1906.0671 7877.643 2702\r## 2219 18 0 18.000000 16.573517 11000.000 663.7095 1920.5598 7957.608 2702\r## 2220 18 1 18.027756 16.531723 10986.122 664.5479 1906.0671 7877.643 2702\r## 2221 18 2 18.110770 16.407042 10944.615 667.0682 1863.2650 7642.667 2702\r## 2222 18 3 18.248288 16.201537 10875.856 671.2854 1794.1240 7266.892 2702\r## 2223 18 4 18.439089 15.918551 10780.456 677.2259 1701.7447 6772.327 2702\r## 2224 18 5 18.681542 15.562555 10659.229 684.9280 1590.1076 6186.534 2702\r## 2225 18 6 18.973666 15.138974 10513.167 694.4438 1463.7709 5539.997 2702\r## 2226 18 7 19.313208 14.653981 10343.396 705.8421 1327.5493 4863.470 2702\r## 2227 18 8 19.697716 14.114293 10151.142 719.2101 1186.2089 4185.625 2702\r## 2228 18 9 20.124612 13.526971 9937.694 734.6578 1044.2043 3531.230 2702\r## 2229 18 10 20.591260 12.899236 9704.370 752.3213 905.4735 2919.979 2702\r## 2230 18 11 21.095023 12.238315 9452.488 772.3685 773.3011 2365.976 2702\r## 2231 18 12 21.633308 11.551310 9183.346 795.0048 650.2457 1877.797 2702\r## 2232 18 13 22.203603 10.845098 8898.198 820.4811 538.1263 1459.008 2702\r## 2233 18 14 22.803509 10.126259 8598.246 849.1039 438.0572 1108.970 2702\r## 2257 19 -13 23.021729 9.870889 8489.136 860.0174 405.7444 1001.264 2702\r## 2258 19 -12 22.472205 10.520197 8763.897 833.0545 491.1967 1291.872 2702\r## 2259 19 -11 21.954498 11.150831 9022.751 809.1550 584.9322 1630.620 2702\r## 2260 19 -10 21.470911 11.756484 9264.545 788.0370 685.5138 2014.808 2702\r## 2261 19 -9 21.023796 12.330708 9488.102 769.4694 790.9477 2438.236 2702\r## 2262 19 -8 20.615528 12.866999 9692.236 753.2631 898.7017 2890.899 2702\r## 2263 19 -7 20.248457 13.358921 9875.772 739.2642 1005.7683 3358.995 2702\r## 2264 19 -6 19.924859 13.800237 10037.571 727.3477 1108.7749 3825.339 2702\r## 2265 19 -5 19.646883 14.185060 10176.559 717.4138 1204.1410 4270.203 2702\r## 2266 19 -4 19.416488 14.508024 10291.756 709.3837 1288.2752 4672.582 2702\r## 2267 19 -3 19.235384 14.764445 10382.308 703.1966 1357.7980 5011.783 2702\r## 2268 19 -2 19.104973 14.950482 10447.513 698.8078 1409.7735 5269.198 2702\r## 2269 19 -1 19.026298 15.063279 10486.851 696.1865 1441.9240 5430.026 2702\r## 2270 19 0 19.000000 15.101077 10500.000 695.3147 1452.8056 5484.732 2702\r## 2271 19 1 19.026298 15.063279 10486.851 696.1865 1441.9240 5430.026 2702\r## 2272 19 2 19.104973 14.950482 10447.513 698.8078 1409.7735 5269.198 2702\r## 2273 19 3 19.235384 14.764445 10382.308 703.1966 1357.7980 5011.783 2702\r## 2274 19 4 19.416488 14.508024 10291.756 709.3837 1288.2752 4672.582 2702\r## 2275 19 5 19.646883 14.185060 10176.559 717.4138 1204.1410 4270.203 2702\r## 2276 19 6 19.924859 13.800237 10037.571 727.3477 1108.7749 3825.339 2702\r## 2277 19 7 20.248457 13.358921 9875.772 739.2642 1005.7683 3358.995 2702\r## 2278 19 8 20.615528 12.866999 9692.236 753.2631 898.7017 2890.899 2702\r## 2279 19 9 21.023796 12.330708 9488.102 769.4694 790.9477 2438.236 2702\r## 2280 19 10 21.470911 11.756484 9264.545 788.0370 685.5138 2014.808 2702\r## 2281 19 11 21.954498 11.150831 9022.751 809.1550 584.9322 1630.620 2702\r## 2282 19 12 22.472205 10.520197 8763.897 833.0545 491.1967 1291.872 2702\r## 2283 19 13 23.021729 9.870889 8489.136 860.0174 405.7444 1001.264 2702\r## 2310 20 -11 22.825424 10.100464 8587.288 850.1874 434.7182 1097.714 2702\r## 2311 20 -10 22.360680 10.654498 8819.660 827.7875 510.2498 1359.114 2702\r## 2312 20 -9 21.931712 11.179009 9034.144 808.1346 589.3778 1647.165 2702\r## 2313 20 -8 21.540659 11.668142 9229.670 791.0146 670.1760 1954.927 2702\r## 2314 20 -7 21.189620 12.116145 9405.190 776.2527 750.3729 2272.907 2702\r## 2315 20 -6 20.880613 12.517490 9559.693 763.7069 827.4381 2589.362 2702\r## 2316 20 -5 20.615528 12.866999 9692.236 753.2631 898.7017 2890.899 2702\r## 2317 20 -4 20.396078 13.159981 9801.961 744.8310 961.5005 3163.332 2702\r## 2318 20 -3 20.223748 13.392365 9888.126 738.3405 1013.3410 3392.758 2702\r## 2319 20 -2 20.099751 13.560832 9950.124 733.7400 1052.0655 3566.721 2702\r## 2320 20 -1 20.024984 13.662922 9987.508 730.9936 1076.0056 3675.345 2702\r## 2321 20 0 20.000000 13.697122 10000.000 730.0804 1084.1059 3712.283 2702\r## 2322 20 1 20.024984 13.662922 9987.508 730.9936 1076.0056 3675.345 2702\r## 2323 20 2 20.099751 13.560832 9950.124 733.7400 1052.0655 3566.721 2702\r## 2324 20 3 20.223748 13.392365 9888.126 738.3405 1013.3410 3392.758 2702\r## 2325 20 4 20.396078 13.159981 9801.961 744.8310 961.5005 3163.332 2702\r## 2326 20 5 20.615528 12.866999 9692.236 753.2631 898.7017 2890.899 2702\r## 2327 20 6 20.880613 12.517490 9559.693 763.7069 827.4381 2589.362 2702\r## 2328 20 7 21.189620 12.116145 9405.190 776.2527 750.3729 2272.907 2702\r## 2329 20 8 21.540659 11.668142 9229.670 791.0146 670.1760 1954.927 2702\r## 2330 20 9 21.931712 11.179009 9034.144 808.1346 589.3778 1647.165 2702\r## 2331 20 10 22.360680 10.654498 8819.660 827.7875 510.2498 1359.114 2702\r## 2332 20 11 22.825424 10.100464 8587.288 850.1874 434.7182 1097.714 2702\r## 2363 21 -9 22.847319 10.074728 8576.340 851.2727 431.4036 1086.568 2702\r## 2364 21 -8 22.472205 10.520197 8763.897 833.0545 491.1967 1291.872 2702\r## 2365 21 -7 22.135944 10.927718 8932.028 817.3736 550.5189 1503.979 2702\r## 2366 21 -6 21.840330 11.292374 9079.835 804.0679 607.4905 1715.002 2702\r## 2367 21 -5 21.587033 11.609589 9206.483 793.0068 660.1375 1915.981 2702\r## 2368 21 -4 21.377558 11.875245 9311.221 784.0867 706.4989 2097.462 2702\r## 2369 21 -3 21.213203 12.085783 9393.398 777.2271 744.7459 2250.209 2702\r## 2370 21 -2 21.095023 12.238315 9452.488 772.3685 773.3011 2365.976 2702\r## 2371 21 -1 21.023796 12.330708 9488.102 769.4694 790.9477 2438.236 2702\r## 2372 21 0 21.000000 12.361652 9500.000 768.5057 796.9175 2462.804 2702\r## 2373 21 1 21.023796 12.330708 9488.102 769.4694 790.9477 2438.236 2702\r## 2374 21 2 21.095023 12.238315 9452.488 772.3685 773.3011 2365.976 2702\r## 2375 21 3 21.213203 12.085783 9393.398 777.2271 744.7459 2250.209 2702\r## 2376 21 4 21.377558 11.875245 9311.221 784.0867 706.4989 2097.462 2702\r## 2377 21 5 21.587033 11.609589 9206.483 793.0068 660.1375 1915.981 2702\r## 2378 21 6 21.840330 11.292374 9079.835 804.0679 607.4905 1715.002 2702\r## 2379 21 7 22.135944 10.927718 8932.028 817.3736 550.5189 1503.979 2702\r## 2380 21 8 22.472205 10.520197 8763.897 833.0545 491.1967 1291.872 2702\r## 2381 21 9 22.847319 10.074728 8576.340 851.2727 431.4036 1086.568 2702\r## 2417 22 -6 22.803509 10.126259 8598.246 849.1039 438.0572 1108.970 2702\r## 2418 22 -5 22.561028 10.413844 8719.486 837.2975 476.4496 1240.418 2702\r## 2419 22 -4 22.360680 10.654498 8819.660 827.7875 510.2498 1359.114 2702\r## 2420 22 -3 22.203603 10.845098 8898.198 820.4811 538.1263 1459.008 2702\r## 2421 22 -2 22.090722 10.983114 8954.639 815.3097 558.9336 1534.708 2702\r## 2422 22 -1 22.022716 11.066684 8988.642 812.2255 571.7897 1581.954 2702\r## 2423 22 0 22.000000 11.094668 9000.000 811.2004 576.1383 1598.016 2702\r## 2424 22 1 22.022716 11.066684 8988.642 812.2255 571.7897 1581.954 2702\r## 2425 22 2 22.090722 10.983114 8954.639 815.3097 558.9336 1534.708 2702\r## 2426 22 3 22.203603 10.845098 8898.198 820.4811 538.1263 1459.008 2702\r## 2427 22 4 22.360680 10.654498 8819.660 827.7875 510.2498 1359.114 2702\r## 2428 22 5 22.561028 10.413844 8719.486 837.2975 476.4496 1240.418 2702\r## 2429 22 6 22.803509 10.126259 8598.246 849.1039 438.0572 1108.970 2702\r## 2473 23 -1 23.021729 9.870889 8489.136 860.0174 405.7444 1001.264 2702\r## 2474 23 0 23.000000 9.896170 8500.000 858.9181 408.8700 1011.562 2702\r## 2475 23 1 23.021729 9.870889 8489.136 860.0174 405.7444 1001.264 2702\r## n\r## 127 75.48581\r## 128 76.16466\r## 129 75.48581\r## 173 82.54485\r## 174 91.04522\r## 175 98.62431\r## 176 104.93868\r## 177 109.68761\r## 178 112.63664\r## 179 113.63669\r## 180 112.63664\r## 181 109.68761\r## 182 104.93868\r## 183 98.62431\r## 184 91.04522\r## 185 82.54485\r## 221 81.08398\r## 222 94.34134\r## 223 107.76348\r## 224 120.88343\r## 225 133.19179\r## 226 144.16751\r## 227 153.31342\r## 228 160.19321\r## 229 164.46611\r## 230 165.91523\r## 231 164.46611\r## 232 160.19321\r## 233 153.31342\r## 234 144.16751\r## 235 133.19179\r## 236 120.88343\r## 237 107.76348\r## 238 94.34134\r## 239 81.08398\r## 270 81.81127\r## 271 98.62431\r## 272 116.68903\r## 273 135.55775\r## 274 154.66570\r## 275 173.35197\r## 276 190.89250\r## 277 206.54363\r## 278 219.59320\r## 279 229.41435\r## 280 235.51628\r## 281 237.58609\r## 282 235.51628\r## 283 229.41435\r## 284 219.59320\r## 285 206.54363\r## 286 190.89250\r## 287 173.35197\r## 288 154.66570\r## 289 135.55775\r## 290 116.68903\r## 291 98.62431\r## 292 81.81127\r## 319 75.48581\r## 320 94.34134\r## 321 115.66281\r## 322 139.18409\r## 323 164.46611\r## 324 190.89250\r## 325 217.67988\r## 326 243.90533\r## 327 268.55151\r## 328 290.56775\r## 329 308.94300\r## 330 322.78369\r## 331 331.38798\r## 332 334.30749\r## 333 331.38798\r## 334 322.78369\r## 335 308.94300\r## 336 290.56775\r## 337 268.55151\r## 338 243.90533\r## 339 217.67988\r## 340 190.89250\r## 341 164.46611\r## 342 139.18409\r## 343 115.66281\r## 344 94.34134\r## 345 75.48581\r## 369 82.54485\r## 370 104.93868\r## 371 130.86626\r## 372 160.19321\r## 373 192.57167\r## 374 227.41567\r## 375 263.89150\r## 376 300.92834\r## 377 337.25311\r## 378 371.45106\r## 379 402.05068\r## 380 427.62709\r## 381 446.91445\r## 382 458.91461\r## 383 462.98808\r## 384 458.91461\r## 385 446.91445\r## 386 427.62709\r## 387 402.05068\r## 388 371.45106\r## 389 337.25311\r## 390 300.92834\r## 391 263.89150\r## 392 227.41567\r## 393 192.57167\r## 394 160.19321\r## 395 130.86626\r## 396 104.93868\r## 397 82.54485\r## 419 87.08150\r## 420 112.63664\r## 421 142.90549\r## 422 177.97107\r## 423 217.67988\r## 424 261.59204\r## 425 308.94300\r## 426 358.62471\r## 427 409.19393\r## 428 458.91461\r## 429 505.83770\r## 430 547.91762\r## 431 583.15826\r## 432 609.77486\r## 433 626.35309\r## 434 631.98373\r## 435 626.35309\r## 436 609.77486\r## 437 583.15826\r## 438 547.91762\r## 439 505.83770\r## 440 458.91461\r## 441 409.19393\r## 442 358.62471\r## 443 308.94300\r## 444 261.59204\r## 445 217.67988\r## 446 177.97107\r## 447 142.90549\r## 448 112.63664\r## 449 87.08150\r## 469 88.64654\r## 470 116.68903\r## 471 150.64365\r## 472 190.89250\r## 473 237.58609\r## 474 290.56775\r## 475 349.30169\r## 476 412.81421\r## 477 479.65885\r## 478 547.91762\r## 479 615.24920\r## 480 678.99145\r## 481 736.31930\r## 482 784.44950\r## 483 820.87381\r## 484 843.59230\r## 485 851.31393\r## 486 843.59230\r## 487 820.87381\r## 488 784.44950\r## 489 736.31930\r## 490 678.99145\r## 491 615.24920\r## 492 547.91762\r## 493 479.65885\r## 494 412.81421\r## 495 349.30169\r## 496 290.56775\r## 497 237.58609\r## 498 190.89250\r## 499 150.64365\r## 500 116.68903\r## 501 88.64654\r## 519 87.08150\r## 520 116.68903\r## 521 153.31342\r## 522 197.69761\r## 523 250.39284\r## 524 311.66225\r## 525 381.37718\r## 526 458.91461\r## 527 543.06750\r## 528 631.98373\r## 529 723.15121\r## 530 813.44707\r## 531 899.26491\r## 532 976.72535\r## 533 1041.96164\r## 534 1091.45507\r## 535 1122.37888\r## 536 1132.89877\r## 537 1122.37888\r## 538 1091.45507\r## 539 1041.96164\r## 540 976.72535\r## 541 899.26491\r## 542 813.44707\r## 543 723.15121\r## 544 631.98373\r## 545 543.06750\r## 546 458.91461\r## 547 381.37718\r## 548 311.66225\r## 549 250.39284\r## 550 197.69761\r## 551 153.31342\r## 552 116.68903\r## 553 87.08150\r## 569 82.54485\r## 570 112.63664\r## 571 150.64365\r## 572 197.69761\r## 573 254.81363\r## 574 322.78369\r## 575 402.05068\r## 576 492.56826\r## 577 593.65595\r## 578 703.86475\r## 579 820.87381\r## 580 941.44442\r## 581 1061.45923\r## 582 1176.07226\r## 583 1279.98397\r## 584 1367.83628\r## 585 1434.69511\r## 586 1476.55974\r## 587 1490.81750\r## 588 1476.55974\r## 589 1434.69511\r## 590 1367.83628\r## 591 1279.98397\r## 592 1176.07226\r## 593 1061.45923\r## 594 941.44442\r## 595 820.87381\r## 596 703.86475\r## 597 593.65595\r## 598 492.56826\r## 599 402.05068\r## 600 322.78369\r## 601 254.81363\r## 602 197.69761\r## 603 150.64365\r## 604 112.63664\r## 605 82.54485\r## 619 75.48581\r## 620 104.93868\r## 621 142.90549\r## 622 190.89250\r## 623 250.39284\r## 624 322.78369\r## 625 409.19393\r## 626 510.34273\r## 627 626.35309\r## 628 756.55059\r## 629 899.26491\r## 630 1051.66124\r## 631 1209.63829\r## 632 1367.83628\r## 633 1519.79917\r## 634 1658.32327\r## 635 1775.99730\r## 636 1865.89607\r## 637 1922.33969\r## 638 1941.58941\r## 639 1922.33969\r## 640 1865.89607\r## 641 1775.99730\r## 642 1658.32327\r## 643 1519.79917\r## 644 1367.83628\r## 645 1209.63829\r## 646 1051.66124\r## 647 899.26491\r## 648 756.55059\r## 649 626.35309\r## 650 510.34273\r## 651 409.19393\r## 652 322.78369\r## 653 250.39284\r## 654 190.89250\r## 655 142.90549\r## 656 104.93868\r## 657 75.48581\r## 670 94.34134\r## 671 130.86626\r## 672 177.97107\r## 673 237.58609\r## 674 311.66225\r## 675 402.05068\r## 676 510.34273\r## 677 637.66756\r## 678 784.44950\r## 679 950.13362\r## 680 1132.89877\r## 681 1329.39105\r## 682 1534.52714\r## 683 1741.43272\r## 684 1941.58941\r## 685 2125.25582\r## 686 2282.19317\r## 687 2402.65978\r## 688 2478.55085\r## 689 2504.47825\r## 690 2478.55085\r## 691 2402.65978\r## 692 2282.19317\r## 693 2125.25582\r## 694 1941.58941\r## 695 1741.43272\r## 696 1534.52714\r## 697 1329.39105\r## 698 1132.89877\r## 699 950.13362\r## 700 784.44950\r## 701 637.66756\r## 702 510.34273\r## 703 402.05068\r## 704 311.66225\r## 705 237.58609\r## 706 177.97107\r## 707 130.86626\r## 708 94.34134\r## 720 81.81127\r## 721 115.66281\r## 722 160.19321\r## 723 217.67988\r## 724 290.56775\r## 725 381.37718\r## 726 492.56826\r## 727 626.35309\r## 728 784.44950\r## 729 967.77309\r## 730 1176.07226\r## 731 1407.52347\r## 732 1658.32327\r## 733 1922.33969\r## 734 2190.91554\r## 735 2452.94192\r## 736 2695.32522\r## 737 2903.93441\r## 738 3065.01799\r## 739 3166.92754\r## 740 3201.82087\r## 741 3166.92754\r## 742 3065.01799\r## 743 2903.93441\r## 744 2695.32522\r## 745 2452.94192\r## 746 2190.91554\r## 747 1922.33969\r## 748 1658.32327\r## 749 1407.52347\r## 750 1176.07226\r## 751 967.77309\r## 752 784.44950\r## 753 626.35309\r## 754 492.56826\r## 755 381.37718\r## 756 290.56775\r## 757 217.67988\r## 758 160.19321\r## 759 115.66281\r## 760 81.81127\r## 771 98.62431\r## 772 139.18409\r## 773 192.57167\r## 774 261.59204\r## 775 349.30169\r## 776 458.91461\r## 777 593.65595\r## 778 756.55059\r## 779 950.13362\r## 780 1176.07226\r## 781 1434.69511\r## 782 1724.43858\r## 783 2041.24400\r## 784 2377.97697\r## 785 2723.99144\r## 786 3065.01799\r## 787 3383.59576\r## 788 3660.24816\r## 789 3875.47498\r## 790 4012.37446\r## 791 4059.38113\r## 792 4012.37446\r## 793 3875.47498\r## 794 3660.24816\r## 795 3383.59576\r## 796 3065.01799\r## 797 2723.99144\r## 798 2377.97697\r## 799 2041.24400\r## 800 1724.43858\r## 801 1434.69511\r## 802 1176.07226\r## 803 950.13362\r## 804 756.55059\r## 805 593.65595\r## 806 458.91461\r## 807 349.30169\r## 808 261.59204\r## 809 192.57167\r## 810 139.18409\r## 811 98.62431\r## 821 81.08398\r## 822 116.68903\r## 823 164.46611\r## 824 227.41567\r## 825 308.94300\r## 826 412.81421\r## 827 543.06750\r## 828 703.86475\r## 829 899.26491\r## 830 1132.89877\r## 831 1407.52347\r## 832 1724.43858\r## 833 2082.75723\r## 834 2478.55085\r## 835 2903.93441\r## 836 3346.23666\r## 837 3787.50707\r## 838 4204.72336\r## 839 4571.11397\r## 840 4858.88194\r## 841 5043.20496\r## 842 5106.73007\r## 843 5043.20496\r## 844 4858.88194\r## 845 4571.11397\r## 846 4204.72336\r## 847 3787.50707\r## 848 3346.23666\r## 849 2903.93441\r## 850 2478.55085\r## 851 2082.75723\r## 852 1724.43858\r## 853 1407.52347\r## 854 1132.89877\r## 855 899.26491\r## 856 703.86475\r## 857 543.06750\r## 858 412.81421\r## 859 308.94300\r## 860 227.41567\r## 861 164.46611\r## 862 116.68903\r## 863 81.08398\r## 872 94.34134\r## 873 135.55775\r## 874 190.89250\r## 875 263.89150\r## 876 358.62471\r## 877 479.65885\r## 878 631.98373\r## 879 820.87381\r## 880 1051.66124\r## 881 1329.39105\r## 882 1658.32327\r## 883 2041.24400\r## 884 2478.55085\r## 885 2967.09804\r## 886 3498.83594\r## 887 4059.38113\r## 888 4626.82617\r## 889 5171.33955\r## 890 5656.33544\r## 891 6041.98863\r## 892 6291.30192\r## 893 6377.65311\r## 894 6291.30192\r## 895 6041.98863\r## 896 5656.33544\r## 897 5171.33955\r## 898 4626.82617\r## 899 4059.38113\r## 900 3498.83594\r## 901 2967.09804\r## 902 2478.55085\r## 903 2041.24400\r## 904 1658.32327\r## 905 1329.39105\r## 906 1051.66124\r## 907 820.87381\r## 908 631.98373\r## 909 479.65885\r## 910 358.62471\r## 911 263.89150\r## 912 190.89250\r## 913 135.55775\r## 914 94.34134\r## 923 107.76348\r## 924 154.66570\r## 925 217.67988\r## 926 300.92834\r## 927 409.19393\r## 928 547.91762\r## 929 723.15121\r## 930 941.44442\r## 931 1209.63829\r## 932 1534.52714\r## 933 1922.33969\r## 934 2377.97697\r## 935 2903.93441\r## 936 3498.83594\r## 937 4155.54056\r## 938 4858.88194\r## 939 5583.33194\r## 940 6291.30192\r## 941 6933.39242\r## 942 7452.36128\r## 943 7792.10112\r## 944 7910.58543\r## 945 7792.10112\r## 946 7452.36128\r## 947 6933.39242\r## 948 6291.30192\r## 949 5583.33194\r## 950 4858.88194\r## 951 4155.54056\r## 952 3498.83594\r## 953 2903.93441\r## 954 2377.97697\r## 955 1922.33969\r## 956 1534.52714\r## 957 1209.63829\r## 958 941.44442\r## 959 723.15121\r## 960 547.91762\r## 961 409.19393\r## 962 300.92834\r## 963 217.67988\r## 964 154.66570\r## 965 107.76348\r## 973 82.54485\r## 974 120.88343\r## 975 173.35197\r## 976 243.90533\r## 977 337.25311\r## 978 458.91461\r## 979 615.24920\r## 980 813.44707\r## 981 1061.45923\r## 982 1367.83628\r## 983 1741.43272\r## 984 2190.91554\r## 985 2723.99144\r## 986 3346.23666\r## 987 4059.38113\r## 988 4858.88194\r## 989 5730.66582\r## 990 6647.13199\r## 991 7563.08079\r## 992 8413.40171\r## 993 9116.00218\r## 994 9584.16651\r## 995 9749.07620\r## 996 9584.16651\r## 997 9116.00218\r## 998 8413.40171\r## 999 7563.08079\r## 1000 6647.13199\r## 1001 5730.66582\r## 1002 4858.88194\r## 1003 4059.38113\r## 1004 3346.23666\r## 1005 2723.99144\r## 1006 2190.91554\r## 1007 1741.43272\r## 1008 1367.83628\r## 1009 1061.45923\r## 1010 813.44707\r## 1011 615.24920\r## 1012 458.91461\r## 1013 337.25311\r## 1014 243.90533\r## 1015 173.35197\r## 1016 120.88343\r## 1017 82.54485\r## 1024 91.04522\r## 1025 133.19179\r## 1026 190.89250\r## 1027 268.55151\r## 1028 371.45106\r## 1029 505.83770\r## 1030 678.99145\r## 1031 899.26491\r## 1032 1176.07226\r## 1033 1519.79917\r## 1034 1941.58941\r## 1035 2452.94192\r## 1036 3065.01799\r## 1037 3787.50707\r## 1038 4626.82617\r## 1039 5583.33194\r## 1040 6647.13199\r## 1041 7792.10112\r## 1042 8968.15900\r## 1043 10093.48652\r## 1044 11052.15388\r## 1045 11707.77698\r## 1046 11942.28293\r## 1047 11707.77698\r## 1048 11052.15388\r## 1049 10093.48652\r## 1050 8968.15900\r## 1051 7792.10112\r## 1052 6647.13199\r## 1053 5583.33194\r## 1054 4626.82617\r## 1055 3787.50707\r## 1056 3065.01799\r## 1057 2452.94192\r## 1058 1941.58941\r## 1059 1519.79917\r## 1060 1176.07226\r## 1061 899.26491\r## 1062 678.99145\r## 1063 505.83770\r## 1064 371.45106\r## 1065 268.55151\r## 1066 190.89250\r## 1067 133.19179\r## 1068 91.04522\r## 1075 98.62431\r## 1076 144.16751\r## 1077 206.54363\r## 1078 290.56775\r## 1079 402.05068\r## 1080 547.91762\r## 1081 736.31930\r## 1082 976.72535\r## 1083 1279.98397\r## 1084 1658.32327\r## 1085 2125.25582\r## 1086 2695.32522\r## 1087 3383.59576\r## 1088 4204.72336\r## 1089 5171.33955\r## 1090 6291.30192\r## 1091 7563.08079\r## 1092 8968.15900\r## 1093 10459.03356\r## 1094 11942.28293\r## 1095 13261.56363\r## 1096 14200.86960\r## 1097 14545.49653\r## 1098 14200.86960\r## 1099 13261.56363\r## 1100 11942.28293\r## 1101 10459.03356\r## 1102 8968.15900\r## 1103 7563.08079\r## 1104 6291.30192\r## 1105 5171.33955\r## 1106 4204.72336\r## 1107 3383.59576\r## 1108 2695.32522\r## 1109 2125.25582\r## 1110 1658.32327\r## 1111 1279.98397\r## 1112 976.72535\r## 1113 736.31930\r## 1114 547.91762\r## 1115 402.05068\r## 1116 290.56775\r## 1117 206.54363\r## 1118 144.16751\r## 1119 98.62431\r## 1126 104.93868\r## 1127 153.31342\r## 1128 219.59320\r## 1129 308.94300\r## 1130 427.62709\r## 1131 583.15826\r## 1132 784.44950\r## 1133 1041.96164\r## 1134 1367.83628\r## 1135 1775.99730\r## 1136 2282.19317\r## 1137 2903.93441\r## 1138 3660.24816\r## 1139 4571.11397\r## 1140 5656.33544\r## 1141 6933.39242\r## 1142 8413.40171\r## 1143 10093.48652\r## 1144 11942.28293\r## 1145 13872.95942\r## 1146 15698.46046\r## 1147 17086.78821\r## 1148 17620.69825\r## 1149 17086.78821\r## 1150 15698.46046\r## 1151 13872.95942\r## 1152 11942.28293\r## 1153 10093.48652\r## 1154 8413.40171\r## 1155 6933.39242\r## 1156 5656.33544\r## 1157 4571.11397\r## 1158 3660.24816\r## 1159 2903.93441\r## 1160 2282.19317\r## 1161 1775.99730\r## 1162 1367.83628\r## 1163 1041.96164\r## 1164 784.44950\r## 1165 583.15826\r## 1166 427.62709\r## 1167 308.94300\r## 1168 219.59320\r## 1169 153.31342\r## 1170 104.93868\r## 1177 109.68761\r## 1178 160.19321\r## 1179 229.41435\r## 1180 322.78369\r## 1181 446.91445\r## 1182 609.77486\r## 1183 820.87381\r## 1184 1091.45507\r## 1185 1434.69511\r## 1186 1865.89607\r## 1187 2402.65978\r## 1188 3065.01799\r## 1189 3875.47498\r## 1190 4858.88194\r## 1191 6041.98863\r## 1192 7452.36128\r## 1193 9116.00218\r## 1194 11052.15388\r## 1195 13261.56363\r## 1196 15698.46046\r## 1197 18200.67996\r## 1198 20330.66087\r## 1199 21237.14939\r## 1200 20330.66087\r## 1201 18200.67996\r## 1202 15698.46046\r## 1203 13261.56363\r## 1204 11052.15388\r## 1205 9116.00218\r## 1206 7452.36128\r## 1207 6041.98863\r## 1208 4858.88194\r## 1209 3875.47498\r## 1210 3065.01799\r## 1211 2402.65978\r## 1212 1865.89607\r## 1213 1434.69511\r## 1214 1091.45507\r## 1215 820.87381\r## 1216 609.77486\r## 1217 446.91445\r## 1218 322.78369\r## 1219 229.41435\r## 1220 160.19321\r## 1221 109.68761\r## 1227 75.48581\r## 1228 112.63664\r## 1229 164.46611\r## 1230 235.51628\r## 1231 331.38798\r## 1232 458.91461\r## 1233 626.35309\r## 1234 843.59230\r## 1235 1122.37888\r## 1236 1476.55974\r## 1237 1922.33969\r## 1238 2478.55085\r## 1239 3166.92754\r## 1240 4012.37446\r## 1241 5043.20496\r## 1242 6291.30192\r## 1243 7792.10112\r## 1244 9584.16651\r## 1245 11707.77698\r## 1246 14200.86960\r## 1247 17086.78821\r## 1248 20330.66087\r## 1249 23637.55430\r## 1250 25472.01459\r## 1251 23637.55430\r## 1252 20330.66087\r## 1253 17086.78821\r## 1254 14200.86960\r## 1255 11707.77698\r## 1256 9584.16651\r## 1257 7792.10112\r## 1258 6291.30192\r## 1259 5043.20496\r## 1260 4012.37446\r## 1261 3166.92754\r## 1262 2478.55085\r## 1263 1922.33969\r## 1264 1476.55974\r## 1265 1122.37888\r## 1266 843.59230\r## 1267 626.35309\r## 1268 458.91461\r## 1269 331.38798\r## 1270 235.51628\r## 1271 164.46611\r## 1272 112.63664\r## 1273 75.48581\r## 1278 76.16466\r## 1279 113.63669\r## 1280 165.91523\r## 1281 237.58609\r## 1282 334.30749\r## 1283 462.98808\r## 1284 631.98373\r## 1285 851.31393\r## 1286 1132.89877\r## 1287 1490.81750\r## 1288 1941.58941\r## 1289 2504.47825\r## 1290 3201.82087\r## 1291 4059.38113\r## 1292 5106.73007\r## 1293 6377.65311\r## 1294 7910.58543\r## 1295 9749.07620\r## 1296 11942.28293\r## 1297 14545.49653\r## 1298 17620.69825\r## 1299 21237.14939\r## 1300 25472.01459\r## 1301 30411.01987\r## 1302 25472.01459\r## 1303 21237.14939\r## 1304 17620.69825\r## 1305 14545.49653\r## 1306 11942.28293\r## 1307 9749.07620\r## 1308 7910.58543\r## 1309 6377.65311\r## 1310 5106.73007\r## 1311 4059.38113\r## 1312 3201.82087\r## 1313 2504.47825\r## 1314 1941.58941\r## 1315 1490.81750\r## 1316 1132.89877\r## 1317 851.31393\r## 1318 631.98373\r## 1319 462.98808\r## 1320 334.30749\r## 1321 237.58609\r## 1322 165.91523\r## 1323 113.63669\r## 1324 76.16466\r## 1329 75.48581\r## 1330 112.63664\r## 1331 164.46611\r## 1332 235.51628\r## 1333 331.38798\r## 1334 458.91461\r## 1335 626.35309\r## 1336 843.59230\r## 1337 1122.37888\r## 1338 1476.55974\r## 1339 1922.33969\r## 1340 2478.55085\r## 1341 3166.92754\r## 1342 4012.37446\r## 1343 5043.20496\r## 1344 6291.30192\r## 1345 7792.10112\r## 1346 9584.16651\r## 1347 11707.77698\r## 1348 14200.86960\r## 1349 17086.78821\r## 1350 20330.66087\r## 1351 23637.55430\r## 1352 25472.01459\r## 1353 23637.55430\r## 1354 20330.66087\r## 1355 17086.78821\r## 1356 14200.86960\r## 1357 11707.77698\r## 1358 9584.16651\r## 1359 7792.10112\r## 1360 6291.30192\r## 1361 5043.20496\r## 1362 4012.37446\r## 1363 3166.92754\r## 1364 2478.55085\r## 1365 1922.33969\r## 1366 1476.55974\r## 1367 1122.37888\r## 1368 843.59230\r## 1369 626.35309\r## 1370 458.91461\r## 1371 331.38798\r## 1372 235.51628\r## 1373 164.46611\r## 1374 112.63664\r## 1375 75.48581\r## 1381 109.68761\r## 1382 160.19321\r## 1383 229.41435\r## 1384 322.78369\r## 1385 446.91445\r## 1386 609.77486\r## 1387 820.87381\r## 1388 1091.45507\r## 1389 1434.69511\r## 1390 1865.89607\r## 1391 2402.65978\r## 1392 3065.01799\r## 1393 3875.47498\r## 1394 4858.88194\r## 1395 6041.98863\r## 1396 7452.36128\r## 1397 9116.00218\r## 1398 11052.15388\r## 1399 13261.56363\r## 1400 15698.46046\r## 1401 18200.67996\r## 1402 20330.66087\r## 1403 21237.14939\r## 1404 20330.66087\r## 1405 18200.67996\r## 1406 15698.46046\r## 1407 13261.56363\r## 1408 11052.15388\r## 1409 9116.00218\r## 1410 7452.36128\r## 1411 6041.98863\r## 1412 4858.88194\r## 1413 3875.47498\r## 1414 3065.01799\r## 1415 2402.65978\r## 1416 1865.89607\r## 1417 1434.69511\r## 1418 1091.45507\r## 1419 820.87381\r## 1420 609.77486\r## 1421 446.91445\r## 1422 322.78369\r## 1423 229.41435\r## 1424 160.19321\r## 1425 109.68761\r## 1432 104.93868\r## 1433 153.31342\r## 1434 219.59320\r## 1435 308.94300\r## 1436 427.62709\r## 1437 583.15826\r## 1438 784.44950\r## 1439 1041.96164\r## 1440 1367.83628\r## 1441 1775.99730\r## 1442 2282.19317\r## 1443 2903.93441\r## 1444 3660.24816\r## 1445 4571.11397\r## 1446 5656.33544\r## 1447 6933.39242\r## 1448 8413.40171\r## 1449 10093.48652\r## 1450 11942.28293\r## 1451 13872.95942\r## 1452 15698.46046\r## 1453 17086.78821\r## 1454 17620.69825\r## 1455 17086.78821\r## 1456 15698.46046\r## 1457 13872.95942\r## 1458 11942.28293\r## 1459 10093.48652\r## 1460 8413.40171\r## 1461 6933.39242\r## 1462 5656.33544\r## 1463 4571.11397\r## 1464 3660.24816\r## 1465 2903.93441\r## 1466 2282.19317\r## 1467 1775.99730\r## 1468 1367.83628\r## 1469 1041.96164\r## 1470 784.44950\r## 1471 583.15826\r## 1472 427.62709\r## 1473 308.94300\r## 1474 219.59320\r## 1475 153.31342\r## 1476 104.93868\r## 1483 98.62431\r## 1484 144.16751\r## 1485 206.54363\r## 1486 290.56775\r## 1487 402.05068\r## 1488 547.91762\r## 1489 736.31930\r## 1490 976.72535\r## 1491 1279.98397\r## 1492 1658.32327\r## 1493 2125.25582\r## 1494 2695.32522\r## 1495 3383.59576\r## 1496 4204.72336\r## 1497 5171.33955\r## 1498 6291.30192\r## 1499 7563.08079\r## 1500 8968.15900\r## 1501 10459.03356\r## 1502 11942.28293\r## 1503 13261.56363\r## 1504 14200.86960\r## 1505 14545.49653\r## 1506 14200.86960\r## 1507 13261.56363\r## 1508 11942.28293\r## 1509 10459.03356\r## 1510 8968.15900\r## 1511 7563.08079\r## 1512 6291.30192\r## 1513 5171.33955\r## 1514 4204.72336\r## 1515 3383.59576\r## 1516 2695.32522\r## 1517 2125.25582\r## 1518 1658.32327\r## 1519 1279.98397\r## 1520 976.72535\r## 1521 736.31930\r## 1522 547.91762\r## 1523 402.05068\r## 1524 290.56775\r## 1525 206.54363\r## 1526 144.16751\r## 1527 98.62431\r## 1534 91.04522\r## 1535 133.19179\r## 1536 190.89250\r## 1537 268.55151\r## 1538 371.45106\r## 1539 505.83770\r## 1540 678.99145\r## 1541 899.26491\r## 1542 1176.07226\r## 1543 1519.79917\r## 1544 1941.58941\r## 1545 2452.94192\r## 1546 3065.01799\r## 1547 3787.50707\r## 1548 4626.82617\r## 1549 5583.33194\r## 1550 6647.13199\r## 1551 7792.10112\r## 1552 8968.15900\r## 1553 10093.48652\r## 1554 11052.15388\r## 1555 11707.77698\r## 1556 11942.28293\r## 1557 11707.77698\r## 1558 11052.15388\r## 1559 10093.48652\r## 1560 8968.15900\r## 1561 7792.10112\r## 1562 6647.13199\r## 1563 5583.33194\r## 1564 4626.82617\r## 1565 3787.50707\r## 1566 3065.01799\r## 1567 2452.94192\r## 1568 1941.58941\r## 1569 1519.79917\r## 1570 1176.07226\r## 1571 899.26491\r## 1572 678.99145\r## 1573 505.83770\r## 1574 371.45106\r## 1575 268.55151\r## 1576 190.89250\r## 1577 133.19179\r## 1578 91.04522\r## 1585 82.54485\r## 1586 120.88343\r## 1587 173.35197\r## 1588 243.90533\r## 1589 337.25311\r## 1590 458.91461\r## 1591 615.24920\r## 1592 813.44707\r## 1593 1061.45923\r## 1594 1367.83628\r## 1595 1741.43272\r## 1596 2190.91554\r## 1597 2723.99144\r## 1598 3346.23666\r## 1599 4059.38113\r## 1600 4858.88194\r## 1601 5730.66582\r## 1602 6647.13199\r## 1603 7563.08079\r## 1604 8413.40171\r## 1605 9116.00218\r## 1606 9584.16651\r## 1607 9749.07620\r## 1608 9584.16651\r## 1609 9116.00218\r## 1610 8413.40171\r## 1611 7563.08079\r## 1612 6647.13199\r## 1613 5730.66582\r## 1614 4858.88194\r## 1615 4059.38113\r## 1616 3346.23666\r## 1617 2723.99144\r## 1618 2190.91554\r## 1619 1741.43272\r## 1620 1367.83628\r## 1621 1061.45923\r## 1622 813.44707\r## 1623 615.24920\r## 1624 458.91461\r## 1625 337.25311\r## 1626 243.90533\r## 1627 173.35197\r## 1628 120.88343\r## 1629 82.54485\r## 1637 107.76348\r## 1638 154.66570\r## 1639 217.67988\r## 1640 300.92834\r## 1641 409.19393\r## 1642 547.91762\r## 1643 723.15121\r## 1644 941.44442\r## 1645 1209.63829\r## 1646 1534.52714\r## 1647 1922.33969\r## 1648 2377.97697\r## 1649 2903.93441\r## 1650 3498.83594\r## 1651 4155.54056\r## 1652 4858.88194\r## 1653 5583.33194\r## 1654 6291.30192\r## 1655 6933.39242\r## 1656 7452.36128\r## 1657 7792.10112\r## 1658 7910.58543\r## 1659 7792.10112\r## 1660 7452.36128\r## 1661 6933.39242\r## 1662 6291.30192\r## 1663 5583.33194\r## 1664 4858.88194\r## 1665 4155.54056\r## 1666 3498.83594\r## 1667 2903.93441\r## 1668 2377.97697\r## 1669 1922.33969\r## 1670 1534.52714\r## 1671 1209.63829\r## 1672 941.44442\r## 1673 723.15121\r## 1674 547.91762\r## 1675 409.19393\r## 1676 300.92834\r## 1677 217.67988\r## 1678 154.66570\r## 1679 107.76348\r## 1688 94.34134\r## 1689 135.55775\r## 1690 190.89250\r## 1691 263.89150\r## 1692 358.62471\r## 1693 479.65885\r## 1694 631.98373\r## 1695 820.87381\r## 1696 1051.66124\r## 1697 1329.39105\r## 1698 1658.32327\r## 1699 2041.24400\r## 1700 2478.55085\r## 1701 2967.09804\r## 1702 3498.83594\r## 1703 4059.38113\r## 1704 4626.82617\r## 1705 5171.33955\r## 1706 5656.33544\r## 1707 6041.98863\r## 1708 6291.30192\r## 1709 6377.65311\r## 1710 6291.30192\r## 1711 6041.98863\r## 1712 5656.33544\r## 1713 5171.33955\r## 1714 4626.82617\r## 1715 4059.38113\r## 1716 3498.83594\r## 1717 2967.09804\r## 1718 2478.55085\r## 1719 2041.24400\r## 1720 1658.32327\r## 1721 1329.39105\r## 1722 1051.66124\r## 1723 820.87381\r## 1724 631.98373\r## 1725 479.65885\r## 1726 358.62471\r## 1727 263.89150\r## 1728 190.89250\r## 1729 135.55775\r## 1730 94.34134\r## 1739 81.08398\r## 1740 116.68903\r## 1741 164.46611\r## 1742 227.41567\r## 1743 308.94300\r## 1744 412.81421\r## 1745 543.06750\r## 1746 703.86475\r## 1747 899.26491\r## 1748 1132.89877\r## 1749 1407.52347\r## 1750 1724.43858\r## 1751 2082.75723\r## 1752 2478.55085\r## 1753 2903.93441\r## 1754 3346.23666\r## 1755 3787.50707\r## 1756 4204.72336\r## 1757 4571.11397\r## 1758 4858.88194\r## 1759 5043.20496\r## 1760 5106.73007\r## 1761 5043.20496\r## 1762 4858.88194\r## 1763 4571.11397\r## 1764 4204.72336\r## 1765 3787.50707\r## 1766 3346.23666\r## 1767 2903.93441\r## 1768 2478.55085\r## 1769 2082.75723\r## 1770 1724.43858\r## 1771 1407.52347\r## 1772 1132.89877\r## 1773 899.26491\r## 1774 703.86475\r## 1775 543.06750\r## 1776 412.81421\r## 1777 308.94300\r## 1778 227.41567\r## 1779 164.46611\r## 1780 116.68903\r## 1781 81.08398\r## 1791 98.62431\r## 1792 139.18409\r## 1793 192.57167\r## 1794 261.59204\r## 1795 349.30169\r## 1796 458.91461\r## 1797 593.65595\r## 1798 756.55059\r## 1799 950.13362\r## 1800 1176.07226\r## 1801 1434.69511\r## 1802 1724.43858\r## 1803 2041.24400\r## 1804 2377.97697\r## 1805 2723.99144\r## 1806 3065.01799\r## 1807 3383.59576\r## 1808 3660.24816\r## 1809 3875.47498\r## 1810 4012.37446\r## 1811 4059.38113\r## 1812 4012.37446\r## 1813 3875.47498\r## 1814 3660.24816\r## 1815 3383.59576\r## 1816 3065.01799\r## 1817 2723.99144\r## 1818 2377.97697\r## 1819 2041.24400\r## 1820 1724.43858\r## 1821 1434.69511\r## 1822 1176.07226\r## 1823 950.13362\r## 1824 756.55059\r## 1825 593.65595\r## 1826 458.91461\r## 1827 349.30169\r## 1828 261.59204\r## 1829 192.57167\r## 1830 139.18409\r## 1831 98.62431\r## 1842 81.81127\r## 1843 115.66281\r## 1844 160.19321\r## 1845 217.67988\r## 1846 290.56775\r## 1847 381.37718\r## 1848 492.56826\r## 1849 626.35309\r## 1850 784.44950\r## 1851 967.77309\r## 1852 1176.07226\r## 1853 1407.52347\r## 1854 1658.32327\r## 1855 1922.33969\r## 1856 2190.91554\r## 1857 2452.94192\r## 1858 2695.32522\r## 1859 2903.93441\r## 1860 3065.01799\r## 1861 3166.92754\r## 1862 3201.82087\r## 1863 3166.92754\r## 1864 3065.01799\r## 1865 2903.93441\r## 1866 2695.32522\r## 1867 2452.94192\r## 1868 2190.91554\r## 1869 1922.33969\r## 1870 1658.32327\r## 1871 1407.52347\r## 1872 1176.07226\r## 1873 967.77309\r## 1874 784.44950\r## 1875 626.35309\r## 1876 492.56826\r## 1877 381.37718\r## 1878 290.56775\r## 1879 217.67988\r## 1880 160.19321\r## 1881 115.66281\r## 1882 81.81127\r## 1894 94.34134\r## 1895 130.86626\r## 1896 177.97107\r## 1897 237.58609\r## 1898 311.66225\r## 1899 402.05068\r## 1900 510.34273\r## 1901 637.66756\r## 1902 784.44950\r## 1903 950.13362\r## 1904 1132.89877\r## 1905 1329.39105\r## 1906 1534.52714\r## 1907 1741.43272\r## 1908 1941.58941\r## 1909 2125.25582\r## 1910 2282.19317\r## 1911 2402.65978\r## 1912 2478.55085\r## 1913 2504.47825\r## 1914 2478.55085\r## 1915 2402.65978\r## 1916 2282.19317\r## 1917 2125.25582\r## 1918 1941.58941\r## 1919 1741.43272\r## 1920 1534.52714\r## 1921 1329.39105\r## 1922 1132.89877\r## 1923 950.13362\r## 1924 784.44950\r## 1925 637.66756\r## 1926 510.34273\r## 1927 402.05068\r## 1928 311.66225\r## 1929 237.58609\r## 1930 177.97107\r## 1931 130.86626\r## 1932 94.34134\r## 1945 75.48581\r## 1946 104.93868\r## 1947 142.90549\r## 1948 190.89250\r## 1949 250.39284\r## 1950 322.78369\r## 1951 409.19393\r## 1952 510.34273\r## 1953 626.35309\r## 1954 756.55059\r## 1955 899.26491\r## 1956 1051.66124\r## 1957 1209.63829\r## 1958 1367.83628\r## 1959 1519.79917\r## 1960 1658.32327\r## 1961 1775.99730\r## 1962 1865.89607\r## 1963 1922.33969\r## 1964 1941.58941\r## 1965 1922.33969\r## 1966 1865.89607\r## 1967 1775.99730\r## 1968 1658.32327\r## 1969 1519.79917\r## 1970 1367.83628\r## 1971 1209.63829\r## 1972 1051.66124\r## 1973 899.26491\r## 1974 756.55059\r## 1975 626.35309\r## 1976 510.34273\r## 1977 409.19393\r## 1978 322.78369\r## 1979 250.39284\r## 1980 190.89250\r## 1981 142.90549\r## 1982 104.93868\r## 1983 75.48581\r## 1997 82.54485\r## 1998 112.63664\r## 1999 150.64365\r## 2000 197.69761\r## 2001 254.81363\r## 2002 322.78369\r## 2003 402.05068\r## 2004 492.56826\r## 2005 593.65595\r## 2006 703.86475\r## 2007 820.87381\r## 2008 941.44442\r## 2009 1061.45923\r## 2010 1176.07226\r## 2011 1279.98397\r## 2012 1367.83628\r## 2013 1434.69511\r## 2014 1476.55974\r## 2015 1490.81750\r## 2016 1476.55974\r## 2017 1434.69511\r## 2018 1367.83628\r## 2019 1279.98397\r## 2020 1176.07226\r## 2021 1061.45923\r## 2022 941.44442\r## 2023 820.87381\r## 2024 703.86475\r## 2025 593.65595\r## 2026 492.56826\r## 2027 402.05068\r## 2028 322.78369\r## 2029 254.81363\r## 2030 197.69761\r## 2031 150.64365\r## 2032 112.63664\r## 2033 82.54485\r## 2049 87.08150\r## 2050 116.68903\r## 2051 153.31342\r## 2052 197.69761\r## 2053 250.39284\r## 2054 311.66225\r## 2055 381.37718\r## 2056 458.91461\r## 2057 543.06750\r## 2058 631.98373\r## 2059 723.15121\r## 2060 813.44707\r## 2061 899.26491\r## 2062 976.72535\r## 2063 1041.96164\r## 2064 1091.45507\r## 2065 1122.37888\r## 2066 1132.89877\r## 2067 1122.37888\r## 2068 1091.45507\r## 2069 1041.96164\r## 2070 976.72535\r## 2071 899.26491\r## 2072 813.44707\r## 2073 723.15121\r## 2074 631.98373\r## 2075 543.06750\r## 2076 458.91461\r## 2077 381.37718\r## 2078 311.66225\r## 2079 250.39284\r## 2080 197.69761\r## 2081 153.31342\r## 2082 116.68903\r## 2083 87.08150\r## 2101 88.64654\r## 2102 116.68903\r## 2103 150.64365\r## 2104 190.89250\r## 2105 237.58609\r## 2106 290.56775\r## 2107 349.30169\r## 2108 412.81421\r## 2109 479.65885\r## 2110 547.91762\r## 2111 615.24920\r## 2112 678.99145\r## 2113 736.31930\r## 2114 784.44950\r## 2115 820.87381\r## 2116 843.59230\r## 2117 851.31393\r## 2118 843.59230\r## 2119 820.87381\r## 2120 784.44950\r## 2121 736.31930\r## 2122 678.99145\r## 2123 615.24920\r## 2124 547.91762\r## 2125 479.65885\r## 2126 412.81421\r## 2127 349.30169\r## 2128 290.56775\r## 2129 237.58609\r## 2130 190.89250\r## 2131 150.64365\r## 2132 116.68903\r## 2133 88.64654\r## 2153 87.08150\r## 2154 112.63664\r## 2155 142.90549\r## 2156 177.97107\r## 2157 217.67988\r## 2158 261.59204\r## 2159 308.94300\r## 2160 358.62471\r## 2161 409.19393\r## 2162 458.91461\r## 2163 505.83770\r## 2164 547.91762\r## 2165 583.15826\r## 2166 609.77486\r## 2167 626.35309\r## 2168 631.98373\r## 2169 626.35309\r## 2170 609.77486\r## 2171 583.15826\r## 2172 547.91762\r## 2173 505.83770\r## 2174 458.91461\r## 2175 409.19393\r## 2176 358.62471\r## 2177 308.94300\r## 2178 261.59204\r## 2179 217.67988\r## 2180 177.97107\r## 2181 142.90549\r## 2182 112.63664\r## 2183 87.08150\r## 2205 82.54485\r## 2206 104.93868\r## 2207 130.86626\r## 2208 160.19321\r## 2209 192.57167\r## 2210 227.41567\r## 2211 263.89150\r## 2212 300.92834\r## 2213 337.25311\r## 2214 371.45106\r## 2215 402.05068\r## 2216 427.62709\r## 2217 446.91445\r## 2218 458.91461\r## 2219 462.98808\r## 2220 458.91461\r## 2221 446.91445\r## 2222 427.62709\r## 2223 402.05068\r## 2224 371.45106\r## 2225 337.25311\r## 2226 300.92834\r## 2227 263.89150\r## 2228 227.41567\r## 2229 192.57167\r## 2230 160.19321\r## 2231 130.86626\r## 2232 104.93868\r## 2233 82.54485\r## 2257 75.48581\r## 2258 94.34134\r## 2259 115.66281\r## 2260 139.18409\r## 2261 164.46611\r## 2262 190.89250\r## 2263 217.67988\r## 2264 243.90533\r## 2265 268.55151\r## 2266 290.56775\r## 2267 308.94300\r## 2268 322.78369\r## 2269 331.38798\r## 2270 334.30749\r## 2271 331.38798\r## 2272 322.78369\r## 2273 308.94300\r## 2274 290.56775\r## 2275 268.55151\r## 2276 243.90533\r## 2277 217.67988\r## 2278 190.89250\r## 2279 164.46611\r## 2280 139.18409\r## 2281 115.66281\r## 2282 94.34134\r## 2283 75.48581\r## 2310 81.81127\r## 2311 98.62431\r## 2312 116.68903\r## 2313 135.55775\r## 2314 154.66570\r## 2315 173.35197\r## 2316 190.89250\r## 2317 206.54363\r## 2318 219.59320\r## 2319 229.41435\r## 2320 235.51628\r## 2321 237.58609\r## 2322 235.51628\r## 2323 229.41435\r## 2324 219.59320\r## 2325 206.54363\r## 2326 190.89250\r## 2327 173.35197\r## 2328 154.66570\r## 2329 135.55775\r## 2330 116.68903\r## 2331 98.62431\r## 2332 81.81127\r## 2363 81.08398\r## 2364 94.34134\r## 2365 107.76348\r## 2366 120.88343\r## 2367 133.19179\r## 2368 144.16751\r## 2369 153.31342\r## 2370 160.19321\r## 2371 164.46611\r## 2372 165.91523\r## 2373 164.46611\r## 2374 160.19321\r## 2375 153.31342\r## 2376 144.16751\r## 2377 133.19179\r## 2378 120.88343\r## 2379 107.76348\r## 2380 94.34134\r## 2381 81.08398\r## 2417 82.54485\r## 2418 91.04522\r## 2419 98.62431\r## 2420 104.93868\r## 2421 109.68761\r## 2422 112.63664\r## 2423 113.63669\r## 2424 112.63664\r## 2425 109.68761\r## 2426 104.93868\r## 2427 98.62431\r## 2428 91.04522\r## 2429 82.54485\r## 2473 75.48581\r## 2474 76.16466\r## 2475 75.48581\rnrow(dfsc1$n)\r## NULL\rsum(dfsc1$n)\r## [1] 4222601\rI created an x, y coordinate system with points that represented discrete area sizes. The original monocentric model has 1 square mile by 1 square mile squares, the m-Monocentric model has 0.5 square mile by 0.5 square mile squares, and both the amenity model and the rail distance model have 0.2 square mile by 0.2 square mile squares. The monocentric models’ results weren’t too interesting, so they didn’t need finely tuned points. The other models did have detailed information and empirically the 0.2 x 0.2 size squares housed at least 1 household, any smaller and their would-be fractional households. The light rail system ran right through the city center (point (0,0)) along the y axis (north- south). A horizontal line would produce similar results. Shifting the line horizontally might produce a slight variation, but probably not enough to go through the trouble of modeling.\rSince each point represents a specific area, I can calculate the actual values for various variables rather than their rates. Then, I can simply sum up all the points to calculate the total values for these variables on the city basis. Thus, using these discrete points, I can fully characterize each modeled city numerically. I modeled all these systems and produced the various outputs in R.\n#modfied parameters\r#budget y \u0026lt;- 40000\r#distance in the x axis\ru \u0026lt;- c(0,0,0,0,0,1,1,1,1,1,-1,-1,-1,-1,-1,2,2,2,2,2,-2,-2,-2,-2,-2)\r#distance in the y axis\rv \u0026lt;- c(0,1,-1,2,-2,0,1,-1,2,-2,0,1,-1,2,-2,0,1,-1,2,-2,0,1,-1,2,-2)\r#distance from center\rx \u0026lt;- sqrt(u^2+v^2)\r#transportation cost 50 cents a mile by 320 days\rt \u0026lt;- 1000\r#housing price per sqft vector\rp \u0026lt;- c(0:25)\r#housing consumption (sqft) by mile vector\rq \u0026lt;- c(0:25)\r#general good\rg \u0026lt;- c(0:25)\r#utility level\rV \u0026lt;- 6000\r#alpha for Cobb Douglas\ral \u0026lt;- .5\r#beta for development cobb-douglas\rbt \u0026lt;- 4/3\r#capital c0 \u0026lt;- 0\r#amentiy\rad \u0026lt;- 0.16\rng \u0026lt;- 1\rd \u0026lt;- 0\r#gamma for amenity\rgm \u0026lt;- 0.5\r#z distance to amentiy\rz \u0026lt;- sqrt((u-d)^2)\r#land rent/acre\rr \u0026lt;- c(0:25)\r#Housing floor space / acre\rs \u0026lt;- c(0:25)\r#ag rent\rag \u0026lt;- 1000\r#monocentric with modified V\ru \u0026lt;- c(1:50)\rv \u0026lt;- c(1:50)\r#new u,v\ri \u0026lt;- 0\rj \u0026lt;- 0\rii \u0026lt;- 1\rwhile(i \u0026lt; 20){\rj \u0026lt;- 0\rwhile(j \u0026lt; 20){\ru[ii] \u0026lt;- i/2 - 3\rv[ii] \u0026lt;- j/2 - 3\rj \u0026lt;- j+1\rii \u0026lt;- ii+1\r}\ri \u0026lt;- i +1\r}\r#finding x for various u,v\rx \u0026lt;- sqrt(u^2+v^2)\r#finding the price for various x\rp \u0026lt;- (al^al*(1-al)^(1-al)*(y-t*x)/V)^(1/al)\r#optimal q\rq \u0026lt;- al*(y-t*x)/p\r#optimal g\rg \u0026lt;- (1-al)*(y-t*x)\r#theta some funciton of beta\rph \u0026lt;- ((bt-1)^((bt-1)/bt))/bt\r#optimal r\rr \u0026lt;- (ph*p)^(bt/(bt-1))\rr1 \u0026lt;- ((ph*al)^al * (1-al)^(1-al) * (y-t*x)/V)^(bt/(al*(bt-1)))\r#optimal s\rs \u0026lt;- (p/bt)^(1/(bt-1))\rs1 \u0026lt;- (bt-1)^(-1/bt) * (r)^(1/bt)\r#Utility Value\rU \u0026lt;- q^al*g^(1-al)\r#population n s(floorspaceperacre/ floorspace per household * (size of square (sqmi)) * acres/sqmi * fraction of housing in area)\rn \u0026lt;- s/q * (.5*.5) * 640 * .25 nn \u0026lt;- s/q\rdfscm \u0026lt;- data.frame(u,v,x,p,g,q,s,r,U,n,nn)\r#delete values where ag rent exceeds land rent\rdfscm1 \u0026lt;- dfscm[(dfscm$r \u0026gt; ag),]\rdfscm1\r## u v x p g q s r U\r## 45 -2.0 -1.0 2.2360680 9.903573 18881.97 1906.581 409.7883 1014.592 6000\r## 46 -2.0 -0.5 2.0615528 9.995318 18969.22 1897.811 421.2827 1052.714 6000\r## 47 -2.0 0.0 2.0000000 10.027778 19000.00 1894.737 425.4004 1066.455 6000\r## 48 -2.0 0.5 2.0615528 9.995318 18969.22 1897.811 421.2827 1052.714 6000\r## 49 -2.0 1.0 2.2360680 9.903573 18881.97 1906.581 409.7883 1014.592 6000\r## 64 -1.5 -1.5 2.1213203 9.963850 18939.34 1900.805 417.3163 1039.519 6000\r## 65 -1.5 -1.0 1.8027756 10.132139 19098.61 1884.954 438.8207 1111.548 6000\r## 66 -1.5 -0.5 1.5811388 10.250062 19209.43 1874.079 454.3214 1164.206 6000\r## 67 -1.5 0.0 1.5000000 10.293403 19250.00 1870.130 460.1090 1184.022 6000\r## 68 -1.5 0.5 1.5811388 10.250062 19209.43 1874.079 454.3214 1164.206 6000\r## 69 -1.5 1.0 1.8027756 10.132139 19098.61 1884.954 438.8207 1111.548 6000\r## 70 -1.5 1.5 2.1213203 9.963850 18939.34 1900.805 417.3163 1039.519 6000\r## 83 -1.0 -2.0 2.2360680 9.903573 18881.97 1906.581 409.7883 1014.592 6000\r## 84 -1.0 -1.5 1.8027756 10.132139 19098.61 1884.954 438.8207 1111.548 6000\r## 85 -1.0 -1.0 1.4142136 10.339326 19292.89 1865.972 466.2947 1205.293 6000\r## 86 -1.0 -0.5 1.1180340 10.498662 19440.98 1851.758 488.1863 1281.326 6000\r## 87 -1.0 0.0 1.0000000 10.562500 19500.00 1846.154 497.1460 1312.776 6000\r## 88 -1.0 0.5 1.1180340 10.498662 19440.98 1851.758 488.1863 1281.326 6000\r## 89 -1.0 1.0 1.4142136 10.339326 19292.89 1865.972 466.2947 1205.293 6000\r## 90 -1.0 1.5 1.8027756 10.132139 19098.61 1884.954 438.8207 1111.548 6000\r## 91 -1.0 2.0 2.2360680 9.903573 18881.97 1906.581 409.7883 1014.592 6000\r## 103 -0.5 -2.0 2.0615528 9.995318 18969.22 1897.811 421.2827 1052.714 6000\r## 104 -0.5 -1.5 1.5811388 10.250062 19209.43 1874.079 454.3214 1164.206 6000\r## 105 -0.5 -1.0 1.1180340 10.498662 19440.98 1851.758 488.1863 1281.326 6000\r## 106 -0.5 -0.5 0.7071068 10.721746 19646.45 1832.392 519.9725 1393.753 6000\r## 107 -0.5 0.0 0.5000000 10.835069 19750.00 1822.785 536.6349 1453.619 6000\r## 108 -0.5 0.5 0.7071068 10.721746 19646.45 1832.392 519.9725 1393.753 6000\r## 109 -0.5 1.0 1.1180340 10.498662 19440.98 1851.758 488.1863 1281.326 6000\r## 110 -0.5 1.5 1.5811388 10.250062 19209.43 1874.079 454.3214 1164.206 6000\r## 111 -0.5 2.0 2.0615528 9.995318 18969.22 1897.811 421.2827 1052.714 6000\r## 123 0.0 -2.0 2.0000000 10.027778 19000.00 1894.737 425.4004 1066.455 6000\r## 124 0.0 -1.5 1.5000000 10.293403 19250.00 1870.130 460.1090 1184.022 6000\r## 125 0.0 -1.0 1.0000000 10.562500 19500.00 1846.154 497.1460 1312.776 6000\r## 126 0.0 -0.5 0.5000000 10.835069 19750.00 1822.785 536.6349 1453.619 6000\r## 127 0.0 0.0 0.0000000 11.111111 20000.00 1800.000 578.7037 1607.510 6000\r## 128 0.0 0.5 0.5000000 10.835069 19750.00 1822.785 536.6349 1453.619 6000\r## 129 0.0 1.0 1.0000000 10.562500 19500.00 1846.154 497.1460 1312.776 6000\r## 130 0.0 1.5 1.5000000 10.293403 19250.00 1870.130 460.1090 1184.022 6000\r## 131 0.0 2.0 2.0000000 10.027778 19000.00 1894.737 425.4004 1066.455 6000\r## 143 0.5 -2.0 2.0615528 9.995318 18969.22 1897.811 421.2827 1052.714 6000\r## 144 0.5 -1.5 1.5811388 10.250062 19209.43 1874.079 454.3214 1164.206 6000\r## 145 0.5 -1.0 1.1180340 10.498662 19440.98 1851.758 488.1863 1281.326 6000\r## 146 0.5 -0.5 0.7071068 10.721746 19646.45 1832.392 519.9725 1393.753 6000\r## 147 0.5 0.0 0.5000000 10.835069 19750.00 1822.785 536.6349 1453.619 6000\r## 148 0.5 0.5 0.7071068 10.721746 19646.45 1832.392 519.9725 1393.753 6000\r## 149 0.5 1.0 1.1180340 10.498662 19440.98 1851.758 488.1863 1281.326 6000\r## 150 0.5 1.5 1.5811388 10.250062 19209.43 1874.079 454.3214 1164.206 6000\r## 151 0.5 2.0 2.0615528 9.995318 18969.22 1897.811 421.2827 1052.714 6000\r## 163 1.0 -2.0 2.2360680 9.903573 18881.97 1906.581 409.7883 1014.592 6000\r## 164 1.0 -1.5 1.8027756 10.132139 19098.61 1884.954 438.8207 1111.548 6000\r## 165 1.0 -1.0 1.4142136 10.339326 19292.89 1865.972 466.2947 1205.293 6000\r## 166 1.0 -0.5 1.1180340 10.498662 19440.98 1851.758 488.1863 1281.326 6000\r## 167 1.0 0.0 1.0000000 10.562500 19500.00 1846.154 497.1460 1312.776 6000\r## 168 1.0 0.5 1.1180340 10.498662 19440.98 1851.758 488.1863 1281.326 6000\r## 169 1.0 1.0 1.4142136 10.339326 19292.89 1865.972 466.2947 1205.293 6000\r## 170 1.0 1.5 1.8027756 10.132139 19098.61 1884.954 438.8207 1111.548 6000\r## 171 1.0 2.0 2.2360680 9.903573 18881.97 1906.581 409.7883 1014.592 6000\r## 184 1.5 -1.5 2.1213203 9.963850 18939.34 1900.805 417.3163 1039.519 6000\r## 185 1.5 -1.0 1.8027756 10.132139 19098.61 1884.954 438.8207 1111.548 6000\r## 186 1.5 -0.5 1.5811388 10.250062 19209.43 1874.079 454.3214 1164.206 6000\r## 187 1.5 0.0 1.5000000 10.293403 19250.00 1870.130 460.1090 1184.022 6000\r## 188 1.5 0.5 1.5811388 10.250062 19209.43 1874.079 454.3214 1164.206 6000\r## 189 1.5 1.0 1.8027756 10.132139 19098.61 1884.954 438.8207 1111.548 6000\r## 190 1.5 1.5 2.1213203 9.963850 18939.34 1900.805 417.3163 1039.519 6000\r## 205 2.0 -1.0 2.2360680 9.903573 18881.97 1906.581 409.7883 1014.592 6000\r## 206 2.0 -0.5 2.0615528 9.995318 18969.22 1897.811 421.2827 1052.714 6000\r## 207 2.0 0.0 2.0000000 10.027778 19000.00 1894.737 425.4004 1066.455 6000\r## 208 2.0 0.5 2.0615528 9.995318 18969.22 1897.811 421.2827 1052.714 6000\r## 209 2.0 1.0 2.2360680 9.903573 18881.97 1906.581 409.7883 1014.592 6000\r## n nn\r## 45 8.597343 0.2149336\r## 46 8.879340 0.2219835\r## 47 8.980675 0.2245169\r## 48 8.879340 0.2219835\r## 49 8.597343 0.2149336\r## 64 8.781883 0.2195471\r## 65 9.312075 0.2328019\r## 66 9.696951 0.2424238\r## 67 9.841219 0.2460305\r## 68 9.696951 0.2424238\r## 69 9.312075 0.2328019\r## 70 8.781883 0.2195471\r## 83 8.597343 0.2149336\r## 84 9.312075 0.2328019\r## 85 9.995748 0.2498937\r## 86 10.545358 0.2636339\r## 87 10.771497 0.2692874\r## 88 10.545358 0.2636339\r## 89 9.995748 0.2498937\r## 90 9.312075 0.2328019\r## 91 8.597343 0.2149336\r## 103 8.879340 0.2219835\r## 104 9.696951 0.2424238\r## 105 10.545358 0.2636339\r## 106 11.350680 0.2837670\r## 107 11.776154 0.2944039\r## 108 11.350680 0.2837670\r## 109 10.545358 0.2636339\r## 110 9.696951 0.2424238\r## 111 8.879340 0.2219835\r## 123 8.980675 0.2245169\r## 124 9.841219 0.2460305\r## 125 10.771497 0.2692874\r## 126 11.776154 0.2944039\r## 127 12.860082 0.3215021\r## 128 11.776154 0.2944039\r## 129 10.771497 0.2692874\r## 130 9.841219 0.2460305\r## 131 8.980675 0.2245169\r## 143 8.879340 0.2219835\r## 144 9.696951 0.2424238\r## 145 10.545358 0.2636339\r## 146 11.350680 0.2837670\r## 147 11.776154 0.2944039\r## 148 11.350680 0.2837670\r## 149 10.545358 0.2636339\r## 150 9.696951 0.2424238\r## 151 8.879340 0.2219835\r## 163 8.597343 0.2149336\r## 164 9.312075 0.2328019\r## 165 9.995748 0.2498937\r## 166 10.545358 0.2636339\r## 167 10.771497 0.2692874\r## 168 10.545358 0.2636339\r## 169 9.995748 0.2498937\r## 170 9.312075 0.2328019\r## 171 8.597343 0.2149336\r## 184 8.781883 0.2195471\r## 185 9.312075 0.2328019\r## 186 9.696951 0.2424238\r## 187 9.841219 0.2460305\r## 188 9.696951 0.2424238\r## 189 9.312075 0.2328019\r## 190 8.781883 0.2195471\r## 205 8.597343 0.2149336\r## 206 8.879340 0.2219835\r## 207 8.980675 0.2245169\r## 208 8.879340 0.2219835\r## 209 8.597343 0.2149336\rnrow(dfscm1)\r## [1] 69\rsum(dfscm1$n)\r## [1] 675.1\r#Amenitiy City Model\r#new u,v\ri \u0026lt;- 0\rj \u0026lt;- 0\rii \u0026lt;- 1\rwhile(i \u0026lt; 61){\rj \u0026lt;- 0\rwhile(j \u0026lt; 61){\ru[ii] \u0026lt;- i/5 - 6\rv[ii] \u0026lt;- j/5 - 6\rj \u0026lt;- j+1\rii \u0026lt;- ii+1\r}\ri \u0026lt;- i +1\r}\r#finding x for various u,v\rx \u0026lt;- sqrt(u^2+v^2)\r#finding distance to rail\rz \u0026lt;- sqrt((u-d)^2)\r#amentiy distribution\ram \u0026lt;- 1 + ad*(exp(-ng*z))\r#finding the price for various u,v\rp \u0026lt;- (al^al*(1-al)^(1-al)*am^gm*(y-t*x)/V)^(1/al)\r#optimal q\rq \u0026lt;- al*(y-t*x)/p\r#optimal g\rg \u0026lt;- (1-al)*(y-t*x)\r#optimal s\rs \u0026lt;- (p/bt)^(1/(bt-1))\r#optimal r\rr \u0026lt;- p*s - s^(bt)\r#population n s(floorspaceperacre/ floorspace per household * (size of square (sqmi)) * acres/sqmi * fraction of housing in area)\rn \u0026lt;- s/q * (.2*.2) * 640 * .25 nn \u0026lt;- s/q\rdfuva \u0026lt;- data.frame(u,v,x,z,p,g,q,s,r,am,n,nn)\rdfuva1 \u0026lt;- dfuva[(dfuva$r \u0026gt; ag),]\rdfuva1[(dfuva1$v \u0026gt; 4),]\r## u v x z p g q s r\r## 1821 -0.2 4.2 4.204759 0.2 10.063511 17897.62 1778.467 429.9642 1081.737\r## 1822 -0.2 4.4 4.404543 0.2 9.951489 17797.73 1788.449 415.7651 1034.370\r## 1882 0.0 4.2 4.200000 0.0 10.324322 17900.00 1733.770 464.2677 1198.312\r## 1883 0.0 4.4 4.400000 0.0 10.209289 17800.00 1743.510 448.9214 1145.792\r## 1884 0.0 4.6 4.600000 0.0 10.094900 17700.00 1753.361 434.0001 1095.297\r## 1885 0.0 4.8 4.800000 0.0 9.981156 17600.00 1763.323 419.4945 1046.760\r## 1886 0.0 5.0 5.000000 0.0 9.868056 17500.00 1773.399 405.3951 1000.115\r## 1943 0.2 4.2 4.204759 0.2 10.063511 17897.62 1778.467 429.9642 1081.737\r## 1944 0.2 4.4 4.404543 0.2 9.951489 17797.73 1788.449 415.7651 1034.370\r## am n nn\r## 1821 1.130997 1.547271 0.2417612\r## 1822 1.130997 1.487824 0.2324725\r## 1882 1.160000 1.713787 0.2677793\r## 1883 1.160000 1.647881 0.2574813\r## 1884 1.160000 1.584158 0.2475247\r## 1885 1.160000 1.522560 0.2379000\r## 1886 1.160000 1.463026 0.2285978\r## 1943 1.130997 1.547271 0.2417612\r## 1944 1.130997 1.487824 0.2324725\rnrow(dfuva1)\r## [1] 727\rsum(dfuva1$n)\r## [1] 1379.978\r#Rail Model\r#values for u,v,x, and z are the same as above\r#convinence penalty for taking train\rcf \u0026lt;- 1.1\r#transportation distance rail traveled and travel to rail\rzz \u0026lt;- z+abs(v)\r#cost to travel by rail\rtr \u0026lt;- 500\r#rail and commute travel cost\rrtc \u0026lt;- (tr*abs(v)+t*abs(u))\r#optimal price per square foot\rp \u0026lt;- (al^al*(1-al)^(1-al)*(y-rtc)/V)^(1/al)\r#optimal q\rq \u0026lt;- al*(y-(rtc))/p\r#optimal g\rg \u0026lt;- (1-al)*(rtc)\r#optimal s\rs \u0026lt;- (p/bt)^(1/(bt-1))\r#optimal r\rr \u0026lt;- p*s - s^(bt)\r#population n s(floorspaceperacre/ floorspace per household * (size of square (sqmi)) * acres/sqmi * fraction of housing in area)\rn \u0026lt;- s/q * (.2*.2) * 640 * .25 nn \u0026lt;- s/q\r#rail customers dataframe\rdfr1 \u0026lt;- data.frame(u,v,x,z,zz,p,g,q,s,r,n,nn,rtc)\r#removes all values for people more than 1.75 miles from the train\rdfr1 \u0026lt;- dfr1[(dfr1$z \u0026lt;= 1.75),]\rdfr1 \u0026lt;- dfr1[(dfr1$r \u0026gt; ag),]\r#optimal price per square foot\rp \u0026lt;- (al^al*(1-al)^(1-al)*(y-t*x)/V)^(1/al)\r#optimal q\rq \u0026lt;- al*(y-t*x)/p\r#optimal g\rg \u0026lt;- (1-al)*(y-t*x)\r#optimal s\rs \u0026lt;- (p/bt)^(1/(bt-1))\r#optimal r\rr \u0026lt;- p*s - s^(bt)\r#population n s(floorspaceperacre/ floorspace (sqft) per household * (size of square (sqmi)) * acres/sqmi * fraction of housing in area)\rn \u0026lt;- s/q * (.2*.2) * 640 * .25\rnn \u0026lt;- s/q\rrtc \u0026lt;- t*x\r#non rail customers dataframe\rdfr2 \u0026lt;- data.frame(u,v,x,z,zz,p,g,q,s,r,n,nn,rtc)\r#removes all values within 1.75 of the train\rdfr2 \u0026lt;- dfr2[(dfr2$z \u0026gt; 1.75),]\rdfr2 \u0026lt;- dfr2[(dfr2$r \u0026gt; ag),]\rdfuv \u0026lt;- rbind(dfr1,dfr2)\r#getting rid of land rents less than land ag\rdfuv1 \u0026lt;- dfuv[!(dfuv$r\u0026lt;ag),]\rnrow(dfuv1)\r## [1] 577\rsum(dfuv1$n)\r## [1] 899.1577\r#dfuv1[(dfuv1$u == 0),]\r#Creating All Plots\rrequire(ggplot2)\r## Loading required package: ggplot2\r## Warning: package \u0026#39;ggplot2\u0026#39; was built under R version 4.0.2\rrequire(grid)\r## Loading required package: grid\rrequire(gridExtra)\r## Loading required package: gridExtra\rrequire(RColorBrewer)\r## Loading required package: RColorBrewer\rrequire(viridis)\r## Loading required package: viridis\r## Warning: package \u0026#39;viridis\u0026#39; was built under R version 4.0.2\r## Loading required package: viridisLite\r#using s (housing area/acre)\rp1\u0026lt;-ggplot(dfuv1, aes(x = u, y = v, color = s)) +\rgeom_point(size = 1, shape = 19) +\rscale_color_viridis(option = \u0026#39;magma\u0026#39;, direction = -1) +\rlims(x=c(-3,3),y=c(-6,6)) +\rcoord_fixed() + theme_minimal() +\rgeom_vline(xintercept = 0) + geom_hline(yintercept = 0) +\rlabs(title = \u0026#39;Housing Area/Acre: \\n Rail Distance Model\u0026#39;)\r#using q (housing sqft for area)\rp2\u0026lt;-ggplot(dfuv1, aes(x = u, y = v, color = q)) +\rgeom_point(size = 1, shape = 19) +\rscale_color_viridis(option = \u0026#39;inferno\u0026#39;) +\r#scale_color_gradientn(colors = rainbow(10)) +\rlims(x=c(-3,3),y=c(-6,6)) +\rcoord_fixed() + theme_minimal() +\rgeom_vline(xintercept = 0) + geom_hline(yintercept = 0) +\rlabs(title = \u0026#39;Housing sqft / sqmi: \\n Rail Distance Model\u0026#39;)\r#using n transportation distance\rp3\u0026lt;-ggplot(dfuv1, aes(x = u, y = v, color = n)) +\rgeom_point(size = 1, shape = 19) +\rscale_color_viridis(direction = -1) +\rlims(x=c(-3,3),y=c(-6,6)) +\rcoord_fixed() + theme_minimal()+\rgeom_vline(xintercept = 0) + geom_hline(yintercept = 0) + labs(title = \u0026#39;Population: \\n Rail Distance Model\u0026#39;)\r#using am transportation distance\rp4\u0026lt;-ggplot(dfuva1, aes(x = u, y = v, color = am)) +\rgeom_point(size = 1, shape = 17) +\rscale_color_gradientn(colors = rainbow(7)) +\rlims(x=c(-3,3),y=c(-6,6)) +\rcoord_fixed() + theme_minimal()+\rgeom_vline(xintercept = 0) + geom_hline(yintercept = 0) +\rlabs(title = \u0026#39;Amenity Level: \\n Amentity Model\u0026#39;)\r#using population for am\rp5\u0026lt;-ggplot(dfuva1, aes(x = u, y = v, color = n)) +\rgeom_point(size = 1, shape = 17) +\rscale_color_viridis(direction = -1) +\rlims(x=c(-3,3),y=c(-6,6)) +\rcoord_fixed() + theme_minimal()+\rgeom_vline(xintercept = 0) + geom_hline(yintercept = 0) +\rlabs(title = \u0026#39;Population: \\n Amenity Model\u0026#39;)\r#population for original p6\u0026lt;-ggplot(dfsc1, aes(x = u, y = v, color = n)) +\rgeom_point(size = 1, shape = 11) +\rscale_color_gradientn(colors = rev(rainbow(10)))+\rlims(x=c(-25,25),y=c(-25,25)) +\rcoord_fixed() + theme_minimal()+\rgeom_vline(xintercept = 0) + geom_hline(yintercept = 0) +\rlabs(title = \u0026#39;Population: \\n Monocentric Model\u0026#39;)\rp7\u0026lt;-ggplot(dfscm1, aes(x = u, y = v, color = n)) +\rgeom_point(size = 2, shape = 7) +\rscale_color_viridis(direction = -1) +\rlims(x=c(-3,3),y=c(-6,6)) +\rcoord_fixed() + theme_minimal()+\rgeom_vline(xintercept = 0) + geom_hline(yintercept = 0) +\rlabs(title = \u0026#39;Population: \\n m-Monocentric Model\u0026#39;)\rp8\u0026lt;-ggplot(dfuv1, aes(x = u, y = v, color = nn)) +\rgeom_point(size = 1, shape = 19) +\rscale_color_viridis(direction = -1) +\rlims(x=c(-3,3),y=c(-6,6)) +\rcoord_fixed() + theme_minimal()+\rgeom_vline(xintercept = 0) + geom_hline(yintercept = 0) +\rlabs(title = \u0026#39;House Density: \\n Rail Distance Model\u0026#39;)\rhd4\u0026lt;-ggplot(dfuv1, aes(x = u, y = v, color = nn)) +\rgeom_point(size = 1, shape = 19) +\rscale_color_viridis(direction = -1) +\rlims(x=c(-3,3),y=c(-6,6)) +\rcoord_fixed() + theme_minimal()+\rgeom_vline(xintercept = 0) + geom_hline(yintercept = 0) +\rlabs(title = \u0026#39;House Density: \\n Rail Distance Model\u0026#39;)\rhd3\u0026lt;-ggplot(dfuva1, aes(x = u, y = v, color = nn)) +\rgeom_point(size = 1, shape = 17) +\rscale_color_viridis(direction = -1) +\rlims(x=c(-3,3),y=c(-6,6)) +\rcoord_fixed() + theme_minimal()+\rgeom_vline(xintercept = 0) + geom_hline(yintercept = 0) +\rlabs(title = \u0026#39;House Density: \\n Amenity Model\u0026#39;)\rhd2\u0026lt;-ggplot(dfscm1, aes(x = u, y = v, color = nn)) +\rgeom_point(size = 2, shape = 7) +\rscale_color_viridis(direction = -1) +\rlims(x=c(-3,3),y=c(-6,6)) +\rcoord_fixed() + theme_minimal()+\rgeom_vline(xintercept = 0) + geom_hline(yintercept = 0) +\rlabs(title = \u0026#39;House Density: \\n m-Monocentric Model\u0026#39;)\rpr4\u0026lt;-ggplot(dfuv1, aes(x = u, y = v, color = p)) +\rgeom_point(size = 1, shape = 19) +\rscale_color_viridis(option = \u0026#39;magma\u0026#39;, direction = -1) +\rlims(x=c(-3,3),y=c(-6,6)) +\rcoord_fixed() + theme_minimal() +\rgeom_vline(xintercept = 0) + geom_hline(yintercept = 0) +\rlabs(title = \u0026#39;Housing Price: \\n Rail Distance Model\u0026#39;)\rpr3\u0026lt;-ggplot(dfuva1, aes(x = u, y = v, color = p)) +\rgeom_point(size = 1, shape = 17) +\rscale_color_viridis(option = \u0026#39;magma\u0026#39;, direction = -1) +\rlims(x=c(-3,3),y=c(-6,6)) +\rcoord_fixed() + theme_minimal() +\rgeom_vline(xintercept = 0) + geom_hline(yintercept = 0) +\rlabs(title = \u0026#39;House Price: \\n Amenity Model\u0026#39;)\rpr2\u0026lt;-ggplot(dfscm1, aes(x = u, y = v, color = p)) +\rgeom_point(size = 2, shape = 7) +\rscale_color_viridis(option = \u0026#39;magma\u0026#39;, direction = -1) +\rlims(x=c(-3,3),y=c(-6,6)) +\rcoord_fixed() + theme_minimal() +\rgeom_vline(xintercept = 0) + geom_hline(yintercept = 0) +\rlabs(title = \u0026#39;House Price: \\n m-Monocentric Model\u0026#39;)\rr4\u0026lt;-ggplot(dfuv1, aes(x = u, y = v, color = r)) +\rgeom_point(size = 1, shape = 19) +\rscale_color_viridis(option = \u0026#39;magma\u0026#39;, direction = -1) +\rlims(x=c(-3,3),y=c(-6,6)) +\rcoord_fixed() + theme_minimal() +\rgeom_vline(xintercept = 0) + geom_hline(yintercept = 0) +\rlabs(title = \u0026#39;Land Rent: \\n Rail Distance Model\u0026#39;)\rr3\u0026lt;-ggplot(dfuva1, aes(x = u, y = v, color = r)) +\rgeom_point(size = 1, shape = 17) +\rscale_color_viridis(option = \u0026#39;magma\u0026#39;, direction = -1) +\rlims(x=c(-3,3),y=c(-6,6)) +\rcoord_fixed() + theme_minimal() +\rgeom_vline(xintercept = 0) + geom_hline(yintercept = 0) +\rlabs(title = \u0026#39;Land Rent: \\n Amenity Model\u0026#39;)\rr2\u0026lt;-ggplot(dfscm1, aes(x = u, y = v, color = r)) +\rgeom_point(size = 2, shape = 7) +\rscale_color_viridis(option = \u0026#39;magma\u0026#39;, direction = -1) +\rlims(x=c(-3,3),y=c(-6,6)) +\rcoord_fixed() + theme_minimal() +\rgeom_vline(xintercept = 0) + geom_hline(yintercept = 0) +\rlabs(title = \u0026#39;Land Rent: \\n m-Monocentric Model\u0026#39;)\r# Displaying all graphs and Saving All Graphs\r#Population Density Across Urban Areas\rpop_den \u0026lt;- grid.arrange(p5,p3,p6,p7, ncol=2, nrow = 2)\r#Housing Density Across Urban Areas\rhouse_den \u0026lt;- grid.arrange(hd4,hd3,hd2,ncol =3, nrow =1)\r#Housing Prices Across Urban Areas\rprice_grid \u0026lt;- grid.arrange(pr4,pr3,pr2, ncol =3, nrow =1)\r#Land Values across Urban Areas\rlv_grid \u0026lt;- grid.arrange(r4,r3,r2,ncol =3, nrow =1)\r#comparisons\rcomp_grid \u0026lt;- grid.arrange(p1,p2,p4,p7, ncol=2, nrow = 2)\rggsave(filename = \u0026quot;pop_den.pdf\u0026quot;, pop_den)\r## Saving 7 x 5 in image\rggsave(filename = \u0026quot;house_den.pdf\u0026quot;, house_den)\r## Saving 7 x 5 in image\rggsave(filename = \u0026quot;price_grid.pdf\u0026quot;, price_grid)\r## Saving 7 x 5 in image\rggsave(filename = \u0026quot;lv_grid.pdf\u0026quot;, lv_grid)\r## Saving 7 x 5 in image\rggsave(filename = \u0026quot;comp_grid.pdf\u0026quot;, comp_grid)\r## Saving 7 x 5 in image\rlibrary(formattable)\r## Warning: package \u0026#39;formattable\u0026#39; was built under R version 4.0.2\r#Number of People who take rail vs. commute\rrc \u0026lt;- nrow(dfr1)\rcc \u0026lt;- nrow(dfr2)\rrails \u0026lt;- c(0,0,.10,0)\rrails[4] \u0026lt;- round(rc/(rc+cc),4)\r#Transportation Expenditures\rc_trans1 \u0026lt;- round(sum(dfsc1$x*1000),0)\rc_trans2 \u0026lt;- round(sum(dfscm1$x*1000),0)\rc_trans3 \u0026lt;- round(sum(dfuva1$x)*1000,0)\rc_trans4 \u0026lt;- round(sum(dfuv1$rtc),0)\rc_trans \u0026lt;- rbind(c_trans1,c_trans2,c_trans3,c_trans4)\r#Transportation Energy Use and GHG Emissions 120.429 MBTU/ gal, cars average 27 mpg (EIA https://www.eia.gov/energyexplained/index.php?page=about_energy_units)\r#light rail every 15 mins for 12.5 hours 50 times every day. About 1 cars going 30 mph. Goes 1125 miles a day. #64.642 MBTU/mile (http://www.rtd-fastracks.com/media/uploads/se/Energy_Tech_Report_0514_-_061814_vers.pdf)\re_trans1 \u0026lt;- sum(dfsc1$x*dfsc1$n*365*2*120.429/27)\re_trans2 \u0026lt;- sum(dfscm1$x*dfscm1$n*365*2*120.429/27)\re_trans3 \u0026lt;- sum(dfuva1$x*dfuva1$n*365*2*120.429/27)*.9 + 375*365*64.642\re_trans4 \u0026lt;- sum(dfr2$x*dfr2$n*365*2*120.429/27) + sum(dfr1$z*dfr1$n*365*2*120.429/27) + 375*365*64.642\re_trans \u0026lt;- rbind(e_trans1,e_trans2,e_trans3,e_trans4)\re_trans \u0026lt;- round(e_trans/1000,0)\r# GHG of trans 8.887 kg CO2 / gallon\rghg_trans1 \u0026lt;- round(sum(dfsc1$x*dfsc1$n*365*2*8.887/(27*1000)),0)\rghg_trans2 \u0026lt;- round(sum(dfscm1$x*dfscm1$n*365*2*8.887/(27*1000)),0)\rghg_trans3 \u0026lt;- round((sum(dfuva1$x*dfuva1$n*365*2*8.887/(27*1000)))*.9 + 375*365*64.642/1000*((.85/3.41214/1000)/2204.6),0)\rghg_trans4 \u0026lt;- round(sum(dfr2$x*dfr2$n*365*2*8.887/(27*1000)) + sum(dfr1$z*dfr1$n*365*2*8.887/(27*1000)) + 375*365*64.642/1000*((.85/3.41214/1000)/2204.6),0)\rtCO2_trans \u0026lt;- rbind(ghg_trans1,ghg_trans2,ghg_trans3,ghg_trans4)\r#Residenital Energy Use and GHG Emissions 40 MBTU/sq ft (https://www.jchs.harvard.edu/blog/us-households-are-using-less-energy/)\re_res1 \u0026lt;- sum(dfsc1$q)*40 e_res2 \u0026lt;- sum(dfscm1$q)*40 e_res3 \u0026lt;- sum(dfuva1$q)*40 e_res4 \u0026lt;- sum(dfuv1$q)*40 e_res \u0026lt;- rbind(e_res1,e_res2,e_res3,e_res4)\re_res \u0026lt;- round(e_res/1000,0)\r#GHG .85 lb CO2 / kwh https://data.austintexas.gov/Utilities-and-City-Services/Carbon-Intensity/hetr-8wqd\r# 3.41214 MBTU/kwh 2204.6 metric tons per pound\rtCO2e_res \u0026lt;- round(e_res*(.85/(3.41214/1000))/2204.6,0)\r#Total energy and GHG\re_total \u0026lt;- e_res + e_trans\rtCO2e_total \u0026lt;- tCO2e_res + tCO2_trans\r#Total Land Area of the City\rla1 \u0026lt;- nrow(dfsc1)*1\rla2 \u0026lt;- nrow(dfscm1)*(.5*.5)\rla3 \u0026lt;- nrow(dfuva1)*(.2*.2)\rla4 \u0026lt;- nrow(dfuv1)*(.2*.2)\rla \u0026lt;- rbind(la1,la2,la3,la4)\r#Total Population\rn1 \u0026lt;- round(sum(dfsc1$n),0)\rn2 \u0026lt;- round(sum(dfscm1$n),0)\rn3 \u0026lt;- round(sum(dfuva1$n),0)\rn4 \u0026lt;- round(sum(dfuv1$n),0)\rnt \u0026lt;- rbind(n1,n2,n3,n4)\r#Utility\rtU \u0026lt;- c(2700,6000,6000,6000)\rs1 \u0026lt;- data.frame(rails, c_trans, e_trans, tCO2_trans, e_res, e_total, tCO2e_total, la, nt, tU)\rrownames(s1) \u0026lt;- c(\u0026#39;Moncentric\u0026#39;, \u0026#39;Monocentric Modified\u0026#39;, \u0026#39;Amenity\u0026#39;,\u0026#39;Rail Distance\u0026#39;)\rcolnames(s1) \u0026lt;- c(\u0026#39;% rail travel\u0026#39;, \u0026#39;$_trans\u0026#39;, \u0026#39;MMBTU_trans\u0026#39;, \u0026#39;tCO2e_trans\u0026#39;, \u0026#39;MMBTU_res\u0026#39;, \u0026#39;MMBTU_total\u0026#39;, \u0026#39;tCO2e_total\u0026#39;, \u0026#39;City sqmi\u0026#39;, \u0026#39;Pop\u0026#39;, \u0026#39;Util\u0026#39; )\rs2 \u0026lt;- s1[,2:8]/s1$Pop\rcolnames(s2) \u0026lt;- c(\u0026#39;$_trans/house\u0026#39;, \u0026#39;MMBTU_trans/house\u0026#39;, \u0026#39;tCO2e_trans/house\u0026#39;, \u0026#39;MMBTU_res/house\u0026#39;, \u0026#39;MMBTU_total/house\u0026#39;, \u0026#39;tCO2e_total\u0026#39;, \u0026#39;Acres/house\u0026#39; )\rs2$`Acres/house` \u0026lt;- s2$`Acres/house`*640*.25\rs2 \u0026lt;- round(s2,2)\rs2\r## $_trans/house MMBTU_trans/house tCO2e_trans/house\r## Moncentric 6.07 25.71 1.90\r## Monocentric Modified 159.06 4.88 0.36\r## Amenity 1133.73 12.26 0.43\r## Rail Distance 1014.81 12.48 0.19\r## MMBTU_res/house MMBTU_total/house tCO2e_total Acres/house\r## Moncentric 0.01 25.72 1.90 0.06\r## Monocentric Modified 7.66 12.54 1.23 4.09\r## Amenity 37.40 49.66 4.66 3.37\r## Rail Distance 48.12 60.61 5.63 4.11\rs1$`$_trans` \u0026lt;- prettyNum(s1$`$_trans`, big.mark = \u0026#39;,\u0026#39;)\rs1$MMBTU_trans \u0026lt;- prettyNum(s1$MMBTU_trans, big.mark =\u0026#39;,\u0026#39;)\rs1$MMBTU_res \u0026lt;- prettyNum(s1$MMBTU_res, big.mark =\u0026#39;,\u0026#39;)\rs1$MMBTU_total \u0026lt;- prettyNum(s1$MMBTU_total, big.mark = \u0026#39;,\u0026#39;)\rs1$`% rail travel` \u0026lt;- percent(s1$`% rail travel`, digits = 1)\rs3 \u0026lt;- s1[,c(1,2,6,7,8,9,10)]\rs3\r## % rail travel $_trans MMBTU_total tCO2e_total City sqmi\r## Moncentric 0.0% 25,646,389 108,602,912 8015924 1669.00\r## Monocentric Modified 0.0% 107,367 8,466 827 17.25\r## Amenity 10.0% 1,564,541 68,532 6428 29.08\r## Rail Distance 88.6% 912,313 54,487 5064 23.08\r## Pop Util\r## Moncentric 4222601 2700\r## Monocentric Modified 675 6000\r## Amenity 1380 6000\r## Rail Distance 899 6000\r# Saving Files as pdfs\r# pdf(\u0026quot;city_data.pdf\u0026quot;, height=2, width=8.5)\r# grid.table(s3)\r# dev.off()\r# pdf(\u0026quot;per_capita_data.pdf\u0026quot;, height=2, width=13)\r# grid.table(s2)\r# dev.off()\r#Solving for q and g using non-linear solver\ri \u0026lt;- 1\rwhile(i \u0026lt;= 16){\rfn \u0026lt;- function(j) {\ra \u0026lt;- j[1]^al *j[2]^(1-al)-V\rb \u0026lt;- y-t*x[i]-p[i]*j[1]-j[2]\rreturn(c(a,b))\r}\rresult \u0026lt;- nleqslv(c(500,10000), fn) result$x[1] \u0026lt;- q[i]\rresult$x[2] \u0026lt;- g[i]\ri \u0026lt;- i+1\r}\rdata.frame(x,p,q,g)\r## x p q g\r## 1 8.4852814 6.897066 2284.647 15757.36\r## 2 8.3450584 6.958579 2274.526 15827.47\r## 3 8.2073138 7.019270 2264.672 15896.34\r## 4 8.0721744 7.079070 2255.086 15963.91\r## 5 7.9397733 7.137904 2245.773 16030.11\r## 6 7.8102497 7.195695 2236.737 16094.88\r## 7 7.6837491 7.252362 2227.981 16158.13\r## 8 7.5604233 7.307820 2219.511 16219.79\r## 9 7.4404301 7.361983 2211.331 16279.78\r## 10 7.3239334 7.414759 2203.448 16338.03\r## 11 7.2111026 7.466054 2195.865 16394.45\r## 12 7.1021124 7.515771 2188.590 16448.94\r## 13 6.9971423 7.563810 2181.629 16501.43\r## 14 6.8963759 7.610069 2174.988 16551.81\r## 15 6.8000000 7.654444 2168.675 16600.00\r## 16 6.7082039 7.696831 2162.695 16645.90\r## 17 6.6211781 7.737123 2157.056 16689.41\r## 18 6.5391131 7.775215 2151.766 16730.44\r## 19 6.4621978 7.811001 2146.831 16768.90\r## 20 6.3906181 7.844379 2142.259 16804.69\r## 21 6.3245553 7.875247 2138.056 16837.72\r## 22 6.2641839 7.903509 2134.230 16867.91\r## 23 6.2096699 7.929072 2130.787 16895.17\r## 24 6.1611687 7.951851 2127.733 16919.42\r## 25 6.1188234 7.971765 2125.074 16940.59\r## 26 6.0827625 7.988743 2122.814 16958.62\r## 27 6.0530984 8.002723 2120.959 16973.45\r## 28 6.0299254 8.013653 2119.513 16985.04\r## 29 6.0133186 8.021490 2118.477 16993.34\r## 30 6.0033324 8.026204 2117.855 16998.33\r## 31 6.0000000 8.027778 2117.647 17000.00\r## 32 6.0033324 8.026204 2117.855 16998.33\r## 33 6.0133186 8.021490 2118.477 16993.34\r## 34 6.0299254 8.013653 2119.513 16985.04\r## 35 6.0530984 8.002723 2120.959 16973.45\r## 36 6.0827625 7.988743 2122.814 16958.62\r## 37 6.1188234 7.971765 2125.074 16940.59\r## 38 6.1611687 7.951851 2127.733 16919.42\r## 39 6.2096699 7.929072 2130.787 16895.17\r## 40 6.2641839 7.903509 2134.230 16867.91\r## 41 6.3245553 7.875247 2138.056 16837.72\r## 42 6.3906181 7.844379 2142.259 16804.69\r## 43 6.4621978 7.811001 2146.831 16768.90\r## 44 6.5391131 7.775215 2151.766 16730.44\r## 45 6.6211781 7.737123 2157.056 16689.41\r## 46 6.7082039 7.696831 2162.695 16645.90\r## 47 6.8000000 7.654444 2168.675 16600.00\r## 48 6.8963759 7.610069 2174.988 16551.81\r## 49 6.9971423 7.563810 2181.629 16501.43\r## 50 7.1021124 7.515771 2188.590 16448.94\r## 51 7.2111026 7.466054 2195.865 16394.45\r## 52 7.3239334 7.414759 2203.448 16338.03\r## 53 7.4404301 7.361983 2211.331 16279.78\r## 54 7.5604233 7.307820 2219.511 16219.79\r## 55 7.6837491 7.252362 2227.981 16158.13\r## 56 7.8102497 7.195695 2236.737 16094.88\r## 57 7.9397733 7.137904 2245.773 16030.11\r## 58 8.0721744 7.079070 2255.086 15963.91\r## 59 8.2073138 7.019270 2264.672 15896.34\r## 60 8.3450584 6.958579 2274.526 15827.47\r## 61 8.4852814 6.897066 2284.647 15757.36\r## 62 8.3450584 6.958579 2274.526 15827.47\r## 63 8.2024387 7.021423 2264.325 15898.78\r## 64 8.0622577 7.083468 2254.386 15968.87\r## 65 7.9246451 7.144642 2244.714 16037.68\r## 66 7.7897368 7.204868 2235.312 16105.13\r## 67 7.6576759 7.264069 2226.185 16171.16\r## 68 7.5286121 7.322160 2217.337 16235.69\r## 69 7.4027022 7.379054 2208.772 16298.65\r## 70 7.2801099 7.434661 2200.496 16359.95\r## 71 7.1610055 7.488886 2192.515 16419.50\r## 72 7.0455660 7.541630 2184.835 16477.22\r## 73 6.9339743 7.592792 2177.462 16533.01\r## 74 6.8264193 7.642267 2170.402 16586.79\r## 75 6.7230945 7.689947 2163.663 16638.45\r## 76 6.6241981 7.735723 2157.252 16687.90\r## 77 6.5299311 7.779483 2151.176 16735.03\r## 78 6.4404969 7.821113 2145.443 16779.75\r## 79 6.3560994 7.860500 2140.061 16821.95\r## 80 6.2769419 7.897532 2135.038 16861.53\r## 81 6.2032250 7.932097 2130.381 16898.39\r## 82 6.1351447 7.964086 2126.098 16932.43\r## 83 6.0728906 7.993394 2122.197 16963.55\r## 84 6.0166436 8.019920 2118.684 16991.68\r## 85 5.9665736 8.043570 2115.567 17016.71\r## 86 5.9228372 8.064257 2112.852 17038.58\r## 87 5.8855756 8.081902 2110.544 17057.21\r## 88 5.8549125 8.096438 2108.649 17072.54\r## 89 5.8309519 8.107805 2107.170 17084.52\r## 90 5.8137767 8.115957 2106.112 17093.11\r## 91 5.8034473 8.120863 2105.475 17098.28\r## 92 5.8000000 8.122500 2105.263 17100.00\r## 93 5.8034473 8.120863 2105.475 17098.28\r## 94 5.8137767 8.115957 2106.112 17093.11\r## 95 5.8309519 8.107805 2107.170 17084.52\r## 96 5.8549125 8.096438 2108.649 17072.54\r## 97 5.8855756 8.081902 2110.544 17057.21\r## 98 5.9228372 8.064257 2112.852 17038.58\r## 99 5.9665736 8.043570 2115.567 17016.71\r## 100 6.0166436 8.019920 2118.684 16991.68\r## 101 6.0728906 7.993394 2122.197 16963.55\r## 102 6.1351447 7.964086 2126.098 16932.43\r## 103 6.2032250 7.932097 2130.381 16898.39\r## 104 6.2769419 7.897532 2135.038 16861.53\r## 105 6.3560994 7.860500 2140.061 16821.95\r## 106 6.4404969 7.821113 2145.443 16779.75\r## 107 6.5299311 7.779483 2151.176 16735.03\r## 108 6.6241981 7.735723 2157.252 16687.90\r## 109 6.7230945 7.689947 2163.663 16638.45\r## 110 6.8264193 7.642267 2170.402 16586.79\r## 111 6.9339743 7.592792 2177.462 16533.01\r## 112 7.0455660 7.541630 2184.835 16477.22\r## 113 7.1610055 7.488886 2192.515 16419.50\r## 114 7.2801099 7.434661 2200.496 16359.95\r## 115 7.4027022 7.379054 2208.772 16298.65\r## 116 7.5286121 7.322160 2217.337 16235.69\r## 117 7.6576759 7.264069 2226.185 16171.16\r## 118 7.7897368 7.204868 2235.312 16105.13\r## 119 7.9246451 7.144642 2244.714 16037.68\r## 120 8.0622577 7.083468 2254.386 15968.87\r## 121 8.2024387 7.021423 2264.325 15898.78\r## 122 8.3450584 6.958579 2274.526 15827.47\r## 123 8.2073138 7.019270 2264.672 15896.34\r## 124 8.0622577 7.083468 2254.386 15968.87\r## 125 7.9195959 7.146891 2244.361 16040.20\r## 126 7.7794601 7.209467 2234.599 16110.27\r## 127 7.6419893 7.271117 2225.106 16179.01\r## 128 7.5073298 7.331761 2215.884 16246.34\r## 129 7.3756356 7.391314 2206.940 16312.18\r## 130 7.2470684 7.449684 2198.277 16376.47\r## 131 7.1217975 7.506779 2189.901 16439.10\r## 132 7.0000000 7.562500 2181.818 16500.00\r## 133 6.8818602 7.616744 2174.035 16559.07\r## 134 6.7675697 7.669406 2166.558 16616.22\r## 135 6.6573268 7.720374 2159.395 16671.34\r## 136 6.5513357 7.769536 2152.552 16724.33\r## 137 6.4498062 7.816774 2146.038 16775.10\r## 138 6.3529521 7.861971 2139.861 16823.52\r## 139 6.2609903 7.905005 2134.028 16869.50\r## 140 6.1741396 7.945756 2128.549 16912.93\r## 141 6.0926185 7.984101 2123.431 16953.69\r## 142 6.0166436 8.019920 2118.684 16991.68\r## 143 5.9464275 8.053096 2114.316 17026.79\r## 144 5.8821765 8.083513 2110.334 17058.91\r## 145 5.8240879 8.111062 2106.747 17087.96\r## 146 5.7723479 8.135640 2103.562 17113.83\r## 147 5.7271284 8.157151 2100.787 17136.44\r## 148 5.6885851 8.175508 2098.427 17155.71\r## 149 5.6568542 8.190637 2096.488 17171.57\r## 150 5.6320511 8.202472 2094.975 17183.97\r## 151 5.6142675 8.210962 2093.892 17192.87\r## 152 5.6035703 8.216072 2093.241 17198.21\r## 153 5.6000000 8.217778 2093.023 17200.00\r## 154 5.6035703 8.216072 2093.241 17198.21\r## 155 5.6142675 8.210962 2093.892 17192.87\r## 156 5.6320511 8.202472 2094.975 17183.97\r## 157 5.6568542 8.190637 2096.488 17171.57\r## 158 5.6885851 8.175508 2098.427 17155.71\r## 159 5.7271284 8.157151 2100.787 17136.44\r## 160 5.7723479 8.135640 2103.562 17113.83\r## 161 5.8240879 8.111062 2106.747 17087.96\r## 162 5.8821765 8.083513 2110.334 17058.91\r## 163 5.9464275 8.053096 2114.316 17026.79\r## 164 6.0166436 8.019920 2118.684 16991.68\r## 165 6.0926185 7.984101 2123.431 16953.69\r## 166 6.1741396 7.945756 2128.549 16912.93\r## 167 6.2609903 7.905005 2134.028 16869.50\r## 168 6.3529521 7.861971 2139.861 16823.52\r## 169 6.4498062 7.816774 2146.038 16775.10\r## 170 6.5513357 7.769536 2152.552 16724.33\r## 171 6.6573268 7.720374 2159.395 16671.34\r## 172 6.7675697 7.669406 2166.558 16616.22\r## 173 6.8818602 7.616744 2174.035 16559.07\r## 174 7.0000000 7.562500 2181.818 16500.00\r## 175 7.1217975 7.506779 2189.901 16439.10\r## 176 7.2470684 7.449684 2198.277 16376.47\r## 177 7.3756356 7.391314 2206.940 16312.18\r## 178 7.5073298 7.331761 2215.884 16246.34\r## 179 7.6419893 7.271117 2225.106 16179.01\r## 180 7.7794601 7.209467 2234.599 16110.27\r## 181 7.9195959 7.146891 2244.361 16040.20\r## 182 8.0622577 7.083468 2254.386 15968.87\r## 183 8.2073138 7.019270 2264.672 15896.34\r## 184 8.0721744 7.079070 2255.086 15963.91\r## 185 7.9246451 7.144642 2244.714 16037.68\r## 186 7.7794601 7.209467 2234.599 16110.27\r## 187 7.6367532 7.273470 2224.746 16181.62\r## 188 7.4966659 7.336574 2215.157 16251.67\r## 189 7.3593478 7.398696 2205.838 16320.33\r## 190 7.2249567 7.459746 2196.793 16387.52\r## 191 7.0936591 7.519634 2188.028 16453.17\r## 192 6.9656299 7.578261 2179.548 16517.19\r## 193 6.8410526 7.635526 2171.360 16579.47\r## 194 6.7201190 7.691323 2163.469 16639.94\r## 195 6.6030296 7.745539 2155.884 16698.49\r## 196 6.4899923 7.798060 2148.612 16755.00\r## 197 6.3812225 7.848765 2141.660 16809.39\r## 198 6.2769419 7.897532 2135.038 16861.53\r## 199 6.1773781 7.944234 2128.753 16911.31\r## 200 6.0827625 7.988743 2122.814 16958.62\r## 201 5.9933296 8.030928 2117.232 17003.34\r## 202 5.9093147 8.070659 2112.014 17045.34\r## 203 5.8309519 8.107805 2107.170 17084.52\r## 204 5.7584720 8.142238 2102.710 17120.76\r## 205 5.6920998 8.173833 2098.642 17153.95\r## 206 5.6320511 8.202472 2094.975 17183.97\r## 207 5.5785303 8.228039 2091.718 17210.73\r## 208 5.5317267 8.250430 2088.877 17234.14\r## 209 5.4918121 8.269549 2086.461 17254.09\r## 210 5.4589376 8.285312 2084.476 17270.53\r## 211 5.4332311 8.297649 2082.925 17283.38\r## 212 5.4147945 8.306503 2081.815 17292.60\r## 213 5.4037024 8.311832 2081.148 17298.15\r## 214 5.4000000 8.313611 2080.925 17300.00\r## 215 5.4037024 8.311832 2081.148 17298.15\r## 216 5.4147945 8.306503 2081.815 17292.60\r## 217 5.4332311 8.297649 2082.925 17283.38\r## 218 5.4589376 8.285312 2084.476 17270.53\r## 219 5.4918121 8.269549 2086.461 17254.09\r## 220 5.5317267 8.250430 2088.877 17234.14\r## 221 5.5785303 8.228039 2091.718 17210.73\r## 222 5.6320511 8.202472 2094.975 17183.97\r## 223 5.6920998 8.173833 2098.642 17153.95\r## 224 5.7584720 8.142238 2102.710 17120.76\r## 225 5.8309519 8.107805 2107.170 17084.52\r## 226 5.9093147 8.070659 2112.014 17045.34\r## 227 5.9933296 8.030928 2117.232 17003.34\r## 228 6.0827625 7.988743 2122.814 16958.62\r## 229 6.1773781 7.944234 2128.753 16911.31\r## 230 6.2769419 7.897532 2135.038 16861.53\r## 231 6.3812225 7.848765 2141.660 16809.39\r## 232 6.4899923 7.798060 2148.612 16755.00\r## 233 6.6030296 7.745539 2155.884 16698.49\r## 234 6.7201190 7.691323 2163.469 16639.94\r## 235 6.8410526 7.635526 2171.360 16579.47\r## 236 6.9656299 7.578261 2179.548 16517.19\r## 237 7.0936591 7.519634 2188.028 16453.17\r## 238 7.2249567 7.459746 2196.793 16387.52\r## 239 7.3593478 7.398696 2205.838 16320.33\r## 240 7.4966659 7.336574 2215.157 16251.67\r## 241 7.6367532 7.273470 2224.746 16181.62\r## 242 7.7794601 7.209467 2234.599 16110.27\r## 243 7.9246451 7.144642 2244.714 16037.68\r## 244 8.0721744 7.079070 2255.086 15963.91\r## 245 7.9397733 7.137904 2245.773 16030.11\r## 246 7.7897368 7.204868 2235.312 16105.13\r## 247 7.6419893 7.271117 2225.106 16179.01\r## 248 7.4966659 7.336574 2215.157 16251.67\r## 249 7.3539105 7.401161 2205.471 16323.04\r## 250 7.2138755 7.464791 2196.051 16393.06\r## 251 7.0767224 7.527376 2186.903 16461.64\r## 252 6.9426220 7.588821 2178.031 16528.69\r## 253 6.8117545 7.649025 2169.443 16594.12\r## 254 6.6843100 7.707883 2161.144 16657.85\r## 255 6.5604878 7.765285 2153.141 16719.76\r## 256 6.4404969 7.821113 2145.443 16779.75\r## 257 6.3245553 7.875247 2138.056 16837.72\r## 258 6.2128898 7.927561 2130.990 16893.56\r## 259 6.1057350 7.977925 2124.253 16947.13\r## 260 6.0033324 8.026204 2117.855 16998.33\r## 261 5.9059292 8.072262 2111.804 17047.04\r## 262 5.8137767 8.115957 2106.112 17093.11\r## 263 5.7271284 8.157151 2100.787 17136.44\r## 264 5.6462377 8.195701 2095.840 17176.88\r## 265 5.5713553 8.231469 2091.282 17214.32\r## 266 5.5027266 8.264319 2087.121 17248.64\r## 267 5.4405882 8.294118 2083.369 17279.71\r## 268 5.3851648 8.320742 2080.033 17307.42\r## 269 5.3366656 8.344075 2077.123 17331.67\r## 270 5.2952809 8.364011 2074.646 17352.36\r## 271 5.2611786 8.380456 2072.609 17369.41\r## 272 5.2345009 8.393333 2071.019 17382.75\r## 273 5.2153619 8.402577 2069.879 17392.32\r## 274 5.2038447 8.408142 2069.194 17398.08\r## 275 5.2000000 8.410000 2068.966 17400.00\r## 276 5.2038447 8.408142 2069.194 17398.08\r## 277 5.2153619 8.402577 2069.879 17392.32\r## 278 5.2345009 8.393333 2071.019 17382.75\r## 279 5.2611786 8.380456 2072.609 17369.41\r## 280 5.2952809 8.364011 2074.646 17352.36\r## 281 5.3366656 8.344075 2077.123 17331.67\r## 282 5.3851648 8.320742 2080.033 17307.42\r## 283 5.4405882 8.294118 2083.369 17279.71\r## 284 5.5027266 8.264319 2087.121 17248.64\r## 285 5.5713553 8.231469 2091.282 17214.32\r## 286 5.6462377 8.195701 2095.840 17176.88\r## 287 5.7271284 8.157151 2100.787 17136.44\r## 288 5.8137767 8.115957 2106.112 17093.11\r## 289 5.9059292 8.072262 2111.804 17047.04\r## 290 6.0033324 8.026204 2117.855 16998.33\r## 291 6.1057350 7.977925 2124.253 16947.13\r## 292 6.2128898 7.927561 2130.990 16893.56\r## 293 6.3245553 7.875247 2138.056 16837.72\r## 294 6.4404969 7.821113 2145.443 16779.75\r## 295 6.5604878 7.765285 2153.141 16719.76\r## 296 6.6843100 7.707883 2161.144 16657.85\r## 297 6.8117545 7.649025 2169.443 16594.12\r## 298 6.9426220 7.588821 2178.031 16528.69\r## 299 7.0767224 7.527376 2186.903 16461.64\r## 300 7.2138755 7.464791 2196.051 16393.06\r## 301 7.3539105 7.401161 2205.471 16323.04\r## 302 7.4966659 7.336574 2215.157 16251.67\r## 303 7.6419893 7.271117 2225.106 16179.01\r## 304 7.7897368 7.204868 2235.312 16105.13\r## 305 7.9397733 7.137904 2245.773 16030.11\r## 306 7.8102497 7.195695 2236.737 16094.88\r## 307 7.6576759 7.264069 2226.185 16171.16\r## 308 7.5073298 7.331761 2215.884 16246.34\r## 309 7.3593478 7.398696 2205.838 16320.33\r## 310 7.2138755 7.464791 2196.051 16393.06\r## 311 7.0710678 7.529962 2186.527 16464.47\r## 312 6.9310894 7.594117 2177.272 16534.46\r## 313 6.7941151 7.657158 2168.290 16602.94\r## 314 6.6603303 7.718983 2159.589 16669.83\r## 315 6.5299311 7.779483 2151.176 16735.03\r## 316 6.4031242 7.838542 2143.056 16798.44\r## 317 6.2801274 7.896040 2135.239 16859.94\r## 318 6.1611687 7.951851 2127.733 16919.42\r## 319 6.0464866 8.005841 2120.546 16976.76\r## 320 5.9363288 8.057873 2113.689 17031.84\r## 321 5.8309519 8.107805 2107.170 17084.52\r## 322 5.7306195 8.155489 2101.001 17134.69\r## 323 5.6356011 8.200777 2095.192 17182.20\r## 324 5.5461698 8.243517 2089.753 17226.92\r## 325 5.4626001 8.283555 2084.697 17268.70\r## 326 5.3851648 8.320742 2080.033 17307.42\r## 327 5.3141321 8.354927 2075.773 17342.93\r## 328 5.2497619 8.385966 2071.928 17375.12\r## 329 5.1923020 8.413721 2068.508 17403.85\r## 330 5.1419841 8.438064 2065.522 17429.01\r## 331 5.0990195 8.458878 2062.979 17450.49\r## 332 5.0635956 8.476058 2060.888 17468.20\r## 333 5.0358713 8.489516 2059.253 17482.06\r## 334 5.0159745 8.499181 2058.082 17492.01\r## 335 5.0039984 8.505001 2057.378 17498.00\r## 336 5.0000000 8.506944 2057.143 17500.00\r## 337 5.0039984 8.505001 2057.378 17498.00\r## 338 5.0159745 8.499181 2058.082 17492.01\r## 339 5.0358713 8.489516 2059.253 17482.06\r## 340 5.0635956 8.476058 2060.888 17468.20\r## 341 5.0990195 8.458878 2062.979 17450.49\r## 342 5.1419841 8.438064 2065.522 17429.01\r## 343 5.1923020 8.413721 2068.508 17403.85\r## 344 5.2497619 8.385966 2071.928 17375.12\r## 345 5.3141321 8.354927 2075.773 17342.93\r## 346 5.3851648 8.320742 2080.033 17307.42\r## 347 5.4626001 8.283555 2084.697 17268.70\r## 348 5.5461698 8.243517 2089.753 17226.92\r## 349 5.6356011 8.200777 2095.192 17182.20\r## 350 5.7306195 8.155489 2101.001 17134.69\r## 351 5.8309519 8.107805 2107.170 17084.52\r## 352 5.9363288 8.057873 2113.689 17031.84\r## 353 6.0464866 8.005841 2120.546 16976.76\r## 354 6.1611687 7.951851 2127.733 16919.42\r## 355 6.2801274 7.896040 2135.239 16859.94\r## 356 6.4031242 7.838542 2143.056 16798.44\r## 357 6.5299311 7.779483 2151.176 16735.03\r## 358 6.6603303 7.718983 2159.589 16669.83\r## 359 6.7941151 7.657158 2168.290 16602.94\r## 360 6.9310894 7.594117 2177.272 16534.46\r## 361 7.0710678 7.529962 2186.527 16464.47\r## 362 7.2138755 7.464791 2196.051 16393.06\r## 363 7.3593478 7.398696 2205.838 16320.33\r## 364 7.5073298 7.331761 2215.884 16246.34\r## 365 7.6576759 7.264069 2226.185 16171.16\r## 366 7.8102497 7.195695 2236.737 16094.88\r## 367 7.6837491 7.252362 2227.981 16158.13\r## 368 7.5286121 7.322160 2217.337 16235.69\r## 369 7.3756356 7.391314 2206.940 16312.18\r## 370 7.2249567 7.459746 2196.793 16387.52\r## 371 7.0767224 7.527376 2186.903 16461.64\r## 372 6.9310894 7.594117 2177.272 16534.46\r## 373 6.7882251 7.659875 2167.906 16605.89\r## 374 6.6483081 7.724551 2158.811 16675.85\r## 375 6.5115282 7.788040 2149.994 16744.24\r## 376 6.3780875 7.850229 2141.461 16810.96\r## 377 6.2481997 7.911000 2133.220 16875.90\r## 378 6.1220911 7.970227 2125.279 16938.95\r## 379 6.0000000 8.027778 2117.647 17000.00\r## 380 5.8821765 8.083513 2110.334 17058.91\r## 381 5.7688820 8.137288 2103.349 17115.56\r## 382 5.6603887 8.188951 2096.704 17169.81\r## 383 5.5569776 8.238346 2090.409 17221.51\r## 384 5.4589376 8.285312 2084.476 17270.53\r## 385 5.3665631 8.329687 2078.916 17316.72\r## 386 5.2801515 8.371305 2073.742 17359.92\r## 387 5.2000000 8.410000 2068.966 17400.00\r## 388 5.1264022 8.445610 2064.599 17436.80\r## 389 5.0596443 8.477975 2060.654 17470.18\r## 390 5.0000000 8.506944 2057.143 17500.00\r## 391 4.9477268 8.532374 2054.075 17526.14\r## 392 4.9030603 8.554133 2051.461 17548.47\r## 393 4.8662100 8.572106 2049.309 17566.89\r## 394 4.8373546 8.586192 2047.628 17581.32\r## 395 4.8166378 8.596312 2046.422 17591.68\r## 396 4.8041649 8.602408 2045.697 17597.92\r## 397 4.8000000 8.604444 2045.455 17600.00\r## 398 4.8041649 8.602408 2045.697 17597.92\r## 399 4.8166378 8.596312 2046.422 17591.68\r## 400 4.8373546 8.586192 2047.628 17581.32\r## 401 4.8662100 8.572106 2049.309 17566.89\r## 402 4.9030603 8.554133 2051.461 17548.47\r## 403 4.9477268 8.532374 2054.075 17526.14\r## 404 5.0000000 8.506944 2057.143 17500.00\r## 405 5.0596443 8.477975 2060.654 17470.18\r## 406 5.1264022 8.445610 2064.599 17436.80\r## 407 5.2000000 8.410000 2068.966 17400.00\r## 408 5.2801515 8.371305 2073.742 17359.92\r## 409 5.3665631 8.329687 2078.916 17316.72\r## 410 5.4589376 8.285312 2084.476 17270.53\r## 411 5.5569776 8.238346 2090.409 17221.51\r## 412 5.6603887 8.188951 2096.704 17169.81\r## 413 5.7688820 8.137288 2103.349 17115.56\r## 414 5.8821765 8.083513 2110.334 17058.91\r## 415 6.0000000 8.027778 2117.647 17000.00\r## 416 6.1220911 7.970227 2125.279 16938.95\r## 417 6.2481997 7.911000 2133.220 16875.90\r## 418 6.3780875 7.850229 2141.461 16810.96\r## 419 6.5115282 7.788040 2149.994 16744.24\r## 420 6.6483081 7.724551 2158.811 16675.85\r## 421 6.7882251 7.659875 2167.906 16605.89\r## 422 6.9310894 7.594117 2177.272 16534.46\r## 423 7.0767224 7.527376 2186.903 16461.64\r## 424 7.2249567 7.459746 2196.793 16387.52\r## 425 7.3756356 7.391314 2206.940 16312.18\r## 426 7.5286121 7.322160 2217.337 16235.69\r## 427 7.6837491 7.252362 2227.981 16158.13\r## 428 7.5604233 7.307820 2219.511 16219.79\r## 429 7.4027022 7.379054 2208.772 16298.65\r## 430 7.2470684 7.449684 2198.277 16376.47\r## 431 7.0936591 7.519634 2188.028 16453.17\r## 432 6.9426220 7.588821 2178.031 16528.69\r## 433 6.7941151 7.657158 2168.290 16602.94\r## 434 6.6483081 7.724551 2158.811 16675.85\r## 435 6.5053824 7.790899 2149.599 16747.31\r## 436 6.3655322 7.856093 2140.661 16817.23\r## 437 6.2289646 7.920020 2132.005 16885.52\r## 438 6.0959003 7.982555 2123.637 16952.05\r## 439 5.9665736 8.043570 2115.567 17016.71\r## 440 5.8412327 8.102926 2107.804 17079.38\r## 441 5.7201399 8.160478 2100.359 17139.93\r## 442 5.6035703 8.216072 2093.241 17198.21\r## 443 5.4918121 8.269549 2086.461 17254.09\r## 444 5.3851648 8.320742 2080.033 17307.42\r## 445 5.2839379 8.369479 2073.968 17358.03\r## 446 5.1884487 8.415584 2068.279 17405.78\r## 447 5.0990195 8.458878 2062.979 17450.49\r## 448 5.0159745 8.499181 2058.082 17492.01\r## 449 4.9396356 8.536314 2053.601 17530.18\r## 450 4.8703183 8.570101 2049.549 17564.84\r## 451 4.8083261 8.600374 2045.938 17595.84\r## 452 4.7539457 8.626975 2042.782 17623.03\r## 453 4.7074409 8.649755 2040.090 17646.28\r## 454 4.6690470 8.668585 2037.873 17665.48\r## 455 4.6389654 8.683353 2036.140 17680.52\r## 456 4.6173586 8.693967 2034.896 17691.32\r## 457 4.6043458 8.700363 2034.148 17697.83\r## 458 4.6000000 8.702500 2033.898 17700.00\r## 459 4.6043458 8.700363 2034.148 17697.83\r## 460 4.6173586 8.693967 2034.896 17691.32\r## 461 4.6389654 8.683353 2036.140 17680.52\r## 462 4.6690470 8.668585 2037.873 17665.48\r## 463 4.7074409 8.649755 2040.090 17646.28\r## 464 4.7539457 8.626975 2042.782 17623.03\r## 465 4.8083261 8.600374 2045.938 17595.84\r## 466 4.8703183 8.570101 2049.549 17564.84\r## 467 4.9396356 8.536314 2053.601 17530.18\r## 468 5.0159745 8.499181 2058.082 17492.01\r## 469 5.0990195 8.458878 2062.979 17450.49\r## 470 5.1884487 8.415584 2068.279 17405.78\r## 471 5.2839379 8.369479 2073.968 17358.03\r## 472 5.3851648 8.320742 2080.033 17307.42\r## 473 5.4918121 8.269549 2086.461 17254.09\r## 474 5.6035703 8.216072 2093.241 17198.21\r## 475 5.7201399 8.160478 2100.359 17139.93\r## 476 5.8412327 8.102926 2107.804 17079.38\r## 477 5.9665736 8.043570 2115.567 17016.71\r## 478 6.0959003 7.982555 2123.637 16952.05\r## 479 6.2289646 7.920020 2132.005 16885.52\r## 480 6.3655322 7.856093 2140.661 16817.23\r## 481 6.5053824 7.790899 2149.599 16747.31\r## 482 6.6483081 7.724551 2158.811 16675.85\r## 483 6.7941151 7.657158 2168.290 16602.94\r## 484 6.9426220 7.588821 2178.031 16528.69\r## 485 7.0936591 7.519634 2188.028 16453.17\r## 486 7.2470684 7.449684 2198.277 16376.47\r## 487 7.4027022 7.379054 2208.772 16298.65\r## 488 7.5604233 7.307820 2219.511 16219.79\r## 489 7.4404301 7.361983 2211.331 16279.78\r## 490 7.2801099 7.434661 2200.496 16359.95\r## 491 7.1217975 7.506779 2189.901 16439.10\r## 492 6.9656299 7.578261 2179.548 16517.19\r## 493 6.8117545 7.649025 2169.443 16594.12\r## 494 6.6603303 7.718983 2159.589 16669.83\r## 495 6.5115282 7.788040 2149.994 16744.24\r## 496 6.3655322 7.856093 2140.661 16817.23\r## 497 6.2225397 7.923034 2131.599 16888.73\r## 498 6.0827625 7.988743 2122.814 16958.62\r## 499 5.9464275 8.053096 2114.316 17026.79\r## 500 5.8137767 8.115957 2106.112 17093.11\r## 501 5.6850682 8.177184 2098.212 17157.47\r## 502 5.5605755 8.236625 2090.627 17219.71\r## 503 5.4405882 8.294118 2083.369 17279.71\r## 504 5.3254108 8.349494 2076.449 17337.29\r## 505 5.2153619 8.402577 2069.879 17392.32\r## 506 5.1107729 8.453182 2063.674 17444.61\r## 507 5.0119856 8.501119 2057.848 17494.01\r## 508 4.9193496 8.546195 2052.413 17540.33\r## 509 4.8332184 8.588212 2047.387 17583.39\r## 510 4.7539457 8.626975 2042.782 17623.03\r## 511 4.6818800 8.662289 2038.614 17659.06\r## 512 4.6173586 8.693967 2034.896 17691.32\r## 513 4.5607017 8.721832 2031.643 17719.65\r## 514 4.5122057 8.745719 2028.867 17743.90\r## 515 4.4721360 8.765480 2026.578 17763.93\r## 516 4.4407207 8.780989 2024.788 17779.64\r## 517 4.4181444 8.792142 2023.503 17790.93\r## 518 4.4045431 8.798865 2022.730 17797.73\r## 519 4.4000000 8.801111 2022.472 17800.00\r## 520 4.4045431 8.798865 2022.730 17797.73\r## 521 4.4181444 8.792142 2023.503 17790.93\r## 522 4.4407207 8.780989 2024.788 17779.64\r## 523 4.4721360 8.765480 2026.578 17763.93\r## 524 4.5122057 8.745719 2028.867 17743.90\r## 525 4.5607017 8.721832 2031.643 17719.65\r## 526 4.6173586 8.693967 2034.896 17691.32\r## 527 4.6818800 8.662289 2038.614 17659.06\r## 528 4.7539457 8.626975 2042.782 17623.03\r## 529 4.8332184 8.588212 2047.387 17583.39\r## 530 4.9193496 8.546195 2052.413 17540.33\r## 531 5.0119856 8.501119 2057.848 17494.01\r## 532 5.1107729 8.453182 2063.674 17444.61\r## 533 5.2153619 8.402577 2069.879 17392.32\r## 534 5.3254108 8.349494 2076.449 17337.29\r## 535 5.4405882 8.294118 2083.369 17279.71\r## 536 5.5605755 8.236625 2090.627 17219.71\r## 537 5.6850682 8.177184 2098.212 17157.47\r## 538 5.8137767 8.115957 2106.112 17093.11\r## 539 5.9464275 8.053096 2114.316 17026.79\r## 540 6.0827625 7.988743 2122.814 16958.62\r## 541 6.2225397 7.923034 2131.599 16888.73\r## 542 6.3655322 7.856093 2140.661 16817.23\r## 543 6.5115282 7.788040 2149.994 16744.24\r## 544 6.6603303 7.718983 2159.589 16669.83\r## 545 6.8117545 7.649025 2169.443 16594.12\r## 546 6.9656299 7.578261 2179.548 16517.19\r## 547 7.1217975 7.506779 2189.901 16439.10\r## 548 7.2801099 7.434661 2200.496 16359.95\r## 549 7.4404301 7.361983 2211.331 16279.78\r## 550 7.3239334 7.414759 2203.448 16338.03\r## 551 7.1610055 7.488886 2192.515 16419.50\r## 552 7.0000000 7.562500 2181.818 16500.00\r## 553 6.8410526 7.635526 2171.360 16579.47\r## 554 6.6843100 7.707883 2161.144 16657.85\r## 555 6.5299311 7.779483 2151.176 16735.03\r## 556 6.3780875 7.850229 2141.461 16810.96\r## 557 6.2289646 7.920020 2132.005 16885.52\r## 558 6.0827625 7.988743 2122.814 16958.62\r## 559 5.9396970 8.056279 2113.898 17030.15\r## 560 5.8000000 8.122500 2105.263 17100.00\r## 561 5.6639209 8.187266 2096.920 17168.04\r## 562 5.5317267 8.250430 2088.877 17234.14\r## 563 5.4037024 8.311832 2081.148 17298.15\r## 564 5.2801515 8.371305 2073.742 17359.92\r## 565 5.1613952 8.428669 2066.673 17419.30\r## 566 5.0477718 8.483738 2059.955 17476.11\r## 567 4.9396356 8.536314 2053.601 17530.18\r## 568 4.8373546 8.586192 2047.628 17581.32\r## 569 4.7413078 8.633162 2042.050 17629.35\r## 570 4.6518813 8.677010 2036.884 17674.06\r## 571 4.5694639 8.717520 2032.145 17715.27\r## 572 4.4944410 8.754477 2027.851 17752.78\r## 573 4.4271887 8.787673 2024.018 17786.41\r## 574 4.3680659 8.816908 2020.659 17815.97\r## 575 4.3174066 8.841996 2017.791 17841.30\r## 576 4.2755117 8.862771 2015.424 17862.24\r## 577 4.2426407 8.879089 2013.572 17878.68\r## 578 4.2190046 8.890831 2012.241 17890.50\r## 579 4.2047592 8.897912 2011.441 17897.62\r## 580 4.2000000 8.900278 2011.173 17900.00\r## 581 4.2047592 8.897912 2011.441 17897.62\r## 582 4.2190046 8.890831 2012.241 17890.50\r## 583 4.2426407 8.879089 2013.572 17878.68\r## 584 4.2755117 8.862771 2015.424 17862.24\r## 585 4.3174066 8.841996 2017.791 17841.30\r## 586 4.3680659 8.816908 2020.659 17815.97\r## 587 4.4271887 8.787673 2024.018 17786.41\r## 588 4.4944410 8.754477 2027.851 17752.78\r## 589 4.5694639 8.717520 2032.145 17715.27\r## 590 4.6518813 8.677010 2036.884 17674.06\r## 591 4.7413078 8.633162 2042.050 17629.35\r## 592 4.8373546 8.586192 2047.628 17581.32\r## 593 4.9396356 8.536314 2053.601 17530.18\r## 594 5.0477718 8.483738 2059.955 17476.11\r## 595 5.1613952 8.428669 2066.673 17419.30\r## 596 5.2801515 8.371305 2073.742 17359.92\r## 597 5.4037024 8.311832 2081.148 17298.15\r## 598 5.5317267 8.250430 2088.877 17234.14\r## 599 5.6639209 8.187266 2096.920 17168.04\r## 600 5.8000000 8.122500 2105.263 17100.00\r## 601 5.9396970 8.056279 2113.898 17030.15\r## 602 6.0827625 7.988743 2122.814 16958.62\r## 603 6.2289646 7.920020 2132.005 16885.52\r## 604 6.3780875 7.850229 2141.461 16810.96\r## 605 6.5299311 7.779483 2151.176 16735.03\r## 606 6.6843100 7.707883 2161.144 16657.85\r## 607 6.8410526 7.635526 2171.360 16579.47\r## 608 7.0000000 7.562500 2181.818 16500.00\r## 609 7.1610055 7.488886 2192.515 16419.50\r## 610 7.3239334 7.414759 2203.448 16338.03\r## 611 7.2111026 7.466054 2195.865 16394.45\r## 612 7.0455660 7.541630 2184.835 16477.22\r## 613 6.8818602 7.616744 2174.035 16559.07\r## 614 6.7201190 7.691323 2163.469 16639.94\r## 615 6.5604878 7.765285 2153.141 16719.76\r## 616 6.4031242 7.838542 2143.056 16798.44\r## 617 6.2481997 7.911000 2133.220 16875.90\r## 618 6.0959003 7.982555 2123.637 16952.05\r## 619 5.9464275 8.053096 2114.316 17026.79\r## 620 5.8000000 8.122500 2105.263 17100.00\r## 621 5.6568542 8.190637 2096.488 17171.57\r## 622 5.5172457 8.257364 2088.000 17241.38\r## 623 5.3814496 8.322528 2079.810 17309.28\r## 624 5.2497619 8.385966 2071.928 17375.12\r## 625 5.1224994 8.447500 2064.368 17438.75\r## 626 5.0000000 8.506944 2057.143 17500.00\r## 627 4.8826222 8.564099 2050.267 17558.69\r## 628 4.7707442 8.618753 2043.756 17614.63\r## 629 4.6647615 8.670688 2037.626 17667.62\r## 630 4.5650849 8.719675 2031.894 17717.46\r## 631 4.4721360 8.765480 2026.578 17763.93\r## 632 4.3863424 8.807865 2021.696 17806.83\r## 633 4.3081318 8.846593 2017.266 17845.93\r## 634 4.2379240 8.881431 2013.306 17881.04\r## 635 4.1761226 8.912154 2009.833 17911.94\r## 636 4.1231056 8.938552 2006.863 17938.45\r## 637 4.0792156 8.960436 2004.411 17960.39\r## 638 4.0447497 8.977639 2002.489 17977.63\r## 639 4.0199502 8.990028 2001.109 17990.02\r## 640 4.0049969 8.997502 2000.278 17997.50\r## 641 4.0000000 9.000000 2000.000 18000.00\r## 642 4.0049969 8.997502 2000.278 17997.50\r## 643 4.0199502 8.990028 2001.109 17990.02\r## 644 4.0447497 8.977639 2002.489 17977.63\r## 645 4.0792156 8.960436 2004.411 17960.39\r## 646 4.1231056 8.938552 2006.863 17938.45\r## 647 4.1761226 8.912154 2009.833 17911.94\r## 648 4.2379240 8.881431 2013.306 17881.04\r## 649 4.3081318 8.846593 2017.266 17845.93\r## 650 4.3863424 8.807865 2021.696 17806.83\r## 651 4.4721360 8.765480 2026.578 17763.93\r## 652 4.5650849 8.719675 2031.894 17717.46\r## 653 4.6647615 8.670688 2037.626 17667.62\r## 654 4.7707442 8.618753 2043.756 17614.63\r## 655 4.8826222 8.564099 2050.267 17558.69\r## 656 5.0000000 8.506944 2057.143 17500.00\r## 657 5.1224994 8.447500 2064.368 17438.75\r## 658 5.2497619 8.385966 2071.928 17375.12\r## 659 5.3814496 8.322528 2079.810 17309.28\r## 660 5.5172457 8.257364 2088.000 17241.38\r## 661 5.6568542 8.190637 2096.488 17171.57\r## 662 5.8000000 8.122500 2105.263 17100.00\r## 663 5.9464275 8.053096 2114.316 17026.79\r## 664 6.0959003 7.982555 2123.637 16952.05\r## 665 6.2481997 7.911000 2133.220 16875.90\r## 666 6.4031242 7.838542 2143.056 16798.44\r## 667 6.5604878 7.765285 2153.141 16719.76\r## 668 6.7201190 7.691323 2163.469 16639.94\r## 669 6.8818602 7.616744 2174.035 16559.07\r## 670 7.0455660 7.541630 2184.835 16477.22\r## 671 7.2111026 7.466054 2195.865 16394.45\r## 672 7.1021124 7.515771 2188.590 16448.94\r## 673 6.9339743 7.592792 2177.462 16533.01\r## 674 6.7675697 7.669406 2166.558 16616.22\r## 675 6.6030296 7.745539 2155.884 16698.49\r## 676 6.4404969 7.821113 2145.443 16779.75\r## 677 6.2801274 7.896040 2135.239 16859.94\r## 678 6.1220911 7.970227 2125.279 16938.95\r## 679 5.9665736 8.043570 2115.567 17016.71\r## 680 5.8137767 8.115957 2106.112 17093.11\r## 681 5.6639209 8.187266 2096.920 17168.04\r## 682 5.5172457 8.257364 2088.000 17241.38\r## 683 5.3740115 8.326105 2079.363 17312.99\r## 684 5.2345009 8.393333 2071.019 17382.75\r## 685 5.0990195 8.458878 2062.979 17450.49\r## 686 4.9678969 8.522557 2055.258 17516.05\r## 687 4.8414874 8.584174 2047.868 17579.26\r## 688 4.7201695 8.643517 2040.826 17639.92\r## 689 4.6043458 8.700363 2034.148 17697.83\r## 690 4.4944410 8.754477 2027.851 17752.78\r## 691 4.3908997 8.805611 2021.955 17804.55\r## 692 4.2941821 8.853510 2016.478 17852.91\r## 693 4.2047592 8.897912 2011.441 17897.62\r## 694 4.1231056 8.938552 2006.863 17938.45\r## 695 4.0496913 8.975171 2002.764 17975.15\r## 696 3.9849718 9.007516 1999.165 18007.51\r## 697 3.9293765 9.035346 1996.084 18035.31\r## 698 3.8832976 9.058446 1993.537 18058.35\r## 699 3.8470768 9.076624 1991.540 18076.46\r## 700 3.8209946 9.089725 1990.104 18089.50\r## 701 3.8052595 9.097634 1989.239 18097.37\r## 702 3.8000000 9.100278 1988.950 18100.00\r## 703 3.8052595 9.097634 1989.239 18097.37\r## 704 3.8209946 9.089725 1990.104 18089.50\r## 705 3.8470768 9.076624 1991.540 18076.46\r## 706 3.8832976 9.058446 1993.537 18058.35\r## 707 3.9293765 9.035346 1996.084 18035.31\r## 708 3.9849718 9.007516 1999.165 18007.51\r## 709 4.0496913 8.975171 2002.764 17975.15\r## 710 4.1231056 8.938552 2006.863 17938.45\r## 711 4.2047592 8.897912 2011.441 17897.62\r## 712 4.2941821 8.853510 2016.478 17852.91\r## 713 4.3908997 8.805611 2021.955 17804.55\r## 714 4.4944410 8.754477 2027.851 17752.78\r## 715 4.6043458 8.700363 2034.148 17697.83\r## 716 4.7201695 8.643517 2040.826 17639.92\r## 717 4.8414874 8.584174 2047.868 17579.26\r## 718 4.9678969 8.522557 2055.258 17516.05\r## 719 5.0990195 8.458878 2062.979 17450.49\r## 720 5.2345009 8.393333 2071.019 17382.75\r## 721 5.3740115 8.326105 2079.363 17312.99\r## 722 5.5172457 8.257364 2088.000 17241.38\r## 723 5.6639209 8.187266 2096.920 17168.04\r## 724 5.8137767 8.115957 2106.112 17093.11\r## 725 5.9665736 8.043570 2115.567 17016.71\r## 726 6.1220911 7.970227 2125.279 16938.95\r## 727 6.2801274 7.896040 2135.239 16859.94\r## 728 6.4404969 7.821113 2145.443 16779.75\r## 729 6.6030296 7.745539 2155.884 16698.49\r## 730 6.7675697 7.669406 2166.558 16616.22\r## 731 6.9339743 7.592792 2177.462 16533.01\r## 732 7.1021124 7.515771 2188.590 16448.94\r## 733 6.9971423 7.563810 2181.629 16501.43\r## 734 6.8264193 7.642267 2170.402 16586.79\r## 735 6.6573268 7.720374 2159.395 16671.34\r## 736 6.4899923 7.798060 2148.612 16755.00\r## 737 6.3245553 7.875247 2138.056 16837.72\r## 738 6.1611687 7.951851 2127.733 16919.42\r## 739 6.0000000 8.027778 2117.647 17000.00\r## 740 5.8412327 8.102926 2107.804 17079.38\r## 741 5.6850682 8.177184 2098.212 17157.47\r## 742 5.5317267 8.250430 2088.877 17234.14\r## 743 5.3814496 8.322528 2079.810 17309.28\r## 744 5.2345009 8.393333 2071.019 17382.75\r## 745 5.0911688 8.462684 2062.515 17454.42\r## 746 4.9517674 8.530407 2054.312 17524.12\r## 747 4.8166378 8.596312 2046.422 17591.68\r## 748 4.6861498 8.660195 2038.860 17656.93\r## 749 4.5607017 8.721832 2031.643 17719.65\r## 750 4.4407207 8.780989 2024.788 17779.64\r## 751 4.3266615 8.837410 2018.314 17836.67\r## 752 4.2190046 8.890831 2012.241 17890.50\r## 753 4.1182521 8.940971 2006.591 17940.87\r## 754 4.0249224 8.987543 2001.386 17987.54\r## 755 3.9395431 9.030254 1996.647 18030.23\r## 756 3.8626416 9.068810 1992.398 18068.68\r## 757 3.7947332 9.102926 1988.661 18102.63\r## 758 3.7363083 9.132329 1985.457 18131.85\r## 759 3.6878178 9.156768 1982.806 18156.09\r## 760 3.6496575 9.176024 1980.724 18175.17\r## 761 3.6221541 9.189914 1979.227 18188.92\r## 762 3.6055513 9.198305 1978.324 18197.22\r## 763 3.6000000 9.201111 1978.022 18200.00\r## 764 3.6055513 9.198305 1978.324 18197.22\r## 765 3.6221541 9.189914 1979.227 18188.92\r## 766 3.6496575 9.176024 1980.724 18175.17\r## 767 3.6878178 9.156768 1982.806 18156.09\r## 768 3.7363083 9.132329 1985.457 18131.85\r## 769 3.7947332 9.102926 1988.661 18102.63\r## 770 3.8626416 9.068810 1992.398 18068.68\r## 771 3.9395431 9.030254 1996.647 18030.23\r## 772 4.0249224 8.987543 2001.386 17987.54\r## 773 4.1182521 8.940971 2006.591 17940.87\r## 774 4.2190046 8.890831 2012.241 17890.50\r## 775 4.3266615 8.837410 2018.314 17836.67\r## 776 4.4407207 8.780989 2024.788 17779.64\r## 777 4.5607017 8.721832 2031.643 17719.65\r## 778 4.6861498 8.660195 2038.860 17656.93\r## 779 4.8166378 8.596312 2046.422 17591.68\r## 780 4.9517674 8.530407 2054.312 17524.12\r## 781 5.0911688 8.462684 2062.515 17454.42\r## 782 5.2345009 8.393333 2071.019 17382.75\r## 783 5.3814496 8.322528 2079.810 17309.28\r## 784 5.5317267 8.250430 2088.877 17234.14\r## 785 5.6850682 8.177184 2098.212 17157.47\r## 786 5.8412327 8.102926 2107.804 17079.38\r## 787 6.0000000 8.027778 2117.647 17000.00\r## 788 6.1611687 7.951851 2127.733 16919.42\r## 789 6.3245553 7.875247 2138.056 16837.72\r## 790 6.4899923 7.798060 2148.612 16755.00\r## 791 6.6573268 7.720374 2159.395 16671.34\r## 792 6.8264193 7.642267 2170.402 16586.79\r## 793 6.9971423 7.563810 2181.629 16501.43\r## 794 6.8963759 7.610069 2174.988 16551.81\r## 795 6.7230945 7.689947 2163.663 16638.45\r## 796 6.5513357 7.769536 2152.552 16724.33\r## 797 6.3812225 7.848765 2141.660 16809.39\r## 798 6.2128898 7.927561 2130.990 16893.56\r## 799 6.0464866 8.005841 2120.546 16976.76\r## 800 5.8821765 8.083513 2110.334 17058.91\r## 801 5.7201399 8.160478 2100.359 17139.93\r## 802 5.5605755 8.236625 2090.627 17219.71\r## 803 5.4037024 8.311832 2081.148 17298.15\r## 804 5.2497619 8.385966 2071.928 17375.12\r## 805 5.0990195 8.458878 2062.979 17450.49\r## 806 4.9517674 8.530407 2054.312 17524.12\r## 807 4.8083261 8.600374 2045.938 17595.84\r## 808 4.6690470 8.668585 2037.873 17665.48\r## 809 4.5343136 8.734826 2030.131 17732.84\r## 810 4.4045431 8.798865 2022.730 17797.73\r## 811 4.2801869 8.860452 2015.688 17859.91\r## 812 4.1617304 8.919316 2009.026 17919.13\r## 813 4.0496913 8.975171 2002.764 17975.15\r## 814 3.9446166 9.027713 1996.928 18027.69\r## 815 3.8470768 9.076624 1991.540 18076.46\r## 816 3.7576588 9.121578 1986.627 18121.17\r## 817 3.6769553 9.162247 1982.213 18161.52\r## 818 3.6055513 9.198305 1978.324 18197.22\r## 819 3.5440090 9.229439 1974.984 18228.00\r## 820 3.4928498 9.255361 1972.216 18253.58\r## 821 3.4525353 9.275814 1970.041 18273.73\r## 822 3.4234486 9.290584 1968.474 18288.28\r## 823 3.4058773 9.299513 1967.529 18297.06\r## 824 3.4000000 9.302500 1967.213 18300.00\r## 825 3.4058773 9.299513 1967.529 18297.06\r## 826 3.4234486 9.290584 1968.474 18288.28\r## 827 3.4525353 9.275814 1970.041 18273.73\r## 828 3.4928498 9.255361 1972.216 18253.58\r## 829 3.5440090 9.229439 1974.984 18228.00\r## 830 3.6055513 9.198305 1978.324 18197.22\r## 831 3.6769553 9.162247 1982.213 18161.52\r## 832 3.7576588 9.121578 1986.627 18121.17\r## 833 3.8470768 9.076624 1991.540 18076.46\r## 834 3.9446166 9.027713 1996.928 18027.69\r## 835 4.0496913 8.975171 2002.764 17975.15\r## 836 4.1617304 8.919316 2009.026 17919.13\r## 837 4.2801869 8.860452 2015.688 17859.91\r## 838 4.4045431 8.798865 2022.730 17797.73\r## 839 4.5343136 8.734826 2030.131 17732.84\r## 840 4.6690470 8.668585 2037.873 17665.48\r## 841 4.8083261 8.600374 2045.938 17595.84\r## 842 4.9517674 8.530407 2054.312 17524.12\r## 843 5.0990195 8.458878 2062.979 17450.49\r## 844 5.2497619 8.385966 2071.928 17375.12\r## 845 5.4037024 8.311832 2081.148 17298.15\r## 846 5.5605755 8.236625 2090.627 17219.71\r## 847 5.7201399 8.160478 2100.359 17139.93\r## 848 5.8821765 8.083513 2110.334 17058.91\r## 849 6.0464866 8.005841 2120.546 16976.76\r## 850 6.2128898 7.927561 2130.990 16893.56\r## 851 6.3812225 7.848765 2141.660 16809.39\r## 852 6.5513357 7.769536 2152.552 16724.33\r## 853 6.7230945 7.689947 2163.663 16638.45\r## 854 6.8963759 7.610069 2174.988 16551.81\r## 855 6.8000000 7.654444 2168.675 16600.00\r## 856 6.6241981 7.735723 2157.252 16687.90\r## 857 6.4498062 7.816774 2146.038 16775.10\r## 858 6.2769419 7.897532 2135.038 16861.53\r## 859 6.1057350 7.977925 2124.253 16947.13\r## 860 5.9363288 8.057873 2113.689 17031.84\r## 861 5.7688820 8.137288 2103.349 17115.56\r## 862 5.6035703 8.216072 2093.241 17198.21\r## 863 5.4405882 8.294118 2083.369 17279.71\r## 864 5.2801515 8.371305 2073.742 17359.92\r## 865 5.1224994 8.447500 2064.368 17438.75\r## 866 4.9678969 8.522557 2055.258 17516.05\r## 867 4.8166378 8.596312 2046.422 17591.68\r## 868 4.6690470 8.668585 2037.873 17665.48\r## 869 4.5254834 8.739176 2029.626 17737.26\r## 870 4.3863424 8.807865 2021.696 17806.83\r## 871 4.2520583 8.874412 2014.102 17873.97\r## 872 4.1231056 8.938552 2006.863 17938.45\r## 873 4.0000000 9.000000 2000.000 18000.00\r## 874 3.8832976 9.058446 1993.537 18058.35\r## 875 3.7735925 9.113560 1987.500 18113.20\r## 876 3.6715120 9.164993 1981.916 18164.24\r## 877 3.5777088 9.212384 1976.811 18211.15\r## 878 3.4928498 9.255361 1972.216 18253.58\r## 879 3.4176015 9.293555 1968.160 18291.20\r## 880 3.3526109 9.326605 1964.669 18323.69\r## 881 3.2984845 9.354175 1961.772 18350.76\r## 882 3.2557641 9.375964 1959.491 18372.12\r## 883 3.2249031 9.391721 1957.847 18387.55\r## 884 3.2062439 9.401253 1956.854 18396.88\r## 885 3.2000000 9.404444 1956.522 18400.00\r## 886 3.2062439 9.401253 1956.854 18396.88\r## 887 3.2249031 9.391721 1957.847 18387.55\r## 888 3.2557641 9.375964 1959.491 18372.12\r## 889 3.2984845 9.354175 1961.772 18350.76\r## 890 3.3526109 9.326605 1964.669 18323.69\r## 891 3.4176015 9.293555 1968.160 18291.20\r## 892 3.4928498 9.255361 1972.216 18253.58\r## 893 3.5777088 9.212384 1976.811 18211.15\r## 894 3.6715120 9.164993 1981.916 18164.24\r## 895 3.7735925 9.113560 1987.500 18113.20\r## 896 3.8832976 9.058446 1993.537 18058.35\r## 897 4.0000000 9.000000 2000.000 18000.00\r## 898 4.1231056 8.938552 2006.863 17938.45\r## 899 4.2520583 8.874412 2014.102 17873.97\r## 900 4.3863424 8.807865 2021.696 17806.83\r## 901 4.5254834 8.739176 2029.626 17737.26\r## 902 4.6690470 8.668585 2037.873 17665.48\r## 903 4.8166378 8.596312 2046.422 17591.68\r## 904 4.9678969 8.522557 2055.258 17516.05\r## 905 5.1224994 8.447500 2064.368 17438.75\r## 906 5.2801515 8.371305 2073.742 17359.92\r## 907 5.4405882 8.294118 2083.369 17279.71\r## 908 5.6035703 8.216072 2093.241 17198.21\r## 909 5.7688820 8.137288 2103.349 17115.56\r## 910 5.9363288 8.057873 2113.689 17031.84\r## 911 6.1057350 7.977925 2124.253 16947.13\r## 912 6.2769419 7.897532 2135.038 16861.53\r## 913 6.4498062 7.816774 2146.038 16775.10\r## 914 6.6241981 7.735723 2157.252 16687.90\r## 915 6.8000000 7.654444 2168.675 16600.00\r## 916 6.7082039 7.696831 2162.695 16645.90\r## 917 6.5299311 7.779483 2151.176 16735.03\r## 918 6.3529521 7.861971 2139.861 16823.52\r## 919 6.1773781 7.944234 2128.753 16911.31\r## 920 6.0033324 8.026204 2117.855 16998.33\r## 921 5.8309519 8.107805 2107.170 17084.52\r## 922 5.6603887 8.188951 2096.704 17169.81\r## 923 5.4918121 8.269549 2086.461 17254.09\r## 924 5.3254108 8.349494 2076.449 17337.29\r## 925 5.1613952 8.428669 2066.673 17419.30\r## 926 5.0000000 8.506944 2057.143 17500.00\r## 927 4.8414874 8.584174 2047.868 17579.26\r## 928 4.6861498 8.660195 2038.860 17656.93\r## 929 4.5343136 8.734826 2030.131 17732.84\r## 930 4.3863424 8.807865 2021.696 17806.83\r## 931 4.2426407 8.879089 2013.572 17878.68\r## 932 4.1036569 8.948246 2005.775 17948.17\r## 933 3.9698866 9.015063 1998.328 18015.06\r## 934 3.8418745 9.079236 1991.254 18079.06\r## 935 3.7202150 9.140436 1984.576 18139.89\r## 936 3.6055513 9.198305 1978.324 18197.22\r## 937 3.4985711 9.252460 1972.526 18250.71\r## 938 3.4000000 9.302500 1967.213 18300.00\r## 939 3.3105891 9.348006 1962.419 18344.71\r## 940 3.2310989 9.388556 1958.177 18384.45\r## 941 3.1622777 9.423735 1954.518 18418.86\r## 942 3.1048349 9.453147 1951.475 18447.58\r## 943 3.0594117 9.476438 1949.076 18470.29\r## 944 3.0265492 9.493306 1947.343 18486.73\r## 945 3.0066593 9.503523 1946.296 18496.67\r## 946 3.0000000 9.506944 1945.946 18500.00\r## 947 3.0066593 9.503523 1946.296 18496.67\r## 948 3.0265492 9.493306 1947.343 18486.73\r## 949 3.0594117 9.476438 1949.076 18470.29\r## 950 3.1048349 9.453147 1951.475 18447.58\r## 951 3.1622777 9.423735 1954.518 18418.86\r## 952 3.2310989 9.388556 1958.177 18384.45\r## 953 3.3105891 9.348006 1962.419 18344.71\r## 954 3.4000000 9.302500 1967.213 18300.00\r## 955 3.4985711 9.252460 1972.526 18250.71\r## 956 3.6055513 9.198305 1978.324 18197.22\r## 957 3.7202150 9.140436 1984.576 18139.89\r## 958 3.8418745 9.079236 1991.254 18079.06\r## 959 3.9698866 9.015063 1998.328 18015.06\r## 960 4.1036569 8.948246 2005.775 17948.17\r## 961 4.2426407 8.879089 2013.572 17878.68\r## 962 4.3863424 8.807865 2021.696 17806.83\r## 963 4.5343136 8.734826 2030.131 17732.84\r## 964 4.6861498 8.660195 2038.860 17656.93\r## 965 4.8414874 8.584174 2047.868 17579.26\r## 966 5.0000000 8.506944 2057.143 17500.00\r## 967 5.1613952 8.428669 2066.673 17419.30\r## 968 5.3254108 8.349494 2076.449 17337.29\r## 969 5.4918121 8.269549 2086.461 17254.09\r## 970 5.6603887 8.188951 2096.704 17169.81\r## 971 5.8309519 8.107805 2107.170 17084.52\r## 972 6.0033324 8.026204 2117.855 16998.33\r## 973 6.1773781 7.944234 2128.753 16911.31\r## 974 6.3529521 7.861971 2139.861 16823.52\r## 975 6.5299311 7.779483 2151.176 16735.03\r## 976 6.7082039 7.696831 2162.695 16645.90\r## 977 6.6211781 7.737123 2157.056 16689.41\r## 978 6.4404969 7.821113 2145.443 16779.75\r## 979 6.2609903 7.905005 2134.028 16869.50\r## 980 6.0827625 7.988743 2122.814 16958.62\r## 981 5.9059292 8.072262 2111.804 17047.04\r## 982 5.7306195 8.155489 2101.001 17134.69\r## 983 5.5569776 8.238346 2090.409 17221.51\r## 984 5.3851648 8.320742 2080.033 17307.42\r## 985 5.2153619 8.402577 2069.879 17392.32\r## 986 5.0477718 8.483738 2059.955 17476.11\r## 987 4.8826222 8.564099 2050.267 17558.69\r## 988 4.7201695 8.643517 2040.826 17639.92\r## 989 4.5607017 8.721832 2031.643 17719.65\r## 990 4.4045431 8.798865 2022.730 17797.73\r## 991 4.2520583 8.874412 2014.102 17873.97\r## 992 4.1036569 8.948246 2005.775 17948.17\r## 993 3.9597980 9.020112 1997.769 18020.10\r## 994 3.8209946 9.089725 1990.104 18089.50\r## 995 3.6878178 9.156768 1982.806 18156.09\r## 996 3.5608988 9.220890 1975.899 18219.55\r## 997 3.4409301 9.281705 1969.416 18279.53\r## 998 3.3286634 9.338798 1963.386 18335.67\r## 999 3.2249031 9.391721 1957.847 18387.55\r## 1000 3.1304952 9.440003 1952.833 18434.75\r## 1001 3.0463092 9.483162 1948.385 18476.85\r## 1002 2.9732137 9.520715 1944.538 18513.39\r## 1003 2.9120440 9.552198 1941.331 18543.98\r## 1004 2.8635642 9.577187 1938.797 18568.22\r## 1005 2.8284271 9.595318 1936.964 18585.79\r## 1006 2.8071338 9.606315 1935.855 18596.43\r## 1007 2.8000000 9.610000 1935.484 18600.00\r## 1008 2.8071338 9.606315 1935.855 18596.43\r## 1009 2.8284271 9.595318 1936.964 18585.79\r## 1010 2.8635642 9.577187 1938.797 18568.22\r## 1011 2.9120440 9.552198 1941.331 18543.98\r## 1012 2.9732137 9.520715 1944.538 18513.39\r## 1013 3.0463092 9.483162 1948.385 18476.85\r## 1014 3.1304952 9.440003 1952.833 18434.75\r## 1015 3.2249031 9.391721 1957.847 18387.55\r## 1016 3.3286634 9.338798 1963.386 18335.67\r## 1017 3.4409301 9.281705 1969.416 18279.53\r## 1018 3.5608988 9.220890 1975.899 18219.55\r## 1019 3.6878178 9.156768 1982.806 18156.09\r## 1020 3.8209946 9.089725 1990.104 18089.50\r## 1021 3.9597980 9.020112 1997.769 18020.10\r## 1022 4.1036569 8.948246 2005.775 17948.17\r## 1023 4.2520583 8.874412 2014.102 17873.97\r## 1024 4.4045431 8.798865 2022.730 17797.73\r## 1025 4.5607017 8.721832 2031.643 17719.65\r## 1026 4.7201695 8.643517 2040.826 17639.92\r## 1027 4.8826222 8.564099 2050.267 17558.69\r## 1028 5.0477718 8.483738 2059.955 17476.11\r## 1029 5.2153619 8.402577 2069.879 17392.32\r## 1030 5.3851648 8.320742 2080.033 17307.42\r## 1031 5.5569776 8.238346 2090.409 17221.51\r## 1032 5.7306195 8.155489 2101.001 17134.69\r## 1033 5.9059292 8.072262 2111.804 17047.04\r## 1034 6.0827625 7.988743 2122.814 16958.62\r## 1035 6.2609903 7.905005 2134.028 16869.50\r## 1036 6.4404969 7.821113 2145.443 16779.75\r## 1037 6.6211781 7.737123 2157.056 16689.41\r## 1038 6.5391131 7.775215 2151.766 16730.44\r## 1039 6.3560994 7.860500 2140.061 16821.95\r## 1040 6.1741396 7.945756 2128.549 16912.93\r## 1041 5.9933296 8.030928 2117.232 17003.34\r## 1042 5.8137767 8.115957 2106.112 17093.11\r## 1043 5.6356011 8.200777 2095.192 17182.20\r## 1044 5.4589376 8.285312 2084.476 17270.53\r## 1045 5.2839379 8.369479 2073.968 17358.03\r## 1046 5.1107729 8.453182 2063.674 17444.61\r## 1047 4.9396356 8.536314 2053.601 17530.18\r## 1048 4.7707442 8.618753 2043.756 17614.63\r## 1049 4.6043458 8.700363 2034.148 17697.83\r## 1050 4.4407207 8.780989 2024.788 17779.64\r## 1051 4.2801869 8.860452 2015.688 17859.91\r## 1052 4.1231056 8.938552 2006.863 17938.45\r## 1053 3.9698866 9.015063 1998.328 18015.06\r## 1054 3.8209946 9.089725 1990.104 18089.50\r## 1055 3.6769553 9.162247 1982.213 18161.52\r## 1056 3.5383612 9.232299 1974.678 18230.82\r## 1057 3.4058773 9.299513 1967.529 18297.06\r## 1058 3.2802439 9.363476 1960.797 18359.88\r## 1059 3.1622777 9.423735 1954.518 18418.86\r## 1060 3.0528675 9.479796 1948.730 18473.57\r## 1061 2.9529646 9.531131 1943.475 18523.52\r## 1062 2.8635642 9.577187 1938.797 18568.22\r## 1063 2.7856777 9.617401 1934.739 18607.16\r## 1064 2.7202941 9.651225 1931.346 18639.85\r## 1065 2.6683328 9.678148 1928.658 18665.83\r## 1066 2.6305893 9.697728 1926.710 18684.71\r## 1067 2.6076810 9.709622 1925.529 18696.16\r## 1068 2.6000000 9.713611 1925.134 18700.00\r## 1069 2.6076810 9.709622 1925.529 18696.16\r## 1070 2.6305893 9.697728 1926.710 18684.71\r## 1071 2.6683328 9.678148 1928.658 18665.83\r## 1072 2.7202941 9.651225 1931.346 18639.85\r## 1073 2.7856777 9.617401 1934.739 18607.16\r## 1074 2.8635642 9.577187 1938.797 18568.22\r## 1075 2.9529646 9.531131 1943.475 18523.52\r## 1076 3.0528675 9.479796 1948.730 18473.57\r## 1077 3.1622777 9.423735 1954.518 18418.86\r## 1078 3.2802439 9.363476 1960.797 18359.88\r## 1079 3.4058773 9.299513 1967.529 18297.06\r## 1080 3.5383612 9.232299 1974.678 18230.82\r## 1081 3.6769553 9.162247 1982.213 18161.52\r## 1082 3.8209946 9.089725 1990.104 18089.50\r## 1083 3.9698866 9.015063 1998.328 18015.06\r## 1084 4.1231056 8.938552 2006.863 17938.45\r## 1085 4.2801869 8.860452 2015.688 17859.91\r## 1086 4.4407207 8.780989 2024.788 17779.64\r## 1087 4.6043458 8.700363 2034.148 17697.83\r## 1088 4.7707442 8.618753 2043.756 17614.63\r## 1089 4.9396356 8.536314 2053.601 17530.18\r## 1090 5.1107729 8.453182 2063.674 17444.61\r## 1091 5.2839379 8.369479 2073.968 17358.03\r## 1092 5.4589376 8.285312 2084.476 17270.53\r## 1093 5.6356011 8.200777 2095.192 17182.20\r## 1094 5.8137767 8.115957 2106.112 17093.11\r## 1095 5.9933296 8.030928 2117.232 17003.34\r## 1096 6.1741396 7.945756 2128.549 16912.93\r## 1097 6.3560994 7.860500 2140.061 16821.95\r## 1098 6.5391131 7.775215 2151.766 16730.44\r## 1099 6.4621978 7.811001 2146.831 16768.90\r## 1100 6.2769419 7.897532 2135.038 16861.53\r## 1101 6.0926185 7.984101 2123.431 16953.69\r## 1102 5.9093147 8.070659 2112.014 17045.34\r## 1103 5.7271284 8.157151 2100.787 17136.44\r## 1104 5.5461698 8.243517 2089.753 17226.92\r## 1105 5.3665631 8.329687 2078.916 17316.72\r## 1106 5.1884487 8.415584 2068.279 17405.78\r## 1107 5.0119856 8.501119 2057.848 17494.01\r## 1108 4.8373546 8.586192 2047.628 17581.32\r## 1109 4.6647615 8.670688 2037.626 17667.62\r## 1110 4.4944410 8.754477 2027.851 17752.78\r## 1111 4.3266615 8.837410 2018.314 17836.67\r## 1112 4.1617304 8.919316 2009.026 17919.13\r## 1113 4.0000000 9.000000 2000.000 18000.00\r## 1114 3.8418745 9.079236 1991.254 18079.06\r## 1115 3.6878178 9.156768 1982.806 18156.09\r## 1116 3.5383612 9.232299 1974.678 18230.82\r## 1117 3.3941125 9.305493 1966.897 18302.94\r## 1118 3.2557641 9.375964 1959.491 18372.12\r## 1119 3.1240999 9.443278 1952.495 18437.95\r## 1120 3.0000000 9.506944 1945.946 18500.00\r## 1121 2.8844410 9.566422 1939.887 18557.78\r## 1122 2.7784888 9.621117 1934.365 18610.76\r## 1123 2.6832816 9.670399 1929.430 18658.36\r## 1124 2.6000000 9.713611 1925.134 18700.00\r## 1125 2.5298221 9.750099 1921.528 18735.09\r## 1126 2.4738634 9.779243 1918.663 18763.07\r## 1127 2.4331050 9.800497 1916.581 18783.45\r## 1128 2.4083189 9.813434 1915.317 18795.84\r## 1129 2.4000000 9.817778 1914.894 18800.00\r## 1130 2.4083189 9.813434 1915.317 18795.84\r## 1131 2.4331050 9.800497 1916.581 18783.45\r## 1132 2.4738634 9.779243 1918.663 18763.07\r## 1133 2.5298221 9.750099 1921.528 18735.09\r## 1134 2.6000000 9.713611 1925.134 18700.00\r## 1135 2.6832816 9.670399 1929.430 18658.36\r## 1136 2.7784888 9.621117 1934.365 18610.76\r## 1137 2.8844410 9.566422 1939.887 18557.78\r## 1138 3.0000000 9.506944 1945.946 18500.00\r## 1139 3.1240999 9.443278 1952.495 18437.95\r## 1140 3.2557641 9.375964 1959.491 18372.12\r## 1141 3.3941125 9.305493 1966.897 18302.94\r## 1142 3.5383612 9.232299 1974.678 18230.82\r## 1143 3.6878178 9.156768 1982.806 18156.09\r## 1144 3.8418745 9.079236 1991.254 18079.06\r## 1145 4.0000000 9.000000 2000.000 18000.00\r## 1146 4.1617304 8.919316 2009.026 17919.13\r## 1147 4.3266615 8.837410 2018.314 17836.67\r## 1148 4.4944410 8.754477 2027.851 17752.78\r## 1149 4.6647615 8.670688 2037.626 17667.62\r## 1150 4.8373546 8.586192 2047.628 17581.32\r## 1151 5.0119856 8.501119 2057.848 17494.01\r## 1152 5.1884487 8.415584 2068.279 17405.78\r## 1153 5.3665631 8.329687 2078.916 17316.72\r## 1154 5.5461698 8.243517 2089.753 17226.92\r## 1155 5.7271284 8.157151 2100.787 17136.44\r## 1156 5.9093147 8.070659 2112.014 17045.34\r## 1157 6.0926185 7.984101 2123.431 16953.69\r## 1158 6.2769419 7.897532 2135.038 16861.53\r## 1159 6.4621978 7.811001 2146.831 16768.90\r## 1160 6.3906181 7.844379 2142.259 16804.69\r## 1161 6.2032250 7.932097 2130.381 16898.39\r## 1162 6.0166436 8.019920 2118.684 16991.68\r## 1163 5.8309519 8.107805 2107.170 17084.52\r## 1164 5.6462377 8.195701 2095.840 17176.88\r## 1165 5.4626001 8.283555 2084.697 17268.70\r## 1166 5.2801515 8.371305 2073.742 17359.92\r## 1167 5.0990195 8.458878 2062.979 17450.49\r## 1168 4.9193496 8.546195 2052.413 17540.33\r## 1169 4.7413078 8.633162 2042.050 17629.35\r## 1170 4.5650849 8.719675 2031.894 17717.46\r## 1171 4.3908997 8.805611 2021.955 17804.55\r## 1172 4.2190046 8.890831 2012.241 17890.50\r## 1173 4.0496913 8.975171 2002.764 17975.15\r## 1174 3.8832976 9.058446 1993.537 18058.35\r## 1175 3.7202150 9.140436 1984.576 18139.89\r## 1176 3.5608988 9.220890 1975.899 18219.55\r## 1177 3.4058773 9.299513 1967.529 18297.06\r## 1178 3.2557641 9.375964 1959.491 18372.12\r## 1179 3.1112698 9.449850 1951.816 18444.37\r## 1180 2.9732137 9.520715 1944.538 18513.39\r## 1181 2.8425341 9.588037 1937.699 18578.73\r## 1182 2.7202941 9.651225 1931.346 18639.85\r## 1183 2.6076810 9.709622 1925.529 18696.16\r## 1184 2.5059928 9.762504 1920.307 18747.00\r## 1185 2.4166092 9.809106 1915.740 18791.70\r## 1186 2.3409400 9.848644 1911.891 18829.53\r## 1187 2.2803509 9.880361 1908.819 18859.82\r## 1188 2.2360680 9.903573 1906.581 18881.97\r## 1189 2.2090722 9.917738 1905.219 18895.46\r## 1190 2.2000000 9.922500 1904.762 18900.00\r## 1191 2.2090722 9.917738 1905.219 18895.46\r## 1192 2.2360680 9.903573 1906.581 18881.97\r## 1193 2.2803509 9.880361 1908.819 18859.82\r## 1194 2.3409400 9.848644 1911.891 18829.53\r## 1195 2.4166092 9.809106 1915.740 18791.70\r## 1196 2.5059928 9.762504 1920.307 18747.00\r## 1197 2.6076810 9.709622 1925.529 18696.16\r## 1198 2.7202941 9.651225 1931.346 18639.85\r## 1199 2.8425341 9.588037 1937.699 18578.73\r## 1200 2.9732137 9.520715 1944.538 18513.39\r## 1201 3.1112698 9.449850 1951.816 18444.37\r## 1202 3.2557641 9.375964 1959.491 18372.12\r## 1203 3.4058773 9.299513 1967.529 18297.06\r## 1204 3.5608988 9.220890 1975.899 18219.55\r## 1205 3.7202150 9.140436 1984.576 18139.89\r## 1206 3.8832976 9.058446 1993.537 18058.35\r## 1207 4.0496913 8.975171 2002.764 17975.15\r## 1208 4.2190046 8.890831 2012.241 17890.50\r## 1209 4.3908997 8.805611 2021.955 17804.55\r## 1210 4.5650849 8.719675 2031.894 17717.46\r## 1211 4.7413078 8.633162 2042.050 17629.35\r## 1212 4.9193496 8.546195 2052.413 17540.33\r## 1213 5.0990195 8.458878 2062.979 17450.49\r## 1214 5.2801515 8.371305 2073.742 17359.92\r## 1215 5.4626001 8.283555 2084.697 17268.70\r## 1216 5.6462377 8.195701 2095.840 17176.88\r## 1217 5.8309519 8.107805 2107.170 17084.52\r## 1218 6.0166436 8.019920 2118.684 16991.68\r## 1219 6.2032250 7.932097 2130.381 16898.39\r## 1220 6.3906181 7.844379 2142.259 16804.69\r## 1221 6.3245553 7.875247 2138.056 16837.72\r## 1222 6.1351447 7.964086 2126.098 16932.43\r## 1223 5.9464275 8.053096 2114.316 17026.79\r## 1224 5.7584720 8.142238 2102.710 17120.76\r## 1225 5.5713553 8.231469 2091.282 17214.32\r## 1226 5.3851648 8.320742 2080.033 17307.42\r## 1227 5.2000000 8.410000 2068.966 17400.00\r## 1228 5.0159745 8.499181 2058.082 17492.01\r## 1229 4.8332184 8.588212 2047.387 17583.39\r## 1230 4.6518813 8.677010 2036.884 17674.06\r## 1231 4.4721360 8.765480 2026.578 17763.93\r## 1232 4.2941821 8.853510 2016.478 17852.91\r## 1233 4.1182521 8.940971 2006.591 17940.87\r## 1234 3.9446166 9.027713 1996.928 18027.69\r## 1235 3.7735925 9.113560 1987.500 18113.20\r## 1236 3.6055513 9.198305 1978.324 18197.22\r## 1237 3.4409301 9.281705 1969.416 18279.53\r## 1238 3.2802439 9.363476 1960.797 18359.88\r## 1239 3.1240999 9.443278 1952.495 18437.95\r## 1240 2.9732137 9.520715 1944.538 18513.39\r## 1241 2.8284271 9.595318 1936.964 18585.79\r## 1242 2.6907248 9.666542 1929.815 18654.64\r## 1243 2.5612497 9.733750 1923.141 18719.38\r## 1244 2.4413111 9.796216 1917.000 18779.34\r## 1245 2.3323808 9.853122 1911.456 18833.81\r## 1246 2.2360680 9.903573 1906.581 18881.97\r## 1247 2.1540659 9.946630 1902.450 18922.97\r## 1248 2.0880613 9.981355 1899.138 18955.97\r## 1249 2.0396078 10.006885 1896.714 18980.20\r## 1250 2.0099751 10.022514 1895.234 18995.01\r## 1251 2.0000000 10.027778 1894.737 19000.00\r## 1252 2.0099751 10.022514 1895.234 18995.01\r## 1253 2.0396078 10.006885 1896.714 18980.20\r## 1254 2.0880613 9.981355 1899.138 18955.97\r## 1255 2.1540659 9.946630 1902.450 18922.97\r## 1256 2.2360680 9.903573 1906.581 18881.97\r## 1257 2.3323808 9.853122 1911.456 18833.81\r## 1258 2.4413111 9.796216 1917.000 18779.34\r## 1259 2.5612497 9.733750 1923.141 18719.38\r## 1260 2.6907248 9.666542 1929.815 18654.64\r## 1261 2.8284271 9.595318 1936.964 18585.79\r## 1262 2.9732137 9.520715 1944.538 18513.39\r## 1263 3.1240999 9.443278 1952.495 18437.95\r## 1264 3.2802439 9.363476 1960.797 18359.88\r## 1265 3.4409301 9.281705 1969.416 18279.53\r## 1266 3.6055513 9.198305 1978.324 18197.22\r## 1267 3.7735925 9.113560 1987.500 18113.20\r## 1268 3.9446166 9.027713 1996.928 18027.69\r## 1269 4.1182521 8.940971 2006.591 17940.87\r## 1270 4.2941821 8.853510 2016.478 17852.91\r## 1271 4.4721360 8.765480 2026.578 17763.93\r## 1272 4.6518813 8.677010 2036.884 17674.06\r## 1273 4.8332184 8.588212 2047.387 17583.39\r## 1274 5.0159745 8.499181 2058.082 17492.01\r## 1275 5.2000000 8.410000 2068.966 17400.00\r## 1276 5.3851648 8.320742 2080.033 17307.42\r## 1277 5.5713553 8.231469 2091.282 17214.32\r## 1278 5.7584720 8.142238 2102.710 17120.76\r## 1279 5.9464275 8.053096 2114.316 17026.79\r## 1280 6.1351447 7.964086 2126.098 16932.43\r## 1281 6.3245553 7.875247 2138.056 16837.72\r## 1282 6.2641839 7.903509 2134.230 16867.91\r## 1283 6.0728906 7.993394 2122.197 16963.55\r## 1284 5.8821765 8.083513 2110.334 17058.91\r## 1285 5.6920998 8.173833 2098.642 17153.95\r## 1286 5.5027266 8.264319 2087.121 17248.64\r## 1287 5.3141321 8.354927 2075.773 17342.93\r## 1288 5.1264022 8.445610 2064.599 17436.80\r## 1289 4.9396356 8.536314 2053.601 17530.18\r## 1290 4.7539457 8.626975 2042.782 17623.03\r## 1291 4.5694639 8.717520 2032.145 17715.27\r## 1292 4.3863424 8.807865 2021.696 17806.83\r## 1293 4.2047592 8.897912 2011.441 17897.62\r## 1294 4.0249224 8.987543 2001.386 17987.54\r## 1295 3.8470768 9.076624 1991.540 18076.46\r## 1296 3.6715120 9.164993 1981.916 18164.24\r## 1297 3.4985711 9.252460 1972.526 18250.71\r## 1298 3.3286634 9.338798 1963.386 18335.67\r## 1299 3.1622777 9.423735 1954.518 18418.86\r## 1300 3.0000000 9.506944 1945.946 18500.00\r## 1301 2.8425341 9.588037 1937.699 18578.73\r## 1302 2.6907248 9.666542 1929.815 18654.64\r## 1303 2.5455844 9.741898 1922.337 18727.21\r## 1304 2.4083189 9.813434 1915.317 18795.84\r## 1305 2.2803509 9.880361 1908.819 18859.82\r## 1306 2.1633308 9.941761 1902.916 18918.33\r## 1307 2.0591260 9.996597 1897.690 18970.44\r## 1308 1.9697716 10.043738 1893.231 19015.11\r## 1309 1.8973666 10.082019 1889.633 19051.32\r## 1310 1.8439089 10.110328 1886.986 19078.05\r## 1311 1.8110770 10.127735 1885.363 19094.46\r## 1312 1.8000000 10.133611 1884.817 19100.00\r## 1313 1.8110770 10.127735 1885.363 19094.46\r## 1314 1.8439089 10.110328 1886.986 19078.05\r## 1315 1.8973666 10.082019 1889.633 19051.32\r## 1316 1.9697716 10.043738 1893.231 19015.11\r## 1317 2.0591260 9.996597 1897.690 18970.44\r## 1318 2.1633308 9.941761 1902.916 18918.33\r## 1319 2.2803509 9.880361 1908.819 18859.82\r## 1320 2.4083189 9.813434 1915.317 18795.84\r## 1321 2.5455844 9.741898 1922.337 18727.21\r## 1322 2.6907248 9.666542 1929.815 18654.64\r## 1323 2.8425341 9.588037 1937.699 18578.73\r## 1324 3.0000000 9.506944 1945.946 18500.00\r## 1325 3.1622777 9.423735 1954.518 18418.86\r## 1326 3.3286634 9.338798 1963.386 18335.67\r## 1327 3.4985711 9.252460 1972.526 18250.71\r## 1328 3.6715120 9.164993 1981.916 18164.24\r## 1329 3.8470768 9.076624 1991.540 18076.46\r## 1330 4.0249224 8.987543 2001.386 17987.54\r## 1331 4.2047592 8.897912 2011.441 17897.62\r## 1332 4.3863424 8.807865 2021.696 17806.83\r## 1333 4.5694639 8.717520 2032.145 17715.27\r## 1334 4.7539457 8.626975 2042.782 17623.03\r## 1335 4.9396356 8.536314 2053.601 17530.18\r## 1336 5.1264022 8.445610 2064.599 17436.80\r## 1337 5.3141321 8.354927 2075.773 17342.93\r## 1338 5.5027266 8.264319 2087.121 17248.64\r## 1339 5.6920998 8.173833 2098.642 17153.95\r## 1340 5.8821765 8.083513 2110.334 17058.91\r## 1341 6.0728906 7.993394 2122.197 16963.55\r## 1342 6.2641839 7.903509 2134.230 16867.91\r## 1343 6.2096699 7.929072 2130.787 16895.17\r## 1344 6.0166436 8.019920 2118.684 16991.68\r## 1345 5.8240879 8.111062 2106.747 17087.96\r## 1346 5.6320511 8.202472 2094.975 17183.97\r## 1347 5.4405882 8.294118 2083.369 17279.71\r## 1348 5.2497619 8.385966 2071.928 17375.12\r## 1349 5.0596443 8.477975 2060.654 17470.18\r## 1350 4.8703183 8.570101 2049.549 17564.84\r## 1351 4.6818800 8.662289 2038.614 17659.06\r## 1352 4.4944410 8.754477 2027.851 17752.78\r## 1353 4.3081318 8.846593 2017.266 17845.93\r## 1354 4.1231056 8.938552 2006.863 17938.45\r## 1355 3.9395431 9.030254 1996.647 18030.23\r## 1356 3.7576588 9.121578 1986.627 18121.17\r## 1357 3.5777088 9.212384 1976.811 18211.15\r## 1358 3.4000000 9.302500 1967.213 18300.00\r## 1359 3.2249031 9.391721 1957.847 18387.55\r## 1360 3.0528675 9.479796 1948.730 18473.57\r## 1361 2.8844410 9.566422 1939.887 18557.78\r## 1362 2.7202941 9.651225 1931.346 18639.85\r## 1363 2.5612497 9.733750 1923.141 18719.38\r## 1364 2.4083189 9.813434 1915.317 18795.84\r## 1365 2.2627417 9.889588 1907.929 18868.63\r## 1366 2.1260292 9.961373 1901.042 18936.99\r## 1367 2.0000000 10.027778 1894.737 19000.00\r## 1368 1.8867962 10.087613 1889.109 19056.60\r## 1369 1.7888544 10.139525 1884.267 19105.57\r## 1370 1.7088007 10.182055 1880.328 19145.60\r## 1371 1.6492423 10.213754 1877.407 19175.38\r## 1372 1.6124515 10.233360 1875.608 19193.77\r## 1373 1.6000000 10.240000 1875.000 19200.00\r## 1374 1.6124515 10.233360 1875.608 19193.77\r## 1375 1.6492423 10.213754 1877.407 19175.38\r## 1376 1.7088007 10.182055 1880.328 19145.60\r## 1377 1.7888544 10.139525 1884.267 19105.57\r## 1378 1.8867962 10.087613 1889.109 19056.60\r## 1379 2.0000000 10.027778 1894.737 19000.00\r## 1380 2.1260292 9.961373 1901.042 18936.99\r## 1381 2.2627417 9.889588 1907.929 18868.63\r## 1382 2.4083189 9.813434 1915.317 18795.84\r## 1383 2.5612497 9.733750 1923.141 18719.38\r## 1384 2.7202941 9.651225 1931.346 18639.85\r## 1385 2.8844410 9.566422 1939.887 18557.78\r## 1386 3.0528675 9.479796 1948.730 18473.57\r## 1387 3.2249031 9.391721 1957.847 18387.55\r## 1388 3.4000000 9.302500 1967.213 18300.00\r## 1389 3.5777088 9.212384 1976.811 18211.15\r## 1390 3.7576588 9.121578 1986.627 18121.17\r## 1391 3.9395431 9.030254 1996.647 18030.23\r## 1392 4.1231056 8.938552 2006.863 17938.45\r## 1393 4.3081318 8.846593 2017.266 17845.93\r## 1394 4.4944410 8.754477 2027.851 17752.78\r## 1395 4.6818800 8.662289 2038.614 17659.06\r## 1396 4.8703183 8.570101 2049.549 17564.84\r## 1397 5.0596443 8.477975 2060.654 17470.18\r## 1398 5.2497619 8.385966 2071.928 17375.12\r## 1399 5.4405882 8.294118 2083.369 17279.71\r## 1400 5.6320511 8.202472 2094.975 17183.97\r## 1401 5.8240879 8.111062 2106.747 17087.96\r## 1402 6.0166436 8.019920 2118.684 16991.68\r## 1403 6.2096699 7.929072 2130.787 16895.17\r## 1404 6.1611687 7.951851 2127.733 16919.42\r## 1405 5.9665736 8.043570 2115.567 17016.71\r## 1406 5.7723479 8.135640 2103.562 17113.83\r## 1407 5.5785303 8.228039 2091.718 17210.73\r## 1408 5.3851648 8.320742 2080.033 17307.42\r## 1409 5.1923020 8.413721 2068.508 17403.85\r## 1410 5.0000000 8.506944 2057.143 17500.00\r## 1411 4.8083261 8.600374 2045.938 17595.84\r## 1412 4.6173586 8.693967 2034.896 17691.32\r## 1413 4.4271887 8.787673 2024.018 17786.41\r## 1414 4.2379240 8.881431 2013.306 17881.04\r## 1415 4.0496913 8.975171 2002.764 17975.15\r## 1416 3.8626416 9.068810 1992.398 18068.68\r## 1417 3.6769553 9.162247 1982.213 18161.52\r## 1418 3.4928498 9.255361 1972.216 18253.58\r## 1419 3.3105891 9.348006 1962.419 18344.71\r## 1420 3.1304952 9.440003 1952.833 18434.75\r## 1421 2.9529646 9.531131 1943.475 18523.52\r## 1422 2.7784888 9.621117 1934.365 18610.76\r## 1423 2.6076810 9.709622 1925.529 18696.16\r## 1424 2.4413111 9.796216 1917.000 18779.34\r## 1425 2.2803509 9.880361 1908.819 18859.82\r## 1426 2.1260292 9.961373 1901.042 18936.99\r## 1427 1.9798990 10.038389 1893.735 19010.05\r## 1428 1.8439089 10.110328 1886.986 19078.05\r## 1429 1.7204651 10.175853 1880.901 19139.77\r## 1430 1.6124515 10.233360 1875.608 19193.77\r## 1431 1.5231546 10.281025 1871.255 19238.42\r## 1432 1.4560220 10.316932 1867.996 19271.99\r## 1433 1.4142136 10.339326 1865.972 19292.89\r## 1434 1.4000000 10.346944 1865.285 19300.00\r## 1435 1.4142136 10.339326 1865.972 19292.89\r## 1436 1.4560220 10.316932 1867.996 19271.99\r## 1437 1.5231546 10.281025 1871.255 19238.42\r## 1438 1.6124515 10.233360 1875.608 19193.77\r## 1439 1.7204651 10.175853 1880.901 19139.77\r## 1440 1.8439089 10.110328 1886.986 19078.05\r## 1441 1.9798990 10.038389 1893.735 19010.05\r## 1442 2.1260292 9.961373 1901.042 18936.99\r## 1443 2.2803509 9.880361 1908.819 18859.82\r## 1444 2.4413111 9.796216 1917.000 18779.34\r## 1445 2.6076810 9.709622 1925.529 18696.16\r## 1446 2.7784888 9.621117 1934.365 18610.76\r## 1447 2.9529646 9.531131 1943.475 18523.52\r## 1448 3.1304952 9.440003 1952.833 18434.75\r## 1449 3.3105891 9.348006 1962.419 18344.71\r## 1450 3.4928498 9.255361 1972.216 18253.58\r## 1451 3.6769553 9.162247 1982.213 18161.52\r## 1452 3.8626416 9.068810 1992.398 18068.68\r## 1453 4.0496913 8.975171 2002.764 17975.15\r## 1454 4.2379240 8.881431 2013.306 17881.04\r## 1455 4.4271887 8.787673 2024.018 17786.41\r## 1456 4.6173586 8.693967 2034.896 17691.32\r## 1457 4.8083261 8.600374 2045.938 17595.84\r## 1458 5.0000000 8.506944 2057.143 17500.00\r## 1459 5.1923020 8.413721 2068.508 17403.85\r## 1460 5.3851648 8.320742 2080.033 17307.42\r## 1461 5.5785303 8.228039 2091.718 17210.73\r## 1462 5.7723479 8.135640 2103.562 17113.83\r## 1463 5.9665736 8.043570 2115.567 17016.71\r## 1464 6.1611687 7.951851 2127.733 16919.42\r## 1465 6.1188234 7.971765 2125.074 16940.59\r## 1466 5.9228372 8.064257 2112.852 17038.58\r## 1467 5.7271284 8.157151 2100.787 17136.44\r## 1468 5.5317267 8.250430 2088.877 17234.14\r## 1469 5.3366656 8.344075 2077.123 17331.67\r## 1470 5.1419841 8.438064 2065.522 17429.01\r## 1471 4.9477268 8.532374 2054.075 17526.14\r## 1472 4.7539457 8.626975 2042.782 17623.03\r## 1473 4.5607017 8.721832 2031.643 17719.65\r## 1474 4.3680659 8.816908 2020.659 17815.97\r## 1475 4.1761226 8.912154 2009.833 17911.94\r## 1476 3.9849718 9.007516 1999.165 18007.51\r## 1477 3.7947332 9.102926 1988.661 18102.63\r## 1478 3.6055513 9.198305 1978.324 18197.22\r## 1479 3.4176015 9.293555 1968.160 18291.20\r## 1480 3.2310989 9.388556 1958.177 18384.45\r## 1481 3.0463092 9.483162 1948.385 18476.85\r## 1482 2.8635642 9.577187 1938.797 18568.22\r## 1483 2.6832816 9.670399 1929.430 18658.36\r## 1484 2.5059928 9.762504 1920.307 18747.00\r## 1485 2.3323808 9.853122 1911.456 18833.81\r## 1486 2.1633308 9.941761 1902.916 18918.33\r## 1487 2.0000000 10.027778 1894.737 19000.00\r## 1488 1.8439089 10.110328 1886.986 19078.05\r## 1489 1.6970563 10.188302 1879.751 19151.47\r## 1490 1.5620499 10.260250 1873.149 19218.98\r## 1491 1.4422205 10.324322 1867.327 19278.89\r## 1492 1.3416408 10.378255 1862.469 19329.18\r## 1493 1.2649111 10.419494 1858.780 19367.54\r## 1494 1.2165525 10.445526 1856.462 19391.72\r## 1495 1.2000000 10.454444 1855.670 19400.00\r## 1496 1.2165525 10.445526 1856.462 19391.72\r## 1497 1.2649111 10.419494 1858.780 19367.54\r## 1498 1.3416408 10.378255 1862.469 19329.18\r## 1499 1.4422205 10.324322 1867.327 19278.89\r## 1500 1.5620499 10.260250 1873.149 19218.98\r## 1501 1.6970563 10.188302 1879.751 19151.47\r## 1502 1.8439089 10.110328 1886.986 19078.05\r## 1503 2.0000000 10.027778 1894.737 19000.00\r## 1504 2.1633308 9.941761 1902.916 18918.33\r## 1505 2.3323808 9.853122 1911.456 18833.81\r## 1506 2.5059928 9.762504 1920.307 18747.00\r## 1507 2.6832816 9.670399 1929.430 18658.36\r## 1508 2.8635642 9.577187 1938.797 18568.22\r## 1509 3.0463092 9.483162 1948.385 18476.85\r## 1510 3.2310989 9.388556 1958.177 18384.45\r## 1511 3.4176015 9.293555 1968.160 18291.20\r## 1512 3.6055513 9.198305 1978.324 18197.22\r## 1513 3.7947332 9.102926 1988.661 18102.63\r## 1514 3.9849718 9.007516 1999.165 18007.51\r## 1515 4.1761226 8.912154 2009.833 17911.94\r## 1516 4.3680659 8.816908 2020.659 17815.97\r## 1517 4.5607017 8.721832 2031.643 17719.65\r## 1518 4.7539457 8.626975 2042.782 17623.03\r## 1519 4.9477268 8.532374 2054.075 17526.14\r## 1520 5.1419841 8.438064 2065.522 17429.01\r## 1521 5.3366656 8.344075 2077.123 17331.67\r## 1522 5.5317267 8.250430 2088.877 17234.14\r## 1523 5.7271284 8.157151 2100.787 17136.44\r## 1524 5.9228372 8.064257 2112.852 17038.58\r## 1525 6.1188234 7.971765 2125.074 16940.59\r## 1526 6.0827625 7.988743 2122.814 16958.62\r## 1527 5.8855756 8.081902 2110.544 17057.21\r## 1528 5.6885851 8.175508 2098.427 17155.71\r## 1529 5.4918121 8.269549 2086.461 17254.09\r## 1530 5.2952809 8.364011 2074.646 17352.36\r## 1531 5.0990195 8.458878 2062.979 17450.49\r## 1532 4.9030603 8.554133 2051.461 17548.47\r## 1533 4.7074409 8.649755 2040.090 17646.28\r## 1534 4.5122057 8.745719 2028.867 17743.90\r## 1535 4.3174066 8.841996 2017.791 17841.30\r## 1536 4.1231056 8.938552 2006.863 17938.45\r## 1537 3.9293765 9.035346 1996.084 18035.31\r## 1538 3.7363083 9.132329 1985.457 18131.85\r## 1539 3.5440090 9.229439 1974.984 18228.00\r## 1540 3.3526109 9.326605 1964.669 18323.69\r## 1541 3.1622777 9.423735 1954.518 18418.86\r## 1542 2.9732137 9.520715 1944.538 18513.39\r## 1543 2.7856777 9.617401 1934.739 18607.16\r## 1544 2.6000000 9.713611 1925.134 18700.00\r## 1545 2.4166092 9.809106 1915.740 18791.70\r## 1546 2.2360680 9.903573 1906.581 18881.97\r## 1547 2.0591260 9.996597 1897.690 18970.44\r## 1548 1.8867962 10.087613 1889.109 19056.60\r## 1549 1.7204651 10.175853 1880.901 19139.77\r## 1550 1.5620499 10.260250 1873.149 19218.98\r## 1551 1.4142136 10.339326 1865.972 19292.89\r## 1552 1.2806248 10.411042 1859.534 19359.69\r## 1553 1.1661904 10.472672 1854.055 19416.90\r## 1554 1.0770330 10.520815 1849.808 19461.48\r## 1555 1.0198039 10.551776 1847.092 19490.10\r## 1556 1.0000000 10.562500 1846.154 19500.00\r## 1557 1.0198039 10.551776 1847.092 19490.10\r## 1558 1.0770330 10.520815 1849.808 19461.48\r## 1559 1.1661904 10.472672 1854.055 19416.90\r## 1560 1.2806248 10.411042 1859.534 19359.69\r## 1561 1.4142136 10.339326 1865.972 19292.89\r## 1562 1.5620499 10.260250 1873.149 19218.98\r## 1563 1.7204651 10.175853 1880.901 19139.77\r## 1564 1.8867962 10.087613 1889.109 19056.60\r## 1565 2.0591260 9.996597 1897.690 18970.44\r## 1566 2.2360680 9.903573 1906.581 18881.97\r## 1567 2.4166092 9.809106 1915.740 18791.70\r## 1568 2.6000000 9.713611 1925.134 18700.00\r## 1569 2.7856777 9.617401 1934.739 18607.16\r## 1570 2.9732137 9.520715 1944.538 18513.39\r## 1571 3.1622777 9.423735 1954.518 18418.86\r## 1572 3.3526109 9.326605 1964.669 18323.69\r## 1573 3.5440090 9.229439 1974.984 18228.00\r## 1574 3.7363083 9.132329 1985.457 18131.85\r## 1575 3.9293765 9.035346 1996.084 18035.31\r## 1576 4.1231056 8.938552 2006.863 17938.45\r## 1577 4.3174066 8.841996 2017.791 17841.30\r## 1578 4.5122057 8.745719 2028.867 17743.90\r## 1579 4.7074409 8.649755 2040.090 17646.28\r## 1580 4.9030603 8.554133 2051.461 17548.47\r## 1581 5.0990195 8.458878 2062.979 17450.49\r## 1582 5.2952809 8.364011 2074.646 17352.36\r## 1583 5.4918121 8.269549 2086.461 17254.09\r## 1584 5.6885851 8.175508 2098.427 17155.71\r## 1585 5.8855756 8.081902 2110.544 17057.21\r## 1586 6.0827625 7.988743 2122.814 16958.62\r## 1587 6.0530984 8.002723 2120.959 16973.45\r## 1588 5.8549125 8.096438 2108.649 17072.54\r## 1589 5.6568542 8.190637 2096.488 17171.57\r## 1590 5.4589376 8.285312 2084.476 17270.53\r## 1591 5.2611786 8.380456 2072.609 17369.41\r## 1592 5.0635956 8.476058 2060.888 17468.20\r## 1593 4.8662100 8.572106 2049.309 17566.89\r## 1594 4.6690470 8.668585 2037.873 17665.48\r## 1595 4.4721360 8.765480 2026.578 17763.93\r## 1596 4.2755117 8.862771 2015.424 17862.24\r## 1597 4.0792156 8.960436 2004.411 17960.39\r## 1598 3.8832976 9.058446 1993.537 18058.35\r## 1599 3.6878178 9.156768 1982.806 18156.09\r## 1600 3.4928498 9.255361 1972.216 18253.58\r## 1601 3.2984845 9.354175 1961.772 18350.76\r## 1602 3.1048349 9.453147 1951.475 18447.58\r## 1603 2.9120440 9.552198 1941.331 18543.98\r## 1604 2.7202941 9.651225 1931.346 18639.85\r## 1605 2.5298221 9.750099 1921.528 18735.09\r## 1606 2.3409400 9.848644 1911.891 18829.53\r## 1607 2.1540659 9.946630 1902.450 18922.97\r## 1608 1.9697716 10.043738 1893.231 19015.11\r## 1609 1.7888544 10.139525 1884.267 19105.57\r## 1610 1.6124515 10.233360 1875.608 19193.77\r## 1611 1.4422205 10.324322 1867.327 19278.89\r## 1612 1.2806248 10.411042 1859.534 19359.69\r## 1613 1.1313708 10.491461 1852.394 19434.31\r## 1614 1.0000000 10.562500 1846.154 19500.00\r## 1615 0.8944272 10.619763 1841.170 19552.79\r## 1616 0.8246211 10.657710 1837.889 19587.69\r## 1617 0.8000000 10.671111 1836.735 19600.00\r## 1618 0.8246211 10.657710 1837.889 19587.69\r## 1619 0.8944272 10.619763 1841.170 19552.79\r## 1620 1.0000000 10.562500 1846.154 19500.00\r## 1621 1.1313708 10.491461 1852.394 19434.31\r## 1622 1.2806248 10.411042 1859.534 19359.69\r## 1623 1.4422205 10.324322 1867.327 19278.89\r## 1624 1.6124515 10.233360 1875.608 19193.77\r## 1625 1.7888544 10.139525 1884.267 19105.57\r## 1626 1.9697716 10.043738 1893.231 19015.11\r## 1627 2.1540659 9.946630 1902.450 18922.97\r## 1628 2.3409400 9.848644 1911.891 18829.53\r## 1629 2.5298221 9.750099 1921.528 18735.09\r## 1630 2.7202941 9.651225 1931.346 18639.85\r## 1631 2.9120440 9.552198 1941.331 18543.98\r## 1632 3.1048349 9.453147 1951.475 18447.58\r## 1633 3.2984845 9.354175 1961.772 18350.76\r## 1634 3.4928498 9.255361 1972.216 18253.58\r## 1635 3.6878178 9.156768 1982.806 18156.09\r## 1636 3.8832976 9.058446 1993.537 18058.35\r## 1637 4.0792156 8.960436 2004.411 17960.39\r## 1638 4.2755117 8.862771 2015.424 17862.24\r## 1639 4.4721360 8.765480 2026.578 17763.93\r## 1640 4.6690470 8.668585 2037.873 17665.48\r## 1641 4.8662100 8.572106 2049.309 17566.89\r## 1642 5.0635956 8.476058 2060.888 17468.20\r## 1643 5.2611786 8.380456 2072.609 17369.41\r## 1644 5.4589376 8.285312 2084.476 17270.53\r## 1645 5.6568542 8.190637 2096.488 17171.57\r## 1646 5.8549125 8.096438 2108.649 17072.54\r## 1647 6.0530984 8.002723 2120.959 16973.45\r## 1648 6.0299254 8.013653 2119.513 16985.04\r## 1649 5.8309519 8.107805 2107.170 17084.52\r## 1650 5.6320511 8.202472 2094.975 17183.97\r## 1651 5.4332311 8.297649 2082.925 17283.38\r## 1652 5.2345009 8.393333 2071.019 17382.75\r## 1653 5.0358713 8.489516 2059.253 17482.06\r## 1654 4.8373546 8.586192 2047.628 17581.32\r## 1655 4.6389654 8.683353 2036.140 17680.52\r## 1656 4.4407207 8.780989 2024.788 17779.64\r## 1657 4.2426407 8.879089 2013.572 17878.68\r## 1658 4.0447497 8.977639 2002.489 17977.63\r## 1659 3.8470768 9.076624 1991.540 18076.46\r## 1660 3.6496575 9.176024 1980.724 18175.17\r## 1661 3.4525353 9.275814 1970.041 18273.73\r## 1662 3.2557641 9.375964 1959.491 18372.12\r## 1663 3.0594117 9.476438 1949.076 18470.29\r## 1664 2.8635642 9.577187 1938.797 18568.22\r## 1665 2.6683328 9.678148 1928.658 18665.83\r## 1666 2.4738634 9.779243 1918.663 18763.07\r## 1667 2.2803509 9.880361 1908.819 18859.82\r## 1668 2.0880613 9.981355 1899.138 18955.97\r## 1669 1.8973666 10.082019 1889.633 19051.32\r## 1670 1.7088007 10.182055 1880.328 19145.60\r## 1671 1.5231546 10.281025 1871.255 19238.42\r## 1672 1.3416408 10.378255 1862.469 19329.18\r## 1673 1.1661904 10.472672 1854.055 19416.90\r## 1674 1.0000000 10.562500 1846.154 19500.00\r## 1675 0.8485281 10.644707 1839.011 19575.74\r## 1676 0.7211103 10.714105 1833.046 19639.44\r## 1677 0.6324555 10.762525 1828.918 19683.77\r## 1678 0.6000000 10.780278 1827.411 19700.00\r## 1679 0.6324555 10.762525 1828.918 19683.77\r## 1680 0.7211103 10.714105 1833.046 19639.44\r## 1681 0.8485281 10.644707 1839.011 19575.74\r## 1682 1.0000000 10.562500 1846.154 19500.00\r## 1683 1.1661904 10.472672 1854.055 19416.90\r## 1684 1.3416408 10.378255 1862.469 19329.18\r## 1685 1.5231546 10.281025 1871.255 19238.42\r## 1686 1.7088007 10.182055 1880.328 19145.60\r## 1687 1.8973666 10.082019 1889.633 19051.32\r## 1688 2.0880613 9.981355 1899.138 18955.97\r## 1689 2.2803509 9.880361 1908.819 18859.82\r## 1690 2.4738634 9.779243 1918.663 18763.07\r## 1691 2.6683328 9.678148 1928.658 18665.83\r## 1692 2.8635642 9.577187 1938.797 18568.22\r## 1693 3.0594117 9.476438 1949.076 18470.29\r## 1694 3.2557641 9.375964 1959.491 18372.12\r## 1695 3.4525353 9.275814 1970.041 18273.73\r## 1696 3.6496575 9.176024 1980.724 18175.17\r## 1697 3.8470768 9.076624 1991.540 18076.46\r## 1698 4.0447497 8.977639 2002.489 17977.63\r## 1699 4.2426407 8.879089 2013.572 17878.68\r## 1700 4.4407207 8.780989 2024.788 17779.64\r## 1701 4.6389654 8.683353 2036.140 17680.52\r## 1702 4.8373546 8.586192 2047.628 17581.32\r## 1703 5.0358713 8.489516 2059.253 17482.06\r## 1704 5.2345009 8.393333 2071.019 17382.75\r## 1705 5.4332311 8.297649 2082.925 17283.38\r## 1706 5.6320511 8.202472 2094.975 17183.97\r## 1707 5.8309519 8.107805 2107.170 17084.52\r## 1708 6.0299254 8.013653 2119.513 16985.04\r## 1709 6.0133186 8.021490 2118.477 16993.34\r## 1710 5.8137767 8.115957 2106.112 17093.11\r## 1711 5.6142675 8.210962 2093.892 17192.87\r## 1712 5.4147945 8.306503 2081.815 17292.60\r## 1713 5.2153619 8.402577 2069.879 17392.32\r## 1714 5.0159745 8.499181 2058.082 17492.01\r## 1715 4.8166378 8.596312 2046.422 17591.68\r## 1716 4.6173586 8.693967 2034.896 17691.32\r## 1717 4.4181444 8.792142 2023.503 17790.93\r## 1718 4.2190046 8.890831 2012.241 17890.50\r## 1719 4.0199502 8.990028 2001.109 17990.02\r## 1720 3.8209946 9.089725 1990.104 18089.50\r## 1721 3.6221541 9.189914 1979.227 18188.92\r## 1722 3.4234486 9.290584 1968.474 18288.28\r## 1723 3.2249031 9.391721 1957.847 18387.55\r## 1724 3.0265492 9.493306 1947.343 18486.73\r## 1725 2.8284271 9.595318 1936.964 18585.79\r## 1726 2.6305893 9.697728 1926.710 18684.71\r## 1727 2.4331050 9.800497 1916.581 18783.45\r## 1728 2.2360680 9.903573 1906.581 18881.97\r## 1729 2.0396078 10.006885 1896.714 18980.20\r## 1730 1.8439089 10.110328 1886.986 19078.05\r## 1731 1.6492423 10.213754 1877.407 19175.38\r## 1732 1.4560220 10.316932 1867.996 19271.99\r## 1733 1.2649111 10.419494 1858.780 19367.54\r## 1734 1.0770330 10.520815 1849.808 19461.48\r## 1735 0.8944272 10.619763 1841.170 19552.79\r## 1736 0.7211103 10.714105 1833.046 19639.44\r## 1737 0.5656854 10.799064 1825.821 19717.16\r## 1738 0.4472136 10.864048 1820.352 19776.39\r## 1739 0.4000000 10.890000 1818.182 19800.00\r## 1740 0.4472136 10.864048 1820.352 19776.39\r## 1741 0.5656854 10.799064 1825.821 19717.16\r## 1742 0.7211103 10.714105 1833.046 19639.44\r## 1743 0.8944272 10.619763 1841.170 19552.79\r## 1744 1.0770330 10.520815 1849.808 19461.48\r## 1745 1.2649111 10.419494 1858.780 19367.54\r## 1746 1.4560220 10.316932 1867.996 19271.99\r## 1747 1.6492423 10.213754 1877.407 19175.38\r## 1748 1.8439089 10.110328 1886.986 19078.05\r## 1749 2.0396078 10.006885 1896.714 18980.20\r## 1750 2.2360680 9.903573 1906.581 18881.97\r## 1751 2.4331050 9.800497 1916.581 18783.45\r## 1752 2.6305893 9.697728 1926.710 18684.71\r## 1753 2.8284271 9.595318 1936.964 18585.79\r## 1754 3.0265492 9.493306 1947.343 18486.73\r## 1755 3.2249031 9.391721 1957.847 18387.55\r## 1756 3.4234486 9.290584 1968.474 18288.28\r## 1757 3.6221541 9.189914 1979.227 18188.92\r## 1758 3.8209946 9.089725 1990.104 18089.50\r## 1759 4.0199502 8.990028 2001.109 17990.02\r## 1760 4.2190046 8.890831 2012.241 17890.50\r## 1761 4.4181444 8.792142 2023.503 17790.93\r## 1762 4.6173586 8.693967 2034.896 17691.32\r## 1763 4.8166378 8.596312 2046.422 17591.68\r## 1764 5.0159745 8.499181 2058.082 17492.01\r## 1765 5.2153619 8.402577 2069.879 17392.32\r## 1766 5.4147945 8.306503 2081.815 17292.60\r## 1767 5.6142675 8.210962 2093.892 17192.87\r## 1768 5.8137767 8.115957 2106.112 17093.11\r## 1769 6.0133186 8.021490 2118.477 16993.34\r## 1770 6.0033324 8.026204 2117.855 16998.33\r## 1771 5.8034473 8.120863 2105.475 17098.28\r## 1772 5.6035703 8.216072 2093.241 17198.21\r## 1773 5.4037024 8.311832 2081.148 17298.15\r## 1774 5.2038447 8.408142 2069.194 17398.08\r## 1775 5.0039984 8.505001 2057.378 17498.00\r## 1776 4.8041649 8.602408 2045.697 17597.92\r## 1777 4.6043458 8.700363 2034.148 17697.83\r## 1778 4.4045431 8.798865 2022.730 17797.73\r## 1779 4.2047592 8.897912 2011.441 17897.62\r## 1780 4.0049969 8.997502 2000.278 17997.50\r## 1781 3.8052595 9.097634 1989.239 18097.37\r## 1782 3.6055513 9.198305 1978.324 18197.22\r## 1783 3.4058773 9.299513 1967.529 18297.06\r## 1784 3.2062439 9.401253 1956.854 18396.88\r## 1785 3.0066593 9.503523 1946.296 18496.67\r## 1786 2.8071338 9.606315 1935.855 18596.43\r## 1787 2.6076810 9.709622 1925.529 18696.16\r## 1788 2.4083189 9.813434 1915.317 18795.84\r## 1789 2.2090722 9.917738 1905.219 18895.46\r## 1790 2.0099751 10.022514 1895.234 18995.01\r## 1791 1.8110770 10.127735 1885.363 19094.46\r## 1792 1.6124515 10.233360 1875.608 19193.77\r## 1793 1.4142136 10.339326 1865.972 19292.89\r## 1794 1.2165525 10.445526 1856.462 19391.72\r## 1795 1.0198039 10.551776 1847.092 19490.10\r## 1796 0.8246211 10.657710 1837.889 19587.69\r## 1797 0.6324555 10.762525 1828.918 19683.77\r## 1798 0.4472136 10.864048 1820.352 19776.39\r## 1799 0.2828427 10.954532 1812.819 19858.58\r## 1800 0.2000000 11.000278 1809.045 19900.00\r## 1801 0.2828427 10.954532 1812.819 19858.58\r## 1802 0.4472136 10.864048 1820.352 19776.39\r## 1803 0.6324555 10.762525 1828.918 19683.77\r## 1804 0.8246211 10.657710 1837.889 19587.69\r## 1805 1.0198039 10.551776 1847.092 19490.10\r## 1806 1.2165525 10.445526 1856.462 19391.72\r## 1807 1.4142136 10.339326 1865.972 19292.89\r## 1808 1.6124515 10.233360 1875.608 19193.77\r## 1809 1.8110770 10.127735 1885.363 19094.46\r## 1810 2.0099751 10.022514 1895.234 18995.01\r## 1811 2.2090722 9.917738 1905.219 18895.46\r## 1812 2.4083189 9.813434 1915.317 18795.84\r## 1813 2.6076810 9.709622 1925.529 18696.16\r## 1814 2.8071338 9.606315 1935.855 18596.43\r## 1815 3.0066593 9.503523 1946.296 18496.67\r## 1816 3.2062439 9.401253 1956.854 18396.88\r## 1817 3.4058773 9.299513 1967.529 18297.06\r## 1818 3.6055513 9.198305 1978.324 18197.22\r## 1819 3.8052595 9.097634 1989.239 18097.37\r## 1820 4.0049969 8.997502 2000.278 17997.50\r## 1821 4.2047592 8.897912 2011.441 17897.62\r## 1822 4.4045431 8.798865 2022.730 17797.73\r## 1823 4.6043458 8.700363 2034.148 17697.83\r## 1824 4.8041649 8.602408 2045.697 17597.92\r## 1825 5.0039984 8.505001 2057.378 17498.00\r## 1826 5.2038447 8.408142 2069.194 17398.08\r## 1827 5.4037024 8.311832 2081.148 17298.15\r## 1828 5.6035703 8.216072 2093.241 17198.21\r## 1829 5.8034473 8.120863 2105.475 17098.28\r## 1830 6.0033324 8.026204 2117.855 16998.33\r## 1831 6.0000000 8.027778 2117.647 17000.00\r## 1832 5.8000000 8.122500 2105.263 17100.00\r## 1833 5.6000000 8.217778 2093.023 17200.00\r## 1834 5.4000000 8.313611 2080.925 17300.00\r## 1835 5.2000000 8.410000 2068.966 17400.00\r## 1836 5.0000000 8.506944 2057.143 17500.00\r## 1837 4.8000000 8.604444 2045.455 17600.00\r## 1838 4.6000000 8.702500 2033.898 17700.00\r## 1839 4.4000000 8.801111 2022.472 17800.00\r## 1840 4.2000000 8.900278 2011.173 17900.00\r## 1841 4.0000000 9.000000 2000.000 18000.00\r## 1842 3.8000000 9.100278 1988.950 18100.00\r## 1843 3.6000000 9.201111 1978.022 18200.00\r## 1844 3.4000000 9.302500 1967.213 18300.00\r## 1845 3.2000000 9.404444 1956.522 18400.00\r## 1846 3.0000000 9.506944 1945.946 18500.00\r## 1847 2.8000000 9.610000 1935.484 18600.00\r## 1848 2.6000000 9.713611 1925.134 18700.00\r## 1849 2.4000000 9.817778 1914.894 18800.00\r## 1850 2.2000000 9.922500 1904.762 18900.00\r## 1851 2.0000000 10.027778 1894.737 19000.00\r## 1852 1.8000000 10.133611 1884.817 19100.00\r## 1853 1.6000000 10.240000 1875.000 19200.00\r## 1854 1.4000000 10.346944 1865.285 19300.00\r## 1855 1.2000000 10.454444 1855.670 19400.00\r## 1856 1.0000000 10.562500 1846.154 19500.00\r## 1857 0.8000000 10.671111 1836.735 19600.00\r## 1858 0.6000000 10.780278 1827.411 19700.00\r## 1859 0.4000000 10.890000 1818.182 19800.00\r## 1860 0.2000000 11.000278 1809.045 19900.00\r## 1861 0.0000000 11.111111 1800.000 20000.00\r## 1862 0.2000000 11.000278 1809.045 19900.00\r## 1863 0.4000000 10.890000 1818.182 19800.00\r## 1864 0.6000000 10.780278 1827.411 19700.00\r## 1865 0.8000000 10.671111 1836.735 19600.00\r## 1866 1.0000000 10.562500 1846.154 19500.00\r## 1867 1.2000000 10.454444 1855.670 19400.00\r## 1868 1.4000000 10.346944 1865.285 19300.00\r## 1869 1.6000000 10.240000 1875.000 19200.00\r## 1870 1.8000000 10.133611 1884.817 19100.00\r## 1871 2.0000000 10.027778 1894.737 19000.00\r## 1872 2.2000000 9.922500 1904.762 18900.00\r## 1873 2.4000000 9.817778 1914.894 18800.00\r## 1874 2.6000000 9.713611 1925.134 18700.00\r## 1875 2.8000000 9.610000 1935.484 18600.00\r## 1876 3.0000000 9.506944 1945.946 18500.00\r## 1877 3.2000000 9.404444 1956.522 18400.00\r## 1878 3.4000000 9.302500 1967.213 18300.00\r## 1879 3.6000000 9.201111 1978.022 18200.00\r## 1880 3.8000000 9.100278 1988.950 18100.00\r## 1881 4.0000000 9.000000 2000.000 18000.00\r## 1882 4.2000000 8.900278 2011.173 17900.00\r## 1883 4.4000000 8.801111 2022.472 17800.00\r## 1884 4.6000000 8.702500 2033.898 17700.00\r## 1885 4.8000000 8.604444 2045.455 17600.00\r## 1886 5.0000000 8.506944 2057.143 17500.00\r## 1887 5.2000000 8.410000 2068.966 17400.00\r## 1888 5.4000000 8.313611 2080.925 17300.00\r## 1889 5.6000000 8.217778 2093.023 17200.00\r## 1890 5.8000000 8.122500 2105.263 17100.00\r## 1891 6.0000000 8.027778 2117.647 17000.00\r## 1892 6.0033324 8.026204 2117.855 16998.33\r## 1893 5.8034473 8.120863 2105.475 17098.28\r## 1894 5.6035703 8.216072 2093.241 17198.21\r## 1895 5.4037024 8.311832 2081.148 17298.15\r## 1896 5.2038447 8.408142 2069.194 17398.08\r## 1897 5.0039984 8.505001 2057.378 17498.00\r## 1898 4.8041649 8.602408 2045.697 17597.92\r## 1899 4.6043458 8.700363 2034.148 17697.83\r## 1900 4.4045431 8.798865 2022.730 17797.73\r## 1901 4.2047592 8.897912 2011.441 17897.62\r## 1902 4.0049969 8.997502 2000.278 17997.50\r## 1903 3.8052595 9.097634 1989.239 18097.37\r## 1904 3.6055513 9.198305 1978.324 18197.22\r## 1905 3.4058773 9.299513 1967.529 18297.06\r## 1906 3.2062439 9.401253 1956.854 18396.88\r## 1907 3.0066593 9.503523 1946.296 18496.67\r## 1908 2.8071338 9.606315 1935.855 18596.43\r## 1909 2.6076810 9.709622 1925.529 18696.16\r## 1910 2.4083189 9.813434 1915.317 18795.84\r## 1911 2.2090722 9.917738 1905.219 18895.46\r## 1912 2.0099751 10.022514 1895.234 18995.01\r## 1913 1.8110770 10.127735 1885.363 19094.46\r## 1914 1.6124515 10.233360 1875.608 19193.77\r## 1915 1.4142136 10.339326 1865.972 19292.89\r## 1916 1.2165525 10.445526 1856.462 19391.72\r## 1917 1.0198039 10.551776 1847.092 19490.10\r## 1918 0.8246211 10.657710 1837.889 19587.69\r## 1919 0.6324555 10.762525 1828.918 19683.77\r## 1920 0.4472136 10.864048 1820.352 19776.39\r## 1921 0.2828427 10.954532 1812.819 19858.58\r## 1922 0.2000000 11.000278 1809.045 19900.00\r## 1923 0.2828427 10.954532 1812.819 19858.58\r## 1924 0.4472136 10.864048 1820.352 19776.39\r## 1925 0.6324555 10.762525 1828.918 19683.77\r## 1926 0.8246211 10.657710 1837.889 19587.69\r## 1927 1.0198039 10.551776 1847.092 19490.10\r## 1928 1.2165525 10.445526 1856.462 19391.72\r## 1929 1.4142136 10.339326 1865.972 19292.89\r## 1930 1.6124515 10.233360 1875.608 19193.77\r## 1931 1.8110770 10.127735 1885.363 19094.46\r## 1932 2.0099751 10.022514 1895.234 18995.01\r## 1933 2.2090722 9.917738 1905.219 18895.46\r## 1934 2.4083189 9.813434 1915.317 18795.84\r## 1935 2.6076810 9.709622 1925.529 18696.16\r## 1936 2.8071338 9.606315 1935.855 18596.43\r## 1937 3.0066593 9.503523 1946.296 18496.67\r## 1938 3.2062439 9.401253 1956.854 18396.88\r## 1939 3.4058773 9.299513 1967.529 18297.06\r## 1940 3.6055513 9.198305 1978.324 18197.22\r## 1941 3.8052595 9.097634 1989.239 18097.37\r## 1942 4.0049969 8.997502 2000.278 17997.50\r## 1943 4.2047592 8.897912 2011.441 17897.62\r## 1944 4.4045431 8.798865 2022.730 17797.73\r## 1945 4.6043458 8.700363 2034.148 17697.83\r## 1946 4.8041649 8.602408 2045.697 17597.92\r## 1947 5.0039984 8.505001 2057.378 17498.00\r## 1948 5.2038447 8.408142 2069.194 17398.08\r## 1949 5.4037024 8.311832 2081.148 17298.15\r## 1950 5.6035703 8.216072 2093.241 17198.21\r## 1951 5.8034473 8.120863 2105.475 17098.28\r## 1952 6.0033324 8.026204 2117.855 16998.33\r## 1953 6.0133186 8.021490 2118.477 16993.34\r## 1954 5.8137767 8.115957 2106.112 17093.11\r## 1955 5.6142675 8.210962 2093.892 17192.87\r## 1956 5.4147945 8.306503 2081.815 17292.60\r## 1957 5.2153619 8.402577 2069.879 17392.32\r## 1958 5.0159745 8.499181 2058.082 17492.01\r## 1959 4.8166378 8.596312 2046.422 17591.68\r## 1960 4.6173586 8.693967 2034.896 17691.32\r## 1961 4.4181444 8.792142 2023.503 17790.93\r## 1962 4.2190046 8.890831 2012.241 17890.50\r## 1963 4.0199502 8.990028 2001.109 17990.02\r## 1964 3.8209946 9.089725 1990.104 18089.50\r## 1965 3.6221541 9.189914 1979.227 18188.92\r## 1966 3.4234486 9.290584 1968.474 18288.28\r## 1967 3.2249031 9.391721 1957.847 18387.55\r## 1968 3.0265492 9.493306 1947.343 18486.73\r## 1969 2.8284271 9.595318 1936.964 18585.79\r## 1970 2.6305893 9.697728 1926.710 18684.71\r## 1971 2.4331050 9.800497 1916.581 18783.45\r## 1972 2.2360680 9.903573 1906.581 18881.97\r## 1973 2.0396078 10.006885 1896.714 18980.20\r## 1974 1.8439089 10.110328 1886.986 19078.05\r## 1975 1.6492423 10.213754 1877.407 19175.38\r## 1976 1.4560220 10.316932 1867.996 19271.99\r## 1977 1.2649111 10.419494 1858.780 19367.54\r## 1978 1.0770330 10.520815 1849.808 19461.48\r## 1979 0.8944272 10.619763 1841.170 19552.79\r## 1980 0.7211103 10.714105 1833.046 19639.44\r## 1981 0.5656854 10.799064 1825.821 19717.16\r## 1982 0.4472136 10.864048 1820.352 19776.39\r## 1983 0.4000000 10.890000 1818.182 19800.00\r## 1984 0.4472136 10.864048 1820.352 19776.39\r## 1985 0.5656854 10.799064 1825.821 19717.16\r## 1986 0.7211103 10.714105 1833.046 19639.44\r## 1987 0.8944272 10.619763 1841.170 19552.79\r## 1988 1.0770330 10.520815 1849.808 19461.48\r## 1989 1.2649111 10.419494 1858.780 19367.54\r## 1990 1.4560220 10.316932 1867.996 19271.99\r## 1991 1.6492423 10.213754 1877.407 19175.38\r## 1992 1.8439089 10.110328 1886.986 19078.05\r## 1993 2.0396078 10.006885 1896.714 18980.20\r## 1994 2.2360680 9.903573 1906.581 18881.97\r## 1995 2.4331050 9.800497 1916.581 18783.45\r## 1996 2.6305893 9.697728 1926.710 18684.71\r## 1997 2.8284271 9.595318 1936.964 18585.79\r## 1998 3.0265492 9.493306 1947.343 18486.73\r## 1999 3.2249031 9.391721 1957.847 18387.55\r## 2000 3.4234486 9.290584 1968.474 18288.28\r## 2001 3.6221541 9.189914 1979.227 18188.92\r## 2002 3.8209946 9.089725 1990.104 18089.50\r## 2003 4.0199502 8.990028 2001.109 17990.02\r## 2004 4.2190046 8.890831 2012.241 17890.50\r## 2005 4.4181444 8.792142 2023.503 17790.93\r## 2006 4.6173586 8.693967 2034.896 17691.32\r## 2007 4.8166378 8.596312 2046.422 17591.68\r## 2008 5.0159745 8.499181 2058.082 17492.01\r## 2009 5.2153619 8.402577 2069.879 17392.32\r## 2010 5.4147945 8.306503 2081.815 17292.60\r## 2011 5.6142675 8.210962 2093.892 17192.87\r## 2012 5.8137767 8.115957 2106.112 17093.11\r## 2013 6.0133186 8.021490 2118.477 16993.34\r## 2014 6.0299254 8.013653 2119.513 16985.04\r## 2015 5.8309519 8.107805 2107.170 17084.52\r## 2016 5.6320511 8.202472 2094.975 17183.97\r## 2017 5.4332311 8.297649 2082.925 17283.38\r## 2018 5.2345009 8.393333 2071.019 17382.75\r## 2019 5.0358713 8.489516 2059.253 17482.06\r## 2020 4.8373546 8.586192 2047.628 17581.32\r## 2021 4.6389654 8.683353 2036.140 17680.52\r## 2022 4.4407207 8.780989 2024.788 17779.64\r## 2023 4.2426407 8.879089 2013.572 17878.68\r## 2024 4.0447497 8.977639 2002.489 17977.63\r## 2025 3.8470768 9.076624 1991.540 18076.46\r## 2026 3.6496575 9.176024 1980.724 18175.17\r## 2027 3.4525353 9.275814 1970.041 18273.73\r## 2028 3.2557641 9.375964 1959.491 18372.12\r## 2029 3.0594117 9.476438 1949.076 18470.29\r## 2030 2.8635642 9.577187 1938.797 18568.22\r## 2031 2.6683328 9.678148 1928.658 18665.83\r## 2032 2.4738634 9.779243 1918.663 18763.07\r## 2033 2.2803509 9.880361 1908.819 18859.82\r## 2034 2.0880613 9.981355 1899.138 18955.97\r## 2035 1.8973666 10.082019 1889.633 19051.32\r## 2036 1.7088007 10.182055 1880.328 19145.60\r## 2037 1.5231546 10.281025 1871.255 19238.42\r## 2038 1.3416408 10.378255 1862.469 19329.18\r## 2039 1.1661904 10.472672 1854.055 19416.90\r## 2040 1.0000000 10.562500 1846.154 19500.00\r## 2041 0.8485281 10.644707 1839.011 19575.74\r## 2042 0.7211103 10.714105 1833.046 19639.44\r## 2043 0.6324555 10.762525 1828.918 19683.77\r## 2044 0.6000000 10.780278 1827.411 19700.00\r## 2045 0.6324555 10.762525 1828.918 19683.77\r## 2046 0.7211103 10.714105 1833.046 19639.44\r## 2047 0.8485281 10.644707 1839.011 19575.74\r## 2048 1.0000000 10.562500 1846.154 19500.00\r## 2049 1.1661904 10.472672 1854.055 19416.90\r## 2050 1.3416408 10.378255 1862.469 19329.18\r## 2051 1.5231546 10.281025 1871.255 19238.42\r## 2052 1.7088007 10.182055 1880.328 19145.60\r## 2053 1.8973666 10.082019 1889.633 19051.32\r## 2054 2.0880613 9.981355 1899.138 18955.97\r## 2055 2.2803509 9.880361 1908.819 18859.82\r## 2056 2.4738634 9.779243 1918.663 18763.07\r## 2057 2.6683328 9.678148 1928.658 18665.83\r## 2058 2.8635642 9.577187 1938.797 18568.22\r## 2059 3.0594117 9.476438 1949.076 18470.29\r## 2060 3.2557641 9.375964 1959.491 18372.12\r## 2061 3.4525353 9.275814 1970.041 18273.73\r## 2062 3.6496575 9.176024 1980.724 18175.17\r## 2063 3.8470768 9.076624 1991.540 18076.46\r## 2064 4.0447497 8.977639 2002.489 17977.63\r## 2065 4.2426407 8.879089 2013.572 17878.68\r## 2066 4.4407207 8.780989 2024.788 17779.64\r## 2067 4.6389654 8.683353 2036.140 17680.52\r## 2068 4.8373546 8.586192 2047.628 17581.32\r## 2069 5.0358713 8.489516 2059.253 17482.06\r## 2070 5.2345009 8.393333 2071.019 17382.75\r## 2071 5.4332311 8.297649 2082.925 17283.38\r## 2072 5.6320511 8.202472 2094.975 17183.97\r## 2073 5.8309519 8.107805 2107.170 17084.52\r## 2074 6.0299254 8.013653 2119.513 16985.04\r## 2075 6.0530984 8.002723 2120.959 16973.45\r## 2076 5.8549125 8.096438 2108.649 17072.54\r## 2077 5.6568542 8.190637 2096.488 17171.57\r## 2078 5.4589376 8.285312 2084.476 17270.53\r## 2079 5.2611786 8.380456 2072.609 17369.41\r## 2080 5.0635956 8.476058 2060.888 17468.20\r## 2081 4.8662100 8.572106 2049.309 17566.89\r## 2082 4.6690470 8.668585 2037.873 17665.48\r## 2083 4.4721360 8.765480 2026.578 17763.93\r## 2084 4.2755117 8.862771 2015.424 17862.24\r## 2085 4.0792156 8.960436 2004.411 17960.39\r## 2086 3.8832976 9.058446 1993.537 18058.35\r## 2087 3.6878178 9.156768 1982.806 18156.09\r## 2088 3.4928498 9.255361 1972.216 18253.58\r## 2089 3.2984845 9.354175 1961.772 18350.76\r## 2090 3.1048349 9.453147 1951.475 18447.58\r## 2091 2.9120440 9.552198 1941.331 18543.98\r## 2092 2.7202941 9.651225 1931.346 18639.85\r## 2093 2.5298221 9.750099 1921.528 18735.09\r## 2094 2.3409400 9.848644 1911.891 18829.53\r## 2095 2.1540659 9.946630 1902.450 18922.97\r## 2096 1.9697716 10.043738 1893.231 19015.11\r## 2097 1.7888544 10.139525 1884.267 19105.57\r## 2098 1.6124515 10.233360 1875.608 19193.77\r## 2099 1.4422205 10.324322 1867.327 19278.89\r## 2100 1.2806248 10.411042 1859.534 19359.69\r## 2101 1.1313708 10.491461 1852.394 19434.31\r## 2102 1.0000000 10.562500 1846.154 19500.00\r## 2103 0.8944272 10.619763 1841.170 19552.79\r## 2104 0.8246211 10.657710 1837.889 19587.69\r## 2105 0.8000000 10.671111 1836.735 19600.00\r## 2106 0.8246211 10.657710 1837.889 19587.69\r## 2107 0.8944272 10.619763 1841.170 19552.79\r## 2108 1.0000000 10.562500 1846.154 19500.00\r## 2109 1.1313708 10.491461 1852.394 19434.31\r## 2110 1.2806248 10.411042 1859.534 19359.69\r## 2111 1.4422205 10.324322 1867.327 19278.89\r## 2112 1.6124515 10.233360 1875.608 19193.77\r## 2113 1.7888544 10.139525 1884.267 19105.57\r## 2114 1.9697716 10.043738 1893.231 19015.11\r## 2115 2.1540659 9.946630 1902.450 18922.97\r## 2116 2.3409400 9.848644 1911.891 18829.53\r## 2117 2.5298221 9.750099 1921.528 18735.09\r## 2118 2.7202941 9.651225 1931.346 18639.85\r## 2119 2.9120440 9.552198 1941.331 18543.98\r## 2120 3.1048349 9.453147 1951.475 18447.58\r## 2121 3.2984845 9.354175 1961.772 18350.76\r## 2122 3.4928498 9.255361 1972.216 18253.58\r## 2123 3.6878178 9.156768 1982.806 18156.09\r## 2124 3.8832976 9.058446 1993.537 18058.35\r## 2125 4.0792156 8.960436 2004.411 17960.39\r## 2126 4.2755117 8.862771 2015.424 17862.24\r## 2127 4.4721360 8.765480 2026.578 17763.93\r## 2128 4.6690470 8.668585 2037.873 17665.48\r## 2129 4.8662100 8.572106 2049.309 17566.89\r## 2130 5.0635956 8.476058 2060.888 17468.20\r## 2131 5.2611786 8.380456 2072.609 17369.41\r## 2132 5.4589376 8.285312 2084.476 17270.53\r## 2133 5.6568542 8.190637 2096.488 17171.57\r## 2134 5.8549125 8.096438 2108.649 17072.54\r## 2135 6.0530984 8.002723 2120.959 16973.45\r## 2136 6.0827625 7.988743 2122.814 16958.62\r## 2137 5.8855756 8.081902 2110.544 17057.21\r## 2138 5.6885851 8.175508 2098.427 17155.71\r## 2139 5.4918121 8.269549 2086.461 17254.09\r## 2140 5.2952809 8.364011 2074.646 17352.36\r## 2141 5.0990195 8.458878 2062.979 17450.49\r## 2142 4.9030603 8.554133 2051.461 17548.47\r## 2143 4.7074409 8.649755 2040.090 17646.28\r## 2144 4.5122057 8.745719 2028.867 17743.90\r## 2145 4.3174066 8.841996 2017.791 17841.30\r## 2146 4.1231056 8.938552 2006.863 17938.45\r## 2147 3.9293765 9.035346 1996.084 18035.31\r## 2148 3.7363083 9.132329 1985.457 18131.85\r## 2149 3.5440090 9.229439 1974.984 18228.00\r## 2150 3.3526109 9.326605 1964.669 18323.69\r## 2151 3.1622777 9.423735 1954.518 18418.86\r## 2152 2.9732137 9.520715 1944.538 18513.39\r## 2153 2.7856777 9.617401 1934.739 18607.16\r## 2154 2.6000000 9.713611 1925.134 18700.00\r## 2155 2.4166092 9.809106 1915.740 18791.70\r## 2156 2.2360680 9.903573 1906.581 18881.97\r## 2157 2.0591260 9.996597 1897.690 18970.44\r## 2158 1.8867962 10.087613 1889.109 19056.60\r## 2159 1.7204651 10.175853 1880.901 19139.77\r## 2160 1.5620499 10.260250 1873.149 19218.98\r## 2161 1.4142136 10.339326 1865.972 19292.89\r## 2162 1.2806248 10.411042 1859.534 19359.69\r## 2163 1.1661904 10.472672 1854.055 19416.90\r## 2164 1.0770330 10.520815 1849.808 19461.48\r## 2165 1.0198039 10.551776 1847.092 19490.10\r## 2166 1.0000000 10.562500 1846.154 19500.00\r## 2167 1.0198039 10.551776 1847.092 19490.10\r## 2168 1.0770330 10.520815 1849.808 19461.48\r## 2169 1.1661904 10.472672 1854.055 19416.90\r## 2170 1.2806248 10.411042 1859.534 19359.69\r## 2171 1.4142136 10.339326 1865.972 19292.89\r## 2172 1.5620499 10.260250 1873.149 19218.98\r## 2173 1.7204651 10.175853 1880.901 19139.77\r## 2174 1.8867962 10.087613 1889.109 19056.60\r## 2175 2.0591260 9.996597 1897.690 18970.44\r## 2176 2.2360680 9.903573 1906.581 18881.97\r## 2177 2.4166092 9.809106 1915.740 18791.70\r## 2178 2.6000000 9.713611 1925.134 18700.00\r## 2179 2.7856777 9.617401 1934.739 18607.16\r## 2180 2.9732137 9.520715 1944.538 18513.39\r## 2181 3.1622777 9.423735 1954.518 18418.86\r## 2182 3.3526109 9.326605 1964.669 18323.69\r## 2183 3.5440090 9.229439 1974.984 18228.00\r## 2184 3.7363083 9.132329 1985.457 18131.85\r## 2185 3.9293765 9.035346 1996.084 18035.31\r## 2186 4.1231056 8.938552 2006.863 17938.45\r## 2187 4.3174066 8.841996 2017.791 17841.30\r## 2188 4.5122057 8.745719 2028.867 17743.90\r## 2189 4.7074409 8.649755 2040.090 17646.28\r## 2190 4.9030603 8.554133 2051.461 17548.47\r## 2191 5.0990195 8.458878 2062.979 17450.49\r## 2192 5.2952809 8.364011 2074.646 17352.36\r## 2193 5.4918121 8.269549 2086.461 17254.09\r## 2194 5.6885851 8.175508 2098.427 17155.71\r## 2195 5.8855756 8.081902 2110.544 17057.21\r## 2196 6.0827625 7.988743 2122.814 16958.62\r## 2197 6.1188234 7.971765 2125.074 16940.59\r## 2198 5.9228372 8.064257 2112.852 17038.58\r## 2199 5.7271284 8.157151 2100.787 17136.44\r## 2200 5.5317267 8.250430 2088.877 17234.14\r## 2201 5.3366656 8.344075 2077.123 17331.67\r## 2202 5.1419841 8.438064 2065.522 17429.01\r## 2203 4.9477268 8.532374 2054.075 17526.14\r## 2204 4.7539457 8.626975 2042.782 17623.03\r## 2205 4.5607017 8.721832 2031.643 17719.65\r## 2206 4.3680659 8.816908 2020.659 17815.97\r## 2207 4.1761226 8.912154 2009.833 17911.94\r## 2208 3.9849718 9.007516 1999.165 18007.51\r## 2209 3.7947332 9.102926 1988.661 18102.63\r## 2210 3.6055513 9.198305 1978.324 18197.22\r## 2211 3.4176015 9.293555 1968.160 18291.20\r## 2212 3.2310989 9.388556 1958.177 18384.45\r## 2213 3.0463092 9.483162 1948.385 18476.85\r## 2214 2.8635642 9.577187 1938.797 18568.22\r## 2215 2.6832816 9.670399 1929.430 18658.36\r## 2216 2.5059928 9.762504 1920.307 18747.00\r## 2217 2.3323808 9.853122 1911.456 18833.81\r## 2218 2.1633308 9.941761 1902.916 18918.33\r## 2219 2.0000000 10.027778 1894.737 19000.00\r## 2220 1.8439089 10.110328 1886.986 19078.05\r## 2221 1.6970563 10.188302 1879.751 19151.47\r## 2222 1.5620499 10.260250 1873.149 19218.98\r## 2223 1.4422205 10.324322 1867.327 19278.89\r## 2224 1.3416408 10.378255 1862.469 19329.18\r## 2225 1.2649111 10.419494 1858.780 19367.54\r## 2226 1.2165525 10.445526 1856.462 19391.72\r## 2227 1.2000000 10.454444 1855.670 19400.00\r## 2228 1.2165525 10.445526 1856.462 19391.72\r## 2229 1.2649111 10.419494 1858.780 19367.54\r## 2230 1.3416408 10.378255 1862.469 19329.18\r## 2231 1.4422205 10.324322 1867.327 19278.89\r## 2232 1.5620499 10.260250 1873.149 19218.98\r## 2233 1.6970563 10.188302 1879.751 19151.47\r## 2234 1.8439089 10.110328 1886.986 19078.05\r## 2235 2.0000000 10.027778 1894.737 19000.00\r## 2236 2.1633308 9.941761 1902.916 18918.33\r## 2237 2.3323808 9.853122 1911.456 18833.81\r## 2238 2.5059928 9.762504 1920.307 18747.00\r## 2239 2.6832816 9.670399 1929.430 18658.36\r## 2240 2.8635642 9.577187 1938.797 18568.22\r## 2241 3.0463092 9.483162 1948.385 18476.85\r## 2242 3.2310989 9.388556 1958.177 18384.45\r## 2243 3.4176015 9.293555 1968.160 18291.20\r## 2244 3.6055513 9.198305 1978.324 18197.22\r## 2245 3.7947332 9.102926 1988.661 18102.63\r## 2246 3.9849718 9.007516 1999.165 18007.51\r## 2247 4.1761226 8.912154 2009.833 17911.94\r## 2248 4.3680659 8.816908 2020.659 17815.97\r## 2249 4.5607017 8.721832 2031.643 17719.65\r## 2250 4.7539457 8.626975 2042.782 17623.03\r## 2251 4.9477268 8.532374 2054.075 17526.14\r## 2252 5.1419841 8.438064 2065.522 17429.01\r## 2253 5.3366656 8.344075 2077.123 17331.67\r## 2254 5.5317267 8.250430 2088.877 17234.14\r## 2255 5.7271284 8.157151 2100.787 17136.44\r## 2256 5.9228372 8.064257 2112.852 17038.58\r## 2257 6.1188234 7.971765 2125.074 16940.59\r## 2258 6.1611687 7.951851 2127.733 16919.42\r## 2259 5.9665736 8.043570 2115.567 17016.71\r## 2260 5.7723479 8.135640 2103.562 17113.83\r## 2261 5.5785303 8.228039 2091.718 17210.73\r## 2262 5.3851648 8.320742 2080.033 17307.42\r## 2263 5.1923020 8.413721 2068.508 17403.85\r## 2264 5.0000000 8.506944 2057.143 17500.00\r## 2265 4.8083261 8.600374 2045.938 17595.84\r## 2266 4.6173586 8.693967 2034.896 17691.32\r## 2267 4.4271887 8.787673 2024.018 17786.41\r## 2268 4.2379240 8.881431 2013.306 17881.04\r## 2269 4.0496913 8.975171 2002.764 17975.15\r## 2270 3.8626416 9.068810 1992.398 18068.68\r## 2271 3.6769553 9.162247 1982.213 18161.52\r## 2272 3.4928498 9.255361 1972.216 18253.58\r## 2273 3.3105891 9.348006 1962.419 18344.71\r## 2274 3.1304952 9.440003 1952.833 18434.75\r## 2275 2.9529646 9.531131 1943.475 18523.52\r## 2276 2.7784888 9.621117 1934.365 18610.76\r## 2277 2.6076810 9.709622 1925.529 18696.16\r## 2278 2.4413111 9.796216 1917.000 18779.34\r## 2279 2.2803509 9.880361 1908.819 18859.82\r## 2280 2.1260292 9.961373 1901.042 18936.99\r## 2281 1.9798990 10.038389 1893.735 19010.05\r## 2282 1.8439089 10.110328 1886.986 19078.05\r## 2283 1.7204651 10.175853 1880.901 19139.77\r## 2284 1.6124515 10.233360 1875.608 19193.77\r## 2285 1.5231546 10.281025 1871.255 19238.42\r## 2286 1.4560220 10.316932 1867.996 19271.99\r## 2287 1.4142136 10.339326 1865.972 19292.89\r## 2288 1.4000000 10.346944 1865.285 19300.00\r## 2289 1.4142136 10.339326 1865.972 19292.89\r## 2290 1.4560220 10.316932 1867.996 19271.99\r## 2291 1.5231546 10.281025 1871.255 19238.42\r## 2292 1.6124515 10.233360 1875.608 19193.77\r## 2293 1.7204651 10.175853 1880.901 19139.77\r## 2294 1.8439089 10.110328 1886.986 19078.05\r## 2295 1.9798990 10.038389 1893.735 19010.05\r## 2296 2.1260292 9.961373 1901.042 18936.99\r## 2297 2.2803509 9.880361 1908.819 18859.82\r## 2298 2.4413111 9.796216 1917.000 18779.34\r## 2299 2.6076810 9.709622 1925.529 18696.16\r## 2300 2.7784888 9.621117 1934.365 18610.76\r## 2301 2.9529646 9.531131 1943.475 18523.52\r## 2302 3.1304952 9.440003 1952.833 18434.75\r## 2303 3.3105891 9.348006 1962.419 18344.71\r## 2304 3.4928498 9.255361 1972.216 18253.58\r## 2305 3.6769553 9.162247 1982.213 18161.52\r## 2306 3.8626416 9.068810 1992.398 18068.68\r## 2307 4.0496913 8.975171 2002.764 17975.15\r## 2308 4.2379240 8.881431 2013.306 17881.04\r## 2309 4.4271887 8.787673 2024.018 17786.41\r## 2310 4.6173586 8.693967 2034.896 17691.32\r## 2311 4.8083261 8.600374 2045.938 17595.84\r## 2312 5.0000000 8.506944 2057.143 17500.00\r## 2313 5.1923020 8.413721 2068.508 17403.85\r## 2314 5.3851648 8.320742 2080.033 17307.42\r## 2315 5.5785303 8.228039 2091.718 17210.73\r## 2316 5.7723479 8.135640 2103.562 17113.83\r## 2317 5.9665736 8.043570 2115.567 17016.71\r## 2318 6.1611687 7.951851 2127.733 16919.42\r## 2319 6.2096699 7.929072 2130.787 16895.17\r## 2320 6.0166436 8.019920 2118.684 16991.68\r## 2321 5.8240879 8.111062 2106.747 17087.96\r## 2322 5.6320511 8.202472 2094.975 17183.97\r## 2323 5.4405882 8.294118 2083.369 17279.71\r## 2324 5.2497619 8.385966 2071.928 17375.12\r## 2325 5.0596443 8.477975 2060.654 17470.18\r## 2326 4.8703183 8.570101 2049.549 17564.84\r## 2327 4.6818800 8.662289 2038.614 17659.06\r## 2328 4.4944410 8.754477 2027.851 17752.78\r## 2329 4.3081318 8.846593 2017.266 17845.93\r## 2330 4.1231056 8.938552 2006.863 17938.45\r## 2331 3.9395431 9.030254 1996.647 18030.23\r## 2332 3.7576588 9.121578 1986.627 18121.17\r## 2333 3.5777088 9.212384 1976.811 18211.15\r## 2334 3.4000000 9.302500 1967.213 18300.00\r## 2335 3.2249031 9.391721 1957.847 18387.55\r## 2336 3.0528675 9.479796 1948.730 18473.57\r## 2337 2.8844410 9.566422 1939.887 18557.78\r## 2338 2.7202941 9.651225 1931.346 18639.85\r## 2339 2.5612497 9.733750 1923.141 18719.38\r## 2340 2.4083189 9.813434 1915.317 18795.84\r## 2341 2.2627417 9.889588 1907.929 18868.63\r## 2342 2.1260292 9.961373 1901.042 18936.99\r## 2343 2.0000000 10.027778 1894.737 19000.00\r## 2344 1.8867962 10.087613 1889.109 19056.60\r## 2345 1.7888544 10.139525 1884.267 19105.57\r## 2346 1.7088007 10.182055 1880.328 19145.60\r## 2347 1.6492423 10.213754 1877.407 19175.38\r## 2348 1.6124515 10.233360 1875.608 19193.77\r## 2349 1.6000000 10.240000 1875.000 19200.00\r## 2350 1.6124515 10.233360 1875.608 19193.77\r## 2351 1.6492423 10.213754 1877.407 19175.38\r## 2352 1.7088007 10.182055 1880.328 19145.60\r## 2353 1.7888544 10.139525 1884.267 19105.57\r## 2354 1.8867962 10.087613 1889.109 19056.60\r## 2355 2.0000000 10.027778 1894.737 19000.00\r## 2356 2.1260292 9.961373 1901.042 18936.99\r## 2357 2.2627417 9.889588 1907.929 18868.63\r## 2358 2.4083189 9.813434 1915.317 18795.84\r## 2359 2.5612497 9.733750 1923.141 18719.38\r## 2360 2.7202941 9.651225 1931.346 18639.85\r## 2361 2.8844410 9.566422 1939.887 18557.78\r## 2362 3.0528675 9.479796 1948.730 18473.57\r## 2363 3.2249031 9.391721 1957.847 18387.55\r## 2364 3.4000000 9.302500 1967.213 18300.00\r## 2365 3.5777088 9.212384 1976.811 18211.15\r## 2366 3.7576588 9.121578 1986.627 18121.17\r## 2367 3.9395431 9.030254 1996.647 18030.23\r## 2368 4.1231056 8.938552 2006.863 17938.45\r## 2369 4.3081318 8.846593 2017.266 17845.93\r## 2370 4.4944410 8.754477 2027.851 17752.78\r## 2371 4.6818800 8.662289 2038.614 17659.06\r## 2372 4.8703183 8.570101 2049.549 17564.84\r## 2373 5.0596443 8.477975 2060.654 17470.18\r## 2374 5.2497619 8.385966 2071.928 17375.12\r## 2375 5.4405882 8.294118 2083.369 17279.71\r## 2376 5.6320511 8.202472 2094.975 17183.97\r## 2377 5.8240879 8.111062 2106.747 17087.96\r## 2378 6.0166436 8.019920 2118.684 16991.68\r## 2379 6.2096699 7.929072 2130.787 16895.17\r## 2380 6.2641839 7.903509 2134.230 16867.91\r## 2381 6.0728906 7.993394 2122.197 16963.55\r## 2382 5.8821765 8.083513 2110.334 17058.91\r## 2383 5.6920998 8.173833 2098.642 17153.95\r## 2384 5.5027266 8.264319 2087.121 17248.64\r## 2385 5.3141321 8.354927 2075.773 17342.93\r## 2386 5.1264022 8.445610 2064.599 17436.80\r## 2387 4.9396356 8.536314 2053.601 17530.18\r## 2388 4.7539457 8.626975 2042.782 17623.03\r## 2389 4.5694639 8.717520 2032.145 17715.27\r## 2390 4.3863424 8.807865 2021.696 17806.83\r## 2391 4.2047592 8.897912 2011.441 17897.62\r## 2392 4.0249224 8.987543 2001.386 17987.54\r## 2393 3.8470768 9.076624 1991.540 18076.46\r## 2394 3.6715120 9.164993 1981.916 18164.24\r## 2395 3.4985711 9.252460 1972.526 18250.71\r## 2396 3.3286634 9.338798 1963.386 18335.67\r## 2397 3.1622777 9.423735 1954.518 18418.86\r## 2398 3.0000000 9.506944 1945.946 18500.00\r## 2399 2.8425341 9.588037 1937.699 18578.73\r## 2400 2.6907248 9.666542 1929.815 18654.64\r## 2401 2.5455844 9.741898 1922.337 18727.21\r## 2402 2.4083189 9.813434 1915.317 18795.84\r## 2403 2.2803509 9.880361 1908.819 18859.82\r## 2404 2.1633308 9.941761 1902.916 18918.33\r## 2405 2.0591260 9.996597 1897.690 18970.44\r## 2406 1.9697716 10.043738 1893.231 19015.11\r## 2407 1.8973666 10.082019 1889.633 19051.32\r## 2408 1.8439089 10.110328 1886.986 19078.05\r## 2409 1.8110770 10.127735 1885.363 19094.46\r## 2410 1.8000000 10.133611 1884.817 19100.00\r## 2411 1.8110770 10.127735 1885.363 19094.46\r## 2412 1.8439089 10.110328 1886.986 19078.05\r## 2413 1.8973666 10.082019 1889.633 19051.32\r## 2414 1.9697716 10.043738 1893.231 19015.11\r## 2415 2.0591260 9.996597 1897.690 18970.44\r## 2416 2.1633308 9.941761 1902.916 18918.33\r## 2417 2.2803509 9.880361 1908.819 18859.82\r## 2418 2.4083189 9.813434 1915.317 18795.84\r## 2419 2.5455844 9.741898 1922.337 18727.21\r## 2420 2.6907248 9.666542 1929.815 18654.64\r## 2421 2.8425341 9.588037 1937.699 18578.73\r## 2422 3.0000000 9.506944 1945.946 18500.00\r## 2423 3.1622777 9.423735 1954.518 18418.86\r## 2424 3.3286634 9.338798 1963.386 18335.67\r## 2425 3.4985711 9.252460 1972.526 18250.71\r## 2426 3.6715120 9.164993 1981.916 18164.24\r## 2427 3.8470768 9.076624 1991.540 18076.46\r## 2428 4.0249224 8.987543 2001.386 17987.54\r## 2429 4.2047592 8.897912 2011.441 17897.62\r## 2430 4.3863424 8.807865 2021.696 17806.83\r## 2431 4.5694639 8.717520 2032.145 17715.27\r## 2432 4.7539457 8.626975 2042.782 17623.03\r## 2433 4.9396356 8.536314 2053.601 17530.18\r## 2434 5.1264022 8.445610 2064.599 17436.80\r## 2435 5.3141321 8.354927 2075.773 17342.93\r## 2436 5.5027266 8.264319 2087.121 17248.64\r## 2437 5.6920998 8.173833 2098.642 17153.95\r## 2438 5.8821765 8.083513 2110.334 17058.91\r## 2439 6.0728906 7.993394 2122.197 16963.55\r## 2440 6.2641839 7.903509 2134.230 16867.91\r## 2441 6.3245553 7.875247 2138.056 16837.72\r## 2442 6.1351447 7.964086 2126.098 16932.43\r## 2443 5.9464275 8.053096 2114.316 17026.79\r## 2444 5.7584720 8.142238 2102.710 17120.76\r## 2445 5.5713553 8.231469 2091.282 17214.32\r## 2446 5.3851648 8.320742 2080.033 17307.42\r## 2447 5.2000000 8.410000 2068.966 17400.00\r## 2448 5.0159745 8.499181 2058.082 17492.01\r## 2449 4.8332184 8.588212 2047.387 17583.39\r## 2450 4.6518813 8.677010 2036.884 17674.06\r## 2451 4.4721360 8.765480 2026.578 17763.93\r## 2452 4.2941821 8.853510 2016.478 17852.91\r## 2453 4.1182521 8.940971 2006.591 17940.87\r## 2454 3.9446166 9.027713 1996.928 18027.69\r## 2455 3.7735925 9.113560 1987.500 18113.20\r## 2456 3.6055513 9.198305 1978.324 18197.22\r## 2457 3.4409301 9.281705 1969.416 18279.53\r## 2458 3.2802439 9.363476 1960.797 18359.88\r## 2459 3.1240999 9.443278 1952.495 18437.95\r## 2460 2.9732137 9.520715 1944.538 18513.39\r## 2461 2.8284271 9.595318 1936.964 18585.79\r## 2462 2.6907248 9.666542 1929.815 18654.64\r## 2463 2.5612497 9.733750 1923.141 18719.38\r## 2464 2.4413111 9.796216 1917.000 18779.34\r## 2465 2.3323808 9.853122 1911.456 18833.81\r## 2466 2.2360680 9.903573 1906.581 18881.97\r## 2467 2.1540659 9.946630 1902.450 18922.97\r## 2468 2.0880613 9.981355 1899.138 18955.97\r## 2469 2.0396078 10.006885 1896.714 18980.20\r## 2470 2.0099751 10.022514 1895.234 18995.01\r## 2471 2.0000000 10.027778 1894.737 19000.00\r## 2472 2.0099751 10.022514 1895.234 18995.01\r## 2473 2.0396078 10.006885 1896.714 18980.20\r## 2474 2.0880613 9.981355 1899.138 18955.97\r## 2475 2.1540659 9.946630 1902.450 18922.97\r## 2476 2.2360680 9.903573 1906.581 18881.97\r## 2477 2.3323808 9.853122 1911.456 18833.81\r## 2478 2.4413111 9.796216 1917.000 18779.34\r## 2479 2.5612497 9.733750 1923.141 18719.38\r## 2480 2.6907248 9.666542 1929.815 18654.64\r## 2481 2.8284271 9.595318 1936.964 18585.79\r## 2482 2.9732137 9.520715 1944.538 18513.39\r## 2483 3.1240999 9.443278 1952.495 18437.95\r## 2484 3.2802439 9.363476 1960.797 18359.88\r## 2485 3.4409301 9.281705 1969.416 18279.53\r## 2486 3.6055513 9.198305 1978.324 18197.22\r## 2487 3.7735925 9.113560 1987.500 18113.20\r## 2488 3.9446166 9.027713 1996.928 18027.69\r## 2489 4.1182521 8.940971 2006.591 17940.87\r## 2490 4.2941821 8.853510 2016.478 17852.91\r## 2491 4.4721360 8.765480 2026.578 17763.93\r## 2492 4.6518813 8.677010 2036.884 17674.06\r## 2493 4.8332184 8.588212 2047.387 17583.39\r## 2494 5.0159745 8.499181 2058.082 17492.01\r## 2495 5.2000000 8.410000 2068.966 17400.00\r## 2496 5.3851648 8.320742 2080.033 17307.42\r## 2497 5.5713553 8.231469 2091.282 17214.32\r## 2498 5.7584720 8.142238 2102.710 17120.76\r## 2499 5.9464275 8.053096 2114.316 17026.79\r## 2500 6.1351447 7.964086 2126.098 16932.43\r## 2501 6.3245553 7.875247 2138.056 16837.72\r## 2502 6.3906181 7.844379 2142.259 16804.69\r## 2503 6.2032250 7.932097 2130.381 16898.39\r## 2504 6.0166436 8.019920 2118.684 16991.68\r## 2505 5.8309519 8.107805 2107.170 17084.52\r## 2506 5.6462377 8.195701 2095.840 17176.88\r## 2507 5.4626001 8.283555 2084.697 17268.70\r## 2508 5.2801515 8.371305 2073.742 17359.92\r## 2509 5.0990195 8.458878 2062.979 17450.49\r## 2510 4.9193496 8.546195 2052.413 17540.33\r## 2511 4.7413078 8.633162 2042.050 17629.35\r## 2512 4.5650849 8.719675 2031.894 17717.46\r## 2513 4.3908997 8.805611 2021.955 17804.55\r## 2514 4.2190046 8.890831 2012.241 17890.50\r## 2515 4.0496913 8.975171 2002.764 17975.15\r## 2516 3.8832976 9.058446 1993.537 18058.35\r## 2517 3.7202150 9.140436 1984.576 18139.89\r## 2518 3.5608988 9.220890 1975.899 18219.55\r## 2519 3.4058773 9.299513 1967.529 18297.06\r## 2520 3.2557641 9.375964 1959.491 18372.12\r## 2521 3.1112698 9.449850 1951.816 18444.37\r## 2522 2.9732137 9.520715 1944.538 18513.39\r## 2523 2.8425341 9.588037 1937.699 18578.73\r## 2524 2.7202941 9.651225 1931.346 18639.85\r## 2525 2.6076810 9.709622 1925.529 18696.16\r## 2526 2.5059928 9.762504 1920.307 18747.00\r## 2527 2.4166092 9.809106 1915.740 18791.70\r## 2528 2.3409400 9.848644 1911.891 18829.53\r## 2529 2.2803509 9.880361 1908.819 18859.82\r## 2530 2.2360680 9.903573 1906.581 18881.97\r## 2531 2.2090722 9.917738 1905.219 18895.46\r## 2532 2.2000000 9.922500 1904.762 18900.00\r## 2533 2.2090722 9.917738 1905.219 18895.46\r## 2534 2.2360680 9.903573 1906.581 18881.97\r## 2535 2.2803509 9.880361 1908.819 18859.82\r## 2536 2.3409400 9.848644 1911.891 18829.53\r## 2537 2.4166092 9.809106 1915.740 18791.70\r## 2538 2.5059928 9.762504 1920.307 18747.00\r## 2539 2.6076810 9.709622 1925.529 18696.16\r## 2540 2.7202941 9.651225 1931.346 18639.85\r## 2541 2.8425341 9.588037 1937.699 18578.73\r## 2542 2.9732137 9.520715 1944.538 18513.39\r## 2543 3.1112698 9.449850 1951.816 18444.37\r## 2544 3.2557641 9.375964 1959.491 18372.12\r## 2545 3.4058773 9.299513 1967.529 18297.06\r## 2546 3.5608988 9.220890 1975.899 18219.55\r## 2547 3.7202150 9.140436 1984.576 18139.89\r## 2548 3.8832976 9.058446 1993.537 18058.35\r## 2549 4.0496913 8.975171 2002.764 17975.15\r## 2550 4.2190046 8.890831 2012.241 17890.50\r## 2551 4.3908997 8.805611 2021.955 17804.55\r## 2552 4.5650849 8.719675 2031.894 17717.46\r## 2553 4.7413078 8.633162 2042.050 17629.35\r## 2554 4.9193496 8.546195 2052.413 17540.33\r## 2555 5.0990195 8.458878 2062.979 17450.49\r## 2556 5.2801515 8.371305 2073.742 17359.92\r## 2557 5.4626001 8.283555 2084.697 17268.70\r## 2558 5.6462377 8.195701 2095.840 17176.88\r## 2559 5.8309519 8.107805 2107.170 17084.52\r## 2560 6.0166436 8.019920 2118.684 16991.68\r## 2561 6.2032250 7.932097 2130.381 16898.39\r## 2562 6.3906181 7.844379 2142.259 16804.69\r## 2563 6.4621978 7.811001 2146.831 16768.90\r## 2564 6.2769419 7.897532 2135.038 16861.53\r## 2565 6.0926185 7.984101 2123.431 16953.69\r## 2566 5.9093147 8.070659 2112.014 17045.34\r## 2567 5.7271284 8.157151 2100.787 17136.44\r## 2568 5.5461698 8.243517 2089.753 17226.92\r## 2569 5.3665631 8.329687 2078.916 17316.72\r## 2570 5.1884487 8.415584 2068.279 17405.78\r## 2571 5.0119856 8.501119 2057.848 17494.01\r## 2572 4.8373546 8.586192 2047.628 17581.32\r## 2573 4.6647615 8.670688 2037.626 17667.62\r## 2574 4.4944410 8.754477 2027.851 17752.78\r## 2575 4.3266615 8.837410 2018.314 17836.67\r## 2576 4.1617304 8.919316 2009.026 17919.13\r## 2577 4.0000000 9.000000 2000.000 18000.00\r## 2578 3.8418745 9.079236 1991.254 18079.06\r## 2579 3.6878178 9.156768 1982.806 18156.09\r## 2580 3.5383612 9.232299 1974.678 18230.82\r## 2581 3.3941125 9.305493 1966.897 18302.94\r## 2582 3.2557641 9.375964 1959.491 18372.12\r## 2583 3.1240999 9.443278 1952.495 18437.95\r## 2584 3.0000000 9.506944 1945.946 18500.00\r## 2585 2.8844410 9.566422 1939.887 18557.78\r## 2586 2.7784888 9.621117 1934.365 18610.76\r## 2587 2.6832816 9.670399 1929.430 18658.36\r## 2588 2.6000000 9.713611 1925.134 18700.00\r## 2589 2.5298221 9.750099 1921.528 18735.09\r## 2590 2.4738634 9.779243 1918.663 18763.07\r## 2591 2.4331050 9.800497 1916.581 18783.45\r## 2592 2.4083189 9.813434 1915.317 18795.84\r## 2593 2.4000000 9.817778 1914.894 18800.00\r## 2594 2.4083189 9.813434 1915.317 18795.84\r## 2595 2.4331050 9.800497 1916.581 18783.45\r## 2596 2.4738634 9.779243 1918.663 18763.07\r## 2597 2.5298221 9.750099 1921.528 18735.09\r## 2598 2.6000000 9.713611 1925.134 18700.00\r## 2599 2.6832816 9.670399 1929.430 18658.36\r## 2600 2.7784888 9.621117 1934.365 18610.76\r## 2601 2.8844410 9.566422 1939.887 18557.78\r## 2602 3.0000000 9.506944 1945.946 18500.00\r## 2603 3.1240999 9.443278 1952.495 18437.95\r## 2604 3.2557641 9.375964 1959.491 18372.12\r## 2605 3.3941125 9.305493 1966.897 18302.94\r## 2606 3.5383612 9.232299 1974.678 18230.82\r## 2607 3.6878178 9.156768 1982.806 18156.09\r## 2608 3.8418745 9.079236 1991.254 18079.06\r## 2609 4.0000000 9.000000 2000.000 18000.00\r## 2610 4.1617304 8.919316 2009.026 17919.13\r## 2611 4.3266615 8.837410 2018.314 17836.67\r## 2612 4.4944410 8.754477 2027.851 17752.78\r## 2613 4.6647615 8.670688 2037.626 17667.62\r## 2614 4.8373546 8.586192 2047.628 17581.32\r## 2615 5.0119856 8.501119 2057.848 17494.01\r## 2616 5.1884487 8.415584 2068.279 17405.78\r## 2617 5.3665631 8.329687 2078.916 17316.72\r## 2618 5.5461698 8.243517 2089.753 17226.92\r## 2619 5.7271284 8.157151 2100.787 17136.44\r## 2620 5.9093147 8.070659 2112.014 17045.34\r## 2621 6.0926185 7.984101 2123.431 16953.69\r## 2622 6.2769419 7.897532 2135.038 16861.53\r## 2623 6.4621978 7.811001 2146.831 16768.90\r## 2624 6.5391131 7.775215 2151.766 16730.44\r## 2625 6.3560994 7.860500 2140.061 16821.95\r## 2626 6.1741396 7.945756 2128.549 16912.93\r## 2627 5.9933296 8.030928 2117.232 17003.34\r## 2628 5.8137767 8.115957 2106.112 17093.11\r## 2629 5.6356011 8.200777 2095.192 17182.20\r## 2630 5.4589376 8.285312 2084.476 17270.53\r## 2631 5.2839379 8.369479 2073.968 17358.03\r## 2632 5.1107729 8.453182 2063.674 17444.61\r## 2633 4.9396356 8.536314 2053.601 17530.18\r## 2634 4.7707442 8.618753 2043.756 17614.63\r## 2635 4.6043458 8.700363 2034.148 17697.83\r## 2636 4.4407207 8.780989 2024.788 17779.64\r## 2637 4.2801869 8.860452 2015.688 17859.91\r## 2638 4.1231056 8.938552 2006.863 17938.45\r## 2639 3.9698866 9.015063 1998.328 18015.06\r## 2640 3.8209946 9.089725 1990.104 18089.50\r## 2641 3.6769553 9.162247 1982.213 18161.52\r## 2642 3.5383612 9.232299 1974.678 18230.82\r## 2643 3.4058773 9.299513 1967.529 18297.06\r## 2644 3.2802439 9.363476 1960.797 18359.88\r## 2645 3.1622777 9.423735 1954.518 18418.86\r## 2646 3.0528675 9.479796 1948.730 18473.57\r## 2647 2.9529646 9.531131 1943.475 18523.52\r## 2648 2.8635642 9.577187 1938.797 18568.22\r## 2649 2.7856777 9.617401 1934.739 18607.16\r## 2650 2.7202941 9.651225 1931.346 18639.85\r## 2651 2.6683328 9.678148 1928.658 18665.83\r## 2652 2.6305893 9.697728 1926.710 18684.71\r## 2653 2.6076810 9.709622 1925.529 18696.16\r## 2654 2.6000000 9.713611 1925.134 18700.00\r## 2655 2.6076810 9.709622 1925.529 18696.16\r## 2656 2.6305893 9.697728 1926.710 18684.71\r## 2657 2.6683328 9.678148 1928.658 18665.83\r## 2658 2.7202941 9.651225 1931.346 18639.85\r## 2659 2.7856777 9.617401 1934.739 18607.16\r## 2660 2.8635642 9.577187 1938.797 18568.22\r## 2661 2.9529646 9.531131 1943.475 18523.52\r## 2662 3.0528675 9.479796 1948.730 18473.57\r## 2663 3.1622777 9.423735 1954.518 18418.86\r## 2664 3.2802439 9.363476 1960.797 18359.88\r## 2665 3.4058773 9.299513 1967.529 18297.06\r## 2666 3.5383612 9.232299 1974.678 18230.82\r## 2667 3.6769553 9.162247 1982.213 18161.52\r## 2668 3.8209946 9.089725 1990.104 18089.50\r## 2669 3.9698866 9.015063 1998.328 18015.06\r## 2670 4.1231056 8.938552 2006.863 17938.45\r## 2671 4.2801869 8.860452 2015.688 17859.91\r## 2672 4.4407207 8.780989 2024.788 17779.64\r## 2673 4.6043458 8.700363 2034.148 17697.83\r## 2674 4.7707442 8.618753 2043.756 17614.63\r## 2675 4.9396356 8.536314 2053.601 17530.18\r## 2676 5.1107729 8.453182 2063.674 17444.61\r## 2677 5.2839379 8.369479 2073.968 17358.03\r## 2678 5.4589376 8.285312 2084.476 17270.53\r## 2679 5.6356011 8.200777 2095.192 17182.20\r## 2680 5.8137767 8.115957 2106.112 17093.11\r## 2681 5.9933296 8.030928 2117.232 17003.34\r## 2682 6.1741396 7.945756 2128.549 16912.93\r## 2683 6.3560994 7.860500 2140.061 16821.95\r## 2684 6.5391131 7.775215 2151.766 16730.44\r## 2685 6.6211781 7.737123 2157.056 16689.41\r## 2686 6.4404969 7.821113 2145.443 16779.75\r## 2687 6.2609903 7.905005 2134.028 16869.50\r## 2688 6.0827625 7.988743 2122.814 16958.62\r## 2689 5.9059292 8.072262 2111.804 17047.04\r## 2690 5.7306195 8.155489 2101.001 17134.69\r## 2691 5.5569776 8.238346 2090.409 17221.51\r## 2692 5.3851648 8.320742 2080.033 17307.42\r## 2693 5.2153619 8.402577 2069.879 17392.32\r## 2694 5.0477718 8.483738 2059.955 17476.11\r## 2695 4.8826222 8.564099 2050.267 17558.69\r## 2696 4.7201695 8.643517 2040.826 17639.92\r## 2697 4.5607017 8.721832 2031.643 17719.65\r## 2698 4.4045431 8.798865 2022.730 17797.73\r## 2699 4.2520583 8.874412 2014.102 17873.97\r## 2700 4.1036569 8.948246 2005.775 17948.17\r## 2701 3.9597980 9.020112 1997.769 18020.10\r## 2702 3.8209946 9.089725 1990.104 18089.50\r## 2703 3.6878178 9.156768 1982.806 18156.09\r## 2704 3.5608988 9.220890 1975.899 18219.55\r## 2705 3.4409301 9.281705 1969.416 18279.53\r## 2706 3.3286634 9.338798 1963.386 18335.67\r## 2707 3.2249031 9.391721 1957.847 18387.55\r## 2708 3.1304952 9.440003 1952.833 18434.75\r## 2709 3.0463092 9.483162 1948.385 18476.85\r## 2710 2.9732137 9.520715 1944.538 18513.39\r## 2711 2.9120440 9.552198 1941.331 18543.98\r## 2712 2.8635642 9.577187 1938.797 18568.22\r## 2713 2.8284271 9.595318 1936.964 18585.79\r## 2714 2.8071338 9.606315 1935.855 18596.43\r## 2715 2.8000000 9.610000 1935.484 18600.00\r## 2716 2.8071338 9.606315 1935.855 18596.43\r## 2717 2.8284271 9.595318 1936.964 18585.79\r## 2718 2.8635642 9.577187 1938.797 18568.22\r## 2719 2.9120440 9.552198 1941.331 18543.98\r## 2720 2.9732137 9.520715 1944.538 18513.39\r## 2721 3.0463092 9.483162 1948.385 18476.85\r## 2722 3.1304952 9.440003 1952.833 18434.75\r## 2723 3.2249031 9.391721 1957.847 18387.55\r## 2724 3.3286634 9.338798 1963.386 18335.67\r## 2725 3.4409301 9.281705 1969.416 18279.53\r## 2726 3.5608988 9.220890 1975.899 18219.55\r## 2727 3.6878178 9.156768 1982.806 18156.09\r## 2728 3.8209946 9.089725 1990.104 18089.50\r## 2729 3.9597980 9.020112 1997.769 18020.10\r## 2730 4.1036569 8.948246 2005.775 17948.17\r## 2731 4.2520583 8.874412 2014.102 17873.97\r## 2732 4.4045431 8.798865 2022.730 17797.73\r## 2733 4.5607017 8.721832 2031.643 17719.65\r## 2734 4.7201695 8.643517 2040.826 17639.92\r## 2735 4.8826222 8.564099 2050.267 17558.69\r## 2736 5.0477718 8.483738 2059.955 17476.11\r## 2737 5.2153619 8.402577 2069.879 17392.32\r## 2738 5.3851648 8.320742 2080.033 17307.42\r## 2739 5.5569776 8.238346 2090.409 17221.51\r## 2740 5.7306195 8.155489 2101.001 17134.69\r## 2741 5.9059292 8.072262 2111.804 17047.04\r## 2742 6.0827625 7.988743 2122.814 16958.62\r## 2743 6.2609903 7.905005 2134.028 16869.50\r## 2744 6.4404969 7.821113 2145.443 16779.75\r## 2745 6.6211781 7.737123 2157.056 16689.41\r## 2746 6.7082039 7.696831 2162.695 16645.90\r## 2747 6.5299311 7.779483 2151.176 16735.03\r## 2748 6.3529521 7.861971 2139.861 16823.52\r## 2749 6.1773781 7.944234 2128.753 16911.31\r## 2750 6.0033324 8.026204 2117.855 16998.33\r## 2751 5.8309519 8.107805 2107.170 17084.52\r## 2752 5.6603887 8.188951 2096.704 17169.81\r## 2753 5.4918121 8.269549 2086.461 17254.09\r## 2754 5.3254108 8.349494 2076.449 17337.29\r## 2755 5.1613952 8.428669 2066.673 17419.30\r## 2756 5.0000000 8.506944 2057.143 17500.00\r## 2757 4.8414874 8.584174 2047.868 17579.26\r## 2758 4.6861498 8.660195 2038.860 17656.93\r## 2759 4.5343136 8.734826 2030.131 17732.84\r## 2760 4.3863424 8.807865 2021.696 17806.83\r## 2761 4.2426407 8.879089 2013.572 17878.68\r## 2762 4.1036569 8.948246 2005.775 17948.17\r## 2763 3.9698866 9.015063 1998.328 18015.06\r## 2764 3.8418745 9.079236 1991.254 18079.06\r## 2765 3.7202150 9.140436 1984.576 18139.89\r## 2766 3.6055513 9.198305 1978.324 18197.22\r## 2767 3.4985711 9.252460 1972.526 18250.71\r## 2768 3.4000000 9.302500 1967.213 18300.00\r## 2769 3.3105891 9.348006 1962.419 18344.71\r## 2770 3.2310989 9.388556 1958.177 18384.45\r## 2771 3.1622777 9.423735 1954.518 18418.86\r## 2772 3.1048349 9.453147 1951.475 18447.58\r## 2773 3.0594117 9.476438 1949.076 18470.29\r## 2774 3.0265492 9.493306 1947.343 18486.73\r## 2775 3.0066593 9.503523 1946.296 18496.67\r## 2776 3.0000000 9.506944 1945.946 18500.00\r## 2777 3.0066593 9.503523 1946.296 18496.67\r## 2778 3.0265492 9.493306 1947.343 18486.73\r## 2779 3.0594117 9.476438 1949.076 18470.29\r## 2780 3.1048349 9.453147 1951.475 18447.58\r## 2781 3.1622777 9.423735 1954.518 18418.86\r## 2782 3.2310989 9.388556 1958.177 18384.45\r## 2783 3.3105891 9.348006 1962.419 18344.71\r## 2784 3.4000000 9.302500 1967.213 18300.00\r## 2785 3.4985711 9.252460 1972.526 18250.71\r## 2786 3.6055513 9.198305 1978.324 18197.22\r## 2787 3.7202150 9.140436 1984.576 18139.89\r## 2788 3.8418745 9.079236 1991.254 18079.06\r## 2789 3.9698866 9.015063 1998.328 18015.06\r## 2790 4.1036569 8.948246 2005.775 17948.17\r## 2791 4.2426407 8.879089 2013.572 17878.68\r## 2792 4.3863424 8.807865 2021.696 17806.83\r## 2793 4.5343136 8.734826 2030.131 17732.84\r## 2794 4.6861498 8.660195 2038.860 17656.93\r## 2795 4.8414874 8.584174 2047.868 17579.26\r## 2796 5.0000000 8.506944 2057.143 17500.00\r## 2797 5.1613952 8.428669 2066.673 17419.30\r## 2798 5.3254108 8.349494 2076.449 17337.29\r## 2799 5.4918121 8.269549 2086.461 17254.09\r## 2800 5.6603887 8.188951 2096.704 17169.81\r## 2801 5.8309519 8.107805 2107.170 17084.52\r## 2802 6.0033324 8.026204 2117.855 16998.33\r## 2803 6.1773781 7.944234 2128.753 16911.31\r## 2804 6.3529521 7.861971 2139.861 16823.52\r## 2805 6.5299311 7.779483 2151.176 16735.03\r## 2806 6.7082039 7.696831 2162.695 16645.90\r## 2807 6.8000000 7.654444 2168.675 16600.00\r## 2808 6.6241981 7.735723 2157.252 16687.90\r## 2809 6.4498062 7.816774 2146.038 16775.10\r## 2810 6.2769419 7.897532 2135.038 16861.53\r## 2811 6.1057350 7.977925 2124.253 16947.13\r## 2812 5.9363288 8.057873 2113.689 17031.84\r## 2813 5.7688820 8.137288 2103.349 17115.56\r## 2814 5.6035703 8.216072 2093.241 17198.21\r## 2815 5.4405882 8.294118 2083.369 17279.71\r## 2816 5.2801515 8.371305 2073.742 17359.92\r## 2817 5.1224994 8.447500 2064.368 17438.75\r## 2818 4.9678969 8.522557 2055.258 17516.05\r## 2819 4.8166378 8.596312 2046.422 17591.68\r## 2820 4.6690470 8.668585 2037.873 17665.48\r## 2821 4.5254834 8.739176 2029.626 17737.26\r## 2822 4.3863424 8.807865 2021.696 17806.83\r## 2823 4.2520583 8.874412 2014.102 17873.97\r## 2824 4.1231056 8.938552 2006.863 17938.45\r## 2825 4.0000000 9.000000 2000.000 18000.00\r## 2826 3.8832976 9.058446 1993.537 18058.35\r## 2827 3.7735925 9.113560 1987.500 18113.20\r## 2828 3.6715120 9.164993 1981.916 18164.24\r## 2829 3.5777088 9.212384 1976.811 18211.15\r## 2830 3.4928498 9.255361 1972.216 18253.58\r## 2831 3.4176015 9.293555 1968.160 18291.20\r## 2832 3.3526109 9.326605 1964.669 18323.69\r## 2833 3.2984845 9.354175 1961.772 18350.76\r## 2834 3.2557641 9.375964 1959.491 18372.12\r## 2835 3.2249031 9.391721 1957.847 18387.55\r## 2836 3.2062439 9.401253 1956.854 18396.88\r## 2837 3.2000000 9.404444 1956.522 18400.00\r## 2838 3.2062439 9.401253 1956.854 18396.88\r## 2839 3.2249031 9.391721 1957.847 18387.55\r## 2840 3.2557641 9.375964 1959.491 18372.12\r## 2841 3.2984845 9.354175 1961.772 18350.76\r## 2842 3.3526109 9.326605 1964.669 18323.69\r## 2843 3.4176015 9.293555 1968.160 18291.20\r## 2844 3.4928498 9.255361 1972.216 18253.58\r## 2845 3.5777088 9.212384 1976.811 18211.15\r## 2846 3.6715120 9.164993 1981.916 18164.24\r## 2847 3.7735925 9.113560 1987.500 18113.20\r## 2848 3.8832976 9.058446 1993.537 18058.35\r## 2849 4.0000000 9.000000 2000.000 18000.00\r## 2850 4.1231056 8.938552 2006.863 17938.45\r## 2851 4.2520583 8.874412 2014.102 17873.97\r## 2852 4.3863424 8.807865 2021.696 17806.83\r## 2853 4.5254834 8.739176 2029.626 17737.26\r## 2854 4.6690470 8.668585 2037.873 17665.48\r## 2855 4.8166378 8.596312 2046.422 17591.68\r## 2856 4.9678969 8.522557 2055.258 17516.05\r## 2857 5.1224994 8.447500 2064.368 17438.75\r## 2858 5.2801515 8.371305 2073.742 17359.92\r## 2859 5.4405882 8.294118 2083.369 17279.71\r## 2860 5.6035703 8.216072 2093.241 17198.21\r## 2861 5.7688820 8.137288 2103.349 17115.56\r## 2862 5.9363288 8.057873 2113.689 17031.84\r## 2863 6.1057350 7.977925 2124.253 16947.13\r## 2864 6.2769419 7.897532 2135.038 16861.53\r## 2865 6.4498062 7.816774 2146.038 16775.10\r## 2866 6.6241981 7.735723 2157.252 16687.90\r## 2867 6.8000000 7.654444 2168.675 16600.00\r## 2868 6.8963759 7.610069 2174.988 16551.81\r## 2869 6.7230945 7.689947 2163.663 16638.45\r## 2870 6.5513357 7.769536 2152.552 16724.33\r## 2871 6.3812225 7.848765 2141.660 16809.39\r## 2872 6.2128898 7.927561 2130.990 16893.56\r## 2873 6.0464866 8.005841 2120.546 16976.76\r## 2874 5.8821765 8.083513 2110.334 17058.91\r## 2875 5.7201399 8.160478 2100.359 17139.93\r## 2876 5.5605755 8.236625 2090.627 17219.71\r## 2877 5.4037024 8.311832 2081.148 17298.15\r## 2878 5.2497619 8.385966 2071.928 17375.12\r## 2879 5.0990195 8.458878 2062.979 17450.49\r## 2880 4.9517674 8.530407 2054.312 17524.12\r## 2881 4.8083261 8.600374 2045.938 17595.84\r## 2882 4.6690470 8.668585 2037.873 17665.48\r## 2883 4.5343136 8.734826 2030.131 17732.84\r## 2884 4.4045431 8.798865 2022.730 17797.73\r## 2885 4.2801869 8.860452 2015.688 17859.91\r## 2886 4.1617304 8.919316 2009.026 17919.13\r## 2887 4.0496913 8.975171 2002.764 17975.15\r## 2888 3.9446166 9.027713 1996.928 18027.69\r## 2889 3.8470768 9.076624 1991.540 18076.46\r## 2890 3.7576588 9.121578 1986.627 18121.17\r## 2891 3.6769553 9.162247 1982.213 18161.52\r## 2892 3.6055513 9.198305 1978.324 18197.22\r## 2893 3.5440090 9.229439 1974.984 18228.00\r## 2894 3.4928498 9.255361 1972.216 18253.58\r## 2895 3.4525353 9.275814 1970.041 18273.73\r## 2896 3.4234486 9.290584 1968.474 18288.28\r## 2897 3.4058773 9.299513 1967.529 18297.06\r## 2898 3.4000000 9.302500 1967.213 18300.00\r## 2899 3.4058773 9.299513 1967.529 18297.06\r## 2900 3.4234486 9.290584 1968.474 18288.28\r## 2901 3.4525353 9.275814 1970.041 18273.73\r## 2902 3.4928498 9.255361 1972.216 18253.58\r## 2903 3.5440090 9.229439 1974.984 18228.00\r## 2904 3.6055513 9.198305 1978.324 18197.22\r## 2905 3.6769553 9.162247 1982.213 18161.52\r## 2906 3.7576588 9.121578 1986.627 18121.17\r## 2907 3.8470768 9.076624 1991.540 18076.46\r## 2908 3.9446166 9.027713 1996.928 18027.69\r## 2909 4.0496913 8.975171 2002.764 17975.15\r## 2910 4.1617304 8.919316 2009.026 17919.13\r## 2911 4.2801869 8.860452 2015.688 17859.91\r## 2912 4.4045431 8.798865 2022.730 17797.73\r## 2913 4.5343136 8.734826 2030.131 17732.84\r## 2914 4.6690470 8.668585 2037.873 17665.48\r## 2915 4.8083261 8.600374 2045.938 17595.84\r## 2916 4.9517674 8.530407 2054.312 17524.12\r## 2917 5.0990195 8.458878 2062.979 17450.49\r## 2918 5.2497619 8.385966 2071.928 17375.12\r## 2919 5.4037024 8.311832 2081.148 17298.15\r## 2920 5.5605755 8.236625 2090.627 17219.71\r## 2921 5.7201399 8.160478 2100.359 17139.93\r## 2922 5.8821765 8.083513 2110.334 17058.91\r## 2923 6.0464866 8.005841 2120.546 16976.76\r## 2924 6.2128898 7.927561 2130.990 16893.56\r## 2925 6.3812225 7.848765 2141.660 16809.39\r## 2926 6.5513357 7.769536 2152.552 16724.33\r## 2927 6.7230945 7.689947 2163.663 16638.45\r## 2928 6.8963759 7.610069 2174.988 16551.81\r## 2929 6.9971423 7.563810 2181.629 16501.43\r## 2930 6.8264193 7.642267 2170.402 16586.79\r## 2931 6.6573268 7.720374 2159.395 16671.34\r## 2932 6.4899923 7.798060 2148.612 16755.00\r## 2933 6.3245553 7.875247 2138.056 16837.72\r## 2934 6.1611687 7.951851 2127.733 16919.42\r## 2935 6.0000000 8.027778 2117.647 17000.00\r## 2936 5.8412327 8.102926 2107.804 17079.38\r## 2937 5.6850682 8.177184 2098.212 17157.47\r## 2938 5.5317267 8.250430 2088.877 17234.14\r## 2939 5.3814496 8.322528 2079.810 17309.28\r## 2940 5.2345009 8.393333 2071.019 17382.75\r## 2941 5.0911688 8.462684 2062.515 17454.42\r## 2942 4.9517674 8.530407 2054.312 17524.12\r## 2943 4.8166378 8.596312 2046.422 17591.68\r## 2944 4.6861498 8.660195 2038.860 17656.93\r## 2945 4.5607017 8.721832 2031.643 17719.65\r## 2946 4.4407207 8.780989 2024.788 17779.64\r## 2947 4.3266615 8.837410 2018.314 17836.67\r## 2948 4.2190046 8.890831 2012.241 17890.50\r## 2949 4.1182521 8.940971 2006.591 17940.87\r## 2950 4.0249224 8.987543 2001.386 17987.54\r## 2951 3.9395431 9.030254 1996.647 18030.23\r## 2952 3.8626416 9.068810 1992.398 18068.68\r## 2953 3.7947332 9.102926 1988.661 18102.63\r## 2954 3.7363083 9.132329 1985.457 18131.85\r## 2955 3.6878178 9.156768 1982.806 18156.09\r## 2956 3.6496575 9.176024 1980.724 18175.17\r## 2957 3.6221541 9.189914 1979.227 18188.92\r## 2958 3.6055513 9.198305 1978.324 18197.22\r## 2959 3.6000000 9.201111 1978.022 18200.00\r## 2960 3.6055513 9.198305 1978.324 18197.22\r## 2961 3.6221541 9.189914 1979.227 18188.92\r## 2962 3.6496575 9.176024 1980.724 18175.17\r## 2963 3.6878178 9.156768 1982.806 18156.09\r## 2964 3.7363083 9.132329 1985.457 18131.85\r## 2965 3.7947332 9.102926 1988.661 18102.63\r## 2966 3.8626416 9.068810 1992.398 18068.68\r## 2967 3.9395431 9.030254 1996.647 18030.23\r## 2968 4.0249224 8.987543 2001.386 17987.54\r## 2969 4.1182521 8.940971 2006.591 17940.87\r## 2970 4.2190046 8.890831 2012.241 17890.50\r## 2971 4.3266615 8.837410 2018.314 17836.67\r## 2972 4.4407207 8.780989 2024.788 17779.64\r## 2973 4.5607017 8.721832 2031.643 17719.65\r## 2974 4.6861498 8.660195 2038.860 17656.93\r## 2975 4.8166378 8.596312 2046.422 17591.68\r## 2976 4.9517674 8.530407 2054.312 17524.12\r## 2977 5.0911688 8.462684 2062.515 17454.42\r## 2978 5.2345009 8.393333 2071.019 17382.75\r## 2979 5.3814496 8.322528 2079.810 17309.28\r## 2980 5.5317267 8.250430 2088.877 17234.14\r## 2981 5.6850682 8.177184 2098.212 17157.47\r## 2982 5.8412327 8.102926 2107.804 17079.38\r## 2983 6.0000000 8.027778 2117.647 17000.00\r## 2984 6.1611687 7.951851 2127.733 16919.42\r## 2985 6.3245553 7.875247 2138.056 16837.72\r## 2986 6.4899923 7.798060 2148.612 16755.00\r## 2987 6.6573268 7.720374 2159.395 16671.34\r## 2988 6.8264193 7.642267 2170.402 16586.79\r## 2989 6.9971423 7.563810 2181.629 16501.43\r## 2990 7.1021124 7.515771 2188.590 16448.94\r## 2991 6.9339743 7.592792 2177.462 16533.01\r## 2992 6.7675697 7.669406 2166.558 16616.22\r## 2993 6.6030296 7.745539 2155.884 16698.49\r## 2994 6.4404969 7.821113 2145.443 16779.75\r## 2995 6.2801274 7.896040 2135.239 16859.94\r## 2996 6.1220911 7.970227 2125.279 16938.95\r## 2997 5.9665736 8.043570 2115.567 17016.71\r## 2998 5.8137767 8.115957 2106.112 17093.11\r## 2999 5.6639209 8.187266 2096.920 17168.04\r## 3000 5.5172457 8.257364 2088.000 17241.38\r## 3001 5.3740115 8.326105 2079.363 17312.99\r## 3002 5.2345009 8.393333 2071.019 17382.75\r## 3003 5.0990195 8.458878 2062.979 17450.49\r## 3004 4.9678969 8.522557 2055.258 17516.05\r## 3005 4.8414874 8.584174 2047.868 17579.26\r## 3006 4.7201695 8.643517 2040.826 17639.92\r## 3007 4.6043458 8.700363 2034.148 17697.83\r## 3008 4.4944410 8.754477 2027.851 17752.78\r## 3009 4.3908997 8.805611 2021.955 17804.55\r## 3010 4.2941821 8.853510 2016.478 17852.91\r## 3011 4.2047592 8.897912 2011.441 17897.62\r## 3012 4.1231056 8.938552 2006.863 17938.45\r## 3013 4.0496913 8.975171 2002.764 17975.15\r## 3014 3.9849718 9.007516 1999.165 18007.51\r## 3015 3.9293765 9.035346 1996.084 18035.31\r## 3016 3.8832976 9.058446 1993.537 18058.35\r## 3017 3.8470768 9.076624 1991.540 18076.46\r## 3018 3.8209946 9.089725 1990.104 18089.50\r## 3019 3.8052595 9.097634 1989.239 18097.37\r## 3020 3.8000000 9.100278 1988.950 18100.00\r## 3021 3.8052595 9.097634 1989.239 18097.37\r## 3022 3.8209946 9.089725 1990.104 18089.50\r## 3023 3.8470768 9.076624 1991.540 18076.46\r## 3024 3.8832976 9.058446 1993.537 18058.35\r## 3025 3.9293765 9.035346 1996.084 18035.31\r## 3026 3.9849718 9.007516 1999.165 18007.51\r## 3027 4.0496913 8.975171 2002.764 17975.15\r## 3028 4.1231056 8.938552 2006.863 17938.45\r## 3029 4.2047592 8.897912 2011.441 17897.62\r## 3030 4.2941821 8.853510 2016.478 17852.91\r## 3031 4.3908997 8.805611 2021.955 17804.55\r## 3032 4.4944410 8.754477 2027.851 17752.78\r## 3033 4.6043458 8.700363 2034.148 17697.83\r## 3034 4.7201695 8.643517 2040.826 17639.92\r## 3035 4.8414874 8.584174 2047.868 17579.26\r## 3036 4.9678969 8.522557 2055.258 17516.05\r## 3037 5.0990195 8.458878 2062.979 17450.49\r## 3038 5.2345009 8.393333 2071.019 17382.75\r## 3039 5.3740115 8.326105 2079.363 17312.99\r## 3040 5.5172457 8.257364 2088.000 17241.38\r## 3041 5.6639209 8.187266 2096.920 17168.04\r## 3042 5.8137767 8.115957 2106.112 17093.11\r## 3043 5.9665736 8.043570 2115.567 17016.71\r## 3044 6.1220911 7.970227 2125.279 16938.95\r## 3045 6.2801274 7.896040 2135.239 16859.94\r## 3046 6.4404969 7.821113 2145.443 16779.75\r## 3047 6.6030296 7.745539 2155.884 16698.49\r## 3048 6.7675697 7.669406 2166.558 16616.22\r## 3049 6.9339743 7.592792 2177.462 16533.01\r## 3050 7.1021124 7.515771 2188.590 16448.94\r## 3051 7.2111026 7.466054 2195.865 16394.45\r## 3052 7.0455660 7.541630 2184.835 16477.22\r## 3053 6.8818602 7.616744 2174.035 16559.07\r## 3054 6.7201190 7.691323 2163.469 16639.94\r## 3055 6.5604878 7.765285 2153.141 16719.76\r## 3056 6.4031242 7.838542 2143.056 16798.44\r## 3057 6.2481997 7.911000 2133.220 16875.90\r## 3058 6.0959003 7.982555 2123.637 16952.05\r## 3059 5.9464275 8.053096 2114.316 17026.79\r## 3060 5.8000000 8.122500 2105.263 17100.00\r## 3061 5.6568542 8.190637 2096.488 17171.57\r## 3062 5.5172457 8.257364 2088.000 17241.38\r## 3063 5.3814496 8.322528 2079.810 17309.28\r## 3064 5.2497619 8.385966 2071.928 17375.12\r## 3065 5.1224994 8.447500 2064.368 17438.75\r## 3066 5.0000000 8.506944 2057.143 17500.00\r## 3067 4.8826222 8.564099 2050.267 17558.69\r## 3068 4.7707442 8.618753 2043.756 17614.63\r## 3069 4.6647615 8.670688 2037.626 17667.62\r## 3070 4.5650849 8.719675 2031.894 17717.46\r## 3071 4.4721360 8.765480 2026.578 17763.93\r## 3072 4.3863424 8.807865 2021.696 17806.83\r## 3073 4.3081318 8.846593 2017.266 17845.93\r## 3074 4.2379240 8.881431 2013.306 17881.04\r## 3075 4.1761226 8.912154 2009.833 17911.94\r## 3076 4.1231056 8.938552 2006.863 17938.45\r## 3077 4.0792156 8.960436 2004.411 17960.39\r## 3078 4.0447497 8.977639 2002.489 17977.63\r## 3079 4.0199502 8.990028 2001.109 17990.02\r## 3080 4.0049969 8.997502 2000.278 17997.50\r## 3081 4.0000000 9.000000 2000.000 18000.00\r## 3082 4.0049969 8.997502 2000.278 17997.50\r## 3083 4.0199502 8.990028 2001.109 17990.02\r## 3084 4.0447497 8.977639 2002.489 17977.63\r## 3085 4.0792156 8.960436 2004.411 17960.39\r## 3086 4.1231056 8.938552 2006.863 17938.45\r## 3087 4.1761226 8.912154 2009.833 17911.94\r## 3088 4.2379240 8.881431 2013.306 17881.04\r## 3089 4.3081318 8.846593 2017.266 17845.93\r## 3090 4.3863424 8.807865 2021.696 17806.83\r## 3091 4.4721360 8.765480 2026.578 17763.93\r## 3092 4.5650849 8.719675 2031.894 17717.46\r## 3093 4.6647615 8.670688 2037.626 17667.62\r## 3094 4.7707442 8.618753 2043.756 17614.63\r## 3095 4.8826222 8.564099 2050.267 17558.69\r## 3096 5.0000000 8.506944 2057.143 17500.00\r## 3097 5.1224994 8.447500 2064.368 17438.75\r## 3098 5.2497619 8.385966 2071.928 17375.12\r## 3099 5.3814496 8.322528 2079.810 17309.28\r## 3100 5.5172457 8.257364 2088.000 17241.38\r## 3101 5.6568542 8.190637 2096.488 17171.57\r## 3102 5.8000000 8.122500 2105.263 17100.00\r## 3103 5.9464275 8.053096 2114.316 17026.79\r## 3104 6.0959003 7.982555 2123.637 16952.05\r## 3105 6.2481997 7.911000 2133.220 16875.90\r## 3106 6.4031242 7.838542 2143.056 16798.44\r## 3107 6.5604878 7.765285 2153.141 16719.76\r## 3108 6.7201190 7.691323 2163.469 16639.94\r## 3109 6.8818602 7.616744 2174.035 16559.07\r## 3110 7.0455660 7.541630 2184.835 16477.22\r## 3111 7.2111026 7.466054 2195.865 16394.45\r## 3112 7.3239334 7.414759 2203.448 16338.03\r## 3113 7.1610055 7.488886 2192.515 16419.50\r## 3114 7.0000000 7.562500 2181.818 16500.00\r## 3115 6.8410526 7.635526 2171.360 16579.47\r## 3116 6.6843100 7.707883 2161.144 16657.85\r## 3117 6.5299311 7.779483 2151.176 16735.03\r## 3118 6.3780875 7.850229 2141.461 16810.96\r## 3119 6.2289646 7.920020 2132.005 16885.52\r## 3120 6.0827625 7.988743 2122.814 16958.62\r## 3121 5.9396970 8.056279 2113.898 17030.15\r## 3122 5.8000000 8.122500 2105.263 17100.00\r## 3123 5.6639209 8.187266 2096.920 17168.04\r## 3124 5.5317267 8.250430 2088.877 17234.14\r## 3125 5.4037024 8.311832 2081.148 17298.15\r## 3126 5.2801515 8.371305 2073.742 17359.92\r## 3127 5.1613952 8.428669 2066.673 17419.30\r## 3128 5.0477718 8.483738 2059.955 17476.11\r## 3129 4.9396356 8.536314 2053.601 17530.18\r## 3130 4.8373546 8.586192 2047.628 17581.32\r## 3131 4.7413078 8.633162 2042.050 17629.35\r## 3132 4.6518813 8.677010 2036.884 17674.06\r## 3133 4.5694639 8.717520 2032.145 17715.27\r## 3134 4.4944410 8.754477 2027.851 17752.78\r## 3135 4.4271887 8.787673 2024.018 17786.41\r## 3136 4.3680659 8.816908 2020.659 17815.97\r## 3137 4.3174066 8.841996 2017.791 17841.30\r## 3138 4.2755117 8.862771 2015.424 17862.24\r## 3139 4.2426407 8.879089 2013.572 17878.68\r## 3140 4.2190046 8.890831 2012.241 17890.50\r## 3141 4.2047592 8.897912 2011.441 17897.62\r## 3142 4.2000000 8.900278 2011.173 17900.00\r## 3143 4.2047592 8.897912 2011.441 17897.62\r## 3144 4.2190046 8.890831 2012.241 17890.50\r## 3145 4.2426407 8.879089 2013.572 17878.68\r## 3146 4.2755117 8.862771 2015.424 17862.24\r## 3147 4.3174066 8.841996 2017.791 17841.30\r## 3148 4.3680659 8.816908 2020.659 17815.97\r## 3149 4.4271887 8.787673 2024.018 17786.41\r## 3150 4.4944410 8.754477 2027.851 17752.78\r## 3151 4.5694639 8.717520 2032.145 17715.27\r## 3152 4.6518813 8.677010 2036.884 17674.06\r## 3153 4.7413078 8.633162 2042.050 17629.35\r## 3154 4.8373546 8.586192 2047.628 17581.32\r## 3155 4.9396356 8.536314 2053.601 17530.18\r## 3156 5.0477718 8.483738 2059.955 17476.11\r## 3157 5.1613952 8.428669 2066.673 17419.30\r## 3158 5.2801515 8.371305 2073.742 17359.92\r## 3159 5.4037024 8.311832 2081.148 17298.15\r## 3160 5.5317267 8.250430 2088.877 17234.14\r## 3161 5.6639209 8.187266 2096.920 17168.04\r## 3162 5.8000000 8.122500 2105.263 17100.00\r## 3163 5.9396970 8.056279 2113.898 17030.15\r## 3164 6.0827625 7.988743 2122.814 16958.62\r## 3165 6.2289646 7.920020 2132.005 16885.52\r## 3166 6.3780875 7.850229 2141.461 16810.96\r## 3167 6.5299311 7.779483 2151.176 16735.03\r## 3168 6.6843100 7.707883 2161.144 16657.85\r## 3169 6.8410526 7.635526 2171.360 16579.47\r## 3170 7.0000000 7.562500 2181.818 16500.00\r## 3171 7.1610055 7.488886 2192.515 16419.50\r## 3172 7.3239334 7.414759 2203.448 16338.03\r## 3173 7.4404301 7.361983 2211.331 16279.78\r## 3174 7.2801099 7.434661 2200.496 16359.95\r## 3175 7.1217975 7.506779 2189.901 16439.10\r## 3176 6.9656299 7.578261 2179.548 16517.19\r## 3177 6.8117545 7.649025 2169.443 16594.12\r## 3178 6.6603303 7.718983 2159.589 16669.83\r## 3179 6.5115282 7.788040 2149.994 16744.24\r## 3180 6.3655322 7.856093 2140.661 16817.23\r## 3181 6.2225397 7.923034 2131.599 16888.73\r## 3182 6.0827625 7.988743 2122.814 16958.62\r## 3183 5.9464275 8.053096 2114.316 17026.79\r## 3184 5.8137767 8.115957 2106.112 17093.11\r## 3185 5.6850682 8.177184 2098.212 17157.47\r## 3186 5.5605755 8.236625 2090.627 17219.71\r## 3187 5.4405882 8.294118 2083.369 17279.71\r## 3188 5.3254108 8.349494 2076.449 17337.29\r## 3189 5.2153619 8.402577 2069.879 17392.32\r## 3190 5.1107729 8.453182 2063.674 17444.61\r## 3191 5.0119856 8.501119 2057.848 17494.01\r## 3192 4.9193496 8.546195 2052.413 17540.33\r## 3193 4.8332184 8.588212 2047.387 17583.39\r## 3194 4.7539457 8.626975 2042.782 17623.03\r## 3195 4.6818800 8.662289 2038.614 17659.06\r## 3196 4.6173586 8.693967 2034.896 17691.32\r## 3197 4.5607017 8.721832 2031.643 17719.65\r## 3198 4.5122057 8.745719 2028.867 17743.90\r## 3199 4.4721360 8.765480 2026.578 17763.93\r## 3200 4.4407207 8.780989 2024.788 17779.64\r## 3201 4.4181444 8.792142 2023.503 17790.93\r## 3202 4.4045431 8.798865 2022.730 17797.73\r## 3203 4.4000000 8.801111 2022.472 17800.00\r## 3204 4.4045431 8.798865 2022.730 17797.73\r## 3205 4.4181444 8.792142 2023.503 17790.93\r## 3206 4.4407207 8.780989 2024.788 17779.64\r## 3207 4.4721360 8.765480 2026.578 17763.93\r## 3208 4.5122057 8.745719 2028.867 17743.90\r## 3209 4.5607017 8.721832 2031.643 17719.65\r## 3210 4.6173586 8.693967 2034.896 17691.32\r## 3211 4.6818800 8.662289 2038.614 17659.06\r## 3212 4.7539457 8.626975 2042.782 17623.03\r## 3213 4.8332184 8.588212 2047.387 17583.39\r## 3214 4.9193496 8.546195 2052.413 17540.33\r## 3215 5.0119856 8.501119 2057.848 17494.01\r## 3216 5.1107729 8.453182 2063.674 17444.61\r## 3217 5.2153619 8.402577 2069.879 17392.32\r## 3218 5.3254108 8.349494 2076.449 17337.29\r## 3219 5.4405882 8.294118 2083.369 17279.71\r## 3220 5.5605755 8.236625 2090.627 17219.71\r## 3221 5.6850682 8.177184 2098.212 17157.47\r## 3222 5.8137767 8.115957 2106.112 17093.11\r## 3223 5.9464275 8.053096 2114.316 17026.79\r## 3224 6.0827625 7.988743 2122.814 16958.62\r## 3225 6.2225397 7.923034 2131.599 16888.73\r## 3226 6.3655322 7.856093 2140.661 16817.23\r## 3227 6.5115282 7.788040 2149.994 16744.24\r## 3228 6.6603303 7.718983 2159.589 16669.83\r## 3229 6.8117545 7.649025 2169.443 16594.12\r## 3230 6.9656299 7.578261 2179.548 16517.19\r## 3231 7.1217975 7.506779 2189.901 16439.10\r## 3232 7.2801099 7.434661 2200.496 16359.95\r## 3233 7.4404301 7.361983 2211.331 16279.78\r## 3234 7.5604233 7.307820 2219.511 16219.79\r## 3235 7.4027022 7.379054 2208.772 16298.65\r## 3236 7.2470684 7.449684 2198.277 16376.47\r## 3237 7.0936591 7.519634 2188.028 16453.17\r## 3238 6.9426220 7.588821 2178.031 16528.69\r## 3239 6.7941151 7.657158 2168.290 16602.94\r## 3240 6.6483081 7.724551 2158.811 16675.85\r## 3241 6.5053824 7.790899 2149.599 16747.31\r## 3242 6.3655322 7.856093 2140.661 16817.23\r## 3243 6.2289646 7.920020 2132.005 16885.52\r## 3244 6.0959003 7.982555 2123.637 16952.05\r## 3245 5.9665736 8.043570 2115.567 17016.71\r## 3246 5.8412327 8.102926 2107.804 17079.38\r## 3247 5.7201399 8.160478 2100.359 17139.93\r## 3248 5.6035703 8.216072 2093.241 17198.21\r## 3249 5.4918121 8.269549 2086.461 17254.09\r## 3250 5.3851648 8.320742 2080.033 17307.42\r## 3251 5.2839379 8.369479 2073.968 17358.03\r## 3252 5.1884487 8.415584 2068.279 17405.78\r## 3253 5.0990195 8.458878 2062.979 17450.49\r## 3254 5.0159745 8.499181 2058.082 17492.01\r## 3255 4.9396356 8.536314 2053.601 17530.18\r## 3256 4.8703183 8.570101 2049.549 17564.84\r## 3257 4.8083261 8.600374 2045.938 17595.84\r## 3258 4.7539457 8.626975 2042.782 17623.03\r## 3259 4.7074409 8.649755 2040.090 17646.28\r## 3260 4.6690470 8.668585 2037.873 17665.48\r## 3261 4.6389654 8.683353 2036.140 17680.52\r## 3262 4.6173586 8.693967 2034.896 17691.32\r## 3263 4.6043458 8.700363 2034.148 17697.83\r## 3264 4.6000000 8.702500 2033.898 17700.00\r## 3265 4.6043458 8.700363 2034.148 17697.83\r## 3266 4.6173586 8.693967 2034.896 17691.32\r## 3267 4.6389654 8.683353 2036.140 17680.52\r## 3268 4.6690470 8.668585 2037.873 17665.48\r## 3269 4.7074409 8.649755 2040.090 17646.28\r## 3270 4.7539457 8.626975 2042.782 17623.03\r## 3271 4.8083261 8.600374 2045.938 17595.84\r## 3272 4.8703183 8.570101 2049.549 17564.84\r## 3273 4.9396356 8.536314 2053.601 17530.18\r## 3274 5.0159745 8.499181 2058.082 17492.01\r## 3275 5.0990195 8.458878 2062.979 17450.49\r## 3276 5.1884487 8.415584 2068.279 17405.78\r## 3277 5.2839379 8.369479 2073.968 17358.03\r## 3278 5.3851648 8.320742 2080.033 17307.42\r## 3279 5.4918121 8.269549 2086.461 17254.09\r## 3280 5.6035703 8.216072 2093.241 17198.21\r## 3281 5.7201399 8.160478 2100.359 17139.93\r## 3282 5.8412327 8.102926 2107.804 17079.38\r## 3283 5.9665736 8.043570 2115.567 17016.71\r## 3284 6.0959003 7.982555 2123.637 16952.05\r## 3285 6.2289646 7.920020 2132.005 16885.52\r## 3286 6.3655322 7.856093 2140.661 16817.23\r## 3287 6.5053824 7.790899 2149.599 16747.31\r## 3288 6.6483081 7.724551 2158.811 16675.85\r## 3289 6.7941151 7.657158 2168.290 16602.94\r## 3290 6.9426220 7.588821 2178.031 16528.69\r## 3291 7.0936591 7.519634 2188.028 16453.17\r## 3292 7.2470684 7.449684 2198.277 16376.47\r## 3293 7.4027022 7.379054 2208.772 16298.65\r## 3294 7.5604233 7.307820 2219.511 16219.79\r## 3295 7.6837491 7.252362 2227.981 16158.13\r## 3296 7.5286121 7.322160 2217.337 16235.69\r## 3297 7.3756356 7.391314 2206.940 16312.18\r## 3298 7.2249567 7.459746 2196.793 16387.52\r## 3299 7.0767224 7.527376 2186.903 16461.64\r## 3300 6.9310894 7.594117 2177.272 16534.46\r## 3301 6.7882251 7.659875 2167.906 16605.89\r## 3302 6.6483081 7.724551 2158.811 16675.85\r## 3303 6.5115282 7.788040 2149.994 16744.24\r## 3304 6.3780875 7.850229 2141.461 16810.96\r## 3305 6.2481997 7.911000 2133.220 16875.90\r## 3306 6.1220911 7.970227 2125.279 16938.95\r## 3307 6.0000000 8.027778 2117.647 17000.00\r## 3308 5.8821765 8.083513 2110.334 17058.91\r## 3309 5.7688820 8.137288 2103.349 17115.56\r## 3310 5.6603887 8.188951 2096.704 17169.81\r## 3311 5.5569776 8.238346 2090.409 17221.51\r## 3312 5.4589376 8.285312 2084.476 17270.53\r## 3313 5.3665631 8.329687 2078.916 17316.72\r## 3314 5.2801515 8.371305 2073.742 17359.92\r## 3315 5.2000000 8.410000 2068.966 17400.00\r## 3316 5.1264022 8.445610 2064.599 17436.80\r## 3317 5.0596443 8.477975 2060.654 17470.18\r## 3318 5.0000000 8.506944 2057.143 17500.00\r## 3319 4.9477268 8.532374 2054.075 17526.14\r## 3320 4.9030603 8.554133 2051.461 17548.47\r## 3321 4.8662100 8.572106 2049.309 17566.89\r## 3322 4.8373546 8.586192 2047.628 17581.32\r## 3323 4.8166378 8.596312 2046.422 17591.68\r## 3324 4.8041649 8.602408 2045.697 17597.92\r## 3325 4.8000000 8.604444 2045.455 17600.00\r## 3326 4.8041649 8.602408 2045.697 17597.92\r## 3327 4.8166378 8.596312 2046.422 17591.68\r## 3328 4.8373546 8.586192 2047.628 17581.32\r## 3329 4.8662100 8.572106 2049.309 17566.89\r## 3330 4.9030603 8.554133 2051.461 17548.47\r## 3331 4.9477268 8.532374 2054.075 17526.14\r## 3332 5.0000000 8.506944 2057.143 17500.00\r## 3333 5.0596443 8.477975 2060.654 17470.18\r## 3334 5.1264022 8.445610 2064.599 17436.80\r## 3335 5.2000000 8.410000 2068.966 17400.00\r## 3336 5.2801515 8.371305 2073.742 17359.92\r## 3337 5.3665631 8.329687 2078.916 17316.72\r## 3338 5.4589376 8.285312 2084.476 17270.53\r## 3339 5.5569776 8.238346 2090.409 17221.51\r## 3340 5.6603887 8.188951 2096.704 17169.81\r## 3341 5.7688820 8.137288 2103.349 17115.56\r## 3342 5.8821765 8.083513 2110.334 17058.91\r## 3343 6.0000000 8.027778 2117.647 17000.00\r## 3344 6.1220911 7.970227 2125.279 16938.95\r## 3345 6.2481997 7.911000 2133.220 16875.90\r## 3346 6.3780875 7.850229 2141.461 16810.96\r## 3347 6.5115282 7.788040 2149.994 16744.24\r## 3348 6.6483081 7.724551 2158.811 16675.85\r## 3349 6.7882251 7.659875 2167.906 16605.89\r## 3350 6.9310894 7.594117 2177.272 16534.46\r## 3351 7.0767224 7.527376 2186.903 16461.64\r## 3352 7.2249567 7.459746 2196.793 16387.52\r## 3353 7.3756356 7.391314 2206.940 16312.18\r## 3354 7.5286121 7.322160 2217.337 16235.69\r## 3355 7.6837491 7.252362 2227.981 16158.13\r## 3356 7.8102497 7.195695 2236.737 16094.88\r## 3357 7.6576759 7.264069 2226.185 16171.16\r## 3358 7.5073298 7.331761 2215.884 16246.34\r## 3359 7.3593478 7.398696 2205.838 16320.33\r## 3360 7.2138755 7.464791 2196.051 16393.06\r## 3361 7.0710678 7.529962 2186.527 16464.47\r## 3362 6.9310894 7.594117 2177.272 16534.46\r## 3363 6.7941151 7.657158 2168.290 16602.94\r## 3364 6.6603303 7.718983 2159.589 16669.83\r## 3365 6.5299311 7.779483 2151.176 16735.03\r## 3366 6.4031242 7.838542 2143.056 16798.44\r## 3367 6.2801274 7.896040 2135.239 16859.94\r## 3368 6.1611687 7.951851 2127.733 16919.42\r## 3369 6.0464866 8.005841 2120.546 16976.76\r## 3370 5.9363288 8.057873 2113.689 17031.84\r## 3371 5.8309519 8.107805 2107.170 17084.52\r## 3372 5.7306195 8.155489 2101.001 17134.69\r## 3373 5.6356011 8.200777 2095.192 17182.20\r## 3374 5.5461698 8.243517 2089.753 17226.92\r## 3375 5.4626001 8.283555 2084.697 17268.70\r## 3376 5.3851648 8.320742 2080.033 17307.42\r## 3377 5.3141321 8.354927 2075.773 17342.93\r## 3378 5.2497619 8.385966 2071.928 17375.12\r## 3379 5.1923020 8.413721 2068.508 17403.85\r## 3380 5.1419841 8.438064 2065.522 17429.01\r## 3381 5.0990195 8.458878 2062.979 17450.49\r## 3382 5.0635956 8.476058 2060.888 17468.20\r## 3383 5.0358713 8.489516 2059.253 17482.06\r## 3384 5.0159745 8.499181 2058.082 17492.01\r## 3385 5.0039984 8.505001 2057.378 17498.00\r## 3386 5.0000000 8.506944 2057.143 17500.00\r## 3387 5.0039984 8.505001 2057.378 17498.00\r## 3388 5.0159745 8.499181 2058.082 17492.01\r## 3389 5.0358713 8.489516 2059.253 17482.06\r## 3390 5.0635956 8.476058 2060.888 17468.20\r## 3391 5.0990195 8.458878 2062.979 17450.49\r## 3392 5.1419841 8.438064 2065.522 17429.01\r## 3393 5.1923020 8.413721 2068.508 17403.85\r## 3394 5.2497619 8.385966 2071.928 17375.12\r## 3395 5.3141321 8.354927 2075.773 17342.93\r## 3396 5.3851648 8.320742 2080.033 17307.42\r## 3397 5.4626001 8.283555 2084.697 17268.70\r## 3398 5.5461698 8.243517 2089.753 17226.92\r## 3399 5.6356011 8.200777 2095.192 17182.20\r## 3400 5.7306195 8.155489 2101.001 17134.69\r## 3401 5.8309519 8.107805 2107.170 17084.52\r## 3402 5.9363288 8.057873 2113.689 17031.84\r## 3403 6.0464866 8.005841 2120.546 16976.76\r## 3404 6.1611687 7.951851 2127.733 16919.42\r## 3405 6.2801274 7.896040 2135.239 16859.94\r## 3406 6.4031242 7.838542 2143.056 16798.44\r## 3407 6.5299311 7.779483 2151.176 16735.03\r## 3408 6.6603303 7.718983 2159.589 16669.83\r## 3409 6.7941151 7.657158 2168.290 16602.94\r## 3410 6.9310894 7.594117 2177.272 16534.46\r## 3411 7.0710678 7.529962 2186.527 16464.47\r## 3412 7.2138755 7.464791 2196.051 16393.06\r## 3413 7.3593478 7.398696 2205.838 16320.33\r## 3414 7.5073298 7.331761 2215.884 16246.34\r## 3415 7.6576759 7.264069 2226.185 16171.16\r## 3416 7.8102497 7.195695 2236.737 16094.88\r## 3417 7.9397733 7.137904 2245.773 16030.11\r## 3418 7.7897368 7.204868 2235.312 16105.13\r## 3419 7.6419893 7.271117 2225.106 16179.01\r## 3420 7.4966659 7.336574 2215.157 16251.67\r## 3421 7.3539105 7.401161 2205.471 16323.04\r## 3422 7.2138755 7.464791 2196.051 16393.06\r## 3423 7.0767224 7.527376 2186.903 16461.64\r## 3424 6.9426220 7.588821 2178.031 16528.69\r## 3425 6.8117545 7.649025 2169.443 16594.12\r## 3426 6.6843100 7.707883 2161.144 16657.85\r## 3427 6.5604878 7.765285 2153.141 16719.76\r## 3428 6.4404969 7.821113 2145.443 16779.75\r## 3429 6.3245553 7.875247 2138.056 16837.72\r## 3430 6.2128898 7.927561 2130.990 16893.56\r## 3431 6.1057350 7.977925 2124.253 16947.13\r## 3432 6.0033324 8.026204 2117.855 16998.33\r## 3433 5.9059292 8.072262 2111.804 17047.04\r## 3434 5.8137767 8.115957 2106.112 17093.11\r## 3435 5.7271284 8.157151 2100.787 17136.44\r## 3436 5.6462377 8.195701 2095.840 17176.88\r## 3437 5.5713553 8.231469 2091.282 17214.32\r## 3438 5.5027266 8.264319 2087.121 17248.64\r## 3439 5.4405882 8.294118 2083.369 17279.71\r## 3440 5.3851648 8.320742 2080.033 17307.42\r## 3441 5.3366656 8.344075 2077.123 17331.67\r## 3442 5.2952809 8.364011 2074.646 17352.36\r## 3443 5.2611786 8.380456 2072.609 17369.41\r## 3444 5.2345009 8.393333 2071.019 17382.75\r## 3445 5.2153619 8.402577 2069.879 17392.32\r## 3446 5.2038447 8.408142 2069.194 17398.08\r## 3447 5.2000000 8.410000 2068.966 17400.00\r## 3448 5.2038447 8.408142 2069.194 17398.08\r## 3449 5.2153619 8.402577 2069.879 17392.32\r## 3450 5.2345009 8.393333 2071.019 17382.75\r## 3451 5.2611786 8.380456 2072.609 17369.41\r## 3452 5.2952809 8.364011 2074.646 17352.36\r## 3453 5.3366656 8.344075 2077.123 17331.67\r## 3454 5.3851648 8.320742 2080.033 17307.42\r## 3455 5.4405882 8.294118 2083.369 17279.71\r## 3456 5.5027266 8.264319 2087.121 17248.64\r## 3457 5.5713553 8.231469 2091.282 17214.32\r## 3458 5.6462377 8.195701 2095.840 17176.88\r## 3459 5.7271284 8.157151 2100.787 17136.44\r## 3460 5.8137767 8.115957 2106.112 17093.11\r## 3461 5.9059292 8.072262 2111.804 17047.04\r## 3462 6.0033324 8.026204 2117.855 16998.33\r## 3463 6.1057350 7.977925 2124.253 16947.13\r## 3464 6.2128898 7.927561 2130.990 16893.56\r## 3465 6.3245553 7.875247 2138.056 16837.72\r## 3466 6.4404969 7.821113 2145.443 16779.75\r## 3467 6.5604878 7.765285 2153.141 16719.76\r## 3468 6.6843100 7.707883 2161.144 16657.85\r## 3469 6.8117545 7.649025 2169.443 16594.12\r## 3470 6.9426220 7.588821 2178.031 16528.69\r## 3471 7.0767224 7.527376 2186.903 16461.64\r## 3472 7.2138755 7.464791 2196.051 16393.06\r## 3473 7.3539105 7.401161 2205.471 16323.04\r## 3474 7.4966659 7.336574 2215.157 16251.67\r## 3475 7.6419893 7.271117 2225.106 16179.01\r## 3476 7.7897368 7.204868 2235.312 16105.13\r## 3477 7.9397733 7.137904 2245.773 16030.11\r## 3478 8.0721744 7.079070 2255.086 15963.91\r## 3479 7.9246451 7.144642 2244.714 16037.68\r## 3480 7.7794601 7.209467 2234.599 16110.27\r## 3481 7.6367532 7.273470 2224.746 16181.62\r## 3482 7.4966659 7.336574 2215.157 16251.67\r## 3483 7.3593478 7.398696 2205.838 16320.33\r## 3484 7.2249567 7.459746 2196.793 16387.52\r## 3485 7.0936591 7.519634 2188.028 16453.17\r## 3486 6.9656299 7.578261 2179.548 16517.19\r## 3487 6.8410526 7.635526 2171.360 16579.47\r## 3488 6.7201190 7.691323 2163.469 16639.94\r## 3489 6.6030296 7.745539 2155.884 16698.49\r## 3490 6.4899923 7.798060 2148.612 16755.00\r## 3491 6.3812225 7.848765 2141.660 16809.39\r## 3492 6.2769419 7.897532 2135.038 16861.53\r## 3493 6.1773781 7.944234 2128.753 16911.31\r## 3494 6.0827625 7.988743 2122.814 16958.62\r## 3495 5.9933296 8.030928 2117.232 17003.34\r## 3496 5.9093147 8.070659 2112.014 17045.34\r## 3497 5.8309519 8.107805 2107.170 17084.52\r## 3498 5.7584720 8.142238 2102.710 17120.76\r## 3499 5.6920998 8.173833 2098.642 17153.95\r## 3500 5.6320511 8.202472 2094.975 17183.97\r## 3501 5.5785303 8.228039 2091.718 17210.73\r## 3502 5.5317267 8.250430 2088.877 17234.14\r## 3503 5.4918121 8.269549 2086.461 17254.09\r## 3504 5.4589376 8.285312 2084.476 17270.53\r## 3505 5.4332311 8.297649 2082.925 17283.38\r## 3506 5.4147945 8.306503 2081.815 17292.60\r## 3507 5.4037024 8.311832 2081.148 17298.15\r## 3508 5.4000000 8.313611 2080.925 17300.00\r## 3509 5.4037024 8.311832 2081.148 17298.15\r## 3510 5.4147945 8.306503 2081.815 17292.60\r## 3511 5.4332311 8.297649 2082.925 17283.38\r## 3512 5.4589376 8.285312 2084.476 17270.53\r## 3513 5.4918121 8.269549 2086.461 17254.09\r## 3514 5.5317267 8.250430 2088.877 17234.14\r## 3515 5.5785303 8.228039 2091.718 17210.73\r## 3516 5.6320511 8.202472 2094.975 17183.97\r## 3517 5.6920998 8.173833 2098.642 17153.95\r## 3518 5.7584720 8.142238 2102.710 17120.76\r## 3519 5.8309519 8.107805 2107.170 17084.52\r## 3520 5.9093147 8.070659 2112.014 17045.34\r## 3521 5.9933296 8.030928 2117.232 17003.34\r## 3522 6.0827625 7.988743 2122.814 16958.62\r## 3523 6.1773781 7.944234 2128.753 16911.31\r## 3524 6.2769419 7.897532 2135.038 16861.53\r## 3525 6.3812225 7.848765 2141.660 16809.39\r## 3526 6.4899923 7.798060 2148.612 16755.00\r## 3527 6.6030296 7.745539 2155.884 16698.49\r## 3528 6.7201190 7.691323 2163.469 16639.94\r## 3529 6.8410526 7.635526 2171.360 16579.47\r## 3530 6.9656299 7.578261 2179.548 16517.19\r## 3531 7.0936591 7.519634 2188.028 16453.17\r## 3532 7.2249567 7.459746 2196.793 16387.52\r## 3533 7.3593478 7.398696 2205.838 16320.33\r## 3534 7.4966659 7.336574 2215.157 16251.67\r## 3535 7.6367532 7.273470 2224.746 16181.62\r## 3536 7.7794601 7.209467 2234.599 16110.27\r## 3537 7.9246451 7.144642 2244.714 16037.68\r## 3538 8.0721744 7.079070 2255.086 15963.91\r## 3539 8.2073138 7.019270 2264.672 15896.34\r## 3540 8.0622577 7.083468 2254.386 15968.87\r## 3541 7.9195959 7.146891 2244.361 16040.20\r## 3542 7.7794601 7.209467 2234.599 16110.27\r## 3543 7.6419893 7.271117 2225.106 16179.01\r## 3544 7.5073298 7.331761 2215.884 16246.34\r## 3545 7.3756356 7.391314 2206.940 16312.18\r## 3546 7.2470684 7.449684 2198.277 16376.47\r## 3547 7.1217975 7.506779 2189.901 16439.10\r## 3548 7.0000000 7.562500 2181.818 16500.00\r## 3549 6.8818602 7.616744 2174.035 16559.07\r## 3550 6.7675697 7.669406 2166.558 16616.22\r## 3551 6.6573268 7.720374 2159.395 16671.34\r## 3552 6.5513357 7.769536 2152.552 16724.33\r## 3553 6.4498062 7.816774 2146.038 16775.10\r## 3554 6.3529521 7.861971 2139.861 16823.52\r## 3555 6.2609903 7.905005 2134.028 16869.50\r## 3556 6.1741396 7.945756 2128.549 16912.93\r## 3557 6.0926185 7.984101 2123.431 16953.69\r## 3558 6.0166436 8.019920 2118.684 16991.68\r## 3559 5.9464275 8.053096 2114.316 17026.79\r## 3560 5.8821765 8.083513 2110.334 17058.91\r## 3561 5.8240879 8.111062 2106.747 17087.96\r## 3562 5.7723479 8.135640 2103.562 17113.83\r## 3563 5.7271284 8.157151 2100.787 17136.44\r## 3564 5.6885851 8.175508 2098.427 17155.71\r## 3565 5.6568542 8.190637 2096.488 17171.57\r## 3566 5.6320511 8.202472 2094.975 17183.97\r## 3567 5.6142675 8.210962 2093.892 17192.87\r## 3568 5.6035703 8.216072 2093.241 17198.21\r## 3569 5.6000000 8.217778 2093.023 17200.00\r## 3570 5.6035703 8.216072 2093.241 17198.21\r## 3571 5.6142675 8.210962 2093.892 17192.87\r## 3572 5.6320511 8.202472 2094.975 17183.97\r## 3573 5.6568542 8.190637 2096.488 17171.57\r## 3574 5.6885851 8.175508 2098.427 17155.71\r## 3575 5.7271284 8.157151 2100.787 17136.44\r## 3576 5.7723479 8.135640 2103.562 17113.83\r## 3577 5.8240879 8.111062 2106.747 17087.96\r## 3578 5.8821765 8.083513 2110.334 17058.91\r## 3579 5.9464275 8.053096 2114.316 17026.79\r## 3580 6.0166436 8.019920 2118.684 16991.68\r## 3581 6.0926185 7.984101 2123.431 16953.69\r## 3582 6.1741396 7.945756 2128.549 16912.93\r## 3583 6.2609903 7.905005 2134.028 16869.50\r## 3584 6.3529521 7.861971 2139.861 16823.52\r## 3585 6.4498062 7.816774 2146.038 16775.10\r## 3586 6.5513357 7.769536 2152.552 16724.33\r## 3587 6.6573268 7.720374 2159.395 16671.34\r## 3588 6.7675697 7.669406 2166.558 16616.22\r## 3589 6.8818602 7.616744 2174.035 16559.07\r## 3590 7.0000000 7.562500 2181.818 16500.00\r## 3591 7.1217975 7.506779 2189.901 16439.10\r## 3592 7.2470684 7.449684 2198.277 16376.47\r## 3593 7.3756356 7.391314 2206.940 16312.18\r## 3594 7.5073298 7.331761 2215.884 16246.34\r## 3595 7.6419893 7.271117 2225.106 16179.01\r## 3596 7.7794601 7.209467 2234.599 16110.27\r## 3597 7.9195959 7.146891 2244.361 16040.20\r## 3598 8.0622577 7.083468 2254.386 15968.87\r## 3599 8.2073138 7.019270 2264.672 15896.34\r## 3600 8.3450584 6.958579 2274.526 15827.47\r## 3601 8.2024387 7.021423 2264.325 15898.78\r## 3602 8.0622577 7.083468 2254.386 15968.87\r## 3603 7.9246451 7.144642 2244.714 16037.68\r## 3604 7.7897368 7.204868 2235.312 16105.13\r## 3605 7.6576759 7.264069 2226.185 16171.16\r## 3606 7.5286121 7.322160 2217.337 16235.69\r## 3607 7.4027022 7.379054 2208.772 16298.65\r## 3608 7.2801099 7.434661 2200.496 16359.95\r## 3609 7.1610055 7.488886 2192.515 16419.50\r## 3610 7.0455660 7.541630 2184.835 16477.22\r## 3611 6.9339743 7.592792 2177.462 16533.01\r## 3612 6.8264193 7.642267 2170.402 16586.79\r## 3613 6.7230945 7.689947 2163.663 16638.45\r## 3614 6.6241981 7.735723 2157.252 16687.90\r## 3615 6.5299311 7.779483 2151.176 16735.03\r## 3616 6.4404969 7.821113 2145.443 16779.75\r## 3617 6.3560994 7.860500 2140.061 16821.95\r## 3618 6.2769419 7.897532 2135.038 16861.53\r## 3619 6.2032250 7.932097 2130.381 16898.39\r## 3620 6.1351447 7.964086 2126.098 16932.43\r## 3621 6.0728906 7.993394 2122.197 16963.55\r## 3622 6.0166436 8.019920 2118.684 16991.68\r## 3623 5.9665736 8.043570 2115.567 17016.71\r## 3624 5.9228372 8.064257 2112.852 17038.58\r## 3625 5.8855756 8.081902 2110.544 17057.21\r## 3626 5.8549125 8.096438 2108.649 17072.54\r## 3627 5.8309519 8.107805 2107.170 17084.52\r## 3628 5.8137767 8.115957 2106.112 17093.11\r## 3629 5.8034473 8.120863 2105.475 17098.28\r## 3630 5.8000000 8.122500 2105.263 17100.00\r## 3631 5.8034473 8.120863 2105.475 17098.28\r## 3632 5.8137767 8.115957 2106.112 17093.11\r## 3633 5.8309519 8.107805 2107.170 17084.52\r## 3634 5.8549125 8.096438 2108.649 17072.54\r## 3635 5.8855756 8.081902 2110.544 17057.21\r## 3636 5.9228372 8.064257 2112.852 17038.58\r## 3637 5.9665736 8.043570 2115.567 17016.71\r## 3638 6.0166436 8.019920 2118.684 16991.68\r## 3639 6.0728906 7.993394 2122.197 16963.55\r## 3640 6.1351447 7.964086 2126.098 16932.43\r## 3641 6.2032250 7.932097 2130.381 16898.39\r## 3642 6.2769419 7.897532 2135.038 16861.53\r## 3643 6.3560994 7.860500 2140.061 16821.95\r## 3644 6.4404969 7.821113 2145.443 16779.75\r## 3645 6.5299311 7.779483 2151.176 16735.03\r## 3646 6.6241981 7.735723 2157.252 16687.90\r## 3647 6.7230945 7.689947 2163.663 16638.45\r## 3648 6.8264193 7.642267 2170.402 16586.79\r## 3649 6.9339743 7.592792 2177.462 16533.01\r## 3650 7.0455660 7.541630 2184.835 16477.22\r## 3651 7.1610055 7.488886 2192.515 16419.50\r## 3652 7.2801099 7.434661 2200.496 16359.95\r## 3653 7.4027022 7.379054 2208.772 16298.65\r## 3654 7.5286121 7.322160 2217.337 16235.69\r## 3655 7.6576759 7.264069 2226.185 16171.16\r## 3656 7.7897368 7.204868 2235.312 16105.13\r## 3657 7.9246451 7.144642 2244.714 16037.68\r## 3658 8.0622577 7.083468 2254.386 15968.87\r## 3659 8.2024387 7.021423 2264.325 15898.78\r## 3660 8.3450584 6.958579 2274.526 15827.47\r## 3661 8.4852814 6.897066 2284.647 15757.36\r## 3662 8.3450584 6.958579 2274.526 15827.47\r## 3663 8.2073138 7.019270 2264.672 15896.34\r## 3664 8.0721744 7.079070 2255.086 15963.91\r## 3665 7.9397733 7.137904 2245.773 16030.11\r## 3666 7.8102497 7.195695 2236.737 16094.88\r## 3667 7.6837491 7.252362 2227.981 16158.13\r## 3668 7.5604233 7.307820 2219.511 16219.79\r## 3669 7.4404301 7.361983 2211.331 16279.78\r## 3670 7.3239334 7.414759 2203.448 16338.03\r## 3671 7.2111026 7.466054 2195.865 16394.45\r## 3672 7.1021124 7.515771 2188.590 16448.94\r## 3673 6.9971423 7.563810 2181.629 16501.43\r## 3674 6.8963759 7.610069 2174.988 16551.81\r## 3675 6.8000000 7.654444 2168.675 16600.00\r## 3676 6.7082039 7.696831 2162.695 16645.90\r## 3677 6.6211781 7.737123 2157.056 16689.41\r## 3678 6.5391131 7.775215 2151.766 16730.44\r## 3679 6.4621978 7.811001 2146.831 16768.90\r## 3680 6.3906181 7.844379 2142.259 16804.69\r## 3681 6.3245553 7.875247 2138.056 16837.72\r## 3682 6.2641839 7.903509 2134.230 16867.91\r## 3683 6.2096699 7.929072 2130.787 16895.17\r## 3684 6.1611687 7.951851 2127.733 16919.42\r## 3685 6.1188234 7.971765 2125.074 16940.59\r## 3686 6.0827625 7.988743 2122.814 16958.62\r## 3687 6.0530984 8.002723 2120.959 16973.45\r## 3688 6.0299254 8.013653 2119.513 16985.04\r## 3689 6.0133186 8.021490 2118.477 16993.34\r## 3690 6.0033324 8.026204 2117.855 16998.33\r## 3691 6.0000000 8.027778 2117.647 17000.00\r## 3692 6.0033324 8.026204 2117.855 16998.33\r## 3693 6.0133186 8.021490 2118.477 16993.34\r## 3694 6.0299254 8.013653 2119.513 16985.04\r## 3695 6.0530984 8.002723 2120.959 16973.45\r## 3696 6.0827625 7.988743 2122.814 16958.62\r## 3697 6.1188234 7.971765 2125.074 16940.59\r## 3698 6.1611687 7.951851 2127.733 16919.42\r## 3699 6.2096699 7.929072 2130.787 16895.17\r## 3700 6.2641839 7.903509 2134.230 16867.91\r## 3701 6.3245553 7.875247 2138.056 16837.72\r## 3702 6.3906181 7.844379 2142.259 16804.69\r## 3703 6.4621978 7.811001 2146.831 16768.90\r## 3704 6.5391131 7.775215 2151.766 16730.44\r## 3705 6.6211781 7.737123 2157.056 16689.41\r## 3706 6.7082039 7.696831 2162.695 16645.90\r## 3707 6.8000000 7.654444 2168.675 16600.00\r## 3708 6.8963759 7.610069 2174.988 16551.81\r## 3709 6.9971423 7.563810 2181.629 16501.43\r## 3710 7.1021124 7.515771 2188.590 16448.94\r## 3711 7.2111026 7.466054 2195.865 16394.45\r## 3712 7.3239334 7.414759 2203.448 16338.03\r## 3713 7.4404301 7.361983 2211.331 16279.78\r## 3714 7.5604233 7.307820 2219.511 16219.79\r## 3715 7.6837491 7.252362 2227.981 16158.13\r## 3716 7.8102497 7.195695 2236.737 16094.88\r## 3717 7.9397733 7.137904 2245.773 16030.11\r## 3718 8.0721744 7.079070 2255.086 15963.91\r## 3719 8.2073138 7.019270 2264.672 15896.34\r## 3720 8.3450584 6.958579 2274.526 15827.47\r## 3721 8.4852814 6.897066 2284.647 15757.36\rAdd a new chunk by clicking the Insert Chunk button on the toolbar or by pressing Ctrl+Alt+I.\nWhen you save the notebook, an HTML file containing the code and output will be saved alongside it (click the Preview button or press Ctrl+Shift+K to preview the HTML file).\nThe preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike Knit, Preview does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.\n","date":1551571200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1551571200,"objectID":"7b2ed2634951b17cc8b0d5e127e2ef24","permalink":"/post/orie/modeling_city/","publishdate":"2019-03-03T00:00:00Z","relpermalink":"/post/orie/modeling_city/","section":"post","summary":"I extended the work of (Wu and Plantinga 2003) using R and certain equation modififications to investigate how the addition of a light rail line would influence a city.","tags":["Systems Modeling","Simulation","cities"],"title":"Monocentric City Modeling","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Academic  Academic | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click  PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \n A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/media/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}   Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions?  Ask\n Documentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Academic's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":[],"categories":["Systems Modeling"],"content":"\r\rI compiled the land use of Austin by zoning and land use data. Furthermore, number of parking spaces and the square footage of those parking spaces by land use (single family homes, apartments and commercial buildings). Furthermore, I compared that square footage with the square footage actually in the buildings and the land area of the city of Austin. And then I used the building data I compiled to determine how much rooftop space Austin has and how much solar that could hold. I then compared those results to similar studies. I also wanted to find income correlations and land changing results as well, but finding property tax information hard to compile. As for how things might change land use, turns out Austin has pretty strict zoning and the only thing that would change that is to redo the codes.\nThe code and final report are available on Github:\nhttps://github.com/yamierick/Engineer_Living/tree/master/Austin_LandUse\nKey Image\nLand Use vs. Zoning\n\rAs a percentage of total land area, parking doesn’t take up that much space (less than 5%). However, of the building square footage parking is 40% of the created space which is shocking. That means that anytime someone wants to build anything almost 40% of the usable space is solely to store cars.\nOther things that pop out when looking at Austin’s land use map is the enormous amount of land used for single family housing which have large lots. In fact, single family zoning area is almost 7 times as large as multi family zoning even though multifamily housing houses more people. Another major thing that pops out are the immense amount of park lands Austin has. In fact there is more land used for parks and nature than there is for single family homes. As Austin becomes more dense easing the single family zoning and allowing more multi family buildings to be constructed in those areas will dramatically ease housing costs and it can be done without eating into any parkland.\nHowever, one of the advantages of having so much single family housing it means there is a ton of potential for rooftop solar with the housing roof space accounting for a whooping ¾ of the 4 GW of rooftop solar potential in Austin.\nAll in all, if I was writing Austin’s codes, I would reduce the size of the single family lots, encourage more multifamily lots, eliminate parking requirements entirely (let the market decide how much parking to build), encourage all homeowners to put solar on their rooftops, and then upgrade the grid to spread all of that solar energy across the city.\n","date":1537488000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1600726834,"objectID":"ee45691fdf0f8624c5740a3d68caf0b2","permalink":"/post/class_projects/austin-land-use/","publishdate":"2018-09-21T00:00:00Z","relpermalink":"/post/class_projects/austin-land-use/","section":"post","summary":"I compiled the land use of Austin by zoning and land use data. Furthermore, number of parking spaces and the square footage of those parking spaces by land use (single family homes, apartments and commercial buildings).","tags":["cities"],"title":"Austin Land Use","type":"post"}]