<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gurobi | Erick Jones</title>
    <link>/tag/gurobi/</link>
      <atom:link href="/tag/gurobi/index.xml" rel="self" type="application/rss+xml" />
    <description>Gurobi</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>&amp;copy Erick Jones {2020}</copyright><lastBuildDate>Sun, 05 Jan 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Gurobi</title>
      <link>/tag/gurobi/</link>
    </image>
    
    <item>
      <title>Gurobi Basic LP/MIP Examples</title>
      <link>/post/orie/gurobi_examples/</link>
      <pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/orie/gurobi_examples/</guid>
      <description> 

&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This post explores how to use Gurobi to solve LPs and MIPs.
I have written these using Gurobi as a solver and as the mathematical formulation software.
This is a reproducible example if you have R Studio just make sure you have installed the correct packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gurobi)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;gurobi&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(Matrix)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example formulates and solves the following simple LP model:
&lt;span class=&#34;math inline&#34;&gt;\(max: x + 2y + 3z\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;subject to
&lt;span class=&#34;math inline&#34;&gt;\(x + y \leq 1\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(y + z \leq 1\)&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model &amp;lt;- list()

model$A          &amp;lt;- matrix(c(1,1,0,0,1,1), nrow=2, byrow=T)
model$obj        &amp;lt;- c(1,2,3)
model$modelsense &amp;lt;- &amp;#39;max&amp;#39;
model$rhs        &amp;lt;- c(1,1)
model$sense      &amp;lt;- c(&amp;#39;&amp;lt;&amp;#39;, &amp;#39;&amp;lt;&amp;#39;)

result &amp;lt;- gurobi(model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 3 columns and 4 nonzeros
## Model fingerprint: 0x39e2cde3
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 3e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [1e+00, 1e+00]
## Presolve removed 2 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    4.0000000e+00   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  4.000000000e+00&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$objval)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 0 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Second option for A - as a sparseMatrix (using the Matrix package)...

model$A &amp;lt;- spMatrix(2, 3, c(1, 1, 2, 2), c(1, 2, 2, 3), c(1, 1, 1, 1))

params &amp;lt;- list(Method=2, TimeLimit=100)

result &amp;lt;- gurobi(model, params)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 3 columns and 4 nonzeros
## Model fingerprint: 0x39e2cde3
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 3e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [1e+00, 1e+00]
## Presolve removed 2 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    4.0000000e+00   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  4.000000000e+00&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$objval)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 0 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Third option for A - as a sparse triplet matrix (using the slam package)...

model$A &amp;lt;- simple_triplet_matrix(c(1, 1, 2, 2), c(1, 2, 2, 3), c(1, 1, 1, 1))

params &amp;lt;- list(Method=3, TimeLimit=100)

result &amp;lt;- gurobi(model, params)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 3 columns and 4 nonzeros
## Model fingerprint: 0x39e2cde3
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 3e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [1e+00, 1e+00]
## Presolve removed 2 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    4.0000000e+00   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  4.000000000e+00&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$objval)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 0 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Clear space
rm(result, params, model)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example formulates and solves the following simple MIP model:
&lt;span class=&#34;math inline&#34;&gt;\(max: x + y + 2 z\)&lt;/span&gt;
subject to
&lt;span class=&#34;math inline&#34;&gt;\(x + 2 y + 3 z \leq 4\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(x + y \geq 1\)&lt;/span&gt;
x, y, z binary&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model &amp;lt;- list()

model$A          &amp;lt;- matrix(c(1,2,3,1,1,0), nrow=2, ncol=3, byrow=T)
model$obj        &amp;lt;- c(1,1,2)
model$modelsense &amp;lt;- &amp;#39;max&amp;#39;
model$rhs        &amp;lt;- c(4,1)
model$sense      &amp;lt;- c(&amp;#39;&amp;lt;&amp;#39;, &amp;#39;&amp;gt;&amp;#39;)
model$vtype      &amp;lt;- c(&amp;#39;B&amp;#39;,&amp;#39;B&amp;#39;,&amp;#39;B&amp;#39;)

params &amp;lt;- list(OutputFlag=0)

result &amp;lt;- gurobi(model, params)

print(&amp;#39;Solution:&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Solution:&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$objval)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 0 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Clear space
rm(model, result, params)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Solve the classic diet model, showing how to add constraints
# to an existing model.


# define primitive data
Categories      &amp;lt;- c(&amp;#39;calories&amp;#39;, &amp;#39;protein&amp;#39;, &amp;#39;fat&amp;#39;, &amp;#39;sodium&amp;#39;)
nCategories     &amp;lt;- length(Categories)
minNutrition    &amp;lt;- c(     1800 ,       91 ,    0 ,       0 )
maxNutrition    &amp;lt;- c(     2200 ,      Inf ,   65 ,    1779 )

Foods           &amp;lt;- c(&amp;#39;hamburger&amp;#39;, &amp;#39;chicken&amp;#39;, &amp;#39;hot dog&amp;#39;, &amp;#39;fries&amp;#39;, &amp;#39;macaroni&amp;#39;,
                     &amp;#39;pizza&amp;#39;, &amp;#39;salad&amp;#39;, &amp;#39;milk&amp;#39;, &amp;#39;ice cream&amp;#39;)
nFoods          &amp;lt;- length(Foods)
cost            &amp;lt;- c(2.49, 2.89, 1.50, 1.89, 2.09, 1.99, 2.49, 0.89, 1.59)
nutritionValues &amp;lt;- c( 410, 24, 26 ,  730,
                      420, 32, 10 , 1190,
                      560, 20, 32 , 1800,
                      380,  4, 19 ,  270,
                      320, 12, 10 ,  930,
                      320, 15, 12 ,  820,
                      320, 31, 12 , 1230,
                      100,  8, 2.5,  125,
                      330,  8, 10 ,  180 )

#Each constraint is basically the Nutrion = sum(food*nut/food)
#Could have just made nutrition the RHS, but it works as a bounded variable because you need both upper and lower and it shrinks the amount of equations
#Objective min cost of food

# Build model
model     &amp;lt;- list()
#spMatrix tells you where to put the non zero values in matrix i,j is the location and x are teh values for each pair
model$A   &amp;lt;- spMatrix(nCategories, nCategories + nFoods,
               i = c(mapply(rep,1:4,1+nFoods)),
               j = c(1, (nCategories+1):(nCategories+nFoods),
                     2, (nCategories+1):(nCategories+nFoods),
                     3, (nCategories+1):(nCategories+nFoods),
                     4, (nCategories+1):(nCategories+nFoods) ),
               x = c(-1.0, nutritionValues[1 + nCategories*(0:(nFoods-1))],
                     -1.0, nutritionValues[2 + nCategories*(0:(nFoods-1))],
                     -1.0, nutritionValues[3 + nCategories*(0:(nFoods-1))],
                     -1.0, nutritionValues[4 + nCategories*(0:(nFoods-1))] ))
model$obj         &amp;lt;- c(rep(0, nCategories), cost)
model$lb          &amp;lt;- c(minNutrition, rep(0, nFoods))
model$ub          &amp;lt;- c(maxNutrition, rep(Inf, nFoods))
model$varnames    &amp;lt;- c(Categories, Foods)
model$rhs         &amp;lt;- rep(0,nCategories)
model$sense       &amp;lt;- rep(&amp;#39;=&amp;#39;,nCategories)
model$constrnames &amp;lt;- Categories
model$modelname   &amp;lt;- &amp;#39;diet&amp;#39;
model$modelsense  &amp;lt;- &amp;#39;min&amp;#39;

# display results
printSolution &amp;lt;- function(model, res, nCategories, nFoods) {
  if (res$status == &amp;#39;OPTIMAL&amp;#39;) {
    cat(&amp;#39;\nCost: &amp;#39;,res$objval,&amp;#39;\nBuy:\n&amp;#39;)
    for (j in nCategories + 1:nFoods) {
      if (res$x[j] &amp;gt; 1e-4) {
        cat(format(model$varnames[j],justify=&amp;#39;left&amp;#39;,width=10),&amp;#39;:&amp;#39;,
            format(res$x[j],justify=&amp;#39;right&amp;#39;,width=10,nsmall=2),&amp;#39;\n&amp;#39;)
      }
    }
    cat(&amp;#39;\nNutrition:\n&amp;#39;)
    for (j in 1:nCategories) {
      cat(format(model$varnames[j],justify=&amp;#39;left&amp;#39;,width=10),&amp;#39;:&amp;#39;,
          format(res$x[j],justify=&amp;#39;right&amp;#39;,width=10,nsmall=2),&amp;#39;\n&amp;#39;)
    }
  } else {
    cat(&amp;#39;No solution\n&amp;#39;)
  }
}

# Optimize
res &amp;lt;- gurobi(model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 4 rows, 13 columns and 40 nonzeros
## Model fingerprint: 0xff20f824
## Coefficient statistics:
##   Matrix range     [1e+00, 2e+03]
##   Objective range  [9e-01, 3e+00]
##   Bounds range     [7e+01, 2e+03]
##   RHS range        [0e+00, 0e+00]
## Presolve removed 0 rows and 3 columns
## Presolve time: 0.00s
## Presolved: 4 rows, 10 columns, 37 nonzeros
## 
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    0.0000000e+00   1.472500e+02   0.000000e+00      0s
##        4    1.1828861e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 4 iterations and 0.00 seconds
## Optimal objective  1.182886111e+01&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;printSolution(model, res, nCategories, nFoods)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Cost:  11.82886 
## Buy:
## hamburger  :  0.6045139 
## milk       :   6.970139 
## ice cream  :   2.591319 
## 
## Nutrition:
## calories   :    1800.00 
## protein    :      91.00 
## fat        :    59.0559 
## sodium     :    1779.00&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Adding constraint: at most 6 servings of dairy
# this is the matrix part of the constraint
B &amp;lt;- spMatrix(1, nCategories + nFoods,
              i = rep(1,2),
              j = (nCategories+c(8,9)),
              x = rep(1,2))
# append B to A
model$A           &amp;lt;- rbind(model$A,       B)
# extend row-related vectors
model$constrnames &amp;lt;- c(model$constrnames, &amp;#39;limit_dairy&amp;#39;)
model$rhs         &amp;lt;- c(model$rhs,         10)
model$sense       &amp;lt;- c(model$sense,       &amp;#39;&amp;lt;&amp;#39;)

# Optimize
res &amp;lt;- gurobi(model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 5 rows, 13 columns and 42 nonzeros
## Model fingerprint: 0xc012cadd
## Coefficient statistics:
##   Matrix range     [1e+00, 2e+03]
##   Objective range  [9e-01, 3e+00]
##   Bounds range     [7e+01, 2e+03]
##   RHS range        [1e+01, 1e+01]
## Presolve removed 0 rows and 3 columns
## Presolve time: 0.00s
## Presolved: 5 rows, 10 columns, 39 nonzeros
## 
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    0.0000000e+00   1.472500e+02   0.000000e+00      0s
##        4    1.1828861e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 4 iterations and 0.00 seconds
## Optimal objective  1.182886111e+01&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;printSolution(model, res, nCategories, nFoods)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Cost:  11.82886 
## Buy:
## hamburger  :  0.6045139 
## milk       :   6.970139 
## ice cream  :   2.591319 
## 
## Nutrition:
## calories   :    1800.00 
## protein    :      91.00 
## fat        :    59.0559 
## sodium     :    1779.00&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Clear space
#rm(res, model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Facility Location Problem (MIP)

# define primitive data
nPlants     &amp;lt;- 5
nWarehouses &amp;lt;- 4
# Warehouse demand in thousands of units
Demand      &amp;lt;- c(15, 18, 14, 20)
# Plant capacity in thousands of units 
Capacity    &amp;lt;- c(20, 22, 17, 19, 18)
# Fixed costs for each plant 
FixedCosts  &amp;lt;- c( 12000, 15000, 17000, 13000, 16000)
# Transportation costs per thousand units 
TransCosts  &amp;lt;- c(4000, 2000, 3000, 2500, 4500,
                 2500, 2600, 3400, 3000, 4000,
                 1200, 1800, 2600, 4100, 3000,
                 2200, 2600, 3100, 3700, 3200 )

flowidx &amp;lt;- function(w, p) {nPlants * (w-1) + p}

# Build model
model &amp;lt;- list()
model$modelname &amp;lt;- &amp;#39;facility&amp;#39;
model$modelsense &amp;lt;- &amp;#39;min&amp;#39;

# initialize data for variables
model$lb       &amp;lt;- 0
model$ub       &amp;lt;- c(rep(1, nPlants),   rep(Inf, nPlants * nWarehouses))
model$vtype    &amp;lt;- c(rep(&amp;#39;B&amp;#39;, nPlants), rep(&amp;#39;C&amp;#39;, nPlants * nWarehouses))
model$obj      &amp;lt;- c(FixedCosts, TransCosts)
model$varnames &amp;lt;- c(paste0(rep(&amp;#39;Open&amp;#39;,nPlants),1:nPlants),
                    sprintf(&amp;#39;Trans%d,%d&amp;#39;,
                            c(mapply(rep,1:nWarehouses,nPlants)),
                            1:nPlants))

# build production constraint matrix
#uses custom functions to fill out matrix, a bit out my wheelhouse
A1 &amp;lt;- spMatrix(nPlants, nPlants, i = c(1:nPlants), j = (1:nPlants), x = -Capacity)
A2 &amp;lt;- spMatrix(nPlants, nPlants * nWarehouses,
               i = c(mapply(rep, 1:nPlants, nWarehouses)),
               j = mapply(flowidx,1:nWarehouses,c(mapply(rep,1:nPlants,nWarehouses))),
               x = rep(1, nWarehouses * nPlants))
A3 &amp;lt;- spMatrix(nWarehouses, nPlants)
A4 &amp;lt;- spMatrix(nWarehouses, nPlants * nWarehouses,
               i = c(mapply(rep, 1:nWarehouses, nPlants)),
               j = mapply(flowidx,c(mapply(rep,1:nWarehouses,nPlants)),1:nPlants),
               x = rep(1, nPlants * nWarehouses))
model$A           &amp;lt;- rbind(cbind(A1, A2), cbind(A3, A4))
model$rhs         &amp;lt;- c(rep(0, nPlants),   Demand)
model$sense       &amp;lt;- c(rep(&amp;#39;&amp;lt;&amp;#39;, nPlants), rep(&amp;#39;=&amp;#39;, nWarehouses))
model$constrnames &amp;lt;- c(sprintf(&amp;#39;Capacity%d&amp;#39;,1:nPlants),
                       sprintf(&amp;#39;Demand%d&amp;#39;,1:nWarehouses))

# Save model
gurobi_write(model,&amp;#39;facilityR.lp&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Guess at the starting point: close the plant with the highest fixed
# costs; open all others first open all plants
model$start &amp;lt;- c(rep(1,nPlants),rep(NA, nPlants * nWarehouses))

# find most expensive plant, and close it in mipstart
cat(&amp;#39;Initial guess:\n&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Initial guess:&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;worstidx &amp;lt;- which.max(FixedCosts)
model$start[worstidx] &amp;lt;- 0
cat(&amp;#39;Closing plant&amp;#39;,worstidx,&amp;#39;\n&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Closing plant 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# set parameters
params &amp;lt;- list()
params$method &amp;lt;- 2

# Optimize
res &amp;lt;- gurobi(model, params)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 9 rows, 25 columns and 45 nonzeros
## Model fingerprint: 0x36b45dc0
## Variable types: 20 continuous, 5 integer (5 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 2e+01]
##   Objective range  [1e+03, 2e+04]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [1e+01, 2e+01]
## 
## User MIP start produced solution with objective 210500 (0.01s)
## Loaded user MIP start with objective 210500
## 
## Presolve time: 0.00s
## Presolved: 9 rows, 25 columns, 45 nonzeros
## Variable types: 20 continuous, 5 integer (5 binary)
## Root barrier log...
## 
## Ordering time: 0.00s
## 
## Barrier statistics:
##  AA&amp;#39; NZ     : 2.000e+01
##  Factor NZ  : 4.500e+01
##  Factor Ops : 2.850e+02 (less than 1 second per iteration)
##  Threads    : 1
## 
##                   Objective                Residual
## Iter       Primal          Dual         Primal    Dual     Compl     Time
##    0   7.94290841e+05 -2.24842916e+05  7.25e+00 3.75e+03  2.69e+04     0s
##    1   2.34432856e+05  7.59319096e+04  1.78e-15 3.64e-12  3.17e+03     0s
##    2   2.10232015e+05  1.89880475e+05  8.88e-16 4.01e-12  4.07e+02     0s
##    3   2.00964341e+05  1.98582137e+05  9.77e-15 2.79e-12  4.76e+01     0s
##    4   1.99878036e+05  1.99804970e+05  2.46e-13 3.19e-12  1.46e+00     0s
##    5   1.99833638e+05  1.99832960e+05  3.14e-13 1.82e-12  1.36e-02     0s
##    6   1.99833333e+05  1.99833333e+05  1.47e-14 2.86e-12  1.39e-08     0s
##    7   1.99833333e+05  1.99833333e+05  7.10e-15 2.73e-12  1.39e-14     0s
## 
## Barrier solved model in 7 iterations and 0.01 seconds
## Optimal objective 1.99833333e+05
## 
## 
## Root relaxation: objective 1.998333e+05, 6 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
##      0     0 199833.333    0    1 210500.000 199833.333  5.07%     -    0s
##      0     0 200252.941    0    1 210500.000 200252.941  4.87%     -    0s
##      0     0 210500.000    0    1 210500.000 210500.000  0.00%     -    0s
## 
## Cutting planes:
##   Flow cover: 3
## 
## Explored 1 nodes (11 simplex iterations) in 0.01 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 1: 210500 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 2.105000000000e+05, best bound 2.105000000000e+05, gap 0.0000%&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Print solution
if (res$status == &amp;#39;OPTIMAL&amp;#39;) {
  cat(&amp;#39;\nTotal Costs:&amp;#39;,res$objval,&amp;#39;\nsolution:\n&amp;#39;)
  cat(&amp;#39;Facilities:&amp;#39;, model$varnames[which(res$x[1:nPlants]&amp;gt;1e-5)], &amp;#39;\n&amp;#39;)
  active &amp;lt;- nPlants + which(res$x[(nPlants+1):(nPlants*(nWarehouses+1))] &amp;gt; 1e-5)
  cat(&amp;#39;Flows: &amp;#39;)
  cat(sprintf(&amp;#39;%s=%g &amp;#39;,model$varnames[active], res$x[active]), &amp;#39;\n&amp;#39;)
  rm(active)
} else {
  cat(&amp;#39;No solution\n&amp;#39;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Total Costs: 210500 
## solution:
## Facilities: Open1 Open2 Open4 Open5 
## Flows: Trans1,2=14  Trans1,4=1  Trans2,4=18  Trans3,1=14  Trans4,1=6  Trans4,2=8  Trans4,5=6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Clear space
rm(res, model, params, A1, A2, A3, A4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Assign workers to shifts; each worker may or may not be available on a
# particular day. If the problem cannot be solved, use IIS iteratively to
# find all conflicting constraints.


# Function to display results
printsolution &amp;lt;- function(result) {
  if(result$status == &amp;#39;OPTIMAL&amp;#39;) {
    cat(&amp;#39;The optimal objective is&amp;#39;,result$objval,&amp;#39;\n&amp;#39;)
    cat(&amp;#39;Schedule:\n&amp;#39;)
    for (s in 1:nShifts) {
      cat(&amp;#39;\t&amp;#39;,Shifts[s],&amp;#39;:&amp;#39;)
      for (w in 1:nWorkers) {
        if (result$x[varIdx(w,s)] &amp;gt; 0.9) cat(Workers[w],&amp;#39; &amp;#39;)
      }
      cat(&amp;#39;\n&amp;#39;)
    }
  }
}

# define data
nShifts  &amp;lt;- 14
nWorkers &amp;lt;-  7
nVars    &amp;lt;- nShifts * nWorkers
varIdx   &amp;lt;- function(w,s) {s+(w-1)*nShifts}

Shifts  &amp;lt;- c(&amp;#39;Mon1&amp;#39;, &amp;#39;Tue2&amp;#39;, &amp;#39;Wed3&amp;#39;, &amp;#39;Thu4&amp;#39;, &amp;#39;Fri5&amp;#39;, &amp;#39;Sat6&amp;#39;, &amp;#39;Sun7&amp;#39;,
             &amp;#39;Mon8&amp;#39;, &amp;#39;Tue9&amp;#39;, &amp;#39;Wed10&amp;#39;, &amp;#39;Thu11&amp;#39;, &amp;#39;Fri12&amp;#39;, &amp;#39;Sat13&amp;#39;, &amp;#39;Sun14&amp;#39;)
Workers &amp;lt;- c( &amp;#39;Amy&amp;#39;, &amp;#39;Bob&amp;#39;, &amp;#39;Cathy&amp;#39;, &amp;#39;Dan&amp;#39;, &amp;#39;Ed&amp;#39;, &amp;#39;Fred&amp;#39;, &amp;#39;Gu&amp;#39; )

pay     &amp;lt;- c(10, 12, 10, 8, 8, 9, 11 )

shiftRequirements &amp;lt;- c(3, 2, 4, 4, 5, 6, 5, 2, 2, 3, 4, 6, 7, 5 )

availability &amp;lt;- list( c( 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1 ),
                      c( 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0 ),
                      c( 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 ),
                      c( 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1 ),
                      c( 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1 ),
                      c( 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1 ),
                      c( 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ) )

# Set-up environment
env &amp;lt;- list()
env$logfile &amp;lt;- &amp;#39;workforce2.log&amp;#39;

# Build model
model            &amp;lt;- list()
model$modelname  &amp;lt;- &amp;#39;workforce2&amp;#39;
model$modelsense &amp;lt;- &amp;#39;min&amp;#39;

# Initialize assignment decision variables:
#    x[w][s] == 1 if worker w is assigned
#    to shift s. Since an assignment model always produces integer
#    solutions, we use continuous variables and solve as an LP.
model$lb       &amp;lt;- 0
model$ub       &amp;lt;- rep(1, nVars)
model$obj      &amp;lt;- rep(0, nVars)
model$varnames &amp;lt;- rep(&amp;#39;&amp;#39;,nVars)
for (w in 1:nWorkers) {
  for (s in 1:nShifts) {
    model$varnames[varIdx(w,s)] = paste0(Workers[w],&amp;#39;.&amp;#39;,Shifts[s])
    model$obj[varIdx(w,s)]      = pay[w]
    if (availability[[w]][s] == 0) model$ub[varIdx(w,s)] = 0
  }
}

# Set-up shift-requirements constraints
model$A           &amp;lt;- spMatrix(nShifts,nVars,
                      i = c(mapply(rep,1:nShifts,nWorkers)),
                      j = mapply(varIdx,1:nWorkers,
                                 mapply(rep,1:nShifts,nWorkers)),
                      x = rep(1,nShifts * nWorkers))
model$sense       &amp;lt;- rep(&amp;#39;=&amp;#39;,nShifts)
model$rhs         &amp;lt;- shiftRequirements
model$constrnames &amp;lt;- Shifts

# Save model
gurobi_write(model,&amp;#39;workforce2.lp&amp;#39;, env)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Optimize
result &amp;lt;- gurobi(model, env = env)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 14 rows, 98 columns and 98 nonzeros
## Model fingerprint: 0xbddc1063
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [8e+00, 1e+01]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [2e+00, 7e+00]
## Presolve removed 1 rows and 60 columns
## Presolve time: 0.00s
## 
## Solved in 0 iterations and 0.00 seconds
## Infeasible model&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Display results
if (result$status == &amp;#39;OPTIMAL&amp;#39;) {
# The code may enter here if you change some of the data... otherwise
# this will never be executed.
  printsolution(result);
} else if (result$status == &amp;#39;INFEASIBLE&amp;#39;) {
# We will loop until we reduce a model that can be solved
  numremoved &amp;lt;- 0 
  while(result$status == &amp;#39;INFEASIBLE&amp;#39;) {
    iis               &amp;lt;- gurobi_iis(model, env = env)
    keep              &amp;lt;- (!iis$Arows)
    cat(&amp;#39;Removing rows&amp;#39;,model$constrnames[iis$Arows],&amp;#39;...\n&amp;#39;)
    model$A           &amp;lt;- model$A[keep,,drop = FALSE]
    model$sense       &amp;lt;- model$sense[keep]
    model$rhs         &amp;lt;- model$rhs[keep]
    model$constrnames &amp;lt;- model$constrnames[keep]
    numremoved        &amp;lt;- numremoved + 1
    gurobi_write(model, paste0(&amp;#39;workforce2-&amp;#39;,numremoved,&amp;#39;.lp&amp;#39;), env)
    result            &amp;lt;- gurobi(model, env = env)
  }
  printsolution(result)
  rm(iis)
} else {
# Just to handle user interruptions or other problems
  cat(&amp;#39;Unexpected status&amp;#39;,result$status,&amp;#39;\nEnding now\n&amp;#39;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## IIS computed: 1 constraints and 7 bounds
## IIS runtime: 0.00 seconds
## Removing rows Thu4 ...
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 13 rows, 98 columns and 91 nonzeros
## Model fingerprint: 0x75a77c30
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [8e+00, 1e+01]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [2e+00, 7e+00]
## Presolve removed 1 rows and 61 columns
## Presolve time: 0.00s
## 
## Solved in 0 iterations and 0.00 seconds
## Infeasible model
## 
## IIS computed: 1 constraints and 7 bounds
## IIS runtime: 0.00 seconds
## Removing rows Sat6 ...
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 12 rows, 98 columns and 84 nonzeros
## Model fingerprint: 0x529973cc
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [8e+00, 1e+01]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [2e+00, 7e+00]
## Presolve removed 1 rows and 62 columns
## Presolve time: 0.00s
## 
## Solved in 0 iterations and 0.00 seconds
## Infeasible model
## 
## IIS computed: 1 constraints and 7 bounds
## IIS runtime: 0.00 seconds
## Removing rows Sun7 ...
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 11 rows, 98 columns and 77 nonzeros
## Model fingerprint: 0x0cbf4dba
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [8e+00, 1e+01]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [2e+00, 7e+00]
## Presolve removed 1 rows and 63 columns
## Presolve time: 0.00s
## 
## Solved in 0 iterations and 0.00 seconds
## Infeasible model
## 
## IIS computed: 1 constraints and 7 bounds
## IIS runtime: 0.00 seconds
## Removing rows Fri12 ...
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 10 rows, 98 columns and 70 nonzeros
## Model fingerprint: 0x02f1ed80
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [8e+00, 1e+01]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [2e+00, 7e+00]
## Presolve removed 10 rows and 98 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    3.3500000e+02   0.000000e+00   1.480000e+02      0s
## Extra 5 simplex iterations after uncrush
##        5    3.3500000e+02   0.000000e+00   0.000000e+00      0s
## 
## Solved in 5 iterations and 0.00 seconds
## Optimal objective  3.350000000e+02
## The optimal objective is 335 
## Schedule:
##   Mon1 :Ed  Fred  Gu  
##   Tue2 :Dan  Ed  
##   Wed3 :Amy  Dan  Ed  Fred  
##   Thu4 :
##   Fri5 :Amy  Cathy  Dan  Ed  Gu  
##   Sat6 :
##   Sun7 :
##   Mon8 :Dan  Ed  
##   Tue9 :Dan  Ed  
##   Wed10 :Amy  Cathy  Dan  
##   Thu11 :Amy  Cathy  Dan  Ed  
##   Fri12 :
##   Sat13 :Amy  Bob  Cathy  Dan  Ed  Fred  Gu  
##   Sun14 :Amy  Cathy  Dan  Ed  Fred&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Clear space
rm(model, env, availability, Shifts, Workers, pay, shiftRequirements, result)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Assign workers to shifts; each worker may or may not be available on a
# particular day. If the problem cannot be solved, relax the model
# to determine which constraints cannot be satisfied, and how much
# they need to be relaxed.


# Function to display results
printsolution &amp;lt;- function(result) {
  if(result$status == &amp;#39;OPTIMAL&amp;#39;) {
    cat(&amp;#39;The optimal objective is&amp;#39;,result$objval,&amp;#39;\n&amp;#39;)
    cat(&amp;#39;Schedule:\n&amp;#39;)
    for (s in 1:nShifts) {
      cat(&amp;#39;\t&amp;#39;,Shifts[s],&amp;#39;:&amp;#39;)
      for (w in 1:nWorkers) {
        if (result$x[varIdx(w,s)] &amp;gt; 0.9) cat(Workers[w],&amp;#39; &amp;#39;)
      }
      cat(&amp;#39;\n&amp;#39;)
    }
  }
}

# define data
nShifts  &amp;lt;- 14
nWorkers &amp;lt;-  7
nVars    &amp;lt;- nShifts * nWorkers
varIdx   &amp;lt;- function(w,s) {s+(w-1)*nShifts}

Shifts  &amp;lt;- c(&amp;#39;Mon1&amp;#39;, &amp;#39;Tue2&amp;#39;, &amp;#39;Wed3&amp;#39;, &amp;#39;Thu4&amp;#39;, &amp;#39;Fri5&amp;#39;, &amp;#39;Sat6&amp;#39;, &amp;#39;Sun7&amp;#39;,
             &amp;#39;Mon8&amp;#39;, &amp;#39;Tue9&amp;#39;, &amp;#39;Wed10&amp;#39;, &amp;#39;Thu11&amp;#39;, &amp;#39;Fri12&amp;#39;, &amp;#39;Sat13&amp;#39;, &amp;#39;Sun14&amp;#39;)
Workers &amp;lt;- c( &amp;#39;Amy&amp;#39;, &amp;#39;Bob&amp;#39;, &amp;#39;Cathy&amp;#39;, &amp;#39;Dan&amp;#39;, &amp;#39;Ed&amp;#39;, &amp;#39;Fred&amp;#39;, &amp;#39;Gu&amp;#39; )

pay     &amp;lt;- c(10, 12, 10, 8, 8, 9, 11 )

shiftRequirements &amp;lt;- c(3, 2, 4, 4, 5, 6, 5, 2, 2, 3, 4, 6, 7, 5 )

availability &amp;lt;- list( c( 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1 ),
                      c( 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0 ),
                      c( 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 ),
                      c( 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1 ),
                      c( 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1 ),
                      c( 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1 ),
                      c( 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ) )

# Set-up environment
env &amp;lt;- list()
env$logfile &amp;lt;- &amp;#39;workforce3.log&amp;#39;

# Build model
model            &amp;lt;- list()
model$modelname  &amp;lt;- &amp;#39;workforce3&amp;#39;
model$modelsense &amp;lt;- &amp;#39;min&amp;#39;

# Initialize assignment decision variables:
#    x[w][s] == 1 if worker w is assigned
#    to shift s. Since an assignment model always produces integer
#    solutions, we use continuous variables and solve as an LP.
model$lb       &amp;lt;- 0
model$ub       &amp;lt;- rep(1, nVars)
model$obj      &amp;lt;- rep(0, nVars)
model$varnames &amp;lt;- rep(&amp;#39;&amp;#39;,nVars)
for (w in 1:nWorkers) {
  for (s in 1:nShifts) {
    model$varnames[varIdx(w,s)] = paste0(Workers[w],&amp;#39;.&amp;#39;,Shifts[s])
    model$obj[varIdx(w,s)]      = pay[w]
    if (availability[[w]][s] == 0) model$ub[varIdx(w,s)] = 0
  }
}

# Set-up shift-requirements constraints
model$A           &amp;lt;- spMatrix(nShifts,nVars,
                      i = c(mapply(rep,1:nShifts,nWorkers)),
                      j = mapply(varIdx,1:nWorkers,
                                 mapply(rep,1:nShifts,nWorkers)),
                      x = rep(1,nShifts * nWorkers))
model$sense       &amp;lt;- rep(&amp;#39;=&amp;#39;,nShifts)
model$rhs         &amp;lt;- shiftRequirements
model$constrnames &amp;lt;- Shifts

# Save model
gurobi_write(model,&amp;#39;workforce3.lp&amp;#39;, env)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Optimize
result &amp;lt;- gurobi(model, env = env)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 14 rows, 98 columns and 98 nonzeros
## Model fingerprint: 0xbddc1063
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [8e+00, 1e+01]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [2e+00, 7e+00]
## Presolve removed 1 rows and 60 columns
## Presolve time: 0.00s
## 
## Solved in 0 iterations and 0.00 seconds
## Infeasible model&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Display results
if (result$status == &amp;#39;OPTIMAL&amp;#39;) {
# The code may enter here if you change some of the data... otherwise
# this will never be executed.
  printsolution(result);
} else if (result$status == &amp;#39;INFEASIBLE&amp;#39;) {
# Use gurobi_feasrelax to find out which copnstraints should be relaxed
# and by how much to make the problem feasible.
  penalties     &amp;lt;- list()
  penalties$lb  &amp;lt;- Inf
  penalties$ub  &amp;lt;- Inf
  penalties$rhs &amp;lt;- rep(1,length(model$rhs))
  feasrelax     &amp;lt;- gurobi_feasrelax(model, 0, FALSE, penalties, env = env)
  result        &amp;lt;- gurobi(feasrelax$model, env = env)
  if (result$status == &amp;#39;OPTIMAL&amp;#39;) {
    printsolution(result)
    cat(&amp;#39;Slack values:\n&amp;#39;)
    for (j in (nVars+1):length(result$x)) {
      if(result$x[j] &amp;gt; 0.1)
        cat(&amp;#39;\t&amp;#39;,feasrelax$model$varnames[j],result$x[j],&amp;#39;\n&amp;#39;)
    }
  } else {
    cat(&amp;#39;Unexpected status&amp;#39;,result$status,&amp;#39;\nEnding now\n&amp;#39;)
  }
  rm(penalties, feasrelax)
} else {
# Just to handle user interruptions or other problems
  cat(&amp;#39;Unexpected status&amp;#39;,result$status,&amp;#39;\nEnding now\n&amp;#39;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 14 rows, 126 columns and 126 nonzeros
## Model fingerprint: 0xa5484b98
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [2e+00, 7e+00]
## Presolve removed 5 rows and 99 columns
## Presolve time: 0.00s
## Presolved: 9 rows, 27 columns, 27 nonzeros
## 
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    6.0000000e+00   0.000000e+00   0.000000e+00      0s
##        0    6.0000000e+00   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  6.000000000e+00
## The optimal objective is 6 
## Schedule:
##   Mon1 :Ed  Fred  Gu  
##   Tue2 :Bob  Ed  
##   Wed3 :Amy  Cathy  Fred  Gu  
##   Thu4 :Cathy  Ed  
##   Fri5 :Amy  Cathy  Dan  Ed  Gu  
##   Sat6 :Bob  Dan  Fred  Gu  
##   Sun7 :Amy  Cathy  Ed  Gu  
##   Mon8 :Dan  Ed  
##   Tue9 :Dan  Gu  
##   Wed10 :Amy  Dan  Gu  
##   Thu11 :Amy  Bob  Ed  Gu  
##   Fri12 :Amy  Cathy  Dan  Fred  Gu  
##   Sat13 :Amy  Bob  Cathy  Dan  Ed  Fred  Gu  
##   Sun14 :Amy  Cathy  Ed  Fred  Gu  
## Slack values:
##   ArtP_Thu4 2 
##   ArtP_Sat6 2 
##   ArtP_Sun7 1 
##   ArtP_Fri12 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Clear space
rm(model, env, availability, Shifts, Workers, pay, shiftRequirements, result)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add a new chunk by clicking the &lt;em&gt;Insert Chunk&lt;/em&gt; button on the toolbar or by pressing &lt;em&gt;Ctrl+Alt+I&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the &lt;em&gt;Preview&lt;/em&gt; button or press &lt;em&gt;Ctrl+Shift+K&lt;/em&gt; to preview the HTML file).&lt;/p&gt;
&lt;p&gt;The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike &lt;em&gt;Knit&lt;/em&gt;, &lt;em&gt;Preview&lt;/em&gt; does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
