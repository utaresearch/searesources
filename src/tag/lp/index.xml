<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LP | Erick Jones</title>
    <link>/tag/lp/</link>
      <atom:link href="/tag/lp/index.xml" rel="self" type="application/rss+xml" />
    <description>LP</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>&amp;copy Erick Jones {2020}</copyright><lastBuildDate>Fri, 10 Jan 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>LP</title>
      <link>/tag/lp/</link>
    </image>
    
    <item>
      <title>Decompositions Algorithms Broken Down and Explained</title>
      <link>/post/orie/decompo_algs/</link>
      <pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/orie/decompo_algs/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This post explores how to use various decomposition techniques to solve LPs and MIPs.
I have written these using Gurobi as a solver and as the mathematical formulation software.
This is a reproducible example if you have R Studio just make sure you have installed the correct packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gurobi)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;gurobi&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tictoc)
library(Matrix)
library(ggplot2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;ggplot2&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Using homogenous equations to generate extreme points for (optimality) and extreme rays for (feasiblity)
#max 2x1 + x2 + 13x3 + 7y1 + 5y2
#s.t. 9x1+4x2+14x3+35y1+24y2 &amp;lt;= 80; -x1-2x2+3x3-3y1+4y2 &amp;lt;= 10
#x &amp;gt;=0, y&amp;gt;= 0, x is int

#RMP
#max z + 2x1 + x2 + 13x3
# z &amp;gt;= + (80-9x1-4x2-14x3)*u1 + (10+x1+2x2-3x3)*u2 u == 0 initial guess
u &amp;lt;- c(0,0)
RMP &amp;lt;- list()

RMP$A          &amp;lt;- matrix(c(1,(u[1]*9-u[2]),(u[1]*4-2*u[2]),(14*u[1]+3*u[2])), nrow=1, byrow=T)
RMP$obj        &amp;lt;- c(1,2,1,13)
RMP$modelsense &amp;lt;- &amp;#39;max&amp;#39;
RMP$rhs        &amp;lt;- c((80*u[1]+10*u[2]))
RMP$sense      &amp;lt;- c(&amp;#39;&amp;lt;&amp;#39;)
RMP$vtype      &amp;lt;- c(&amp;#39;C&amp;#39;,&amp;#39;I&amp;#39;,&amp;#39;I&amp;#39;,&amp;#39;I&amp;#39;)

result &amp;lt;- gurobi(RMP)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 4 columns and 1 nonzeros
## Model fingerprint: 0x2e4b9afd
## Variable types: 1 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 1e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [0e+00, 0e+00]
## Found heuristic solution: objective 1.600000e+31
## Presolve time: 0.00s
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 1: 1.6e+31 
## No other solutions better than 0
## 
## Model is unbounded
## Warning: some integer variables take values larger than the maximum
##          supported value (2000000000)
## Best objective 1.600000000000e+31, best bound -, gap -&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;UB &amp;lt;- result$objval
print(paste(&amp;#39;RMP Objective Value and New Upper bound:&amp;#39;, result$objval))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;RMP Objective Value and New Upper bound: 1.6e+31&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;Value of z:&amp;#39;, result$x[1]))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Value of z: 0&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- result$x[-1]
print(paste(&amp;#39;Value of x:&amp;#39;, t(as.matrix(x))))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Value of x: 1e+30&amp;quot; &amp;quot;Value of x: 1e+30&amp;quot; &amp;quot;Value of x: 1e+30&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if(result$status == &amp;quot;INF_OR_UNBD&amp;quot; | result$status == &amp;quot;UNBOUNDED&amp;quot;){
  UB &amp;lt;- 999999
  x &amp;lt;- c(0,0,0)
}

rm(result)

#Primal Subproblem
# 2x1 + x2 + 13x3 + max 7y1 + 5y2
#s.t. 35y1+24y2 &amp;lt;= 80-(9x1+4x2+14x3); -3y1+4y2 &amp;lt;= 10-(-x1-2x2+3x3)

LB &amp;lt;- -999999

LB_list &amp;lt;- LB
UB_list &amp;lt;- UB
x_list &amp;lt;- x
u_list &amp;lt;- u
y &amp;lt;- c(0,0)
y_list &amp;lt;- y

#Keeps adding Benders Cuts to Problem
while(LB != UB){

#Dual Subproblem
#min (80-(9x1+4x2+14x3))u1 + (10-(-x1-2x2+3x3))u2
#s.t. 35u1 -3u2 &amp;gt;= 7; 24u1+4u2 &amp;gt;= 5

DSB &amp;lt;- list()

DSB$A          &amp;lt;- matrix(c(35,-3,24,4), nrow=2, byrow=T)
DSB$obj        &amp;lt;- c((80-9*x[1]-4*x[2]-14*x[3]),(10+x[1]+2*x[2]-3*x[3]))
DSB$modelsense &amp;lt;- &amp;#39;min&amp;#39;
DSB$rhs        &amp;lt;- c(7,5)
DSB$sense      &amp;lt;- c(&amp;#39;&amp;gt;&amp;#39;, &amp;#39;&amp;gt;&amp;#39;)

result &amp;lt;- gurobi(DSB)

LB &amp;lt;- result$objval + 2 * x[1] + x[2] + 13*x[3]
print(paste(&amp;#39;DSB Objective Value and New Lower bound:&amp;#39;, LB))
u &amp;lt;- result$x
y &amp;lt;- result$pi
print(paste(&amp;#39;Value of u:&amp;#39;, u))
print(paste(&amp;#39;Value of y:&amp;#39;, y))



#add new constraint
#z &amp;gt;= u[1]*(3-y1) + u[2]*(4-3y1)
#z + (u[1]*y1) + u[2]*3y1 &amp;gt;= u[1]*3+u[2]*4

B &amp;lt;- matrix(c(1,(u[1]*9-u[2]),(u[1]*4-2*u[2]),(14*u[1]+3*u[2])), nrow=1, byrow=T)
b &amp;lt;- u[1]*80+u[2]*10

if(result$status == &amp;quot;INF_OR_UNBD&amp;quot; | result$status == &amp;#39;UNBOUNDED&amp;#39;){
  DSB$A &amp;lt;- rbind(DSB$A,c(1,1))
  DSB$rhs &amp;lt;- c(0,0,1)
  DSB$sense &amp;lt;- c(DSB$sense, &amp;#39;=&amp;#39;)
  result &amp;lt;- gurobi(DSB)
  u &amp;lt;- result$x
  LB &amp;lt;- LB_list[length(LB_list)]
  B &amp;lt;- matrix(c(0,(u[1]*9-u[2]),(u[1]*4-2*u[2]),(14*u[1]+3*u[2])), nrow=1, byrow=T)
  b &amp;lt;- u[1]*80+u[2]*10
  
  
}

u_list &amp;lt;- rbind(u_list,u)
y_list &amp;lt;- rbind(y_list,y)
LB_list &amp;lt;- c(LB_list, LB)

rm(result)


RMP$A &amp;lt;- rbind(RMP$A, B)
RMP$rhs &amp;lt;- c(RMP$rhs,b)
RMP$sense &amp;lt;- c(RMP$sense, &amp;#39;&amp;lt;&amp;#39;)


result &amp;lt;- gurobi(RMP)

UB &amp;lt;- result$objval
print(paste(&amp;#39;RMP Objective Value and New Upper bound:&amp;#39;, result$objval))
print(paste(&amp;#39;Value of z:&amp;#39;, result$x[1]))
x &amp;lt;- result$x[-1]
print(paste(&amp;#39;Value of x:&amp;#39;, t(as.matrix(x))))

if(result$status == &amp;quot;INF_OR_UNBD&amp;quot;){
  UB &amp;lt;- 999999
  x &amp;lt;- c(0,0,0)
}

UB_list &amp;lt;- c(UB_list, UB)
x_list &amp;lt;- rbind(x_list,x)
rm(result)

}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 2 columns and 4 nonzeros
## Model fingerprint: 0xfecd2aa1
## Coefficient statistics:
##   Matrix range     [3e+00, 4e+01]
##   Objective range  [1e+01, 8e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [5e+00, 7e+00]
## Presolve time: 0.00s
## Presolved: 2 rows, 2 columns, 4 nonzeros
## 
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    0.0000000e+00   1.500000e+00   0.000000e+00      0s
##        2    1.6556604e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 2 iterations and 0.00 seconds
## Optimal objective  1.655660377e+01
## [1] &amp;quot;DSB Objective Value and New Lower bound: 16.5566037735849&amp;quot;
## [1] &amp;quot;Value of u: 0.202830188679245&amp;quot;  &amp;quot;Value of u: 0.0330188679245282&amp;quot;
## [1] &amp;quot;Value of y: 0.377358490566038&amp;quot; &amp;quot;Value of y: 2.78301886792453&amp;quot; 
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 4 columns and 5 nonzeros
## Model fingerprint: 0xc19f21b7
## Variable types: 1 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [7e-01, 3e+00]
##   Objective range  [1e+00, 1e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+01, 2e+01]
## Found heuristic solution: objective 18.0000000
## Presolve removed 1 rows and 1 columns
## Presolve time: 0.00s
## Presolved: 1 rows, 3 columns, 3 nonzeros
## Variable types: 0 continuous, 3 integer (0 binary)
## 
## Root relaxation: objective 6.750000e+01, 1 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
##      0     0   67.50000    0    1   18.00000   67.50000   275%     -    0s
## H    0     0                      67.0000000   67.50000  0.75%     -    0s
##      0     0   67.50000    0    1   67.00000   67.50000  0.75%     -    0s
## 
## Explored 1 nodes (1 simplex iterations) in 0.00 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 2: 67 18 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 6.700000000000e+01, best bound 6.700000000000e+01, gap 0.0000%
## [1] &amp;quot;RMP Objective Value and New Upper bound: 67&amp;quot;
## [1] &amp;quot;Value of z: 0&amp;quot;
## [1] &amp;quot;Value of x: 0&amp;quot; &amp;quot;Value of x: 2&amp;quot; &amp;quot;Value of x: 5&amp;quot;
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 2 columns and 4 nonzeros
## Model fingerprint: 0xe467fd43
## Coefficient statistics:
##   Matrix range     [3e+00, 4e+01]
##   Objective range  [1e+00, 2e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [5e+00, 7e+00]
## Presolve removed 2 rows and 2 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0   -8.2857143e+29   0.000000e+00   1.657143e+00      0s
## Extra 2 simplex iterations after uncrush
## 
## Solved in 2 iterations and 0.00 seconds
## Unbounded model
## [1] &amp;quot;DSB Objective Value and New Lower bound: &amp;quot;
## [1] &amp;quot;Value of u: &amp;quot;
## [1] &amp;quot;Value of y: &amp;quot;
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 2 columns and 6 nonzeros
## Model fingerprint: 0x9e81c4c8
## Coefficient statistics:
##   Matrix range     [1e+00, 4e+01]
##   Objective range  [1e+00, 2e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [1e+00, 1e+00]
## Presolve removed 3 rows and 2 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0   -7.6315789e-01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective -7.631578947e-01
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 4 columns and 8 nonzeros
## Model fingerprint: 0x49b3021e
## Variable types: 1 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [2e-01, 4e+00]
##   Objective range  [1e+00, 1e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+01, 2e+01]
## Found heuristic solution: objective 18.0000000
## Presolve removed 1 rows and 1 columns
## Presolve time: 0.00s
## Presolved: 2 rows, 3 columns, 6 nonzeros
## Variable types: 0 continuous, 3 integer (0 binary)
## 
## Root relaxation: objective 6.750000e+01, 1 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
##      0     0   67.50000    0    1   18.00000   67.50000   275%     -    0s
## H    0     0                      58.0000000   67.50000  16.4%     -    0s
## 
## Cutting planes:
##   Gomory: 1
##   MIR: 1
## 
## Explored 1 nodes (1 simplex iterations) in 0.00 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 2: 58 18 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 5.800000000000e+01, best bound 5.800000000000e+01, gap 0.0000%
## [1] &amp;quot;RMP Objective Value and New Upper bound: 58&amp;quot;
## [1] &amp;quot;Value of z: 0&amp;quot;
## [1] &amp;quot;Value of x: 1&amp;quot; &amp;quot;Value of x: 4&amp;quot; &amp;quot;Value of x: 4&amp;quot;
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 2 columns and 4 nonzeros
## Model fingerprint: 0xb674b004
## Coefficient statistics:
##   Matrix range     [3e+00, 4e+01]
##   Objective range  [1e+00, 7e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [5e+00, 7e+00]
## Presolve time: 0.00s
## 
## Solved in 0 iterations and 0.00 seconds
## Infeasible or unbounded model
## [1] &amp;quot;DSB Objective Value and New Lower bound: &amp;quot;
## [1] &amp;quot;Value of u: &amp;quot;
## [1] &amp;quot;Value of y: &amp;quot;
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 2 columns and 6 nonzeros
## Model fingerprint: 0x56bfae6b
## Coefficient statistics:
##   Matrix range     [1e+00, 4e+01]
##   Objective range  [1e+00, 7e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [1e+00, 1e+00]
## Presolve removed 3 rows and 2 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0   -1.0000000e+00   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective -1.000000000e+00
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 4 rows, 4 columns and 11 nonzeros
## Model fingerprint: 0x671586c2
## Variable types: 1 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [2e-01, 1e+01]
##   Objective range  [1e+00, 1e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+01, 8e+01]
## Found heuristic solution: objective 18.0000000
## Presolve removed 1 rows and 1 columns
## Presolve time: 0.00s
## Presolved: 3 rows, 3 columns, 9 nonzeros
## Variable types: 0 continuous, 3 integer (0 binary)
## 
## Root relaxation: objective 6.750000e+01, 1 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
##      0     0   67.50000    0    1   18.00000   67.50000   275%     -    0s
## H    0     0                      57.0000000   67.50000  18.4%     -    0s
## H    0     0                      58.0000000   67.50000  16.4%     -    0s
## 
## Cutting planes:
##   Gomory: 1
##   MIR: 1
## 
## Explored 1 nodes (1 simplex iterations) in 0.00 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 3: 58 57 18 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 5.800000000000e+01, best bound 5.800000000000e+01, gap 0.0000%
## [1] &amp;quot;RMP Objective Value and New Upper bound: 58&amp;quot;
## [1] &amp;quot;Value of z: 0&amp;quot;
## [1] &amp;quot;Value of x: 0&amp;quot; &amp;quot;Value of x: 6&amp;quot; &amp;quot;Value of x: 4&amp;quot;
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 2 columns and 4 nonzeros
## Model fingerprint: 0x5530e933
## Coefficient statistics:
##   Matrix range     [3e+00, 4e+01]
##   Objective range  [1e+01, 1e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [5e+00, 7e+00]
## Presolve removed 2 rows and 2 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    0.0000000e+00   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  0.000000000e+00
## [1] &amp;quot;DSB Objective Value and New Lower bound: 58&amp;quot;
## [1] &amp;quot;Value of u: 0.208333333333333&amp;quot; &amp;quot;Value of u: 0&amp;quot;                
## [1] &amp;quot;Value of y: 0&amp;quot; &amp;quot;Value of y: 0&amp;quot;
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 5 rows, 4 columns and 15 nonzeros
## Model fingerprint: 0xd390add2
## Variable types: 1 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [2e-01, 1e+01]
##   Objective range  [1e+00, 1e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+01, 8e+01]
## Found heuristic solution: objective 18.0000000
## Presolve removed 2 rows and 1 columns
## Presolve time: 0.00s
## Presolved: 3 rows, 3 columns, 9 nonzeros
## Variable types: 0 continuous, 3 integer (0 binary)
## 
## Root relaxation: objective 6.750000e+01, 1 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
##      0     0   67.50000    0    1   18.00000   67.50000   275%     -    0s
## H    0     0                      57.0000000   67.50000  18.4%     -    0s
## H    0     0                      58.0000000   67.50000  16.4%     -    0s
## 
## Cutting planes:
##   Gomory: 1
##   MIR: 1
## 
## Explored 1 nodes (1 simplex iterations) in 0.00 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 3: 58 57 18 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 5.800000000000e+01, best bound 5.800000000000e+01, gap 0.0000%
## [1] &amp;quot;RMP Objective Value and New Upper bound: 58&amp;quot;
## [1] &amp;quot;Value of z: 0&amp;quot;
## [1] &amp;quot;Value of x: 0&amp;quot; &amp;quot;Value of x: 6&amp;quot; &amp;quot;Value of x: 4&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;LB_list&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -999999.0000      16.5566      16.5566      16.5566      58.0000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;UB_list&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 999999     67     58     58     58&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;u_list&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##              [,1]       [,2]
## u_list 0.00000000 0.00000000
## u      0.20283019 0.03301887
## u      0.07894737 0.92105263
## u      1.00000000 0.00000000
## u      0.20833333 0.00000000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;y_list&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             [,1]     [,2]
## y_list 0.0000000 0.000000
## y      0.3773585 2.783019
## y      0.0000000 0.000000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x_list&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        [,1] [,2] [,3]
## x_list    0    0    0
## x         0    2    5
## x         1    4    4
## x         0    6    4
## x         0    6    4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(b,B,DSB,LB,LB_list,RMP,u,u_list,UB,UB_list,x,x_list,y,y_list)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Column Generation Algorithm
#Cutting Stock Problem
#minimize number of rods used (x). Satisfy demand for 44 81 cm pieces, 3 70 cm pieces, and 48 68 cm pieces
#min x1 + x2 + x3
#s.t. x1 &amp;gt;= 44; x2 &amp;gt;=3; x3 &amp;gt;= 48
#x &amp;gt;=0,


LMP &amp;lt;- list()

LMP$A          &amp;lt;- matrix(c(1,0,0,
                           0,1,0,
                           0,0,1), nrow=3, byrow=T)
LMP$obj        &amp;lt;- c(1,1,1)
LMP$modelsense &amp;lt;- &amp;#39;min&amp;#39;
LMP$rhs        &amp;lt;- c(44,3,48)
LMP$sense      &amp;lt;- c(&amp;#39;&amp;gt;&amp;#39;)

result &amp;lt;- gurobi(LMP)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 3 columns and 3 nonzeros
## Model fingerprint: 0xcd2bfab3
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Presolve removed 3 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    9.5000000e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  9.500000000e+01&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;k &amp;lt;- -1

while(k &amp;lt; 0){


KSP &amp;lt;- list()

KSP$A          &amp;lt;- matrix(c(81,70,68), nrow=1, byrow=T)
KSP$obj        &amp;lt;- result$pi
KSP$modelsense &amp;lt;- &amp;#39;max&amp;#39;
KSP$rhs        &amp;lt;- c(218)
KSP$sense      &amp;lt;- c(&amp;#39;&amp;lt;&amp;#39;)
KSP$vtype      &amp;lt;- c(&amp;#39;I&amp;#39;,&amp;#39;I&amp;#39;,&amp;#39;I&amp;#39;)

result &amp;lt;- gurobi(KSP)

k &amp;lt;- 1 - sum(result$x*KSP$obj)

B &amp;lt;- as.matrix(result$x)

LMP$A &amp;lt;- cbind(LMP$A,B)

LMP$obj &amp;lt;- c(LMP$obj,1)

result &amp;lt;- gurobi(LMP)

print(paste(&amp;#39;LMP Objective Value&amp;#39;, result$objval))

print(paste(&amp;#39;Sum of Reduced Cost:&amp;#39;, k))

print(LMP$A)

print(t(as.matrix(result$x)))

}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 3 columns and 3 nonzeros
## Model fingerprint: 0x72f1e20f
## Variable types: 0 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [7e+01, 8e+01]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+02, 2e+02]
## Found heuristic solution: objective 2.0000000
## Presolve removed 1 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 2: 3 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 4 columns and 4 nonzeros
## Model fingerprint: 0x4bac7a68
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Presolve removed 3 rows and 4 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    6.3000000e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  6.300000000e+01
## [1] &amp;quot;LMP Objective Value 63&amp;quot;
## [1] &amp;quot;Sum of Reduced Cost: -2&amp;quot;
##      [,1] [,2] [,3] [,4]
## [1,]    1    0    0    0
## [2,]    0    1    0    0
## [3,]    0    0    1    3
##      [,1] [,2] [,3] [,4]
## [1,]   44    3    0   16
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 3 columns and 3 nonzeros
## Model fingerprint: 0x5e04c92d
## Variable types: 0 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [7e+01, 8e+01]
##   Objective range  [3e-01, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+02, 2e+02]
## Found heuristic solution: objective 2.0000000
## Presolve removed 1 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 2: 3 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 5 columns and 5 nonzeros
## Model fingerprint: 0x46707112
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Presolve removed 3 rows and 5 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    6.1000000e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  6.100000000e+01
## [1] &amp;quot;LMP Objective Value 61&amp;quot;
## [1] &amp;quot;Sum of Reduced Cost: -2&amp;quot;
##      [,1] [,2] [,3] [,4] [,5]
## [1,]    1    0    0    0    0
## [2,]    0    1    0    0    3
## [3,]    0    0    1    3    0
##      [,1] [,2] [,3] [,4] [,5]
## [1,]   44    0    0   16    1
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 3 columns and 3 nonzeros
## Model fingerprint: 0x76f224a3
## Variable types: 0 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [7e+01, 8e+01]
##   Objective range  [3e-01, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+02, 2e+02]
## Found heuristic solution: objective 2.0000000
## Presolve removed 1 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 1: 2 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 6 columns and 6 nonzeros
## Model fingerprint: 0x461ec1df
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Presolve removed 3 rows and 6 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    3.9000000e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  3.900000000e+01
## [1] &amp;quot;LMP Objective Value 39&amp;quot;
## [1] &amp;quot;Sum of Reduced Cost: -1&amp;quot;
##      [,1] [,2] [,3] [,4] [,5] [,6]
## [1,]    1    0    0    0    0    2
## [2,]    0    1    0    0    3    0
## [3,]    0    0    1    3    0    0
##      [,1] [,2] [,3] [,4] [,5] [,6]
## [1,]    0    0    0   16    1   22
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 3 columns and 3 nonzeros
## Model fingerprint: 0x282e1563
## Variable types: 0 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [7e+01, 8e+01]
##   Objective range  [3e-01, 5e-01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+02, 2e+02]
## Found heuristic solution: objective 1.0000000
## Presolve removed 1 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 2: 1.16667 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 1.166666666667e+00, best bound 1.166666666667e+00, gap 0.0000%
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 7 columns and 8 nonzeros
## Model fingerprint: 0xaf053821
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Presolve removed 1 rows and 4 columns
## Presolve time: 0.00s
## Presolved: 2 rows, 3 columns, 4 nonzeros
## 
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    1.0000000e+00   3.400000e+01   0.000000e+00      0s
##        2    3.5000000e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 2 iterations and 0.00 seconds
## Optimal objective  3.500000000e+01
## [1] &amp;quot;LMP Objective Value 35&amp;quot;
## [1] &amp;quot;Sum of Reduced Cost: -0.166666666666667&amp;quot;
##      [,1] [,2] [,3] [,4] [,5] [,6] [,7]
## [1,]    1    0    0    0    0    2    1
## [2,]    0    1    0    0    3    0    0
## [3,]    0    0    1    3    0    0    2
##      [,1] [,2] [,3] [,4] [,5] [,6] [,7]
## [1,]    0    0    0    0    1   10   24
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 3 columns and 3 nonzeros
## Model fingerprint: 0x4b9369e0
## Variable types: 0 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [7e+01, 8e+01]
##   Objective range  [3e-01, 5e-01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+02, 2e+02]
## Found heuristic solution: objective 1.0000000
## Presolve removed 1 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 1: 1 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 8 columns and 9 nonzeros
## Model fingerprint: 0xebe33484
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Presolve removed 1 rows and 5 columns
## Presolve time: 0.00s
## Presolved: 2 rows, 3 columns, 4 nonzeros
## 
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    1.0000000e+00   3.400000e+01   0.000000e+00      0s
##        2    3.5000000e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 2 iterations and 0.00 seconds
## Optimal objective  3.500000000e+01
## [1] &amp;quot;LMP Objective Value 35&amp;quot;
## [1] &amp;quot;Sum of Reduced Cost: 0&amp;quot;
##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
## [1,]    1    0    0    0    0    2    1    2
## [2,]    0    1    0    0    3    0    0    0
## [3,]    0    0    1    3    0    0    2    0
##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
## [1,]    0    0    0    0    1   10   24    0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;LMP$vtype      &amp;lt;- rep(&amp;#39;I&amp;#39;, ncol(LMP$A))

result &amp;lt;- gurobi(LMP)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 8 columns and 9 nonzeros
## Model fingerprint: 0xe1a5582b
## Variable types: 0 continuous, 8 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Found heuristic solution: objective 35.0000000
## Presolve removed 1 rows and 5 columns
## Presolve time: 0.00s
## Presolved: 2 rows, 3 columns, 4 nonzeros
## Variable types: 0 continuous, 3 integer (0 binary)
## 
## Root relaxation: cutoff, 0 iterations, 0.00 seconds
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 1: 35 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 3.500000000000e+01, best bound 3.500000000000e+01, gap 0.0000%&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;Integer Objective Value&amp;#39;, result$objval))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Integer Objective Value 35&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;LMP$A&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
## [1,]    1    0    0    0    0    2    1    2
## [2,]    0    1    0    0    3    0    0    0
## [3,]    0    0    1    3    0    0    2    0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;t(as.matrix(result$x))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
## [1,]    0    0    0    0    1    0   24   10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(B,k,KSP,LMP,result)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add a new chunk by clicking the &lt;em&gt;Insert Chunk&lt;/em&gt; button on the toolbar or by pressing &lt;em&gt;Ctrl+Alt+I&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the &lt;em&gt;Preview&lt;/em&gt; button or press &lt;em&gt;Ctrl+Shift+K&lt;/em&gt; to preview the HTML file).&lt;/p&gt;
&lt;p&gt;The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike &lt;em&gt;Knit&lt;/em&gt;, &lt;em&gt;Preview&lt;/em&gt; does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Benders Decomposition Algorithm Explained</title>
      <link>/post/orie/benders/</link>
      <pubDate>Thu, 09 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/orie/benders/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This post explores how to use Benders Decomposition to solve LPs and MIPs.
I have written these using Gurobi as a solver and as the mathematical formulation software.
This is a reproducible example if you have R Studio just make sure you have installed the correct packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gurobi)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;gurobi&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(lpSolveAPI)
library(tictoc)
library(Matrix)
library(ggplot2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;ggplot2&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#library(matlib)
#library(MASS)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#min 2x1 + 3x2 + 2y1
#s.t. x1+2x2+y1 &amp;gt;= 3; 2x1 - x2 + 3y1 &amp;gt;= 4
#x &amp;gt;=0, y&amp;gt;= 0, y is int

#RMP
#min z
# z &amp;gt;= 2y1 + (3 - 1y1)*u1 + (4-3y1)*u2 u == 0 initial guess
u &amp;lt;- c(0,0)
RMP &amp;lt;- list()

RMP$A          &amp;lt;- matrix(c(1,(u[1]+3*u[2])), nrow=1, byrow=T)
RMP$obj        &amp;lt;- c(1,2)
RMP$modelsense &amp;lt;- &amp;#39;min&amp;#39;
RMP$rhs        &amp;lt;- c((3*u[1]+4*u[2]))
RMP$sense      &amp;lt;- c(&amp;#39;&amp;gt;&amp;#39;)
RMP$vtype      &amp;lt;- c(&amp;#39;I&amp;#39;,&amp;#39;I&amp;#39;)

result &amp;lt;- gurobi(RMP)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 2 columns and 1 nonzeros
## Model fingerprint: 0x4deba5e6
## Variable types: 0 continuous, 2 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 2e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [0e+00, 0e+00]
## Found heuristic solution: objective 0.0000000
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 1: 0 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;LB &amp;lt;- result$objval
print(paste(&amp;#39;RMP Objective Value and New Lower bound:&amp;#39;, result$objval))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;RMP Objective Value and New Lower bound: 0&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;Value of z:&amp;#39;, result$x[1]))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Value of z: 0&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;y_hat &amp;lt;- result$x[-1]
print(paste(&amp;#39;Value of y:&amp;#39;, y_hat))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Value of y: 0&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;UB &amp;lt;- 9999999

#Primal Subproblem
#min 2y1_^ + min 2x1+3x2
#s.t. x1+2x2 &amp;gt;= 3 - y1_^; 2x1 - x2 &amp;gt;= 4 - 3y1_^


#Keeps adding Benders Cuts to Problem
#while(LB != UB){

#Dual Subproblem
#max (3-y1_^)u1 + (4-3y1_^)u2
#s.t. u1+2u2 &amp;lt;= 2; 2u1-u2 &amp;lt;= 3

DSB &amp;lt;- list()

DSB$A          &amp;lt;- matrix(c(1,2,2,-1), nrow=2, byrow=T)
DSB$obj        &amp;lt;- c((3-y_hat),(4-3*y_hat))
DSB$modelsense &amp;lt;- &amp;#39;max&amp;#39;
DSB$rhs        &amp;lt;- c(2,3)
DSB$sense      &amp;lt;- c(&amp;#39;&amp;lt;&amp;#39;, &amp;#39;&amp;lt;&amp;#39;)

result &amp;lt;- gurobi(DSB)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 2 columns and 4 nonzeros
## Model fingerprint: 0x43e8db6d
## Coefficient statistics:
##   Matrix range     [1e+00, 2e+00]
##   Objective range  [3e+00, 4e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+00, 3e+00]
## Presolve removed 2 rows and 2 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    5.6000000e+00   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.01 seconds
## Optimal objective  5.600000000e+00&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;UB &amp;lt;- result$objval + 2 * sum(y_hat)
print(paste(&amp;#39;DSB Objective Value and New Upper bound:&amp;#39;, UB))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;DSB Objective Value and New Upper bound: 5.6&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;u &amp;lt;- result$x
print(paste(&amp;#39;Value of u:&amp;#39;, u))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Value of u: 1.6&amp;quot; &amp;quot;Value of u: 0.2&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#add new constraint
#z &amp;gt;= u[1]*(3-y1) + u[2]*(4-3y1)
#z + (u[1]*y1) + u[2]*3y1 &amp;gt;= u[1]*3+u[2]*4

B &amp;lt;- matrix(c(1,(u[1]+3*u[2])), nrow =1)
b &amp;lt;- u[1]*3+u[2]*4

RMP$A &amp;lt;- rbind(RMP$A, B)
RMP$rhs &amp;lt;- c(RMP$rhs,b)
RMP$sense &amp;lt;- c(RMP$sense, &amp;#39;&amp;gt;&amp;#39;)


result &amp;lt;- gurobi(RMP)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 2 columns and 3 nonzeros
## Model fingerprint: 0x515bf67f
## Variable types: 0 continuous, 2 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 2e+00]
##   Objective range  [1e+00, 2e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [6e+00, 6e+00]
## Found heuristic solution: objective 6.0000000
## Presolve removed 2 rows and 2 columns
## Presolve time: 0.01s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.01 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 1: 6 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 6.000000000000e+00, best bound 6.000000000000e+00, gap 0.0000%&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;LB &amp;lt;- result$objval
print(paste(&amp;#39;RMP Objective Value and New Lower bound:&amp;#39;, result$objval))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;RMP Objective Value and New Lower bound: 6&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;Value of z:&amp;#39;, result$x[1]))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Value of z: 6&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;y_hat &amp;lt;- result$x[-1]
print(paste(&amp;#39;Value of y:&amp;#39;, y_hat))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Value of y: 0&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#}

rm(result, LB, UB, y_hat, B, RMP, DSB)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Using homogenous equations to generate extreme points for (optimality) and extreme rays for (feasiblity)
#max 2x1 + x2 + 13x3 + 7y1 + 5y2
#s.t. 9x1+4x2+14x3+35y1+24y2 &amp;lt;= 80; -x1-2x2+3x3-3y1+4y2 &amp;lt;= 10
#x &amp;gt;=0, y&amp;gt;= 0, x is int

#RMP
#max z + 2x1 + x2 + 13x3
# z &amp;gt;= + (80-9x1-4x2-14x3)*u1 + (10+x1+2x2-3x3)*u2 u == 0 initial guess
u &amp;lt;- c(0,0)
RMP &amp;lt;- list()

RMP$A          &amp;lt;- matrix(c(1,(u[1]*9-u[2]),(u[1]*4-2*u[2]),(14*u[1]+3*u[2])), nrow=1, byrow=T)
RMP$obj        &amp;lt;- c(1,2,1,13)
RMP$modelsense &amp;lt;- &amp;#39;max&amp;#39;
RMP$rhs        &amp;lt;- c((80*u[1]+10*u[2]))
RMP$sense      &amp;lt;- c(&amp;#39;&amp;lt;&amp;#39;)
RMP$vtype      &amp;lt;- c(&amp;#39;C&amp;#39;,&amp;#39;I&amp;#39;,&amp;#39;I&amp;#39;,&amp;#39;I&amp;#39;)

result &amp;lt;- gurobi(RMP)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 4 columns and 1 nonzeros
## Model fingerprint: 0x2e4b9afd
## Variable types: 1 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 1e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [0e+00, 0e+00]
## Found heuristic solution: objective 1.600000e+31
## Presolve time: 0.00s
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 1: 1.6e+31 
## No other solutions better than 0
## 
## Model is unbounded
## Warning: some integer variables take values larger than the maximum
##          supported value (2000000000)
## Best objective 1.600000000000e+31, best bound -, gap -&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;UB &amp;lt;- result$objval
print(paste(&amp;#39;RMP Objective Value and New Upper bound:&amp;#39;, result$objval))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;RMP Objective Value and New Upper bound: 1.6e+31&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;Value of z:&amp;#39;, result$x[1]))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Value of z: 0&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- result$x[-1]
print(paste(&amp;#39;Value of x:&amp;#39;, x))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Value of x: 1e+30&amp;quot; &amp;quot;Value of x: 1e+30&amp;quot; &amp;quot;Value of x: 1e+30&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if(result$status == &amp;quot;INF_OR_UNBD&amp;quot; | result$status == &amp;quot;UNBOUNDED&amp;quot;){
  UB &amp;lt;- 999999
  x &amp;lt;- c(0,0,0)
}

rm(result)

#Primal Subproblem
# 2x1 + x2 + 13x3 + max 7y1 + 5y2
#s.t. 35y1+24y2 &amp;lt;= 80-(9x1+4x2+14x3); -3y1+4y2 &amp;lt;= 10-(-x1-2x2+3x3)

LB &amp;lt;- -999999

LB_list &amp;lt;- LB
UB_list &amp;lt;- UB
x_list &amp;lt;- x
u_list &amp;lt;- u

#Keeps adding Benders Cuts to Problem
while(LB != UB){

#Dual Subproblem
#min (80-(9x1+4x2+14x3))u1 + (10-(-x1-2x2+3x3))u2
#s.t. 35u1 -3u2 &amp;gt;= 7; 24u1+4u2 &amp;gt;= 5

DSB &amp;lt;- list()

DSB$A          &amp;lt;- matrix(c(35,-3,24,4), nrow=2, byrow=T)
DSB$obj        &amp;lt;- c((80-9*x[1]-4*x[2]-14*x[3]),(10+x[1]+2*x[2]-3*x[3]))
DSB$modelsense &amp;lt;- &amp;#39;min&amp;#39;
DSB$rhs        &amp;lt;- c(7,5)
DSB$sense      &amp;lt;- c(&amp;#39;&amp;gt;&amp;#39;, &amp;#39;&amp;gt;&amp;#39;)

result &amp;lt;- gurobi(DSB)

LB &amp;lt;- result$objval + 2 * x[1] + x[2] + 13*x[3]
print(paste(&amp;#39;DSB Objective Value and New Lower bound:&amp;#39;, LB))
u &amp;lt;- result$x
print(paste(&amp;#39;Value of u:&amp;#39;, u))



#add new constraint
#z &amp;gt;= u[1]*(3-y1) + u[2]*(4-3y1)
#z + (u[1]*y1) + u[2]*3y1 &amp;gt;= u[1]*3+u[2]*4

B &amp;lt;- matrix(c(1,(u[1]*9-u[2]),(u[1]*4-2*u[2]),(14*u[1]+3*u[2])), nrow=1, byrow=T)
b &amp;lt;- u[1]*80+u[2]*10

if(result$status == &amp;quot;INF_OR_UNBD&amp;quot; | result$status == &amp;#39;UNBOUNDED&amp;#39;){
  DSB$A &amp;lt;- rbind(DSB$A,c(1,1))
  DSB$rhs &amp;lt;- c(0,0,1)
  DSB$sense &amp;lt;- c(DSB$sense, &amp;#39;=&amp;#39;)
  result &amp;lt;- gurobi(DSB)
  u &amp;lt;- result$x
  LB &amp;lt;- LB_list[length(LB_list)]
  B &amp;lt;- matrix(c(0,(u[1]*9-u[2]),(u[1]*4-2*u[2]),(14*u[1]+3*u[2])), nrow=1, byrow=T)
  b &amp;lt;- u[1]*80+u[2]*10
  
  
}

u_list &amp;lt;- rbind(u_list,u)
LB_list &amp;lt;- c(LB_list, LB)

rm(result)


RMP$A &amp;lt;- rbind(RMP$A, B)
RMP$rhs &amp;lt;- c(RMP$rhs,b)
RMP$sense &amp;lt;- c(RMP$sense, &amp;#39;&amp;lt;&amp;#39;)


result &amp;lt;- gurobi(RMP)

UB &amp;lt;- result$objval
print(paste(&amp;#39;RMP Objective Value and New Upper bound:&amp;#39;, result$objval))
print(paste(&amp;#39;Value of z:&amp;#39;, result$x[1]))
x &amp;lt;- result$x[-1]
print(paste(&amp;#39;Value of x:&amp;#39;, x))

if(result$status == &amp;quot;INF_OR_UNBD&amp;quot;){
  UB &amp;lt;- 999999
  x &amp;lt;- c(0,0,0)
}

UB_list &amp;lt;- c(UB_list, UB)
x_list &amp;lt;- rbind(x_list,x)
rm(result)

}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 2 columns and 4 nonzeros
## Model fingerprint: 0xfecd2aa1
## Coefficient statistics:
##   Matrix range     [3e+00, 4e+01]
##   Objective range  [1e+01, 8e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [5e+00, 7e+00]
## Presolve time: 0.00s
## Presolved: 2 rows, 2 columns, 4 nonzeros
## 
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    0.0000000e+00   1.500000e+00   0.000000e+00      0s
##        2    1.6556604e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 2 iterations and 0.00 seconds
## Optimal objective  1.655660377e+01
## [1] &amp;quot;DSB Objective Value and New Lower bound: 16.5566037735849&amp;quot;
## [1] &amp;quot;Value of u: 0.202830188679245&amp;quot;  &amp;quot;Value of u: 0.0330188679245282&amp;quot;
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 4 columns and 5 nonzeros
## Model fingerprint: 0xc19f21b7
## Variable types: 1 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [7e-01, 3e+00]
##   Objective range  [1e+00, 1e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+01, 2e+01]
## Found heuristic solution: objective 18.0000000
## Presolve removed 1 rows and 1 columns
## Presolve time: 0.00s
## Presolved: 1 rows, 3 columns, 3 nonzeros
## Variable types: 0 continuous, 3 integer (0 binary)
## 
## Root relaxation: objective 6.750000e+01, 1 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
##      0     0   67.50000    0    1   18.00000   67.50000   275%     -    0s
## H    0     0                      67.0000000   67.50000  0.75%     -    0s
##      0     0   67.50000    0    1   67.00000   67.50000  0.75%     -    0s
## 
## Explored 1 nodes (1 simplex iterations) in 0.01 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 2: 67 18 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 6.700000000000e+01, best bound 6.700000000000e+01, gap 0.0000%
## [1] &amp;quot;RMP Objective Value and New Upper bound: 67&amp;quot;
## [1] &amp;quot;Value of z: 0&amp;quot;
## [1] &amp;quot;Value of x: 0&amp;quot; &amp;quot;Value of x: 2&amp;quot; &amp;quot;Value of x: 5&amp;quot;
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 2 columns and 4 nonzeros
## Model fingerprint: 0xe467fd43
## Coefficient statistics:
##   Matrix range     [3e+00, 4e+01]
##   Objective range  [1e+00, 2e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [5e+00, 7e+00]
## Presolve removed 2 rows and 2 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0   -8.2857143e+29   0.000000e+00   1.657143e+00      0s
## Extra 2 simplex iterations after uncrush
## 
## Solved in 2 iterations and 0.00 seconds
## Unbounded model
## [1] &amp;quot;DSB Objective Value and New Lower bound: &amp;quot;
## [1] &amp;quot;Value of u: &amp;quot;
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 2 columns and 6 nonzeros
## Model fingerprint: 0x9e81c4c8
## Coefficient statistics:
##   Matrix range     [1e+00, 4e+01]
##   Objective range  [1e+00, 2e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [1e+00, 1e+00]
## Presolve removed 3 rows and 2 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0   -7.6315789e-01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective -7.631578947e-01
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 4 columns and 8 nonzeros
## Model fingerprint: 0x49b3021e
## Variable types: 1 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [2e-01, 4e+00]
##   Objective range  [1e+00, 1e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+01, 2e+01]
## Found heuristic solution: objective 18.0000000
## Presolve removed 1 rows and 1 columns
## Presolve time: 0.00s
## Presolved: 2 rows, 3 columns, 6 nonzeros
## Variable types: 0 continuous, 3 integer (0 binary)
## 
## Root relaxation: objective 6.750000e+01, 1 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
##      0     0   67.50000    0    1   18.00000   67.50000   275%     -    0s
## H    0     0                      58.0000000   67.50000  16.4%     -    0s
## 
## Cutting planes:
##   Gomory: 1
##   MIR: 1
## 
## Explored 1 nodes (1 simplex iterations) in 0.00 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 2: 58 18 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 5.800000000000e+01, best bound 5.800000000000e+01, gap 0.0000%
## [1] &amp;quot;RMP Objective Value and New Upper bound: 58&amp;quot;
## [1] &amp;quot;Value of z: 0&amp;quot;
## [1] &amp;quot;Value of x: 1&amp;quot; &amp;quot;Value of x: 4&amp;quot; &amp;quot;Value of x: 4&amp;quot;
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 2 columns and 4 nonzeros
## Model fingerprint: 0xb674b004
## Coefficient statistics:
##   Matrix range     [3e+00, 4e+01]
##   Objective range  [1e+00, 7e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [5e+00, 7e+00]
## Presolve time: 0.00s
## 
## Solved in 0 iterations and 0.00 seconds
## Infeasible or unbounded model
## [1] &amp;quot;DSB Objective Value and New Lower bound: &amp;quot;
## [1] &amp;quot;Value of u: &amp;quot;
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 2 columns and 6 nonzeros
## Model fingerprint: 0x56bfae6b
## Coefficient statistics:
##   Matrix range     [1e+00, 4e+01]
##   Objective range  [1e+00, 7e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [1e+00, 1e+00]
## Presolve removed 3 rows and 2 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0   -1.0000000e+00   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective -1.000000000e+00
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 4 rows, 4 columns and 11 nonzeros
## Model fingerprint: 0x671586c2
## Variable types: 1 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [2e-01, 1e+01]
##   Objective range  [1e+00, 1e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+01, 8e+01]
## Found heuristic solution: objective 18.0000000
## Presolve removed 1 rows and 1 columns
## Presolve time: 0.00s
## Presolved: 3 rows, 3 columns, 9 nonzeros
## Variable types: 0 continuous, 3 integer (0 binary)
## 
## Root relaxation: objective 6.750000e+01, 1 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
##      0     0   67.50000    0    1   18.00000   67.50000   275%     -    0s
## H    0     0                      57.0000000   67.50000  18.4%     -    0s
## H    0     0                      58.0000000   67.50000  16.4%     -    0s
## 
## Cutting planes:
##   Gomory: 1
##   MIR: 1
## 
## Explored 1 nodes (1 simplex iterations) in 0.00 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 3: 58 57 18 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 5.800000000000e+01, best bound 5.800000000000e+01, gap 0.0000%
## [1] &amp;quot;RMP Objective Value and New Upper bound: 58&amp;quot;
## [1] &amp;quot;Value of z: 0&amp;quot;
## [1] &amp;quot;Value of x: 0&amp;quot; &amp;quot;Value of x: 6&amp;quot; &amp;quot;Value of x: 4&amp;quot;
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 2 columns and 4 nonzeros
## Model fingerprint: 0x5530e933
## Coefficient statistics:
##   Matrix range     [3e+00, 4e+01]
##   Objective range  [1e+01, 1e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [5e+00, 7e+00]
## Presolve removed 2 rows and 2 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    0.0000000e+00   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  0.000000000e+00
## [1] &amp;quot;DSB Objective Value and New Lower bound: 58&amp;quot;
## [1] &amp;quot;Value of u: 0.208333333333333&amp;quot; &amp;quot;Value of u: 0&amp;quot;                
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 5 rows, 4 columns and 15 nonzeros
## Model fingerprint: 0xd390add2
## Variable types: 1 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [2e-01, 1e+01]
##   Objective range  [1e+00, 1e+01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+01, 8e+01]
## Found heuristic solution: objective 18.0000000
## Presolve removed 2 rows and 1 columns
## Presolve time: 0.00s
## Presolved: 3 rows, 3 columns, 9 nonzeros
## Variable types: 0 continuous, 3 integer (0 binary)
## 
## Root relaxation: objective 6.750000e+01, 1 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
##      0     0   67.50000    0    1   18.00000   67.50000   275%     -    0s
## H    0     0                      57.0000000   67.50000  18.4%     -    0s
## H    0     0                      58.0000000   67.50000  16.4%     -    0s
## 
## Cutting planes:
##   Gomory: 1
##   MIR: 1
## 
## Explored 1 nodes (1 simplex iterations) in 0.00 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 3: 58 57 18 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 5.800000000000e+01, best bound 5.800000000000e+01, gap 0.0000%
## [1] &amp;quot;RMP Objective Value and New Upper bound: 58&amp;quot;
## [1] &amp;quot;Value of z: 0&amp;quot;
## [1] &amp;quot;Value of x: 0&amp;quot; &amp;quot;Value of x: 6&amp;quot; &amp;quot;Value of x: 4&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Column Generation Algorithm
#Cutting Stock Problem
#minimize number of rods used (x). Satisfy demand for 44 81 cm pieces, 3 70 cm pieces, and 48 68 cm pieces
#min x1 + x2 + x3
#s.t. x1 &amp;gt;= 44; x2 &amp;gt;=3; x3 &amp;gt;= 48
#x &amp;gt;=0,


LMP &amp;lt;- list()

LMP$A          &amp;lt;- matrix(c(1,0,0,
                           0,1,0,
                           0,0,1), nrow=3, byrow=T)
LMP$obj        &amp;lt;- c(1,1,1)
LMP$modelsense &amp;lt;- &amp;#39;min&amp;#39;
LMP$rhs        &amp;lt;- c(44,3,48)
LMP$sense      &amp;lt;- c(&amp;#39;&amp;gt;&amp;#39;)

result &amp;lt;- gurobi(LMP)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 3 columns and 3 nonzeros
## Model fingerprint: 0xcd2bfab3
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Presolve removed 3 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    9.5000000e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  9.500000000e+01&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;k &amp;lt;- -1

while(k &amp;lt; 0){


KSP &amp;lt;- list()

KSP$A          &amp;lt;- matrix(c(81,70,68), nrow=1, byrow=T)
KSP$obj        &amp;lt;- result$pi
KSP$modelsense &amp;lt;- &amp;#39;max&amp;#39;
KSP$rhs        &amp;lt;- c(218)
KSP$sense      &amp;lt;- c(&amp;#39;&amp;lt;&amp;#39;)
KSP$vtype      &amp;lt;- c(&amp;#39;I&amp;#39;,&amp;#39;I&amp;#39;,&amp;#39;I&amp;#39;)

result &amp;lt;- gurobi(KSP)

k &amp;lt;- 1 - sum(result$x*KSP$obj)

B &amp;lt;- as.matrix(result$x)

LMP$A &amp;lt;- cbind(LMP$A,B)

LMP$obj &amp;lt;- c(LMP$obj,1)

result &amp;lt;- gurobi(LMP)

print(paste(&amp;#39;LMP Objective Value&amp;#39;, result$objval))

print(paste(&amp;#39;Sum of Reduced Cost:&amp;#39;, k))

print(LMP$A)

print(t(as.matrix(result$x)))

}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 3 columns and 3 nonzeros
## Model fingerprint: 0x72f1e20f
## Variable types: 0 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [7e+01, 8e+01]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+02, 2e+02]
## Found heuristic solution: objective 2.0000000
## Presolve removed 1 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 2: 3 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 4 columns and 4 nonzeros
## Model fingerprint: 0x4bac7a68
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Presolve removed 3 rows and 4 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    6.3000000e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  6.300000000e+01
## [1] &amp;quot;LMP Objective Value 63&amp;quot;
## [1] &amp;quot;Sum of Reduced Cost: -2&amp;quot;
##      [,1] [,2] [,3] [,4]
## [1,]    1    0    0    0
## [2,]    0    1    0    0
## [3,]    0    0    1    3
##      [,1] [,2] [,3] [,4]
## [1,]   44    3    0   16
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 3 columns and 3 nonzeros
## Model fingerprint: 0x5e04c92d
## Variable types: 0 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [7e+01, 8e+01]
##   Objective range  [3e-01, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+02, 2e+02]
## Found heuristic solution: objective 2.0000000
## Presolve removed 1 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 2: 3 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 5 columns and 5 nonzeros
## Model fingerprint: 0x46707112
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Presolve removed 3 rows and 5 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    6.1000000e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  6.100000000e+01
## [1] &amp;quot;LMP Objective Value 61&amp;quot;
## [1] &amp;quot;Sum of Reduced Cost: -2&amp;quot;
##      [,1] [,2] [,3] [,4] [,5]
## [1,]    1    0    0    0    0
## [2,]    0    1    0    0    3
## [3,]    0    0    1    3    0
##      [,1] [,2] [,3] [,4] [,5]
## [1,]   44    0    0   16    1
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 3 columns and 3 nonzeros
## Model fingerprint: 0x76f224a3
## Variable types: 0 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [7e+01, 8e+01]
##   Objective range  [3e-01, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+02, 2e+02]
## Found heuristic solution: objective 2.0000000
## Presolve removed 1 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 1: 2 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 6 columns and 6 nonzeros
## Model fingerprint: 0x461ec1df
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Presolve removed 3 rows and 6 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    3.9000000e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  3.900000000e+01
## [1] &amp;quot;LMP Objective Value 39&amp;quot;
## [1] &amp;quot;Sum of Reduced Cost: -1&amp;quot;
##      [,1] [,2] [,3] [,4] [,5] [,6]
## [1,]    1    0    0    0    0    2
## [2,]    0    1    0    0    3    0
## [3,]    0    0    1    3    0    0
##      [,1] [,2] [,3] [,4] [,5] [,6]
## [1,]    0    0    0   16    1   22
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 3 columns and 3 nonzeros
## Model fingerprint: 0x282e1563
## Variable types: 0 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [7e+01, 8e+01]
##   Objective range  [3e-01, 5e-01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+02, 2e+02]
## Found heuristic solution: objective 1.0000000
## Presolve removed 1 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 2: 1.16667 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 1.166666666667e+00, best bound 1.166666666667e+00, gap 0.0000%
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 7 columns and 8 nonzeros
## Model fingerprint: 0xaf053821
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Presolve removed 1 rows and 4 columns
## Presolve time: 0.00s
## Presolved: 2 rows, 3 columns, 4 nonzeros
## 
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    1.0000000e+00   3.400000e+01   0.000000e+00      0s
##        2    3.5000000e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 2 iterations and 0.00 seconds
## Optimal objective  3.500000000e+01
## [1] &amp;quot;LMP Objective Value 35&amp;quot;
## [1] &amp;quot;Sum of Reduced Cost: -0.166666666666667&amp;quot;
##      [,1] [,2] [,3] [,4] [,5] [,6] [,7]
## [1,]    1    0    0    0    0    2    1
## [2,]    0    1    0    0    3    0    0
## [3,]    0    0    1    3    0    0    2
##      [,1] [,2] [,3] [,4] [,5] [,6] [,7]
## [1,]    0    0    0    0    1   10   24
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 1 rows, 3 columns and 3 nonzeros
## Model fingerprint: 0x4b9369e0
## Variable types: 0 continuous, 3 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [7e+01, 8e+01]
##   Objective range  [3e-01, 5e-01]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [2e+02, 2e+02]
## Found heuristic solution: objective 1.0000000
## Presolve removed 1 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 1 (of 8 available processors)
## 
## Solution count 1: 1 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 8 columns and 9 nonzeros
## Model fingerprint: 0xebe33484
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Presolve removed 1 rows and 5 columns
## Presolve time: 0.00s
## Presolved: 2 rows, 3 columns, 4 nonzeros
## 
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    1.0000000e+00   3.400000e+01   0.000000e+00      0s
##        2    3.5000000e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 2 iterations and 0.00 seconds
## Optimal objective  3.500000000e+01
## [1] &amp;quot;LMP Objective Value 35&amp;quot;
## [1] &amp;quot;Sum of Reduced Cost: 0&amp;quot;
##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
## [1,]    1    0    0    0    0    2    1    2
## [2,]    0    1    0    0    3    0    0    0
## [3,]    0    0    1    3    0    0    2    0
##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
## [1,]    0    0    0    0    1   10   24    0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;LMP$vtype      &amp;lt;- rep(&amp;#39;I&amp;#39;, ncol(LMP$A))

result &amp;lt;- gurobi(LMP)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 8 columns and 9 nonzeros
## Model fingerprint: 0xe1a5582b
## Variable types: 0 continuous, 8 integer (0 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [3e+00, 5e+01]
## Found heuristic solution: objective 35.0000000
## Presolve removed 1 rows and 5 columns
## Presolve time: 0.00s
## Presolved: 2 rows, 3 columns, 4 nonzeros
## Variable types: 0 continuous, 3 integer (0 binary)
## 
## Root relaxation: cutoff, 0 iterations, 0.00 seconds
## 
## Explored 0 nodes (0 simplex iterations) in 0.00 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 1: 35 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 3.500000000000e+01, best bound 3.500000000000e+01, gap 0.0000%&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;#39;Integer Objective Value&amp;#39;, result$objval))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Integer Objective Value 35&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;LMP$A&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
## [1,]    1    0    0    0    0    2    1    2
## [2,]    0    1    0    0    3    0    0    0
## [3,]    0    0    1    3    0    0    2    0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;t(as.matrix(result$x))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
## [1,]    0    0    0    0    1    0   24   10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add a new chunk by clicking the &lt;em&gt;Insert Chunk&lt;/em&gt; button on the toolbar or by pressing &lt;em&gt;Ctrl+Alt+I&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the &lt;em&gt;Preview&lt;/em&gt; button or press &lt;em&gt;Ctrl+Shift+K&lt;/em&gt; to preview the HTML file).&lt;/p&gt;
&lt;p&gt;The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike &lt;em&gt;Knit&lt;/em&gt;, &lt;em&gt;Preview&lt;/em&gt; does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gurobi Basic LP/MIP Examples</title>
      <link>/post/orie/gurobi_examples/</link>
      <pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/orie/gurobi_examples/</guid>
      <description> 

&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This post explores how to use Gurobi to solve LPs and MIPs.
I have written these using Gurobi as a solver and as the mathematical formulation software.
This is a reproducible example if you have R Studio just make sure you have installed the correct packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gurobi)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;gurobi&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(Matrix)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example formulates and solves the following simple LP model:
&lt;span class=&#34;math inline&#34;&gt;\(max: x + 2y + 3z\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;subject to
&lt;span class=&#34;math inline&#34;&gt;\(x + y \leq 1\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(y + z \leq 1\)&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model &amp;lt;- list()

model$A          &amp;lt;- matrix(c(1,1,0,0,1,1), nrow=2, byrow=T)
model$obj        &amp;lt;- c(1,2,3)
model$modelsense &amp;lt;- &amp;#39;max&amp;#39;
model$rhs        &amp;lt;- c(1,1)
model$sense      &amp;lt;- c(&amp;#39;&amp;lt;&amp;#39;, &amp;#39;&amp;lt;&amp;#39;)

result &amp;lt;- gurobi(model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 3 columns and 4 nonzeros
## Model fingerprint: 0x39e2cde3
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 3e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [1e+00, 1e+00]
## Presolve removed 2 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    4.0000000e+00   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  4.000000000e+00&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$objval)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 0 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Second option for A - as a sparseMatrix (using the Matrix package)...

model$A &amp;lt;- spMatrix(2, 3, c(1, 1, 2, 2), c(1, 2, 2, 3), c(1, 1, 1, 1))

params &amp;lt;- list(Method=2, TimeLimit=100)

result &amp;lt;- gurobi(model, params)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 3 columns and 4 nonzeros
## Model fingerprint: 0x39e2cde3
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 3e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [1e+00, 1e+00]
## Presolve removed 2 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    4.0000000e+00   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  4.000000000e+00&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$objval)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 0 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Third option for A - as a sparse triplet matrix (using the slam package)...

model$A &amp;lt;- simple_triplet_matrix(c(1, 1, 2, 2), c(1, 2, 2, 3), c(1, 1, 1, 1))

params &amp;lt;- list(Method=3, TimeLimit=100)

result &amp;lt;- gurobi(model, params)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 2 rows, 3 columns and 4 nonzeros
## Model fingerprint: 0x39e2cde3
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 3e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [1e+00, 1e+00]
## Presolve removed 2 rows and 3 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    4.0000000e+00   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  4.000000000e+00&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$objval)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 0 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Clear space
rm(result, params, model)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example formulates and solves the following simple MIP model:
&lt;span class=&#34;math inline&#34;&gt;\(max: x + y + 2 z\)&lt;/span&gt;
subject to
&lt;span class=&#34;math inline&#34;&gt;\(x + 2 y + 3 z \leq 4\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(x + y \geq 1\)&lt;/span&gt;
x, y, z binary&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model &amp;lt;- list()

model$A          &amp;lt;- matrix(c(1,2,3,1,1,0), nrow=2, ncol=3, byrow=T)
model$obj        &amp;lt;- c(1,1,2)
model$modelsense &amp;lt;- &amp;#39;max&amp;#39;
model$rhs        &amp;lt;- c(4,1)
model$sense      &amp;lt;- c(&amp;#39;&amp;lt;&amp;#39;, &amp;#39;&amp;gt;&amp;#39;)
model$vtype      &amp;lt;- c(&amp;#39;B&amp;#39;,&amp;#39;B&amp;#39;,&amp;#39;B&amp;#39;)

params &amp;lt;- list(OutputFlag=0)

result &amp;lt;- gurobi(model, params)

print(&amp;#39;Solution:&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Solution:&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$objval)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result$x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 0 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Clear space
rm(model, result, params)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Solve the classic diet model, showing how to add constraints
# to an existing model.


# define primitive data
Categories      &amp;lt;- c(&amp;#39;calories&amp;#39;, &amp;#39;protein&amp;#39;, &amp;#39;fat&amp;#39;, &amp;#39;sodium&amp;#39;)
nCategories     &amp;lt;- length(Categories)
minNutrition    &amp;lt;- c(     1800 ,       91 ,    0 ,       0 )
maxNutrition    &amp;lt;- c(     2200 ,      Inf ,   65 ,    1779 )

Foods           &amp;lt;- c(&amp;#39;hamburger&amp;#39;, &amp;#39;chicken&amp;#39;, &amp;#39;hot dog&amp;#39;, &amp;#39;fries&amp;#39;, &amp;#39;macaroni&amp;#39;,
                     &amp;#39;pizza&amp;#39;, &amp;#39;salad&amp;#39;, &amp;#39;milk&amp;#39;, &amp;#39;ice cream&amp;#39;)
nFoods          &amp;lt;- length(Foods)
cost            &amp;lt;- c(2.49, 2.89, 1.50, 1.89, 2.09, 1.99, 2.49, 0.89, 1.59)
nutritionValues &amp;lt;- c( 410, 24, 26 ,  730,
                      420, 32, 10 , 1190,
                      560, 20, 32 , 1800,
                      380,  4, 19 ,  270,
                      320, 12, 10 ,  930,
                      320, 15, 12 ,  820,
                      320, 31, 12 , 1230,
                      100,  8, 2.5,  125,
                      330,  8, 10 ,  180 )

#Each constraint is basically the Nutrion = sum(food*nut/food)
#Could have just made nutrition the RHS, but it works as a bounded variable because you need both upper and lower and it shrinks the amount of equations
#Objective min cost of food

# Build model
model     &amp;lt;- list()
#spMatrix tells you where to put the non zero values in matrix i,j is the location and x are teh values for each pair
model$A   &amp;lt;- spMatrix(nCategories, nCategories + nFoods,
               i = c(mapply(rep,1:4,1+nFoods)),
               j = c(1, (nCategories+1):(nCategories+nFoods),
                     2, (nCategories+1):(nCategories+nFoods),
                     3, (nCategories+1):(nCategories+nFoods),
                     4, (nCategories+1):(nCategories+nFoods) ),
               x = c(-1.0, nutritionValues[1 + nCategories*(0:(nFoods-1))],
                     -1.0, nutritionValues[2 + nCategories*(0:(nFoods-1))],
                     -1.0, nutritionValues[3 + nCategories*(0:(nFoods-1))],
                     -1.0, nutritionValues[4 + nCategories*(0:(nFoods-1))] ))
model$obj         &amp;lt;- c(rep(0, nCategories), cost)
model$lb          &amp;lt;- c(minNutrition, rep(0, nFoods))
model$ub          &amp;lt;- c(maxNutrition, rep(Inf, nFoods))
model$varnames    &amp;lt;- c(Categories, Foods)
model$rhs         &amp;lt;- rep(0,nCategories)
model$sense       &amp;lt;- rep(&amp;#39;=&amp;#39;,nCategories)
model$constrnames &amp;lt;- Categories
model$modelname   &amp;lt;- &amp;#39;diet&amp;#39;
model$modelsense  &amp;lt;- &amp;#39;min&amp;#39;

# display results
printSolution &amp;lt;- function(model, res, nCategories, nFoods) {
  if (res$status == &amp;#39;OPTIMAL&amp;#39;) {
    cat(&amp;#39;\nCost: &amp;#39;,res$objval,&amp;#39;\nBuy:\n&amp;#39;)
    for (j in nCategories + 1:nFoods) {
      if (res$x[j] &amp;gt; 1e-4) {
        cat(format(model$varnames[j],justify=&amp;#39;left&amp;#39;,width=10),&amp;#39;:&amp;#39;,
            format(res$x[j],justify=&amp;#39;right&amp;#39;,width=10,nsmall=2),&amp;#39;\n&amp;#39;)
      }
    }
    cat(&amp;#39;\nNutrition:\n&amp;#39;)
    for (j in 1:nCategories) {
      cat(format(model$varnames[j],justify=&amp;#39;left&amp;#39;,width=10),&amp;#39;:&amp;#39;,
          format(res$x[j],justify=&amp;#39;right&amp;#39;,width=10,nsmall=2),&amp;#39;\n&amp;#39;)
    }
  } else {
    cat(&amp;#39;No solution\n&amp;#39;)
  }
}

# Optimize
res &amp;lt;- gurobi(model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 4 rows, 13 columns and 40 nonzeros
## Model fingerprint: 0xff20f824
## Coefficient statistics:
##   Matrix range     [1e+00, 2e+03]
##   Objective range  [9e-01, 3e+00]
##   Bounds range     [7e+01, 2e+03]
##   RHS range        [0e+00, 0e+00]
## Presolve removed 0 rows and 3 columns
## Presolve time: 0.00s
## Presolved: 4 rows, 10 columns, 37 nonzeros
## 
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    0.0000000e+00   1.472500e+02   0.000000e+00      0s
##        4    1.1828861e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 4 iterations and 0.00 seconds
## Optimal objective  1.182886111e+01&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;printSolution(model, res, nCategories, nFoods)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Cost:  11.82886 
## Buy:
## hamburger  :  0.6045139 
## milk       :   6.970139 
## ice cream  :   2.591319 
## 
## Nutrition:
## calories   :    1800.00 
## protein    :      91.00 
## fat        :    59.0559 
## sodium     :    1779.00&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Adding constraint: at most 6 servings of dairy
# this is the matrix part of the constraint
B &amp;lt;- spMatrix(1, nCategories + nFoods,
              i = rep(1,2),
              j = (nCategories+c(8,9)),
              x = rep(1,2))
# append B to A
model$A           &amp;lt;- rbind(model$A,       B)
# extend row-related vectors
model$constrnames &amp;lt;- c(model$constrnames, &amp;#39;limit_dairy&amp;#39;)
model$rhs         &amp;lt;- c(model$rhs,         10)
model$sense       &amp;lt;- c(model$sense,       &amp;#39;&amp;lt;&amp;#39;)

# Optimize
res &amp;lt;- gurobi(model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 5 rows, 13 columns and 42 nonzeros
## Model fingerprint: 0xc012cadd
## Coefficient statistics:
##   Matrix range     [1e+00, 2e+03]
##   Objective range  [9e-01, 3e+00]
##   Bounds range     [7e+01, 2e+03]
##   RHS range        [1e+01, 1e+01]
## Presolve removed 0 rows and 3 columns
## Presolve time: 0.00s
## Presolved: 5 rows, 10 columns, 39 nonzeros
## 
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    0.0000000e+00   1.472500e+02   0.000000e+00      0s
##        4    1.1828861e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 4 iterations and 0.00 seconds
## Optimal objective  1.182886111e+01&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;printSolution(model, res, nCategories, nFoods)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Cost:  11.82886 
## Buy:
## hamburger  :  0.6045139 
## milk       :   6.970139 
## ice cream  :   2.591319 
## 
## Nutrition:
## calories   :    1800.00 
## protein    :      91.00 
## fat        :    59.0559 
## sodium     :    1779.00&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Clear space
#rm(res, model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Facility Location Problem (MIP)

# define primitive data
nPlants     &amp;lt;- 5
nWarehouses &amp;lt;- 4
# Warehouse demand in thousands of units
Demand      &amp;lt;- c(15, 18, 14, 20)
# Plant capacity in thousands of units 
Capacity    &amp;lt;- c(20, 22, 17, 19, 18)
# Fixed costs for each plant 
FixedCosts  &amp;lt;- c( 12000, 15000, 17000, 13000, 16000)
# Transportation costs per thousand units 
TransCosts  &amp;lt;- c(4000, 2000, 3000, 2500, 4500,
                 2500, 2600, 3400, 3000, 4000,
                 1200, 1800, 2600, 4100, 3000,
                 2200, 2600, 3100, 3700, 3200 )

flowidx &amp;lt;- function(w, p) {nPlants * (w-1) + p}

# Build model
model &amp;lt;- list()
model$modelname &amp;lt;- &amp;#39;facility&amp;#39;
model$modelsense &amp;lt;- &amp;#39;min&amp;#39;

# initialize data for variables
model$lb       &amp;lt;- 0
model$ub       &amp;lt;- c(rep(1, nPlants),   rep(Inf, nPlants * nWarehouses))
model$vtype    &amp;lt;- c(rep(&amp;#39;B&amp;#39;, nPlants), rep(&amp;#39;C&amp;#39;, nPlants * nWarehouses))
model$obj      &amp;lt;- c(FixedCosts, TransCosts)
model$varnames &amp;lt;- c(paste0(rep(&amp;#39;Open&amp;#39;,nPlants),1:nPlants),
                    sprintf(&amp;#39;Trans%d,%d&amp;#39;,
                            c(mapply(rep,1:nWarehouses,nPlants)),
                            1:nPlants))

# build production constraint matrix
#uses custom functions to fill out matrix, a bit out my wheelhouse
A1 &amp;lt;- spMatrix(nPlants, nPlants, i = c(1:nPlants), j = (1:nPlants), x = -Capacity)
A2 &amp;lt;- spMatrix(nPlants, nPlants * nWarehouses,
               i = c(mapply(rep, 1:nPlants, nWarehouses)),
               j = mapply(flowidx,1:nWarehouses,c(mapply(rep,1:nPlants,nWarehouses))),
               x = rep(1, nWarehouses * nPlants))
A3 &amp;lt;- spMatrix(nWarehouses, nPlants)
A4 &amp;lt;- spMatrix(nWarehouses, nPlants * nWarehouses,
               i = c(mapply(rep, 1:nWarehouses, nPlants)),
               j = mapply(flowidx,c(mapply(rep,1:nWarehouses,nPlants)),1:nPlants),
               x = rep(1, nPlants * nWarehouses))
model$A           &amp;lt;- rbind(cbind(A1, A2), cbind(A3, A4))
model$rhs         &amp;lt;- c(rep(0, nPlants),   Demand)
model$sense       &amp;lt;- c(rep(&amp;#39;&amp;lt;&amp;#39;, nPlants), rep(&amp;#39;=&amp;#39;, nWarehouses))
model$constrnames &amp;lt;- c(sprintf(&amp;#39;Capacity%d&amp;#39;,1:nPlants),
                       sprintf(&amp;#39;Demand%d&amp;#39;,1:nWarehouses))

# Save model
gurobi_write(model,&amp;#39;facilityR.lp&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Guess at the starting point: close the plant with the highest fixed
# costs; open all others first open all plants
model$start &amp;lt;- c(rep(1,nPlants),rep(NA, nPlants * nWarehouses))

# find most expensive plant, and close it in mipstart
cat(&amp;#39;Initial guess:\n&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Initial guess:&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;worstidx &amp;lt;- which.max(FixedCosts)
model$start[worstidx] &amp;lt;- 0
cat(&amp;#39;Closing plant&amp;#39;,worstidx,&amp;#39;\n&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Closing plant 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# set parameters
params &amp;lt;- list()
params$method &amp;lt;- 2

# Optimize
res &amp;lt;- gurobi(model, params)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 9 rows, 25 columns and 45 nonzeros
## Model fingerprint: 0x36b45dc0
## Variable types: 20 continuous, 5 integer (5 binary)
## Coefficient statistics:
##   Matrix range     [1e+00, 2e+01]
##   Objective range  [1e+03, 2e+04]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [1e+01, 2e+01]
## 
## User MIP start produced solution with objective 210500 (0.01s)
## Loaded user MIP start with objective 210500
## 
## Presolve time: 0.00s
## Presolved: 9 rows, 25 columns, 45 nonzeros
## Variable types: 20 continuous, 5 integer (5 binary)
## Root barrier log...
## 
## Ordering time: 0.00s
## 
## Barrier statistics:
##  AA&amp;#39; NZ     : 2.000e+01
##  Factor NZ  : 4.500e+01
##  Factor Ops : 2.850e+02 (less than 1 second per iteration)
##  Threads    : 1
## 
##                   Objective                Residual
## Iter       Primal          Dual         Primal    Dual     Compl     Time
##    0   7.94290841e+05 -2.24842916e+05  7.25e+00 3.75e+03  2.69e+04     0s
##    1   2.34432856e+05  7.59319096e+04  1.78e-15 3.64e-12  3.17e+03     0s
##    2   2.10232015e+05  1.89880475e+05  8.88e-16 4.01e-12  4.07e+02     0s
##    3   2.00964341e+05  1.98582137e+05  9.77e-15 2.79e-12  4.76e+01     0s
##    4   1.99878036e+05  1.99804970e+05  2.46e-13 3.19e-12  1.46e+00     0s
##    5   1.99833638e+05  1.99832960e+05  3.14e-13 1.82e-12  1.36e-02     0s
##    6   1.99833333e+05  1.99833333e+05  1.47e-14 2.86e-12  1.39e-08     0s
##    7   1.99833333e+05  1.99833333e+05  7.10e-15 2.73e-12  1.39e-14     0s
## 
## Barrier solved model in 7 iterations and 0.01 seconds
## Optimal objective 1.99833333e+05
## 
## 
## Root relaxation: objective 1.998333e+05, 6 iterations, 0.00 seconds
## 
##     Nodes    |    Current Node    |     Objective Bounds      |     Work
##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
## 
##      0     0 199833.333    0    1 210500.000 199833.333  5.07%     -    0s
##      0     0 200252.941    0    1 210500.000 200252.941  4.87%     -    0s
##      0     0 210500.000    0    1 210500.000 210500.000  0.00%     -    0s
## 
## Cutting planes:
##   Flow cover: 3
## 
## Explored 1 nodes (11 simplex iterations) in 0.01 seconds
## Thread count was 8 (of 8 available processors)
## 
## Solution count 1: 210500 
## 
## Optimal solution found (tolerance 1.00e-04)
## Best objective 2.105000000000e+05, best bound 2.105000000000e+05, gap 0.0000%&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Print solution
if (res$status == &amp;#39;OPTIMAL&amp;#39;) {
  cat(&amp;#39;\nTotal Costs:&amp;#39;,res$objval,&amp;#39;\nsolution:\n&amp;#39;)
  cat(&amp;#39;Facilities:&amp;#39;, model$varnames[which(res$x[1:nPlants]&amp;gt;1e-5)], &amp;#39;\n&amp;#39;)
  active &amp;lt;- nPlants + which(res$x[(nPlants+1):(nPlants*(nWarehouses+1))] &amp;gt; 1e-5)
  cat(&amp;#39;Flows: &amp;#39;)
  cat(sprintf(&amp;#39;%s=%g &amp;#39;,model$varnames[active], res$x[active]), &amp;#39;\n&amp;#39;)
  rm(active)
} else {
  cat(&amp;#39;No solution\n&amp;#39;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Total Costs: 210500 
## solution:
## Facilities: Open1 Open2 Open4 Open5 
## Flows: Trans1,2=14  Trans1,4=1  Trans2,4=18  Trans3,1=14  Trans4,1=6  Trans4,2=8  Trans4,5=6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Clear space
rm(res, model, params, A1, A2, A3, A4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Assign workers to shifts; each worker may or may not be available on a
# particular day. If the problem cannot be solved, use IIS iteratively to
# find all conflicting constraints.


# Function to display results
printsolution &amp;lt;- function(result) {
  if(result$status == &amp;#39;OPTIMAL&amp;#39;) {
    cat(&amp;#39;The optimal objective is&amp;#39;,result$objval,&amp;#39;\n&amp;#39;)
    cat(&amp;#39;Schedule:\n&amp;#39;)
    for (s in 1:nShifts) {
      cat(&amp;#39;\t&amp;#39;,Shifts[s],&amp;#39;:&amp;#39;)
      for (w in 1:nWorkers) {
        if (result$x[varIdx(w,s)] &amp;gt; 0.9) cat(Workers[w],&amp;#39; &amp;#39;)
      }
      cat(&amp;#39;\n&amp;#39;)
    }
  }
}

# define data
nShifts  &amp;lt;- 14
nWorkers &amp;lt;-  7
nVars    &amp;lt;- nShifts * nWorkers
varIdx   &amp;lt;- function(w,s) {s+(w-1)*nShifts}

Shifts  &amp;lt;- c(&amp;#39;Mon1&amp;#39;, &amp;#39;Tue2&amp;#39;, &amp;#39;Wed3&amp;#39;, &amp;#39;Thu4&amp;#39;, &amp;#39;Fri5&amp;#39;, &amp;#39;Sat6&amp;#39;, &amp;#39;Sun7&amp;#39;,
             &amp;#39;Mon8&amp;#39;, &amp;#39;Tue9&amp;#39;, &amp;#39;Wed10&amp;#39;, &amp;#39;Thu11&amp;#39;, &amp;#39;Fri12&amp;#39;, &amp;#39;Sat13&amp;#39;, &amp;#39;Sun14&amp;#39;)
Workers &amp;lt;- c( &amp;#39;Amy&amp;#39;, &amp;#39;Bob&amp;#39;, &amp;#39;Cathy&amp;#39;, &amp;#39;Dan&amp;#39;, &amp;#39;Ed&amp;#39;, &amp;#39;Fred&amp;#39;, &amp;#39;Gu&amp;#39; )

pay     &amp;lt;- c(10, 12, 10, 8, 8, 9, 11 )

shiftRequirements &amp;lt;- c(3, 2, 4, 4, 5, 6, 5, 2, 2, 3, 4, 6, 7, 5 )

availability &amp;lt;- list( c( 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1 ),
                      c( 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0 ),
                      c( 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 ),
                      c( 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1 ),
                      c( 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1 ),
                      c( 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1 ),
                      c( 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ) )

# Set-up environment
env &amp;lt;- list()
env$logfile &amp;lt;- &amp;#39;workforce2.log&amp;#39;

# Build model
model            &amp;lt;- list()
model$modelname  &amp;lt;- &amp;#39;workforce2&amp;#39;
model$modelsense &amp;lt;- &amp;#39;min&amp;#39;

# Initialize assignment decision variables:
#    x[w][s] == 1 if worker w is assigned
#    to shift s. Since an assignment model always produces integer
#    solutions, we use continuous variables and solve as an LP.
model$lb       &amp;lt;- 0
model$ub       &amp;lt;- rep(1, nVars)
model$obj      &amp;lt;- rep(0, nVars)
model$varnames &amp;lt;- rep(&amp;#39;&amp;#39;,nVars)
for (w in 1:nWorkers) {
  for (s in 1:nShifts) {
    model$varnames[varIdx(w,s)] = paste0(Workers[w],&amp;#39;.&amp;#39;,Shifts[s])
    model$obj[varIdx(w,s)]      = pay[w]
    if (availability[[w]][s] == 0) model$ub[varIdx(w,s)] = 0
  }
}

# Set-up shift-requirements constraints
model$A           &amp;lt;- spMatrix(nShifts,nVars,
                      i = c(mapply(rep,1:nShifts,nWorkers)),
                      j = mapply(varIdx,1:nWorkers,
                                 mapply(rep,1:nShifts,nWorkers)),
                      x = rep(1,nShifts * nWorkers))
model$sense       &amp;lt;- rep(&amp;#39;=&amp;#39;,nShifts)
model$rhs         &amp;lt;- shiftRequirements
model$constrnames &amp;lt;- Shifts

# Save model
gurobi_write(model,&amp;#39;workforce2.lp&amp;#39;, env)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Optimize
result &amp;lt;- gurobi(model, env = env)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 14 rows, 98 columns and 98 nonzeros
## Model fingerprint: 0xbddc1063
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [8e+00, 1e+01]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [2e+00, 7e+00]
## Presolve removed 1 rows and 60 columns
## Presolve time: 0.00s
## 
## Solved in 0 iterations and 0.00 seconds
## Infeasible model&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Display results
if (result$status == &amp;#39;OPTIMAL&amp;#39;) {
# The code may enter here if you change some of the data... otherwise
# this will never be executed.
  printsolution(result);
} else if (result$status == &amp;#39;INFEASIBLE&amp;#39;) {
# We will loop until we reduce a model that can be solved
  numremoved &amp;lt;- 0 
  while(result$status == &amp;#39;INFEASIBLE&amp;#39;) {
    iis               &amp;lt;- gurobi_iis(model, env = env)
    keep              &amp;lt;- (!iis$Arows)
    cat(&amp;#39;Removing rows&amp;#39;,model$constrnames[iis$Arows],&amp;#39;...\n&amp;#39;)
    model$A           &amp;lt;- model$A[keep,,drop = FALSE]
    model$sense       &amp;lt;- model$sense[keep]
    model$rhs         &amp;lt;- model$rhs[keep]
    model$constrnames &amp;lt;- model$constrnames[keep]
    numremoved        &amp;lt;- numremoved + 1
    gurobi_write(model, paste0(&amp;#39;workforce2-&amp;#39;,numremoved,&amp;#39;.lp&amp;#39;), env)
    result            &amp;lt;- gurobi(model, env = env)
  }
  printsolution(result)
  rm(iis)
} else {
# Just to handle user interruptions or other problems
  cat(&amp;#39;Unexpected status&amp;#39;,result$status,&amp;#39;\nEnding now\n&amp;#39;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## IIS computed: 1 constraints and 7 bounds
## IIS runtime: 0.00 seconds
## Removing rows Thu4 ...
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 13 rows, 98 columns and 91 nonzeros
## Model fingerprint: 0x75a77c30
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [8e+00, 1e+01]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [2e+00, 7e+00]
## Presolve removed 1 rows and 61 columns
## Presolve time: 0.00s
## 
## Solved in 0 iterations and 0.00 seconds
## Infeasible model
## 
## IIS computed: 1 constraints and 7 bounds
## IIS runtime: 0.00 seconds
## Removing rows Sat6 ...
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 12 rows, 98 columns and 84 nonzeros
## Model fingerprint: 0x529973cc
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [8e+00, 1e+01]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [2e+00, 7e+00]
## Presolve removed 1 rows and 62 columns
## Presolve time: 0.00s
## 
## Solved in 0 iterations and 0.00 seconds
## Infeasible model
## 
## IIS computed: 1 constraints and 7 bounds
## IIS runtime: 0.00 seconds
## Removing rows Sun7 ...
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 11 rows, 98 columns and 77 nonzeros
## Model fingerprint: 0x0cbf4dba
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [8e+00, 1e+01]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [2e+00, 7e+00]
## Presolve removed 1 rows and 63 columns
## Presolve time: 0.00s
## 
## Solved in 0 iterations and 0.00 seconds
## Infeasible model
## 
## IIS computed: 1 constraints and 7 bounds
## IIS runtime: 0.00 seconds
## Removing rows Fri12 ...
## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 10 rows, 98 columns and 70 nonzeros
## Model fingerprint: 0x02f1ed80
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [8e+00, 1e+01]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [2e+00, 7e+00]
## Presolve removed 10 rows and 98 columns
## Presolve time: 0.00s
## Presolve: All rows and columns removed
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    3.3500000e+02   0.000000e+00   1.480000e+02      0s
## Extra 5 simplex iterations after uncrush
##        5    3.3500000e+02   0.000000e+00   0.000000e+00      0s
## 
## Solved in 5 iterations and 0.00 seconds
## Optimal objective  3.350000000e+02
## The optimal objective is 335 
## Schedule:
##   Mon1 :Ed  Fred  Gu  
##   Tue2 :Dan  Ed  
##   Wed3 :Amy  Dan  Ed  Fred  
##   Thu4 :
##   Fri5 :Amy  Cathy  Dan  Ed  Gu  
##   Sat6 :
##   Sun7 :
##   Mon8 :Dan  Ed  
##   Tue9 :Dan  Ed  
##   Wed10 :Amy  Cathy  Dan  
##   Thu11 :Amy  Cathy  Dan  Ed  
##   Fri12 :
##   Sat13 :Amy  Bob  Cathy  Dan  Ed  Fred  Gu  
##   Sun14 :Amy  Cathy  Dan  Ed  Fred&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Clear space
rm(model, env, availability, Shifts, Workers, pay, shiftRequirements, result)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Assign workers to shifts; each worker may or may not be available on a
# particular day. If the problem cannot be solved, relax the model
# to determine which constraints cannot be satisfied, and how much
# they need to be relaxed.


# Function to display results
printsolution &amp;lt;- function(result) {
  if(result$status == &amp;#39;OPTIMAL&amp;#39;) {
    cat(&amp;#39;The optimal objective is&amp;#39;,result$objval,&amp;#39;\n&amp;#39;)
    cat(&amp;#39;Schedule:\n&amp;#39;)
    for (s in 1:nShifts) {
      cat(&amp;#39;\t&amp;#39;,Shifts[s],&amp;#39;:&amp;#39;)
      for (w in 1:nWorkers) {
        if (result$x[varIdx(w,s)] &amp;gt; 0.9) cat(Workers[w],&amp;#39; &amp;#39;)
      }
      cat(&amp;#39;\n&amp;#39;)
    }
  }
}

# define data
nShifts  &amp;lt;- 14
nWorkers &amp;lt;-  7
nVars    &amp;lt;- nShifts * nWorkers
varIdx   &amp;lt;- function(w,s) {s+(w-1)*nShifts}

Shifts  &amp;lt;- c(&amp;#39;Mon1&amp;#39;, &amp;#39;Tue2&amp;#39;, &amp;#39;Wed3&amp;#39;, &amp;#39;Thu4&amp;#39;, &amp;#39;Fri5&amp;#39;, &amp;#39;Sat6&amp;#39;, &amp;#39;Sun7&amp;#39;,
             &amp;#39;Mon8&amp;#39;, &amp;#39;Tue9&amp;#39;, &amp;#39;Wed10&amp;#39;, &amp;#39;Thu11&amp;#39;, &amp;#39;Fri12&amp;#39;, &amp;#39;Sat13&amp;#39;, &amp;#39;Sun14&amp;#39;)
Workers &amp;lt;- c( &amp;#39;Amy&amp;#39;, &amp;#39;Bob&amp;#39;, &amp;#39;Cathy&amp;#39;, &amp;#39;Dan&amp;#39;, &amp;#39;Ed&amp;#39;, &amp;#39;Fred&amp;#39;, &amp;#39;Gu&amp;#39; )

pay     &amp;lt;- c(10, 12, 10, 8, 8, 9, 11 )

shiftRequirements &amp;lt;- c(3, 2, 4, 4, 5, 6, 5, 2, 2, 3, 4, 6, 7, 5 )

availability &amp;lt;- list( c( 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1 ),
                      c( 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0 ),
                      c( 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 ),
                      c( 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1 ),
                      c( 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1 ),
                      c( 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1 ),
                      c( 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ) )

# Set-up environment
env &amp;lt;- list()
env$logfile &amp;lt;- &amp;#39;workforce3.log&amp;#39;

# Build model
model            &amp;lt;- list()
model$modelname  &amp;lt;- &amp;#39;workforce3&amp;#39;
model$modelsense &amp;lt;- &amp;#39;min&amp;#39;

# Initialize assignment decision variables:
#    x[w][s] == 1 if worker w is assigned
#    to shift s. Since an assignment model always produces integer
#    solutions, we use continuous variables and solve as an LP.
model$lb       &amp;lt;- 0
model$ub       &amp;lt;- rep(1, nVars)
model$obj      &amp;lt;- rep(0, nVars)
model$varnames &amp;lt;- rep(&amp;#39;&amp;#39;,nVars)
for (w in 1:nWorkers) {
  for (s in 1:nShifts) {
    model$varnames[varIdx(w,s)] = paste0(Workers[w],&amp;#39;.&amp;#39;,Shifts[s])
    model$obj[varIdx(w,s)]      = pay[w]
    if (availability[[w]][s] == 0) model$ub[varIdx(w,s)] = 0
  }
}

# Set-up shift-requirements constraints
model$A           &amp;lt;- spMatrix(nShifts,nVars,
                      i = c(mapply(rep,1:nShifts,nWorkers)),
                      j = mapply(varIdx,1:nWorkers,
                                 mapply(rep,1:nShifts,nWorkers)),
                      x = rep(1,nShifts * nWorkers))
model$sense       &amp;lt;- rep(&amp;#39;=&amp;#39;,nShifts)
model$rhs         &amp;lt;- shiftRequirements
model$constrnames &amp;lt;- Shifts

# Save model
gurobi_write(model,&amp;#39;workforce3.lp&amp;#39;, env)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Optimize
result &amp;lt;- gurobi(model, env = env)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 14 rows, 98 columns and 98 nonzeros
## Model fingerprint: 0xbddc1063
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [8e+00, 1e+01]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [2e+00, 7e+00]
## Presolve removed 1 rows and 60 columns
## Presolve time: 0.00s
## 
## Solved in 0 iterations and 0.00 seconds
## Infeasible model&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Display results
if (result$status == &amp;#39;OPTIMAL&amp;#39;) {
# The code may enter here if you change some of the data... otherwise
# this will never be executed.
  printsolution(result);
} else if (result$status == &amp;#39;INFEASIBLE&amp;#39;) {
# Use gurobi_feasrelax to find out which copnstraints should be relaxed
# and by how much to make the problem feasible.
  penalties     &amp;lt;- list()
  penalties$lb  &amp;lt;- Inf
  penalties$ub  &amp;lt;- Inf
  penalties$rhs &amp;lt;- rep(1,length(model$rhs))
  feasrelax     &amp;lt;- gurobi_feasrelax(model, 0, FALSE, penalties, env = env)
  result        &amp;lt;- gurobi(feasrelax$model, env = env)
  if (result$status == &amp;#39;OPTIMAL&amp;#39;) {
    printsolution(result)
    cat(&amp;#39;Slack values:\n&amp;#39;)
    for (j in (nVars+1):length(result$x)) {
      if(result$x[j] &amp;gt; 0.1)
        cat(&amp;#39;\t&amp;#39;,feasrelax$model$varnames[j],result$x[j],&amp;#39;\n&amp;#39;)
    }
  } else {
    cat(&amp;#39;Unexpected status&amp;#39;,result$status,&amp;#39;\nEnding now\n&amp;#39;)
  }
  rm(penalties, feasrelax)
} else {
# Just to handle user interruptions or other problems
  cat(&amp;#39;Unexpected status&amp;#39;,result$status,&amp;#39;\nEnding now\n&amp;#39;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 14 rows, 126 columns and 126 nonzeros
## Model fingerprint: 0xa5484b98
## Coefficient statistics:
##   Matrix range     [1e+00, 1e+00]
##   Objective range  [1e+00, 1e+00]
##   Bounds range     [1e+00, 1e+00]
##   RHS range        [2e+00, 7e+00]
## Presolve removed 5 rows and 99 columns
## Presolve time: 0.00s
## Presolved: 9 rows, 27 columns, 27 nonzeros
## 
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    6.0000000e+00   0.000000e+00   0.000000e+00      0s
##        0    6.0000000e+00   0.000000e+00   0.000000e+00      0s
## 
## Solved in 0 iterations and 0.00 seconds
## Optimal objective  6.000000000e+00
## The optimal objective is 6 
## Schedule:
##   Mon1 :Ed  Fred  Gu  
##   Tue2 :Bob  Ed  
##   Wed3 :Amy  Cathy  Fred  Gu  
##   Thu4 :Cathy  Ed  
##   Fri5 :Amy  Cathy  Dan  Ed  Gu  
##   Sat6 :Bob  Dan  Fred  Gu  
##   Sun7 :Amy  Cathy  Ed  Gu  
##   Mon8 :Dan  Ed  
##   Tue9 :Dan  Gu  
##   Wed10 :Amy  Dan  Gu  
##   Thu11 :Amy  Bob  Ed  Gu  
##   Fri12 :Amy  Cathy  Dan  Fred  Gu  
##   Sat13 :Amy  Bob  Cathy  Dan  Ed  Fred  Gu  
##   Sun14 :Amy  Cathy  Ed  Fred  Gu  
## Slack values:
##   ArtP_Thu4 2 
##   ArtP_Sat6 2 
##   ArtP_Sun7 1 
##   ArtP_Fri12 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Clear space
rm(model, env, availability, Shifts, Workers, pay, shiftRequirements, result)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add a new chunk by clicking the &lt;em&gt;Insert Chunk&lt;/em&gt; button on the toolbar or by pressing &lt;em&gt;Ctrl+Alt+I&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the &lt;em&gt;Preview&lt;/em&gt; button or press &lt;em&gt;Ctrl+Shift+K&lt;/em&gt; to preview the HTML file).&lt;/p&gt;
&lt;p&gt;The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike &lt;em&gt;Knit&lt;/em&gt;, &lt;em&gt;Preview&lt;/em&gt; does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linear Programming Examples and Applications</title>
      <link>/post/orie/lp_algorithms/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/orie/lp_algorithms/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This post explores how to use the fundamental algorithms to solve LPs.
I have written these using Gurobi as a solver and as the mathematical formulation software.
This is a reproducible example if you have R Studio just make sure you have installed the correct packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gurobi)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;gurobi&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tictoc)
library(Matrix)
library(ggplot2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;ggplot2&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(MASS)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;MASS&amp;#39; was built under R version 4.0.2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(max: 2x_1 + 3x_2\)&lt;/span&gt;
s.t.
&lt;span class=&#34;math inline&#34;&gt;\(-x_1 + x_2 \leq 5\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(x_1+3x_2 &amp;lt;= 35; x_1 \leq 20\)&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#library(matlib)
#https://cran.r-project.org/web/packages/matlib/vignettes/linear-equations.html
#another method using outer function https://stackoverflow.com/questions/10199547/plotting-curves-given-by-equations-in-r


A &amp;lt;- matrix(c(-1, 1, 1, 1, 3, 0), 3, 2)
b &amp;lt;- c(5,35, 20)
#showEqn(A, b)

#c( R(A), R(cbind(A,b)) )          # show ranks

#all.equal( R(A), R(cbind(A,b)) )  # consistent?

#plotEqn(A,b, xlim = c(0,60), ylim = c(0,60))

rm(A,b)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# linear program example from 
# http://lpsolve.sourceforge.net/5.5/formulate.htm
# in this script, we don&amp;#39;t solve the linear program but plot it in 2-d space
# for visualization purposes. 



### set up some functions to define the constraints and the profit
# money constraint

#-x_1 + x_2 &amp;lt;= 5;
constraint1 = function(x1){
  x2 = (5 + x1)
  return(x2)
}

# storage constraint

#x_1+3x_2 &amp;lt;= 35; 
constraint2 = function(x1){
  x2 = (35 - x1)/3
  return(x2)
}

# acreage constraint

#x_1 &amp;lt;= 20
#constraint3 = function(x1){
#  x2 = 20 - x1
#  return(x2)
#}

# profit contours - returns barley given wheat and profit. i.e. gives us the information needed to plot a line of (wheat, barley) combinations that yield a given amount of profit

#max z = 2x_1 + 3x_2

profitContour = function(x1Array, z){
  x2 &amp;lt;- numeric(length(x1Array))
  for (i in 0:length(x1)){
    x2[i] = (z - 2*x1[i]) / 3
  }
  return(x2)
}


### set up data frame for plotting. Data frame will put barley in terms of wheat. Wheat will be our x axis, and barley will be our y axis.
x1 = seq(0,20)
# add data for plotting the constraints. I.e. how much barley we can have in each constraint given an amount of wheat.
plotDF = data.frame(x1, constraint1(x1), constraint2(x1))
names(plotDF) = c(&amp;#39;x1&amp;#39;,&amp;#39;con1&amp;#39;,&amp;#39;con2&amp;#39;)
plotDF$zero = rep(0,length(x1))
# add data for plotting the profit contours. I.e. how much barlet do we need to make a certain profit given a certain amount of wheat.
for (z in c(25, 40, 55, 70, 85)){
  x2 &amp;lt;- data.frame(profitContour(x1, z))
  names(x2) = paste(&amp;#39;z&amp;#39;, z, sep=&amp;quot;&amp;quot;)
  plotDF &amp;lt;- cbind(plotDF, x2)
}
#set all negatives to zero, since you can&amp;#39;t have negative x2
plotDF &amp;lt;- replace(plotDF, plotDF&amp;lt;0, 0)


### set up and view the charts
# plot the constraint lines
p0 = ggplot(plotDF, aes(x = x1)) + 
  coord_cartesian(ylim=c(0,25),xlim = c(0,25))+                      
  geom_line(aes(y = con1), colour = &amp;#39;red&amp;#39;, linetype = 2) +
  geom_line(aes(y = con2), colour = &amp;#39;green&amp;#39;, linetype = 2) +
  xlab(&amp;#39;x1&amp;#39;) +
  ylab(&amp;#39;x2&amp;#39;) 



# add an area plot underneath the constraint lines. This is the feasible solution space.
p1 &amp;lt;- p0 +  geom_area(aes(y = pmin(con1,con2)), fill = &amp;#39;gray40&amp;#39;)
# view the constraints and feasible solution space


# add the profit contour lines
p2 &amp;lt;- p1 +                    
  geom_line(aes(y = z25), colour = &amp;#39;blue&amp;#39;, linetype = 1) +
  geom_line(aes(y = z40), colour = &amp;#39;blue&amp;#39;, linetype = 1) +
  geom_line(aes(y = z55), colour = &amp;#39;blue&amp;#39;, linetype = 1) +
  geom_line(aes(y = z70), colour = &amp;#39;blue&amp;#39;, linetype = 1) +
  geom_line(aes(y = z85), colour = &amp;#39;blue&amp;#39;, linetype = 1)
# view the whole chart
plotDF&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    x1 con1      con2 zero       z25        z40       z55      z70      z85
## 1   0    5 11.666667    0 8.3333333 13.3333333 18.333333 23.33333 28.33333
## 2   1    6 11.333333    0 7.6666667 12.6666667 17.666667 22.66667 27.66667
## 3   2    7 11.000000    0 7.0000000 12.0000000 17.000000 22.00000 27.00000
## 4   3    8 10.666667    0 6.3333333 11.3333333 16.333333 21.33333 26.33333
## 5   4    9 10.333333    0 5.6666667 10.6666667 15.666667 20.66667 25.66667
## 6   5   10 10.000000    0 5.0000000 10.0000000 15.000000 20.00000 25.00000
## 7   6   11  9.666667    0 4.3333333  9.3333333 14.333333 19.33333 24.33333
## 8   7   12  9.333333    0 3.6666667  8.6666667 13.666667 18.66667 23.66667
## 9   8   13  9.000000    0 3.0000000  8.0000000 13.000000 18.00000 23.00000
## 10  9   14  8.666667    0 2.3333333  7.3333333 12.333333 17.33333 22.33333
## 11 10   15  8.333333    0 1.6666667  6.6666667 11.666667 16.66667 21.66667
## 12 11   16  8.000000    0 1.0000000  6.0000000 11.000000 16.00000 21.00000
## 13 12   17  7.666667    0 0.3333333  5.3333333 10.333333 15.33333 20.33333
## 14 13   18  7.333333    0 0.0000000  4.6666667  9.666667 14.66667 19.66667
## 15 14   19  7.000000    0 0.0000000  4.0000000  9.000000 14.00000 19.00000
## 16 15   20  6.666667    0 0.0000000  3.3333333  8.333333 13.33333 18.33333
## 17 16   21  6.333333    0 0.0000000  2.6666667  7.666667 12.66667 17.66667
## 18 17   22  6.000000    0 0.0000000  2.0000000  7.000000 12.00000 17.00000
## 19 18   23  5.666667    0 0.0000000  1.3333333  6.333333 11.33333 16.33333
## 20 19   24  5.333333    0 0.0000000  0.6666667  5.666667 10.66667 15.66667
## 21 20   25  5.000000    0 0.0000000  0.0000000  5.000000 10.00000 15.00000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/ORIE/LP_algorithms_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(x1,x2,p0,p1,p2, constraint1, constraint2, plotDF, profitContour,z )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;primal simplex tableu reformulation
&lt;span class=&#34;math inline&#34;&gt;\(max: z;\: z - 2x_1 - 3x_2 = 0\)&lt;/span&gt;
s.t.
&lt;span class=&#34;math inline&#34;&gt;\(-x_1 + x_2 + x_3 = 5\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(x_1+ 3x_2 + x_4 = 35\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(x_1 + x_5 = 20\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class=&#34;math inline&#34;&gt;\(x_3, x_4, \text{ and } x_5\)&lt;/span&gt; are slack variables. Giving 3 basic variables for 3 equations. The “4th” constraint describes how z changes with the decision variables
For less than or equal constraints adding the slack variables define a basic feasible solution which we use to initialize the algorithm (note use &lt;span class=&#34;math inline&#34;&gt;\(x+1\)&lt;/span&gt; as basic variable instead of &lt;span class=&#34;math inline&#34;&gt;\(x_5\)&lt;/span&gt; for iteration reasons)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tic(&amp;#39;Simplex&amp;#39;)
initial_tableau &amp;lt;- data.frame(row = c(0,1,2,3), basic = (c(&amp;#39;z&amp;#39;, &amp;#39;x3&amp;#39;, &amp;#39;x4&amp;#39;, &amp;#39;x5&amp;#39;)), z = c(1,0,0,0), x1 = c(-2,-1,1,1), x2 = c(-3,1,3,0), x3 = c(0,1,0,0), x4 = c(0,0,1,0), x5 = c(0,0,0,1),   RHS = c(0,5,35,20), ratio = c(0,0,0,0))

initial_tableau$basic &amp;lt;- as.character(initial_tableau$basic)

nvars &amp;lt;- 5
nrows &amp;lt;- 3



tableau &amp;lt;- initial_tableau

iters &amp;lt;- 1


#loop iterate until you have no negative coefficients in the first row of the tableau

maxiters &amp;lt;- 10
while(iters &amp;lt; maxiters){
  
  
  

#create a and RHS matrixes for easy calculations

ma &amp;lt;- as.matrix(tableau[,4:(4+nvars-1)])


#Run this only if there is a negative reduced cost
if(min(ma[1,]) &amp;lt; 0){
mrhs &amp;lt;- as.matrix(tableau[,(4+nvars)])
print(paste(&amp;#39;iteration:&amp;#39;,iters))
print(tableau)


#use steepest ascent to find the most negative reduced cost and that is the variable that enters the basis (sa) as seen in row 0, caluclate the rations, then determine the pivot row index (pri)
sa &amp;lt;- which.min(ma[1,])


ratios &amp;lt;- mrhs[2:(nrows+1)]/ma[2:(nrows+1),sa]
ratios[ratios&amp;lt;=0] &amp;lt;- 9999
pri &amp;lt;- which.min(ratios)+1





#change pivot row by pivot element (pe) using Gauss Jordan elimination (substition)
#by simply divide the row and rhs by the pe to get a new pivot row (npr) and new rhs (nrhs)
#https://www.coursera.org/lecture/solving-algorithms-discrete-optimization/3-3-1-linear-programming-rzHVE

pe &amp;lt;- ma[pri,sa]
npr &amp;lt;- ma[pri,]/pe

nrhs &amp;lt;- mrhs[pri]/pe

#take that row and muliply by the negative of the pivot variable&amp;#39;s coefficent in that row column and add the result to that row for both the rhs matrix and the A matrix

for(i in 1:(nrows+1)){
  mrhs[i] &amp;lt;- -ma[i,sa]*nrhs+mrhs[i]
  }
mrhs[pri] &amp;lt;- nrhs


for(i in 1:(nrows+1)){
  ma[i,] &amp;lt;- -ma[i,sa]*npr+ma[i,]
  }
ma[pri,] &amp;lt;- npr

#rewrite the new A and RHS matricies to the tableau 

tableau[,4:(4+nvars-1)] &amp;lt;- ma
tableau[,(4+nvars)] &amp;lt;- mrhs
tableau[2:(nrows+1),(4+nvars+1)] &amp;lt;- ratios
print(paste(&amp;#39;pivot row:&amp;#39;,(pri-1)))
print(paste(&amp;#39;new basis:&amp;#39;, sa))
tableau[pri,2] &amp;lt;- paste0(&amp;#39;x&amp;#39;,sa)

iters &amp;lt;- iters + 1
}
else{
  print(paste(&amp;#39;Final Tableau; iteration:&amp;#39;,iters))
  print(tableau[1:(length(tableau)-1)])
  print(paste0(&amp;#39;objective value:&amp;#39;, mrhs[1]))
  for(j in 1:nrows+1){
    print(paste(tableau[j,2], &amp;#39;=&amp;#39;, tableau[j,(4+nvars)]))}
  iters &amp;lt;- maxiters}
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;iteration: 1&amp;quot;
##   row basic z x1 x2 x3 x4 x5 RHS ratio
## 1   0     z 1 -2 -3  0  0  0   0     0
## 2   1    x3 0 -1  1  1  0  0   5     0
## 3   2    x4 0  1  3  0  1  0  35     0
## 4   3    x5 0  1  0  0  0  1  20     0
## [1] &amp;quot;pivot row: 1&amp;quot;
## [1] &amp;quot;new basis: 2&amp;quot;
## [1] &amp;quot;iteration: 2&amp;quot;
##   row basic z x1 x2 x3 x4 x5 RHS    ratio
## 1   0     z 1 -5  0  3  0  0  15  0.00000
## 2   1    x2 0 -1  1  1  0  0   5  5.00000
## 3   2    x4 0  4  0 -3  1  0  20 11.66667
## 4   3    x5 0  1  0  0  0  1  20      Inf
## [1] &amp;quot;pivot row: 2&amp;quot;
## [1] &amp;quot;new basis: 1&amp;quot;
## [1] &amp;quot;iteration: 3&amp;quot;
##   row basic z x1 x2    x3    x4 x5 RHS ratio
## 1   0     z 1  0  0 -0.75  1.25  0  40     0
## 2   1    x2 0  0  1  0.25  0.25  0  10  9999
## 3   2    x1 0  1  0 -0.75  0.25  0   5     5
## 4   3    x5 0  0  0  0.75 -0.25  1  15    20
## [1] &amp;quot;pivot row: 3&amp;quot;
## [1] &amp;quot;new basis: 3&amp;quot;
## [1] &amp;quot;Final Tableau; iteration: 4&amp;quot;
##   row basic z x1 x2 x3         x4         x5 RHS
## 1   0     z 1  0  0  0  1.0000000  1.0000000  55
## 2   1    x2 0  0  1  0  0.3333333 -0.3333333   5
## 3   2    x1 0  1  0  0  0.0000000  1.0000000  20
## 4   3    x3 0  0  0  1 -0.3333333  1.3333333  20
## [1] &amp;quot;objective value:55&amp;quot;
## [1] &amp;quot;x2 = 5&amp;quot;
## [1] &amp;quot;x1 = 20&amp;quot;
## [1] &amp;quot;x3 = 20&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;toc()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Simplex: 0.05 sec elapsed&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(pri,sa,npr,iters,maxiters,ma,mrhs,nrhs,nrows,nvars,pe,ratios,i,j)
rm(initial_tableau, tableau)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dual Simplex
The dual of the previous problem is
&lt;span class=&#34;math inline&#34;&gt;\(min 5y_1+35y_2+20y_3\)&lt;/span&gt;
s.t.
&lt;span class=&#34;math inline&#34;&gt;\(-y_1+y_2+y_3 \geq 2\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(y_1+3y_2 \geq 3\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Switching to a max problem and adding slacks yields
&lt;span class=&#34;math inline&#34;&gt;\(z=-5y_1-35y_2-20y_3\)&lt;/span&gt;
s.t.
&lt;span class=&#34;math inline&#34;&gt;\(y_1-y_2-y_3+y_4 = -2\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(-y_1-3y_2+y_5 = -3\)&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tic(&amp;#39;Dual Simplex&amp;#39;)
initial_tableau &amp;lt;- data.frame(row = c(0,1,2), basic = (c(&amp;#39;z&amp;#39;, &amp;#39;y4&amp;#39;, &amp;#39;y5&amp;#39;)), z = c(1,0,0), y1 = c(5,1,-1), y2 = c(35,-1,-3), y3 = c(20,-1,0), y4 = c(0,1,0), y5 = c(0,0,1),   RHS = c(0,-2,-3))

initial_tableau$basic &amp;lt;- as.character(initial_tableau$basic)

nvars &amp;lt;- 5
nrows &amp;lt;- 2



tableau &amp;lt;- initial_tableau

iters &amp;lt;- 1

maxiters &amp;lt;- 10

while(iters &amp;lt; maxiters){
  

#create a and RHS matrixes for easy calculations

ma &amp;lt;- as.matrix(tableau[,4:(4+nvars-1)])

#Check to see if a RHS value is negative
if(min(tableau[2:(nrows+1),(4+nvars)]) &amp;lt; 0){
mrhs &amp;lt;- as.matrix(tableau[,(4+nvars)])
print(paste(&amp;#39;iteration:&amp;#39;,iters))
print(tableau)


#use steepest ascent to find the most negative RHS and that is the pivot row index (pri)
#then caluclate the ratios to determine the entering variable (ev)

pri &amp;lt;- which.min(mrhs[2:(nrows+1),])+1

ratios &amp;lt;- -ma[1,]/ma[pri,]
ratios[ratios&amp;lt;=0] &amp;lt;- 9999
ev &amp;lt;- which.min(ratios)


#identify the new pivot element, do the same matrix operations to make the new pivot row and the new rhs for that row
#change pivot row by pivot element (pe) using Gauss Jordan elimination (substition)
#by simply divide the row and rhs by the pe to get a new pivot row (npr) and new rhs (nrhs)
#https://www.coursera.org/lecture/solving-algorithms-discrete-optimization/3-3-1-linear-programming-rzHVE

pe &amp;lt;- ma[pri,ev]
npr &amp;lt;- ma[pri,]/pe

nrhs &amp;lt;- mrhs[pri]/pe

#Do the matrix operations for the rest of the tableau


#take that row and muliply by the negative of the pivot variable&amp;#39;s coefficent in that row column and add the result to that row for both the rhs matrix and the A matrix

for(i in 1:(nrows+1)){
  mrhs[i] &amp;lt;- -ma[i,ev]*nrhs+mrhs[i]
  }
mrhs[pri] &amp;lt;- nrhs


for(i in 1:(nrows+1)){
  ma[i,] &amp;lt;- -ma[i,ev]*npr+ma[i,]
  }
ma[pri,] &amp;lt;- npr

#rewrite the new A and RHS matricies to the tableau 

tableau[,4:(3+nvars)] &amp;lt;- ma
tableau[,(4+nvars)] &amp;lt;- mrhs
print(paste(&amp;#39;pivot row:&amp;#39;,(pri-1)))
print(paste(&amp;#39;entering variable:&amp;#39;,ev))
tableau[pri,2] &amp;lt;- paste0(&amp;#39;y&amp;#39;,ev)




iters &amp;lt;- iters + 1
}
else{
  print(tableau)
  print(paste(&amp;#39;objective value:&amp;#39;, mrhs[1]))
  for(j in 1:nrows+1){
    print(paste(tableau[j,2], &amp;#39;=&amp;#39;, tableau[j,(4+nvars)]))}
  iters &amp;lt;- maxiters}

}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;iteration: 1&amp;quot;
##   row basic z y1 y2 y3 y4 y5 RHS
## 1   0     z 1  5 35 20  0  0   0
## 2   1    y4 0  1 -1 -1  1  0  -2
## 3   2    y5 0 -1 -3  0  0  1  -3
## [1] &amp;quot;pivot row: 2&amp;quot;
## [1] &amp;quot;entering variable: 1&amp;quot;
## [1] &amp;quot;iteration: 2&amp;quot;
##   row basic z y1 y2 y3 y4 y5 RHS
## 1   0     z 1  0 20 20  0  5 -15
## 2   1    y4 0  0 -4 -1  1  1  -5
## 3   2    y1 0  1  3  0  0 -1   3
## [1] &amp;quot;pivot row: 1&amp;quot;
## [1] &amp;quot;entering variable: 2&amp;quot;
## [1] &amp;quot;iteration: 3&amp;quot;
##   row basic z y1 y2    y3    y4    y5    RHS
## 1   0     z 1  0  0 15.00  5.00 10.00 -40.00
## 2   1    y2 0  0  1  0.25 -0.25 -0.25   1.25
## 3   2    y1 0  1  0 -0.75  0.75 -0.25  -0.75
## [1] &amp;quot;pivot row: 2&amp;quot;
## [1] &amp;quot;entering variable: 3&amp;quot;
##   row basic z         y1 y2 y3 y4         y5 RHS
## 1   0     z 1 20.0000000  0  0 20  5.0000000 -55
## 2   1    y2 0  0.3333333  1  0  0 -0.3333333   1
## 3   2    y3 0 -1.3333333  0  1 -1  0.3333333   1
## [1] &amp;quot;objective value: -55&amp;quot;
## [1] &amp;quot;y2 = 1&amp;quot;
## [1] &amp;quot;y3 = 1&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;toc()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Dual Simplex: 0.03 sec elapsed&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(pri,npr,iters,maxiters,ma,mrhs,nrhs,nrows,nvars,pe,ev,ratios,i,j)
rm(initial_tableau, tableau)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Interior Point
&lt;a href=&#34;http://fourier.eng.hmc.edu/e176/lectures/ch3/node19.html&#34; class=&#34;uri&#34;&gt;http://fourier.eng.hmc.edu/e176/lectures/ch3/node19.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;KKT (via interior points) vs Simplex
&lt;a href=&#34;https://math.stackexchange.com/questions/3422607/why-would-you-choose-simplex-over-lagrange-kkt-multipliers-methods&#34; class=&#34;uri&#34;&gt;https://math.stackexchange.com/questions/3422607/why-would-you-choose-simplex-over-lagrange-kkt-multipliers-methods&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Standard form:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(max: z; z - 2x_1 - 3x_2 = 0\)&lt;/span&gt;
s.t.
&lt;span class=&#34;math inline&#34;&gt;\(-x_1 + x_2 + x_3 = 5\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(x_1+ 3x_2 + x_4 = 35\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(x_1 + x_5 = 20\)&lt;/span&gt;
Idea given A,b,c and intial value of x; find optimal x that minimizes c’*x&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tic(&amp;#39;Interior Point: Newton Raphson&amp;#39;)
constr1 &amp;lt;- c(-1,1,1,0,0)
constr2 &amp;lt;- c(1,3,0,1,0)
constr3 &amp;lt;- c(1,0,0,0,1)

A &amp;lt;- rbind(constr1,constr2, constr3)

b &amp;lt;- matrix(c(5,35,20),nrow =3)
c &amp;lt;- matrix(c(-2,-3,0,0,0), nrow = 5)
#inital x values (xi) just has to be a feasible solution, but give every x variable a value or there will be numerical instablity problems in the matricies
xi &amp;lt;- matrix(c(1,1,5,31,19), nrow =5)

m &amp;lt;- nrow(A)
n &amp;lt;- ncol(A)

I &amp;lt;- diag(n)
z1 &amp;lt;- matrix(rep(0,n*n), nrow = n)
z2 &amp;lt;- matrix(rep(0,m*m), nrow = m)
z3 &amp;lt;- matrix(rep(0,m*n), nrow = m)
y &amp;lt;- matrix(rep(1,5), nrow = 5)

#The complimentary slackness modifier 1/t eventually goes to 0 as t &amp;gt;&amp;gt;&amp;gt;&amp;gt; inf
t &amp;lt;- 9
#Step size pretty much make it up the higher the more the step changes, but it might be too quick.
#if its too quick it converges on negative values of x which is bad, 
#for an example change this to 0.3 to see a slower convergance and then to 1 to see a divergence
alpha &amp;lt;- .5
#mu*x = 0 in complemntariy slackness condition , mu &amp;gt;0 is dual condition mu correspond to dual variables, 
#using fancy vectors this gives Xd*mu = XM1 = 1/t where t &amp;gt;&amp;gt;&amp;gt;&amp;gt; inf 
x &amp;lt;- xi
mu &amp;lt;- x/t
mu_minus_c &amp;lt;- mu - c
#Gives lagrangian multipliers for constraints
#Solving c+A*lamda-mu = 0 gives initial lambda
lambda &amp;lt;- ginv(t(A))%*%(mu_minus_c)


#combined vector having values of x, lambda, and mu useful when adding the search direction
w &amp;lt;- rbind(x, lambda, mu)


#This is the KKT condition stationarity, at optimality this derivative should  be 0,
#Using the lagrangian cx+lambda*Ax-mu &amp;gt;&amp;gt; c+A*lambda-mu
c_plus_tA &amp;lt;- c+t(A)%*%lambda-mu

#This is the KKT condition primal feasiblity, this should always be 0 Ax-b=0 
A_times_x_minus_b &amp;lt;- A%*%x-b

#This is the modfied complimentary condtion XM1 -1/t = 0 X is the diag(x) and M is diag(mu) 1/t &amp;gt;&amp;gt;&amp;gt; 0 as t gets larger
x_times_mu_minus_y_over_t &amp;lt;- x*mu-y/t

#The right hand side of the search direction iteration given from the Newton-Raphson Method
#Combines the vectors above
B &amp;lt;- rbind(c_plus_tA,A_times_x_minus_b,x_times_mu_minus_y_over_t)

objective &amp;lt;- t(c)%*%x
error &amp;lt;- norm(B,&amp;#39;2&amp;#39;)

iteration_list &amp;lt;- data.frame(&amp;#39;x1&amp;#39; = x[1], &amp;#39;x2&amp;#39; = x[2], &amp;#39;x3&amp;#39; = x[3], &amp;#39;x4&amp;#39; = x[4], &amp;#39;x5&amp;#39; = x[5], &amp;#39;objective&amp;#39; = objective, &amp;#39;error&amp;#39; = error)

#loop



while(error &amp;gt; 10^-7){
t &amp;lt;- t*9

Xd = Diagonal(n = n, x)

Mud = Diagonal(n = n, mu) 


#The left hand side matrix of the search direction iteration, it containtes information from the A, x, and mu vectors and matricies of 1s or 0s to make the math make sense

C &amp;lt;- rbind(cbind(z1,t(A),-I),cbind(A,z2,z3), cbind(Mud,t(z3), Xd))

#The right hand side of the search direction iteration given from the Newton-Raphson Method
#This contains the objective function costs, the RHS values, as well as the A, x, and mu vectors. 
#It also has the complimentary condition represented by t
B &amp;lt;- rbind(c+t(A)%*%lambda-mu,A%*%x-b,x*mu-y/t)


#solving the systems of equations with C and B gives the search direction as you move closer and closer to solving the complimentary condition in the KKT conditions
dw = solve(-C,B)


#update your w vector which is just a list of the x, mu, and lambda vectors using the search direction
w &amp;lt;- w + alpha*dw

x &amp;lt;- w[1:n]

lambda &amp;lt;- w[(n+1):(n+m)]

mu &amp;lt;- w[(n+m+1):length(w)]

#calculate the objective function from the x values and the error. Remember if this satisifies all the KKT conditions then the B vector will be 0.
objective &amp;lt;- t(c)%*%x
error &amp;lt;- norm(B,&amp;#39;2&amp;#39;)
iteration_list &amp;lt;- rbind(iteration_list,c(x,objective,error))

}

toc()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Interior Point: Newton Raphson: 0.22 sec elapsed&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(iteration_list)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          x1       x2        x3        x4        x5 objective     error
## 1  1.000000 1.000000  5.000000 31.000000 19.000000  -5.00000 113.97801
## 2  2.815083 1.900809  5.914274 26.482489 17.184917 -11.33259 114.10755
## 3 10.549002 1.617924 13.931079 19.597227  9.450998 -25.95178  62.76629
## 4 13.970331 2.387418 16.582913 13.867413  6.029669 -35.10292  35.22695
## 5 16.877593 3.136894 18.740699  8.711726  3.122407 -43.16587  19.61963
## 6 18.419517 3.865645 19.553873  4.983549  1.580483 -48.43597  10.66207&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tail(iteration_list)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    x1 x2 x3           x4           x5 objective        error
## 28 20  5 20 1.386952e-06 3.808029e-07       -55 2.878188e-06
## 29 20  5 20 6.934761e-07 1.904014e-07       -55 1.439094e-06
## 30 20  5 20 3.467381e-07 9.520072e-08       -55 7.195471e-07
## 31 20  5 20 1.733690e-07 4.760036e-08       -55 3.597735e-07
## 32 20  5 20 8.668451e-08 2.380018e-08       -55 1.798868e-07
## 33 20  5 20 4.334226e-08 1.190009e-08       -55 8.994339e-08&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(x,lambda,mu,z1,z2,z3,y,xi,Xd,Mud,t,n,I,alpha,b,c,constr1,constr2,constr3,m)
rm(c_plus_tA,mu_minus_c,A_times_x_minus_b,x_times_mu_minus_y_over_t, A,B,C,dw)
rm(iteration_list,objective,error,w)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(max: z = 2x_1 + 3x_2\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;s.t.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(-x_1 + x_2 \leq 5\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(x_1+3x_2 \leq 35\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(x_1 \leq 20\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This solver runs all the techniques above in paralel.
The Simplex, Dual Simplex, and 3 versions of the interior point method (barrier method).
This requires 5 cores. Whichever one solves the fastest produces the output.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tic(&amp;#39;Gurobi Solver&amp;#39;)
model &amp;lt;- list()
model$A     &amp;lt;- matrix(c(-1,1,
                        1,3,
                        1,0), nrow=3, byrow=T)
model$obj   &amp;lt;- c(2,3)
model$rhs   &amp;lt;- c(5,
                 35,
                 20)
model$sense &amp;lt;- c(&amp;#39;&amp;lt;&amp;#39;,
                 &amp;#39;&amp;lt;&amp;#39;,
                 &amp;#39;&amp;lt;&amp;#39;)
model$modelsense &amp;lt;- &amp;#39;max&amp;#39;
result &amp;lt;- gurobi(model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Optimizer version 9.0.3 build v9.0.3rc0 (win64)
## Optimize a model with 3 rows, 2 columns and 5 nonzeros
## Model fingerprint: 0x1b1ba9b3
## Coefficient statistics:
##   Matrix range     [1e+00, 3e+00]
##   Objective range  [2e+00, 3e+00]
##   Bounds range     [0e+00, 0e+00]
##   RHS range        [5e+00, 4e+01]
## Presolve removed 1 rows and 0 columns
## Presolve time: 0.00s
## Presolved: 2 rows, 2 columns, 4 nonzeros
## 
## Iteration    Objective       Primal Inf.    Dual Inf.      Time
##        0    7.0000000e+01   1.875000e+00   0.000000e+00      0s
##        1    5.5000000e+01   0.000000e+00   0.000000e+00      0s
## 
## Solved in 1 iterations and 0.00 seconds
## Optimal objective  5.500000000e+01&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#print(result$objval)
#print(result$x)



# Clear space
rm(model, result)

toc()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Gurobi Solver: 0 sec elapsed&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add a new chunk by clicking the &lt;em&gt;Insert Chunk&lt;/em&gt; button on the toolbar or by pressing &lt;em&gt;Ctrl+Alt+I&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the &lt;em&gt;Preview&lt;/em&gt; button or press &lt;em&gt;Ctrl+Shift+K&lt;/em&gt; to preview the HTML file).&lt;/p&gt;
&lt;p&gt;The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike &lt;em&gt;Knit&lt;/em&gt;, &lt;em&gt;Preview&lt;/em&gt; does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.&lt;/p&gt;
&lt;p&gt;Add a new chunk by clicking the &lt;em&gt;Insert Chunk&lt;/em&gt; button on the toolbar or by pressing &lt;em&gt;Ctrl+Alt+I&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the &lt;em&gt;Preview&lt;/em&gt; button or press &lt;em&gt;Ctrl+Shift+K&lt;/em&gt; to preview the HTML file).&lt;/p&gt;
&lt;p&gt;The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike &lt;em&gt;Knit&lt;/em&gt;, &lt;em&gt;Preview&lt;/em&gt; does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
